package pb2_re34_alt_fla
{
   import CPMStar.*;
   import com.adobe.crypto.MD5;
   import com.jac.mouse.*;
   import fl.motion.*;
   import flash.accessibility.*;
   import flash.display.*;
   import flash.errors.*;
   import flash.events.*;
   import flash.external.*;
   import flash.filters.*;
   import flash.geom.*;
   import flash.media.*;
   import flash.net.*;
   import flash.net.drm.*;
   import flash.system.*;
   import flash.text.*;
   import flash.text.ime.*;
   import flash.ui.*;
   import flash.utils.*;
   
   public dynamic class MainTimeline extends MovieClip
   {
       
      
      public var pb2:MovieClip;
      
      public var e_1:MovieClip;
      
      public var sc_up1:SimpleButton;
      
      public var curserv2:SimpleButton;
      
      public var body1_prev:SimpleButton;
      
      public var menu_start2:SimpleButton;
      
      public var errmenu:MovieClip;
      
      public var cmid:TextField;
      
      public var gamemenu:MovieClip;
      
      public var pcg:MovieClip;
      
      public var pb3:MovieClip;
      
      public var ggg:MovieClip;
      
      public var hf_1:MovieClip;
      
      public var e_2:MovieClip;
      
      public var sc_scrool:MovieClip;
      
      public var sc_up2:SimpleButton;
      
      public var v_1x:MovieClip;
      
      public var nologin_start:SimpleButton;
      
      public var body1_next:SimpleButton;
      
      public var legs0_prev:SimpleButton;
      
      public var body0_prev:SimpleButton;
      
      public var menu_back2:SimpleButton;
      
      public var pb4:MovieClip;
      
      public var hf_2:MovieClip;
      
      public var ch_n:TextField;
      
      public var v_1:MovieClip;
      
      public var camp_score:MovieClip;
      
      public var legs1_prev:SimpleButton;
      
      public var body0_next:SimpleButton;
      
      public var menu_noback:SimpleButton;
      
      public var txt:TextField;
      
      public var earth:MovieClip;
      
      public var mdialog:MovieClip;
      
      public var cmap_pl:SimpleButton;
      
      public var nodif_cancel:SimpleButton;
      
      public var conmenu:MovieClip;
      
      public var graphics_3d_front:MovieClip;
      
      public var gupd_mid:TextField;
      
      public var f_1:MovieClip;
      
      public var frr_1:MovieClip;
      
      public var ph_1:MovieClip;
      
      public var q_1:MovieClip;
      
      public var login_guest:SimpleButton;
      
      public var curserv1:SimpleButton;
      
      public var arms0_prev:SimpleButton;
      
      public var menu_buttons2:MovieClip;
      
      public var weps:MovieClip;
      
      public var simplegui:MovieClip;
      
      public var a_1:MovieClip;
      
      public var f_2:MovieClip;
      
      public var p_1:MovieClip;
      
      public var mw_1:MovieClip;
      
      public var frr_2:MovieClip;
      
      public var ph_2:MovieClip;
      
      public var q_2:MovieClip;
      
      public var arms1_prev:SimpleButton;
      
      public var skin0:MovieClip;
      
      public var menu_pb1:SimpleButton;
      
      public var pauze:MovieClip;
      
      public var qmenu:MovieClip;
      
      public var hp_over:MovieClip;
      
      public var a_2:MovieClip;
      
      public var p_2:MovieClip;
      
      public var rrefresh:SimpleButton;
      
      public var mw_2:MovieClip;
      
      public var frr_3:MovieClip;
      
      public var s_1:MovieClip;
      
      public var runner:MovieClip;
      
      public var cust_m:SimpleButton;
      
      public var no_proxy:MovieClip;
      
      public var head0_prev:SimpleButton;
      
      public var skin1:MovieClip;
      
      public var menu_fail_mp:SimpleButton;
      
      public var loa2:TextField;
      
      public var adBox:MovieClip;
      
      public var conmenu_set:MovieClip;
      
      public var hintf:MovieClip;
      
      public var lags:MovieClip;
      
      public var nrg:MovieClip;
      
      public var vehhp:MovieClip;
      
      public var mapname_lobby:TextField;
      
      public var a_3:MovieClip;
      
      public var list2:MovieClip;
      
      public var s_2:MovieClip;
      
      public var c_1:MovieClip;
      
      public var cont_back1:SimpleButton;
      
      public var game:MovieClip;
      
      public var char1_prev:SimpleButton;
      
      public var head1_prev:SimpleButton;
      
      public var equipment:SimpleButton;
      
      public var back1:SimpleButton;
      
      public var conti:SimpleButton;
      
      public var intro_graph:MovieClip;
      
      public var tooltip_dif2:TextField;
      
      public var click_reg:MovieClip;
      
      public var chat_win:MovieClip;
      
      public var list3:MovieClip;
      
      public var ran_1:MovieClip;
      
      public var a_4:MovieClip;
      
      public var back2:SimpleButton;
      
      public var opt_controls:SimpleButton;
      
      public var c_2:MovieClip;
      
      public var flogin:TextField;
      
      public var back1e1:SimpleButton;
      
      public var char0:TextField;
      
      public var char0_prev:SimpleButton;
      
      public var menu_fail_faq:SimpleButton;
      
      public var tooltip_dif3:TextField;
      
      public var hp:MovieClip;
      
      public var back3:SimpleButton;
      
      public var errmenu_mp:MovieClip;
      
      public var ran_2:MovieClip;
      
      public var se_1:MovieClip;
      
      public var vi_1:MovieClip;
      
      public var m_1:MovieClip;
      
      public var login_cancel:SimpleButton;
      
      public var back1e2:SimpleButton;
      
      public var eq_pcg:SimpleButton;
      
      public var bt_1:MovieClip;
      
      public var flike:SimpleButton;
      
      public var darkness:MovieClip;
      
      public var dif_hard:SimpleButton;
      
      public var tooltip_dif:TextField;
      
      public var a_6:MovieClip;
      
      public var se_2:MovieClip;
      
      public var cur_1:MovieClip;
      
      public var vi_2:MovieClip;
      
      public var nologin_cancel:SimpleButton;
      
      public var bt_2:MovieClip;
      
      public var char1_next:SimpleButton;
      
      public var intro_vers:TextField;
      
      public var ach_txt:TextField;
      
      public var cmap_canc:SimpleButton;
      
      public var need_heal:MovieClip;
      
      public var graphics_3d:MovieClip;
      
      public var match_lobby:TextField;
      
      public var gupd_gname:TextField;
      
      public var list:MovieClip;
      
      public var os_1:MovieClip;
      
      public var dch_1:MovieClip;
      
      public var hi_1:MovieClip;
      
      public var cur_2:MovieClip;
      
      public var fpassword:TextField;
      
      public var equipment2:SimpleButton;
      
      public var char0_next:SimpleButton;
      
      public var camp_list:MovieClip;
      
      public var flike2:SimpleButton;
      
      public var cap:TextField;
      
      public var new_active:MovieClip;
      
      public var ap_1:MovieClip;
      
      public var nnew:SimpleButton;
      
      public var os_2:MovieClip;
      
      public var dch_2:MovieClip;
      
      public var hi_2:MovieClip;
      
      public var tt_1:MovieClip;
      
      public var n_1:MovieClip;
      
      public var head0_next:SimpleButton;
      
      public var conti_loading:SimpleButton;
      
      public var dif_extreme:SimpleButton;
      
      public var flike4:SimpleButton;
      
      public var dif_normal:SimpleButton;
      
      public var herolist:MovieClip;
      
      public var sky:MovieClip;
      
      public var server_lobby:TextField;
      
      public var ap_2:MovieClip;
      
      public var csh_1:MovieClip;
      
      public var m_1x:MovieClip;
      
      public var tt_2:MovieClip;
      
      public var n_2:MovieClip;
      
      public var head1_next:SimpleButton;
      
      public var menu_buttons:MovieClip;
      
      public var whitness:MovieClip;
      
      public var intro_btcb:SimpleButton;
      
      public var flike5:SimpleButton;
      
      public var ach_done:SimpleButton;
      
      public var whitesimple:MovieClip;
      
      public var screenf:MovieClip;
      
      public var sc_down2:SimpleButton;
      
      public var csh_2:MovieClip;
      
      public var cust_back1:SimpleButton;
      
      public var next_lev:SimpleButton;
      
      public var errtxt:TextField;
      
      public var mupd:MovieClip;
      
      public var loa:TextField;
      
      public var cmap_crt:SimpleButton;
      
      public var hp_txt:TextField;
      
      public var sc_down1:SimpleButton;
      
      public var curserver:TextField;
      
      public var login_login:SimpleButton;
      
      public var eq_pcg2:SimpleButton;
      
      public var achives:SimpleButton;
      
      public var creds:TextField;
      
      public var myCursor:MovieClip;
      
      public var intro_base:MovieClip;
      
      public var team_red:MovieClip;
      
      public var team_blue:MovieClip;
      
      public var pb0:MovieClip;
      
      public var ggpp:MovieClip;
      
      public var cm_1:MovieClip;
      
      public var legs0_next:SimpleButton;
      
      public var arms0_next:SimpleButton;
      
      public var sc_scroolBBB:MovieClip;
      
      public var dif_easy:SimpleButton;
      
      public var gamechatbox2:MovieClip;
      
      public var pb1:MovieClip;
      
      public var need_slot:SimpleButton;
      
      public var rready:MovieClip;
      
      public var cm_2:MovieClip;
      
      public var legs1_next:SimpleButton;
      
      public var arms1_next:SimpleButton;
      
      public var menu_mold:SimpleButton;
      
      public var GAME_VERSION:String;
      
      public var GAME_VERSION_SIMPLE:String;
      
      public var proper_scale_mode:String;
      
      public var proper_stage_align:String;
      
      public var myRequest:URLRequest;
      
      public var myRequest_parallel:URLRequest;
      
      public var myLoader:URLLoader;
      
      public var myRateLoader:URLLoader;
      
      public var myDeRateLoader:URLLoader;
      
      public var myLoader2:URLLoader;
      
      public var myLoader2noserver:URLLoader;
      
      public var mySaveLoadLoader:URLLoader;
      
      public var myVariables:URLVariables;
      
      public var myVariables_parallel:URLVariables;
      
      public var myReportLoader:URLLoader;
      
      public var MP_server:String;
      
      public var MP_mrate_server:String;
      
      public var NetworkLoad_triesleft:int;
      
      public var NetworkLoad_complete:Boolean;
      
      public var NetworkLoad_failed:Boolean;
      
      public var NetworkSave_triesleft:int;
      
      public var NetworkSave_data:String;
      
      public var my_so:SharedObject;
      
      public var edidumb:int;
      
      public var _flash_version:Number;
      
      public var _fullInfo:String;
      
      public var _osSplitArr:Array;
      
      public var _versionSplitArr:Array;
      
      public var _versionInfo:Number;
      
      public var intro_first:Boolean;
      
      public var myMenu:ContextMenu;
      
      public var theDate:Date;
      
      public var spec_debug:Boolean;
      
      public var loaded:Number;
      
      public var total:Number;
      
      public var ldd:Boolean;
      
      public var percent:Number;
      
      public var lastperc:Number;
      
      public var times:Number;
      
      public var totalseconds:Number;
      
      public var waitfor:Number;
      
      public var pass:Boolean;
      
      public var death_cam:int;
      
      public var fir:int;
      
      public var pType:String;
      
      public var CPMStarContentSpotID:String;
      
      public var ad:DisplayObject;
      
      public var intro_glowings:Array;
      
      public var rifle_glow:MovieClip;
      
      public var intro_speculars:Array;
      
      public var sinus:Number;
      
      public var main_y:Number;
      
      public var mh:String;
      
      public var COMIC_SCALE:Number;
      
      public var COMIC_SCALE_GUNS:Number;
      
      public var LAST_ERROR:String;
      
      public var gamechatbox_text:String;
      
      public var normal_spine_length:Number;
      
      public var normal_shoulder_length:Number;
      
      public var TRIGGER_PLAYER_INITIATOR:int;
      
      public var TRIGGER_PLAYER_KILLER:int;
      
      public var ANONYMOUS_MODE:Boolean;
      
      public var GLOBAL_REGEN_SPEED:Number;
      
      public var GLOBAL_REGEN_DELAY:Number;
      
      public var GLOBAL_FALL_DAMAGE_MULT:Number;
      
      public var GLOBAL_FALL_SENSITIVITY_MULT:Number;
      
      public var BOOST_MULT:Number;
      
      public var BOOST_HIGH_PHYSICS:Number;
      
      public var BOOST_LOW_PHYSICS:Number;
      
      public var gametim:uint;
      
      public var gtlt:int;
      
      public var gtrec:int;
      
      public var gtwi:int;
      
      public var _mp_ping_rl:int;
      
      public var a_int:int;
      
      public var mc:MovieClip;
      
      public var mcc:MovieClip;
      
      public var allow_unlag_fps:Boolean;
      
      public var i:int;
      
      public var i2:int;
      
      public var i3:int;
      
      public var i4:int;
      
      public var i5:int;
      
      public var i6:int;
      
      public var i7:int;
      
      public var spawn_text_for:int;
      
      public var GUEST_ACCESS:Boolean;
      
      public var MP_default_set:int;
      
      public var MP_enc_deaths:int;
      
      public var MP_real_deaths:int;
      
      public var MP_enc_restarts:int;
      
      public var MP_gbd:int;
      
      public var MP_last_message_patience:int;
      
      public var MP_last_message:int;
      
      public var MP_BAD_WORDS_SAID:int;
      
      public var MP_last_linked:int;
      
      public var MP_myspecials:Array;
      
      public var MP_myspecials_total:int;
      
      public var MP_assigning_special:int;
      
      public var MP_specials:Array;
      
      public var MP_start_grenades_count:int;
      
      public var MP_start_grenades_port_count:int;
      
      public var MP_start_grenades_sh_count:int;
      
      public var ENEMY_SENDER_i:int;
      
      public var ENEMY_SENDER_last:int;
      
      public var ENEMY_SENDER_lowestping:Boolean;
      
      public var ENTER_TICKED:Boolean;
      
      public var SP_unlimit_framerate:Boolean;
      
      public var MP_startbarrels:Array;
      
      public var PSYCHOBLOOD_MODE:int;
      
      public var FRAMERATE:int;
      
      public var PREDEF_TEAMS:Array;
      
      public var PREDEF_COLORS:Array;
      
      public var WATER_NAME:String;
      
      public var ACID_NAME:String;
      
      public var c_str:String;
      
      public var c_i:int;
      
      public var c_i2:int;
      
      public var pres_left;
      
      public var pres_right;
      
      public var pres_top;
      
      public var pres_bottom;
      
      public var pres_ok:Boolean;
      
      public var BAD_WORDS_PATTERN:String;
      
      public var BAD_WORDS:Array;
      
      public var LAST_VOTE:int;
      
      public var MP_login_name:String;
      
      public var LAST_BADGE:int;
      
      public var CREDITS_BY_GAME_END:Boolean;
      
      public var BADGES_ENABLED:Boolean;
      
      public var BADGES_TOTAL:int;
      
      public var BADGE_STAT:Array;
      
      public var BADGE_STAT_MAX:Array;
      
      public var BADGE_TITLE:Array;
      
      public var BADGE_REACHED:Array;
      
      public var MP_socket:Socket;
      
      public var ss_info:s_info;
      
      public var ss_info_off:s_info_off;
      
      public var ss_info_act:s_info_act;
      
      public var MP_SERVER_IP:String;
      
      public var MP_SERVER_NAME:String;
      
      public var MP_login_auto_try:Boolean;
      
      public var MP_SERVER_PORT:int;
      
      public var MP_SERVER_GOT:String;
      
      public var CURRENT_HINT:String;
      
      public var THIS_HINT:String;
      
      public var PITIMER:Number;
      
      public var SHAKEAMMOUT:Number;
      
      public var LAST_SERVER_UID:int;
      
      public var MP_SERVER_GOT_CUR:String;
      
      public var spawn:Boolean;
      
      public var allowedText:String;
      
      public var FIRST_TIME:Boolean;
      
      public var game_scale:Number;
      
      public var lgame_scale:Number;
      
      public var hscreenX:Number;
      
      public var hscreenY:Number;
      
      public var screenX:Number;
      
      public var screenY:Number;
      
      public var MP_spectator:Boolean;
      
      public var MP_room:String;
      
      public var MP_room_name:String;
      
      public var MP_map_name:String;
      
      public var MP_pass:String;
      
      public var MP_channel:String;
      
      public var MP_channel_name:String;
      
      public var MP_myid:int;
      
      public var MP_team:int;
      
      public var MP_total:int;
      
      public var MP_mode:Boolean;
      
      public var MP_clan:String;
      
      public var CASUAL_MODE:Boolean;
      
      public var NOBASE:Boolean;
      
      public var PLAZMA_GAME:Boolean;
      
      public var AUTO_REVIVE:Boolean;
      
      public var STRICT_MODE:Boolean;
      
      public var MEAT_MODE:Boolean;
      
      public var PRO_BOTS:Boolean;
      
      public var ARCADE_GAME_MODE:Boolean;
      
      public var LEVELS_TOTAL:int;
      
      public var LEVELS_PASSED:int;
      
      public var CMPG_THIS_LEVEL:int;
      
      public var AWARD:Boolean;
      
      public var MP_last_chat:String;
      
      public var MP_ping1:int;
      
      public var MP_ping2:int;
      
      public var MP_pwarn:Boolean;
      
      public var MP_ping_last:int;
      
      public var INLAG:Boolean;
      
      public var MP_ready:Boolean;
      
      public var MP_type:int;
      
      public var MP_half_bot:Boolean;
      
      public var LEVEL_END_FORCE:String;
      
      public var CMPG_name:String;
      
      public var EXOS_NAME:String;
      
      public var NOIR_NAME:String;
      
      public var PROXY_NAME:String;
      
      public var CMPG_money:int;
      
      public var MP_nick:String;
      
      public var SUPER_COMPUTER:Boolean;
      
      public var RAGDOLL_COLLIDE:Boolean;
      
      public var IM_A_CHEATER:Boolean;
      
      public var LITE_PHYS:Boolean;
      
      public var AUTO_PICK_NEW_WEPS:Boolean;
      
      public var SOFT_SCREEN:Boolean;
      
      public var SCREEN_EFFECTS:Boolean;
      
      public var VIOLENCE:Boolean;
      
      public var ALTCUR:Boolean;
      
      public var CENSORESHIP:Boolean;
      
      public var DISPLAY_CHAT:Boolean;
      
      public var FX_VOLUME:Number;
      
      public var MUSIC_VOLUME:Number;
      
      public var CUR_MUSIC_VOLUME:Number;
      
      public var MUSIC_COLDDOWN:int;
      
      public var HQ:Boolean;
      
      public var MOUSE_WHEEL:Boolean;
      
      public var OVERSCROLL:Boolean;
      
      public var EASY_MODE:Boolean;
      
      public var LOW_HPS:Boolean;
      
      public var GSPEED:Number;
      
      public var GSPEED2:Number;
      
      public var DEFAULT_FPS:Number;
      
      public var MP_fps:Number;
      
      public var MP_pl:Number;
      
      public var MP_pbug:int;
      
      public var max_after_impact_speed:Number;
      
      public var MP_app:Boolean;
      
      public var temp2:Array;
      
      public var temp;
      
      public var ch_total:int;
      
      public var ch_links:Array;
      
      public var ch_names:Array;
      
      public var ch_pass:Array;
      
      public var ch_app:Array;
      
      public var ch_map:Array;
      
      public var chat_lastid:int;
      
      public var skin_model:Array;
      
      public var skin_color_head:Array;
      
      public var skin_color_body:Array;
      
      public var skin_color_arms:Array;
      
      public var skin_color_legs:Array;
      
      public var clrs:Array;
      
      public var matrix:Array;
      
      public var inventoryA:Array;
      
      public var inventoryB:Array;
      
      public var inventoryC:Array;
      
      public var inventoryD:Array;
      
      public var curA:String;
      
      public var curB:String;
      
      public var armorA:int;
      
      public var armorB:int;
      
      public var MPclr;
      
      public var FIRST_RUN:Boolean;
      
      public var save_i:int;
      
      public var NONMUTE:Boolean;
      
      public var s_channel:Array;
      
      public var vol3d:Array;
      
      public var max_channels:int;
      
      public var last_channel:int;
      
      public var vol;
      
      public var vol2;
      
      public var DEFAULT_MAP;
      
      public var smod:Number;
      
      public var smod2:Number;
      
      public var dist_to_face:Number;
      
      public var s_chat:chat;
      
      public var s_badge_earned:badge_earned;
      
      public var s_coolbuddy2:coolbuddy2;
      
      public var s_mission_done:mission_done;
      
      public var s_team_switch:team_switch;
      
      public var s_corvett_die:corvett_die;
      
      public var s_test_sound:test_sound;
      
      public var s_hint_appear:hint_appear;
      
      public var s_hint_disappear:hint_disappear;
      
      public var s_ship_incoming:ship_incoming;
      
      public var s_ship_explosion:ship_explosion;
      
      public var s_robo_bug_jump:robo_bug_jump;
      
      public var s_robo_bug_launch:robo_bug_launch;
      
      public var s_robo_bug_hit:robo_bug_hit;
      
      public var s_s_gun_rayrifle:s_gun_rayrifle;
      
      public var m_dist:int;
      
      public var momove:Boolean;
      
      public var debug_screen:Shape;
      
      public var DEBUG_MODE:Boolean;
      
      public var lastcurx:int;
      
      public var lastcury:int;
      
      public var lastcurmove:int;
      
      public var str3:String;
      
      public var str4;
      
      public var str5:String;
      
      public var last_psi:int;
      
      public var shadowbmp:Bitmap;
      
      public var dying_after:Number;
      
      public var HUNT_LOST:int;
      
      public var MP_teamkills:int;
      
      public var MP_round:int;
      
      public var MP_gamestate:int;
      
      public var tooltip_updated:Boolean;
      
      public var TOOLTIPS:Boolean;
      
      public var HINTS:Boolean;
      
      public var gamechat_input_text:String;
      
      public var MP_playerstotal:int;
      
      public var PLAYER_WIDTH:Number;
      
      public var MP_start_x:Number;
      
      public var MP_start_y:Number;
      
      public var MP_force_disconnect:Boolean;
      
      public var MP_chat_input:Boolean;
      
      public var MP_chat_input_for:String;
      
      public var MP_custom_events:String;
      
      public var MP_deaths:int;
      
      public var MP_kills:int;
      
      public var hero:Array;
      
      public var hpwarning:Boolean;
      
      public var hpbeepch:SoundChannel;
      
      public var hp_warn_max:Number;
      
      public var s_hp_warn:hp_warn;
      
      public var s_hp_dead:hp_dead;
      
      public var gravitatorch:SoundChannel;
      
      public var s_gravitator:gravitator2;
      
      public var wind_base:Number;
      
      public var musch:SoundChannel;
      
      public var s_gameplay_song:gameplay_song;
      
      public var main_song_ch:SoundChannel;
      
      public var s_main_song:main_song;
      
      public var am_base_ch:SoundChannel;
      
      public var s_am_base:am_base;
      
      public var am_wind_ch:SoundChannel;
      
      public var s_am_wind:am_wind;
      
      public var timeshiftch:SoundChannel;
      
      public var s_slow_down:slow_down;
      
      public var s_slow_up:slow_up;
      
      public var upd_weps_i;
      
      public var upd_weps_i2:int;
      
      public var grenades_total:int;
      
      public var grenades_port_total:int;
      
      public var grenades_sh_total:int;
      
      public var cwp;
      
      public var cwp_d:Number;
      
      public var c_sim_rt:int;
      
      public var c_sim_rt2:int;
      
      public var c_sim_stress:Boolean;
      
      public var g_minx:int;
      
      public var g_miny:int;
      
      public var g_maxx:int;
      
      public var g_maxy:int;
      
      public var OpenTop:Boolean;
      
      public var system_non_stop:Boolean;
      
      public var stoped_by_focus:Boolean;
      
      public var last_gun_b4_psi:int;
      
      public var mini_scenario_cur:int;
      
      public var mini_scenario_phase:Number;
      
      public var fps_last:uint;
      
      public var fps_ticks:uint;
      
      public var fps_now:uint;
      
      public var fps_delta:uint;
      
      public var fps_fps:Number;
      
      public var color_player;
      
      public var color_friendly;
      
      public var color_enemy;
      
      public var color_player_over;
      
      public var color_friendly_over;
      
      public var color_enemy_over;
      
      public var firstframe:Boolean;
      
      public var g_scale_outcar:Number;
      
      public var s_t_switch1:t_switch1;
      
      public var s_t_switch2:t_switch2;
      
      public var s_t_switch_denied:t_switch_denied;
      
      public var s_t_door1_start:t_door1_start;
      
      public var s_t_door1_stop:t_door1_stop;
      
      public var s_step1:step1;
      
      public var s_step2:step2;
      
      public var s_step3:step3;
      
      public var s_step4:step4;
      
      public var s_robo_step1:robo_step1;
      
      public var s_robo_step2:robo_step2;
      
      public var s_robo_step3:robo_step3;
      
      public var s_robo_step4:robo_step4;
      
      public var s_body0:body0;
      
      public var s_body1:body1;
      
      public var s_body2:body2;
      
      public var s_body3:body3;
      
      public var s_metal0:metal_hor;
      
      public var s_metal1:metal_ver1;
      
      public var s_metal2:metal_ver2;
      
      public var s_metal3:metal_ver3;
      
      public var s_metal_gib:metal_gib;
      
      public var s_steel_low:steel_low;
      
      public var s_steel_med:steel_med;
      
      public var s_steel_hor:steel_hor;
      
      public var s_steel_hard:steel_hard;
      
      public var s_glass1:glass1;
      
      public var s_glass2:glass2;
      
      public var s_barrel:barrel;
      
      public var s_barrel2:barrel2;
      
      public var s_teleport:teleport_spawn;
      
      public var s_portnade_explode:portnade_explode;
      
      public var s_portnade_act2:portnade_act2;
      
      public var s_shnade_act:shnade_act;
      
      public var s_shnade_explode:shnade_explode;
      
      public var s_shnade_hit:shnade_hit;
      
      public var s_shnade_hit_low:shnade_hit_low;
      
      public var s_shnade_offline:shnade_offline;
      
      public var s_fail_shot:fail_shot;
      
      public var s_psi1:sou_blade_swing1;
      
      public var s_psi2:sou_blade_swing2;
      
      public var s_psi3:sou_blade_swing3;
      
      public var s_water_splash1:water_splash1;
      
      public var s_water_splash2:water_splash2;
      
      public var s_water_splash3:water_splash3;
      
      public var s_blood_hit:blood_hit;
      
      public var s_blood_hit_sword:blood_hit_sword;
      
      public var s_blood_head:blood_head;
      
      public var s_blood_head2:blood_head2;
      
      public var s_blood_body:blood_body;
      
      public var s_blood_body2:blood_body2;
      
      public var s_blood_leg_arm:blood_leg_arm;
      
      public var s_body_fall:body_fall;
      
      public var s_metal_hit:metal_hit;
      
      public var s_wea1:wea1;
      
      public var s_wea2:wea2;
      
      public var s_wea_pickup:wea_pickup;
      
      public var s_charged_explosion:charged_explosion;
      
      public var s_silenced:silenced;
      
      public var s_wea_sniper:wea_sniper;
      
      public var s_wea_minigun2:wea_mingun2;
      
      public var s_wea_plasmagun:wea_plasmagun;
      
      public var s_wea_apistol:wea_apistol;
      
      public var s_wea_pistol:wea_pistol;
      
      public var s_wea_pistol2:wea_pistol2;
      
      public var s_wea_shotgun:wea_shotgun;
      
      public var s_wea_rifle:wea_rifle;
      
      public var s_wea_rocket:wea_rocket_launch;
      
      public var s_wea_railgun:wea_railgun;
      
      public var s_wea_railgun2:wea_rail_alt;
      
      public var s_wea_mingun:wea_mingun;
      
      public var s_wea_gl:wea_gl;
      
      public var s_wea_vehcannon:wea_vehcannon;
      
      public var s_wea_impulse:wea_impulse;
      
      public var s_wea_rail_alt:wea_rail_alt;
      
      public var s_wea_energy:wea_energy;
      
      public var s_wea_evil_shot:wea_evil_shot;
      
      public var s_wea_rifle_alt:wea_rifle_alt;
      
      public var s_wea_shotgun_alt:wea_shotgun_alt;
      
      public var s_wea_defibrillator:wea_defibrillator;
      
      public var s_wea_vehminigun:wea_vehminigun;
      
      public var s_wea_real_shotgun:wea_real_shotgun;
      
      public var s_wea_real_shotgun_r:wea_real_shotgun_r;
      
      public var s_wea_real_rifle:wea_real_rifle;
      
      public var s_walker_step:walker_step;
      
      public var s_walker_phase1:walker_phase1;
      
      public var s_walker_phase2:walker_phase2;
      
      public var s_walker_die:walker_die;
      
      public var s_capsule_hit1:capsule_hit1;
      
      public var s_capsule_hit2:capsule_hit2;
      
      public var s_explode1:explode1;
      
      public var s_explode2:explode2;
      
      public var s_explode_bfg:explode_bfg;
      
      public var s_reload:reload;
      
      public var s_rl_reload:rl_reload;
      
      public var s_dectalk_death1:dectalk_death1;
      
      public var s_dectalk_death2:dectalk_death2;
      
      public var s_dectalk_death3:dectalk_death3;
      
      public var dectalk_deaths:Array;
      
      public var s_dectalk_celebrate1:dectalk_celebrate1;
      
      public var s_dectalk_celebrate2:dectalk_celebrate2;
      
      public var s_dectalk_celebrate3:dectalk_celebrate3;
      
      public var s_dectalk_celebrate4:dectalk_celebrate4;
      
      public var s_dectalk_celebrate5:dectalk_celebrate5;
      
      public var dectalk_celebrate:Array;
      
      public var s_dectalk_dying1:dectalk_dying1;
      
      public var s_dectalk_dying2:dectalk_dying2;
      
      public var s_dectalk_dying3:dectalk_dying3;
      
      public var s_dectalk_dying4:dectalk_dying4;
      
      public var dectalk_dying:Array;
      
      public var s_dectalk_welcome1:dectalk_welcome1;
      
      public var s_dectalk_welcome2:dectalk_welcome2;
      
      public var s_dectalk_welcome3:dectalk_welcome3;
      
      public var s_dectalk_welcome4:dectalk_welcome4;
      
      public var s_dectalk_welcome5:dectalk_welcome5;
      
      public var dectalk_welcome:Array;
      
      public var s_dectalk_hurt1:dectalk_hurt1;
      
      public var s_dectalk_hurt2:dectalk_hurt2;
      
      public var s_dectalk_hurt3:dectalk_hurt3;
      
      public var dectalk_hurt:Array;
      
      public var s_grenade:grenade;
      
      public var s_grenade_act:grenade_act;
      
      public var s_nade_throw:nade_throw;
      
      public var s_explode_underwater:explode_underwater;
      
      public var s_plasma_explosion:plasma_explosion;
      
      public var s_box_low:box_ver1;
      
      public var s_box_med:box_ver2;
      
      public var s_box_hor:box_hor;
      
      public var s_box_hard:box_ver3;
      
      public var s_box_die:box_die;
      
      public var s_drone_die:drone_die;
      
      public var s_drone_hurt:drone_hurt;
      
      public var src:Sound;
      
      public var expl_hurt_full:Boolean;
      
      public var joint_cycle:int;
      
      public var hpmax:Number;
      
      public var maxbulletlife:Number;
      
      public var boxx:Array;
      
      public var boxy:Array;
      
      public var boxw:Array;
      
      public var boxh:Array;
      
      public var boxmat:Array;
      
      public var bgx:Array;
      
      public var bgy:Array;
      
      public var bgw:Array;
      
      public var bgh:Array;
      
      public var pushx:Array;
      
      public var pushy:Array;
      
      public var pushtox:Array;
      
      public var pushtoy:Array;
      
      public var pushstab:Array;
      
      public var pushdamage:Array;
      
      public var pushw:Array;
      
      public var pushh:Array;
      
      public var flare:Array;
      
      public var flare_power:Array;
      
      public var flarestotal:int;
      
      public var wax:Array;
      
      public var way:Array;
      
      public var waw:Array;
      
      public var wah:Array;
      
      public var wadamage:Array;
      
      public var ax:Array;
      
      public var ay:Array;
      
      public var lax:Array;
      
      public var lay:Array;
      
      public var atox:Array;
      
      public var atoy:Array;
      
      public var aio:Array;
      
      public var aof:Array;
      
      public var arad:Array;
      
      public var around:Array;
      
      public var amat:Array;
      
      public var atim:Array;
      
      public var acollided:Array;
      
      public var ainwater:Array;
      
      public var ablood:Array;
      
      public var aactive:Array;
      
      public var pspeed:Number;
      
      public var weapon_penetration_factor:Number;
      
      public var chtypa:Array;
      
      public var chP:Array;
      
      public var chC:Array;
      
      public var chdef:Array;
      
      public var chdamp:Array;
      
      public var chio:Array;
      
      public var chtsilp:Array;
      
      public var atotal:int;
      
      public var chtotal:int;
      
      public var startatotal:int;
      
      public var startchtotal:int;
      
      public var bounce:Number;
      
      public var friction:Number;
      
      public var gravity:Number;
      
      public var barrels:Array;
      
      public var guns:Array;
      
      public var mens:Array;
      
      public var vehicles:Array;
      
      public var doors:Array;
      
      public var decors:Array;
      
      public var triggers:Array;
      
      public var timers:Array;
      
      public var regions:Array;
      
      public var _root:MovieClip;
      
      public var regionstotal:int;
      
      public var triggerstotal:int;
      
      public var timerstotal:int;
      
      public var doorstotal:int;
      
      public var bgstotal:int;
      
      public var playerstotal:int;
      
      public var boxestotal:int;
      
      public var lampstotal:int;
      
      public var watertotal:int;
      
      public var gunstotal:int;
      
      public var pushstotal:int;
      
      public var vehiclestotal:int;
      
      public var barrelstotal:int;
      
      public var decorstotal:int;
      
      public var str:String;
      
      public var cx:Number;
      
      public var cy:Number;
      
      public var xx:Number;
      
      public var yy:Number;
      
      public var u:Number;
      
      public var v:Number;
      
      public var u2:Number;
      
      public var v2:Number;
      
      public var mc2:MovieClip;
      
      public var mc3:MovieClip;
      
      public var ok;
      
      public var ok2;
      
      public var ok3;
      
      public var hup;
      
      public var bugs;
      
      public var injured:Boolean;
      
      public var fire:Boolean;
      
      public var sitmax:Number;
      
      public var key_left:Boolean;
      
      public var key_right:Boolean;
      
      public var key_up:Boolean;
      
      public var key_down:Boolean;
      
      public var key_grenade:Boolean;
      
      public var key_pick:Boolean;
      
      public var key_alt:Boolean;
      
      public var key_grab:Boolean;
      
      public var key_kinetic:Boolean;
      
      public var key_fall:Boolean;
      
      public var key_ctrl:Boolean;
      
      public var cinetic_target:int;
      
      public var timeshift:int;
      
      public var energy_max:Number;
      
      public var energy:Number;
      
      public var joint_align:int;
      
      public var puls:Array;
      
      public var pulscur:int;
      
      public var pulsmax:int;
      
      public var xx2:Number;
      
      public var yy2:Number;
      
      public var x3:Number;
      
      public var y3:Number;
      
      public var x4:Number;
      
      public var y4:Number;
      
      public var retux:Number;
      
      public var retuy:Number;
      
      public var rx:Number;
      
      public var ry:Number;
      
      public var surf_lnk:Array;
      
      public var surf_lnk_to:Array;
      
      public var ef:Array;
      
      public var nextef:int;
      
      public var maxef:int;
      
      public var eftemp:Number;
      
      public var effcolor:int;
      
      public var shnades:Array;
      
      public var shnades_total:int;
      
      public var shnades_next:int;
      
      public var lamps_x:Array;
      
      public var lamps_y:Array;
      
      public var lamps_power:Array;
      
      public var lamps_power2:Array;
      
      public var lamps_skips:int;
      
      public var lamps_sprites:Array;
      
      public var tr;
      
      public var tr2;
      
      public var tr3:int;
      
      public var hurt_x4;
      
      public var hurt_y4;
      
      public var hurt_xx2;
      
      public var hurt_yy2:Number;
      
      public var n2:int;
      
      public var chat_i:int;
      
      public var chat_i2:int;
      
      public var chat_i3:int;
      
      public var chat_xx:Number;
      
      public var alert_tes:Number;
      
      public var minX:Number;
      
      public var maxX:Number;
      
      public var minY:Number;
      
      public var maxY:Number;
      
      public var a_rectangleMinX:Number;
      
      public var a_rectangleMinY:Number;
      
      public var a_rectangleMaxX:Number;
      
      public var a_rectangleMaxY:Number;
      
      public var b:Number;
      
      public var dx:Number;
      
      public var tmp2:Number;
      
      public var thispulspeed:Number;
      
      public var a_p1x:Number;
      
      public var a_p1y:Number;
      
      public var a_p2x:Number;
      
      public var a_p2y:Number;
      
      public var tracer_ok:Boolean;
      
      public var NextMapTemp:String;
      
      public var render_minX:int;
      
      public var render_minY:int;
      
      public var render_maxX:int;
      
      public var render_maxY:int;
      
      public var rnd:Number;
      
      public var Disable_next_click:Boolean;
      
      public var FORCE_SNOW:Boolean;
      
      public var flakes_total:int;
      
      public var flakes:Vector.<DisplayObject>;
      
      public var flakes_spreadout:Number;
      
      public var flakes_letitsnow:Boolean;
      
      public var vtr_i2:int;
      
      public var ef_xx;
      
      public var ef_yy:Number;
      
      public var nextpuli:int;
      
      public var nextpulf:Boolean;
      
      public var nextsh_i:int;
      
      public var nextsh_i2:int;
      
      public var cr_i4:int;
      
      public var crjoint_cycle:int;
      
      public var mcz:MovieClip;
      
      public var mShape:Sprite;
      
      public var step_size:int;
      
      public var bmpData:BitmapData;
      
      public var bmpData_backed:BitmapData;
      
      public var lightmap_ma:Matrix;
      
      public var optimalupd:Boolean;
      
      public var all_doors:Array;
      
      public var NearBoxBSP_stepsize:int;
      
      public var NearBoxBSP:Vector.<Vector.<Vector.<int>>>;
      
      public var NearBoxBSP_empty:Vector.<int>;
      
      public var NearBoxBSP_width:int;
      
      public var NearBoxBSP_height:int;
      
      public var NearBoxBSP_left:Number;
      
      public var NearBoxBSP_right:Number;
      
      public var NearBoxBSP_top:Number;
      
      public var NearBoxBSP_bottom:Number;
      
      public var synonym_uid:Array;
      
      public var synonym_id:Array;
      
      public var user_says_id:int;
      
      public var user_says_text:String;
      
      public var user_says_trigger:int;
      
      public var SHOW_FRAG_MESSAGES:Boolean;
      
      public var mxnds1:int;
      
      public var mxnds2:int;
      
      public var mxnds3:int;
      
      public var tnds:int;
      
      public var stable;
      
      public var unstable:int;
      
      public var unstable_m:String;
      
      public var MP_start_guns_total:int;
      
      public var qpack_pattern:Array;
      
      public var qpack_pattern_length:int;
      
      public var qpack_pattern_simcalc:int;
      
      public var qpack_base:String;
      
      public var INTRUDER_DATABASE:Object;
      
      public var INTRUDER_DATABASE_length:int;
      
      public var ENABLE_LEVEL_LOGIC_ERRORS:Boolean;
      
      public var trigger_loops:int;
      
      public var level_variables:Object;
      
      public var dm_slots_on_spawn:Array;
      
      public var dm_max_guns_on_spawn:int;
      
      public var session_variables:Object;
      
      public var hurt_i4:int;
      
      public var is2:int;
      
      public var allow:Boolean;
      
      public var explx;
      
      public var exply:Number;
      
      public var temp_tb:Number;
      
      public var alert_i5:int;
      
      public var tracer_i4:int;
      
      public var TraceLine_lasttime:uint;
      
      public var tracer_i5:int;
      
      public var tracep:int;
      
      public var NO_PSI:Boolean;
      
      public var START_CUSTOM_MAP:Boolean;
      
      public var CUR_CUSTOM_MAP:String;
      
      public var CACHED_MAPS:Array;
      
      public var CUR_LOADING:String;
      
      public var GET_TRIES:int;
      
      public var MP_send:String;
      
      public var MP_waiting_for_answer:Boolean;
      
      public var trans:Number;
      
      public var minus_trans:Number;
      
      public var players_online:int;
      
      public var temp_str:String;
      
      public var connection_lost_ping:int;
      
      public var MP_get_done_STR:String;
      
      public var MP_get_done_HAP:Boolean;
      
      public var array:Array;
      
      public var param:Array;
      
      public var array2:Array;
      
      public var array3:Array;
      
      public var exec_measures_len:uint;
      
      public var exec_measures_rate:uint;
      
      public var exec_measures_rate_passed:uint;
      
      public var exec_measures_tot:Vector.<uint>;
      
      public var exec_measures_calls:Vector.<uint>;
      
      public var exec_measures_peak:Vector.<uint>;
      
      public var exec_measures_start:Vector.<uint>;
      
      public var LITE_PHYS_tim:Boolean;
      
      public var LITE_PHYS_from:int;
      
      public var LITE_PHYS_notfrom:int;
      
      public var LITE_PHYS_size:int;
      
      public var extra_low_mult:Number;
      
      public var offset_balance:Number;
      
      public var temp_coef:Number;
      
      public var f_ok:Boolean;
      
      public var near_atom:Vector.<int>;
      
      public var f_min:Number;
      
      public var phys_stress:int;
      
      public var phys_got_stress:Boolean;
      
      public var let_scroll_last:int;
      
      public var mouse_x:Number;
      
      public var mouse_y:Number;
      
      public var gravitatorTransform:SoundTransform;
      
      public var musTransform:SoundTransform;
      
      public var am_base_Transform:SoundTransform;
      
      public var am_wind_Transform:SoundTransform;
      
      public var main_song_Transform:SoundTransform;
      
      public var grav_working:Boolean;
      
      public var mus_working:Boolean;
      
      public var am_base_working:Boolean;
      
      public var am_wind_working:Boolean;
      
      public var main_song_working:Boolean;
      
      public var talkerch:SoundChannel;
      
      public var multiplayer_repsawn_timer_speed:Number;
      
      public var dti:int;
      
      public var voice_pressure:Number;
      
      public var FUN_NICE_BULLETS:int;
      
      public var FUN_SPENT_BULLETS:int;
      
      public var FUN_DAMAGE_MADE:Number;
      
      public var FUN_HEADSHOTS_MADE:int;
      
      public var FUN_DAMAGE_TAKEN:Number;
      
      public var FUN_TIME_SPEND:Number;
      
      public var FUN_ELEMINATED:Number;
      
      public var FORCE_CUSTOM_MAP:Boolean;
      
      public var m:int;
      
      public var lm_active:int;
      
      public var m_active:int;
      
      public var m_time:Number;
      
      public var m_hold:int;
      
      public var earth_pos1:Number;
      
      public var new_nick;
      
      public var new_nick2:String;
      
      public var newString:String;
      
      public var pattern_no_nix:String;
      
      public var blink_main:int;
      
      public var MUSIC_START:int;
      
      public var TROOPS_GONE:Boolean;
      
      public var camp_btn:Array;
      
      public var gunsA;
      
      public var gunsAt;
      
      public var gunsAl;
      
      public var gunsB;
      
      public var gunsBt;
      
      public var gunsBl;
      
      public var STOP_SCROLL:Boolean;
      
      public var server_cur:int;
      
      public var servers_uid:Array;
      
      public var CUR_SERVER_NAME:String;
      
      public var auto_proceed:Boolean;
      
      public var servers_name:Array;
      
      public var servers_ip:Array;
      
      public var servers_port:Array;
      
      public var gm_ranked:String;
      
      public var gm_type:int;
      
      public var gm_max:int;
      
      public var MPLIST_GAMENAME;
      
      public var MPLIST_MAPID;
      
      public var MPLIST_MODE;
      
      public var MPLIST_PUBLIC;
      
      public var MPLIST_APPROVED;
      
      public var MPLIST_RANKED;
      
      public var MPLIST_WITH_FRIENDS;
      
      public var MPLIST_NO_ENEMIES;
      
      public var MPLIST_HIDE_FULL;
      
      public var MP_slot_reset:Boolean;
      
      public var MP_slot_try:int;
      
      public var got_map_data:Boolean;
      
      public var myTimer_loading:Timer;
      
      public var hero_list_frame_offset:int;
      
      public var hero_list_scale;
      
      public var format:TextFormat;
      
      public var TIME_PLAYED_MULTI:int;
      
      public var nonblockrate:Boolean;
      
      public var uncncld:Boolean;
      
      public var achive_obj;
      
      public var INTRO_DONE:Boolean;
      
      public var __animFactory_menu_buttonsaf1:AnimatorFactory3D;
      
      public var __animArray_menu_buttonsaf1:Array;
      
      public var ____motion_menu_buttonsaf1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttonsaf1_matArray__:Array;
      
      public var __motion_menu_buttonsaf1:MotionBase;
      
      public var __animFactory_menu_buttons2af1:AnimatorFactory3D;
      
      public var __animArray_menu_buttons2af1:Array;
      
      public var ____motion_menu_buttons2af1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttons2af1_matArray__:Array;
      
      public var __motion_menu_buttons2af1:MotionBase;
      
      public function MainTimeline()
      {
         super();
         addFrameScript(0,this.frame1,1,this.frame2,3,this.frame4,4,this.frame5,5,this.frame6,6,this.frame7,7,this.frame8,8,this.frame9,9,this.frame10,10,this.frame11,11,this.frame12,12,this.frame13,13,this.frame14,14,this.frame15,15,this.frame16,16,this.frame17,17,this.frame18,18,this.frame19,19,this.frame20,20,this.frame21,21,this.frame22,22,this.frame23);
         addEventListener(Event.ADDED_TO_STAGE,this.__setPerspectiveProjection_);
         if(this.__animFactory_menu_buttonsaf1 == null)
         {
            this.__animArray_menu_buttonsaf1 = new Array();
            this.__motion_menu_buttonsaf1 = new MotionBase();
            this.__motion_menu_buttonsaf1.duration = 1;
            this.__motion_menu_buttonsaf1.overrideTargetTransform();
            this.__motion_menu_buttonsaf1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttonsaf1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttonsaf1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttonsaf1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttonsaf1.is3D = true;
            this.__motion_menu_buttonsaf1.motion_internal::spanStart = 3;
            this.____motion_menu_buttonsaf1_matArray__ = new Array();
            this.____motion_menu_buttonsaf1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttonsaf1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttonsaf1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttonsaf1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttonsaf1_mat3DVec__[3] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttonsaf1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttonsaf1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttonsaf1_mat3DVec__[7] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttonsaf1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttonsaf1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttonsaf1_mat3DVec__[11] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[12] = -40.754143;
            this.____motion_menu_buttonsaf1_mat3DVec__[13] = 171.169342;
            this.____motion_menu_buttonsaf1_mat3DVec__[14] = 74.118401;
            this.____motion_menu_buttonsaf1_mat3DVec__[15] = 1;
            this.____motion_menu_buttonsaf1_matArray__.push(new Matrix3D(this.____motion_menu_buttonsaf1_mat3DVec__));
            this.__motion_menu_buttonsaf1.addPropertyArray("matrix3D",this.____motion_menu_buttonsaf1_matArray__);
            this.__animArray_menu_buttonsaf1.push(this.__motion_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1 = new AnimatorFactory3D(null,this.__animArray_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1.sceneName = "Scene 1";
            this.__animFactory_menu_buttonsaf1.addTargetInfo(this,"menu_buttons",0,true,0,true,null,-1);
         }
         if(this.__animFactory_menu_buttons2af1 == null)
         {
            this.__animArray_menu_buttons2af1 = new Array();
            this.__motion_menu_buttons2af1 = new MotionBase();
            this.__motion_menu_buttons2af1.duration = 1;
            this.__motion_menu_buttons2af1.overrideTargetTransform();
            this.__motion_menu_buttons2af1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttons2af1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttons2af1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttons2af1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttons2af1.is3D = true;
            this.__motion_menu_buttons2af1.motion_internal::spanStart = 3;
            this.____motion_menu_buttons2af1_matArray__ = new Array();
            this.____motion_menu_buttons2af1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttons2af1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttons2af1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttons2af1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttons2af1_mat3DVec__[3] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttons2af1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttons2af1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttons2af1_mat3DVec__[7] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttons2af1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttons2af1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttons2af1_mat3DVec__[11] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[12] = -47.500088;
            this.____motion_menu_buttons2af1_mat3DVec__[13] = 170.84906;
            this.____motion_menu_buttons2af1_mat3DVec__[14] = 72.27739;
            this.____motion_menu_buttons2af1_mat3DVec__[15] = 1;
            this.____motion_menu_buttons2af1_matArray__.push(new Matrix3D(this.____motion_menu_buttons2af1_mat3DVec__));
            this.__motion_menu_buttons2af1.addPropertyArray("matrix3D",this.____motion_menu_buttons2af1_matArray__);
            this.__animArray_menu_buttons2af1.push(this.__motion_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1 = new AnimatorFactory3D(null,this.__animArray_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1.sceneName = "Scene 1";
            this.__animFactory_menu_buttons2af1.addTargetInfo(this,"menu_buttons2",0,true,0,true,null,-1);
         }
      }
      
      public function NetworkLoad() : void
      {
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkLoad_triesleft = 10;
            this.NetworkLoad_complete = false;
            this.NetworkLoad_failed = false;
            this.NetworkLoadNow();
         }
         else
         {
            this.NetworkLoad_complete = true;
         }
      }
      
      public function NetworkLoadNow() : void
      {
         if(this.NetworkLoad_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "load";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkLoadOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function NetworkLoadOk(param1:Event) : void
      {
         var _loc2_:Array = null;
         var _loc3_:int = 0;
         var _loc4_:Array = null;
         var _loc5_:String = null;
         var _loc6_:* = undefined;
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         if(!this.NetworkLoad_complete)
         {
            if(this.mySaveLoadLoader.data != "x")
            {
               if(this.mySaveLoadLoader.data != ".")
               {
                  _loc2_ = String(this.mySaveLoadLoader.data).split(";");
                  _loc3_ = 0;
                  for(; _loc3_ < _loc2_.length; _loc3_++)
                  {
                     _loc4_ = _loc2_[_loc3_].split("=");
                     _loc5_ = String(_loc4_[0]).split("^1").join(";").split("^2").join("=");
                     if((_loc6_ = String(_loc4_[1]).split("^1").join(";").split("^2").join("=")) == "undefined" || _loc6_ == "NaN")
                     {
                        if(this.my_so.data[_loc5_] + "" != "undefined")
                        {
                           if(this.my_so.data[_loc5_] + "" != "NaN")
                           {
                              continue;
                           }
                        }
                        _loc6_ = 0;
                     }
                     else if(_loc6_ == "true")
                     {
                        _loc6_ = true;
                     }
                     else if(_loc6_ == "false")
                     {
                        _loc6_ = false;
                     }
                     else if(Number(_loc6_) + "" != "NaN")
                     {
                        _loc6_ = Number(_loc6_);
                     }
                     if(_loc5_.indexOf("skin_allowed") != 0)
                     {
                        this.my_so.data[_loc5_] = _loc6_;
                     }
                  }
                  this.my_so.flush();
               }
            }
         }
         this.NetworkLoad_complete = true;
      }
      
      public function NetworkLoadError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         --this.NetworkLoad_triesleft;
         this.NetworkLoad_failed = true;
         this.NetworkLoadNow();
      }
      
      public function NetworkSave() : void
      {
         var _loc1_:* = null;
         var _loc2_:* = undefined;
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkSave_triesleft = 10;
            _loc1_ = "";
            for(_loc2_ in this.my_so.data)
            {
               _loc3_ = String(_loc2_.split(";").join("^1").split("=").join("^2"));
               _loc4_ = String(this.my_so.data[_loc2_]).split(";").join("^1").split("=").join("^2");
               if(!(_loc3_.indexOf("skin_allowed") == 0 || _loc4_ == "NaN" || _loc4_ == "undefined"))
               {
                  _loc1_ += _loc3_;
                  _loc1_ += "=";
                  _loc1_ += _loc4_;
                  _loc1_ += ";";
               }
            }
            this.NetworkSave_data = _loc1_;
            this.NetworkSaveNow();
         }
      }
      
      public function NetworkSaveNow() : void
      {
         if(this.NetworkSave_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "save";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myVariables.str = this.NetworkSave_data;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkSaveOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function NetworkSaveOk(param1:Event) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
      }
      
      public function NetworkSaveError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
         --this.NetworkSave_triesleft;
         this.NetworkSaveNow();
      }
      
      public function edumb() : void
      {
         if(stage.numChildren > 1)
         {
            if(this.loaderInfo.parameters.ignore_ad_protection != "yes")
            {
               stage.removeChildAt(1);
            }
            SoundMixer.stopAll();
            if(currentFrame > 1)
            {
               this.CreateRestoreLoopSounds();
            }
         }
      }
      
      public function kedumb() : void
      {
         if(this.edidumb != -1)
         {
            clearInterval(this.edidumb);
            this.edidumb = -1;
         }
      }
      
      public function version_hash(param1:String) : String
      {
         var _loc2_:ByteArray = new ByteArray();
         _loc2_.writeMultiByte(param1,"iso-8859-1");
         var _loc3_:ByteArray = stage.loaderInfo.bytes;
         var _loc4_:uint = 0;
         var _loc5_:uint = uint(_loc3_.length - 2);
         var _loc6_:uint = 3;
         while(_loc6_ < _loc5_)
         {
            _loc2_[_loc4_] = (_loc2_[_loc4_] + 3540 + (_loc2_[_loc4_] % 4 + 1) * (_loc3_[_loc6_] - _loc3_[_loc6_ - 1] + _loc3_[_loc6_ + 2] - _loc3_[_loc6_ + 1])) % 256;
            if(++_loc4_ >= _loc2_.length)
            {
               _loc4_ = 0;
            }
            _loc6_ += 4;
         }
         var _loc7_:String = "";
         _loc4_ = 0;
         while(_loc4_ < _loc2_.length)
         {
            _loc7_ += _loc2_[_loc4_] + ".";
            _loc4_++;
         }
         return _loc7_;
      }
      
      public function firtim() : *
      {
         if(currentFrame == 1)
         {
            this.totalseconds = getTimer() / 1000;
            if(this.loaded < 1)
            {
               this.loaded = 1;
            }
            this.waitfor = Math.round(this.totalseconds / this.loaded * (this.total - this.loaded));
            if(this.waitfor < 0)
            {
               this.waitfor = 0;
            }
            if(this.waitfor < 60)
            {
               this.loa2.htmlText = this.waitfor + " seconds";
            }
            else if(this.waitfor / 60 < 60)
            {
               this.loa2.htmlText = Math.floor(this.waitfor / 60) + " minutes " + (this.waitfor - Math.floor(this.waitfor / 60) * 60) + " seconds";
            }
         }
      }
      
      public function handleProgress(param1:Event) : void
      {
         if(currentFrame == 1)
         {
            this.loaded = stage.loaderInfo.bytesLoaded;
            this.percent = Math.round(this.loaded / this.total * 100);
            if(this.percent > 100)
            {
               this.percent = 100;
            }
            if(this.percent < 0)
            {
               this.percent = 0;
            }
            if(this.lastperc != this.percent)
            {
               this.times = 10;
            }
            else
            {
               --this.times;
            }
            if(this.times > 0)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FFFFFF\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FFFFFF\">:.</FONT></B>";
            }
            else if(this.times > -5)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#AAAAAA\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#AAAAAA\">:.</FONT></B>";
            }
            else if(this.times > -40)
            {
               this.loa.htmlText = "<B><FONT>.:</FONT></B> " + this.percent + " <B><FONT>:.<FONT></B>";
            }
            else
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FF0000\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FF0000\">:.</FONT></B>";
            }
            Mouse.show();
            if(this.framesLoaded == this.totalFrames)
            {
               if(this.pass)
               {
                  if(this.adBox.alpha > 0)
                  {
                     this.adBox.alpha -= 0.1 * 30 / stage.frameRate;
                     this.intro_btcb.alpha -= 0.1 * 30 / stage.frameRate;
                     this.conti.alpha -= 0.1 * 30 / stage.frameRate;
                  }
                  else
                  {
                     if(AdLoader.cpmstar_loaded_object != null)
                     {
                        AdLoader.cpmstar_loaded_object.unloadAndStop();
                     }
                     removeChild(this.adBox);
                     AdLoader.cpmstar_loaded_object = null;
                     AdLoader.context = null;
                     clearInterval(this.fir);
                     SoundMixer.stopAll();
                     SoundMixer.soundTransform = new SoundTransform(1,0);
                     gotoAndStop("intro");
                  }
               }
               else
               {
                  this.loa.visible = false;
                  this.loa2.visible = false;
                  if(this.NetworkLoad_complete)
                  {
                     this.conti_loading.visible = false;
                     this.conti.visible = true;
                  }
                  else
                  {
                     this.conti_loading.visible = true;
                     this.conti.visible = false;
                  }
                  this.darkness.visible = false;
                  this.darkness.alpha = 0;
               }
            }
            else if(this.darkness.alpha > 0)
            {
               this.darkness.alpha -= 0.05;
            }
            else
            {
               this.darkness.visible = false;
            }
            this.lastperc = this.percent;
         }
         if(currentFrame <= 2)
         {
            this.IntroThink();
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.handleProgress);
         }
      }
      
      public function IntroThink() : void
      {
         var _loc1_:MovieClip = null;
         var _loc2_:Number = NaN;
         var _loc3_:MovieClip = null;
         if(this.intro_first)
         {
            this.main_y = this.intro_base.hero.y;
            this.intro_first = false;
            this.sinus = 0;
         }
         else
         {
            this.intro_base.hero.rotationZ = -0.2 + Math.sin(this.sinus) * 0.2;
            this.intro_base.hero.y = this.main_y + 0.2 + Math.cos(this.sinus) * 0.2;
            this.sinus += 0.08 * 30 / stage.frameRate;
            this.intro_base.hero.intro_head.rotationZ = -this.intro_base.hero.rotationZ;
            this.intro_base.hero.intro_arm1.rotationZ = this.intro_base.hero.intro_arm2.rotationZ = -this.intro_base.hero.rotationZ;
            this.intro_base.hero.intro_gun.rotationZ = -this.intro_base.hero.rotationZ * 0.5;
            if(this.intro_glowings.length > 0)
            {
               for each(_loc1_ in this.intro_glowings)
               {
                  _loc2_ = 0.3;
                  _loc2_ -= _loc1_.y * 0.005;
                  _loc1_.alpha = (_loc1_.alpha * 2 + Math.random() * _loc2_) * 0.33;
                  if(_loc1_.parent == this.intro_base.hero)
                  {
                     _loc1_.rotationZ = -this.intro_base.hero.rotationZ;
                  }
                  else
                  {
                     _loc1_.rotationZ = -this.intro_base.hero.rotationZ - _loc1_.parent.rotationZ;
                  }
               }
            }
            if(this.rifle_glow != null)
            {
               this.rifle_glow.alpha = (this.rifle_glow.alpha + Math.pow(Math.sin(this.sinus) * 0.3 + 0.3 + Math.random() * 0.4,4)) * 0.5;
               this.rifle_glow.rotationZ = -this.intro_base.hero.rotationZ - this.rifle_glow.parent.rotationZ;
            }
            if(this.intro_speculars.length > 0)
            {
               for each(_loc3_ in this.intro_speculars)
               {
                  _loc3_.alpha = Math.pow(Math.sin(this.sinus) * 0.5 + 0.5,1);
               }
            }
         }
      }
      
      public function register_glow(param1:MovieClip) : void
      {
         if(this.intro_glowings == null)
         {
            this.intro_glowings = new Array();
         }
         this.intro_glowings.push(param1);
      }
      
      public function register_glow2(param1:MovieClip) : void
      {
         this.rifle_glow = param1;
      }
      
      public function register_specular(param1:MovieClip) : void
      {
         if(this.intro_speculars == null)
         {
            this.intro_speculars = new Array();
         }
         this.intro_speculars.push(param1);
      }
      
      public function getTextFromJavaScript(param1:*) : void
      {
         var _loc2_:Array = null;
         if(param1 != "term")
         {
            _loc2_ = param1.split(":");
            if(_loc2_[0] == "rt")
            {
               if(_loc2_[2] == "sp")
               {
                  if(currentFrameLabel == "menu")
                  {
                     removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
                  }
                  gotoAndStop("custom");
                  this.FORCE_CUSTOM_MAP = true;
                  this.CUR_CUSTOM_MAP = _loc2_[1];
                  gotoAndStop("difch");
               }
               else if(_loc2_[2] == "mp")
               {
               }
            }
         }
      }
      
      public function cet(param1:String, param2:String, param3:int) : String
      {
         var n:Vector.<int> = null;
         var str:String = param1;
         var hash:String = param2;
         var len:int = param3;
         try
         {
            if(str.length != len || hash != MD5.hash(str))
            {
               this.unstable = 9;
               this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: che(" + str + ", " + hash + ", " + len + ")";
               if(Math.random() > 0.8)
               {
                  return "";
               }
               if(Math.random() > 0.8)
               {
                  n = new Vector.<int>(-1);
               }
            }
            return str;
         }
         catch(e:Error)
         {
            n = new Vector.<int>(-1);
            return "";
         }
      }
      
      public function GET_LITE_PHYS() : Boolean
      {
         if(this.MP_mode)
         {
            if(this.MP_app)
            {
               return false;
            }
         }
         return this.LITE_PHYS;
      }
      
      public function GCTime() : void
      {
         System.pauseForGCIfCollectionImminent(0.1);
      }
      
      public function DropGameTimer() : void
      {
         this.MP_spectator = false;
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         if(this.MP_mode)
         {
            clearInterval(this.gametim);
         }
         stage.removeEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);
      }
      
      public function StartGameTimer() : void
      {
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         if(this.MP_mode)
         {
            this.gametim = setInterval(this.onEnterFrame_alt,this.gtwi);
            this.gtlt = getTimer();
         }
         stage.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);
      }
      
      public function UnlagFPS() : void
      {
         if(this.allow_unlag_fps)
         {
            this.allow_unlag_fps = false;
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame);
            stage.frameRate = stage.frameRate;
            addEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         }
      }
      
      public function onEnterFrame_alt() : void
      {
         this.UnlagFPS();
         if(getTimer() > this.gtlt + 40)
         {
            if(this.MP_mode)
            {
               this.onEnterFrame(null);
            }
         }
      }
      
      public function ManageGameTimer() : void
      {
         this.gtlt = getTimer();
      }
      
      public function UpdateFramerate() : void
      {
         stage.frameRate = this.FRAMERATE == 1 ? 20 : (this.FRAMERATE == 2 ? 30 : 60);
      }
      
      public function AskForCache(param1:MovieClip) : void
      {
         var cmc:MovieClip = param1;
         try
         {
            cmc.cacheAsBitmapMatrix = cmc.transform.concatenatedMatrix;
            cmc.cacheAsBitmap = true;
         }
         catch(e:*)
         {
            cmc.cacheAsBitmap = false;
         }
      }
      
      public function decode(param1:String) : String
      {
         var _loc2_:* = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            if(param1.charAt(this.i) == ";")
            {
               _loc2_ += "|";
            }
            else
            {
               _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) - 1);
            }
            ++this.i;
         }
         return _loc2_;
      }
      
      public function Censored(param1:String) : String
      {
         if(this.CENSORESHIP)
         {
            this.ok2 = true;
            while(this.ok2)
            {
               this.ok2 = false;
               this.c_i = 0;
               while(this.c_i < this.BAD_WORDS.length)
               {
                  this.c_str = param1.toLowerCase();
                  this.c_i2 = this.c_str.indexOf(this.BAD_WORDS[this.c_i]);
                  if(this.c_i2 != -1)
                  {
                     param1 = param1.substr(0,this.c_i2) + " [ censored ] " + param1.substr(this.c_i2 + this.BAD_WORDS[this.c_i].length,param1.length - this.c_i2 - this.BAD_WORDS[this.c_i].length);
                     this.ok2 = true;
                  }
                  ++this.c_i;
               }
            }
         }
         return param1;
      }
      
      public function UpdateTeamTable() : *
      {
         if(this.MP_type == 3)
         {
            this.team_blue.visible = true;
            this.team_red.visible = true;
            this.team_blue.gotoAndStop(1);
            this.team_red.gotoAndStop(1);
            if(this.mens[this.MP_myid].team == 13)
            {
               this.team_blue.gotoAndStop(3);
            }
            else
            {
               this.team_red.gotoAndStop(3);
            }
         }
         else
         {
            this.team_blue.visible = false;
            this.team_red.visible = false;
         }
      }
      
      public function addBadge(param1:int, param2:String, param3:int) : void
      {
         this.BADGE_STAT[param1] = 0;
         this.BADGE_STAT_MAX[param1] = param3;
         this.BADGE_TITLE[param1] = param2;
         this.BADGE_REACHED[param1] = false;
      }
      
      public function incBadge(param1:int) : void
      {
         if(this.BADGES_ENABLED)
         {
            if(!this.FORCE_CUSTOM_MAP)
            {
               if(!this.BADGE_REACHED[param1])
               {
                  if(!this.MP_mode)
                  {
                     ++this.BADGE_STAT[param1];
                     if(this.BADGE_STAT[param1] >= this.BADGE_STAT_MAX[param1])
                     {
                        this.BADGE_STAT[param1] = this.BADGE_STAT_MAX[param1];
                        this.BADGE_REACHED[param1] = true;
                        this.PlaySound_full(this.s_badge_earned);
                        this.DialogSay("Achievement unlocked \'\'" + this.BADGE_TITLE[param1] + "\'\'","#00FF00");
                        this.LAST_BADGE = getTimer();
                     }
                     this.SaveGame();
                  }
               }
            }
         }
      }
      
      public function MP_s_closeHandler(param1:Event) : void
      {
         this.MP_socket.close();
         if(currentLabel == "loginform")
         {
            this.LAST_ERROR = "Connection lost during connection";
            this.errtxt.text = "CONNECTION LOST DURING CONNECTION";
         }
      }
      
      public function MP_s_connectHandler(param1:Event) : void
      {
         var event2:Event = param1;
         this.MP_socket.writeUTFBytes("Glad to meet you! :D");
         this.MP_socket.flush();
         if(currentLabel == "loginform")
         {
            this.login_login.alpha = 1;
            this.login_login.enabled = true;
            this.login_guest.alpha = 1;
            this.login_guest.enabled = true;
            if(this.auto_proceed)
            {
               setTimeout(function():*
               {
                  proceed();
               },20);
            }
         }
      }
      
      public function MP_s_ioErrorHandler(param1:IOErrorEvent) : void
      {
         if(currentLabel == "loginform")
         {
            this.errtxt.text = "CONNECTION ERROR";
         }
      }
      
      public function MP_s_socketDataHandler(param1:ProgressEvent) : void
      {
         var a:* = undefined;
         var xml:XML = null;
         var b:* = undefined;
         var c:* = undefined;
         var bookInfo:XML = null;
         var bookInfo2:XML = null;
         var firsttag:Boolean = false;
         var event4:ProgressEvent = param1;
         this.MP_SERVER_GOT_CUR = this.MP_socket.readUTFBytes(this.MP_socket.bytesAvailable);
         if(this.MP_SERVER_GOT_CUR.charAt(0) == "$")
         {
            if(currentLabel == "channel")
            {
               this.MP_SERVER_GOT_CUR = this.MP_SERVER_GOT_CUR.slice(1,this.MP_SERVER_GOT_CUR.length);
            }
            else
            {
               this.MP_SERVER_GOT_CUR = "";
            }
         }
         this.MP_SERVER_GOT += this.MP_SERVER_GOT_CUR;
         if(this.MP_SERVER_GOT.charAt(this.MP_SERVER_GOT.length - 1) == "@")
         {
            this.MP_SERVER_GOT = this.MP_SERVER_GOT.slice(0,-1);
            if(this.DEBUG_MODE)
            {
            }
            if(currentLabel == "loginform")
            {
               a = this.MP_SERVER_GOT.split("|");
               if(a[0] == "ok")
               {
                  this.MP_login_auto_try = false;
                  this.MP_nick = this.replace("[^I]","|",a[1]);
                  this.skin_model[2] = new int(a[2]);
                  this.skin_model[3] = new int(a[3]);
                  this.MP_clan = a[4];
                  this.MP_channel = "0";
                  this.MP_channel_name = "Match browser";
                  gotoAndStop("channel");
               }
               else if(a[0] == "badlogin")
               {
                  this.errtxt.text = "LOGIN IS INCORRECT";
                  this.MP_login_auto_try = false;
                  this.login_login.alpha = 1;
                  this.login_login.enabled = true;
                  this.login_guest.alpha = 1;
                  this.login_guest.enabled = true;
               }
               else if(a[0] == "badpassword")
               {
                  this.errtxt.text = "WRONG PASSWORD";
                  this.MP_login_auto_try = false;
                  this.login_login.alpha = 1;
                  this.login_login.enabled = true;
                  this.login_guest.alpha = 1;
                  this.login_guest.enabled = true;
               }
               else if(a[0] == "badversion")
               {
                  this.errtxt.text = "GAME VERSION MISMATCH. REFRESH PAGE TO GET LATEST GAME UPDATE";
                  this.MP_login_auto_try = false;
               }
               else if(a[0] == "banaccount")
               {
                  this.errtxt.text = "YOUR ACCOUNT DISABLED FOR SOME REASON. VISIT YOUR PROFILE FOR MORE INFORMATION";
                  this.MP_login_auto_try = false;
               }
               else if(a[0] == "banip")
               {
                  this.errtxt.text = "YOU HAVE NO PERMISSION TO MULTIPLAYER GAME";
                  this.MP_login_auto_try = false;
               }
               else if(a[0] == "verification")
               {
                  this.errtxt.text = "YOUR ACCOUNT NOT VERIFICATED VIA E-MAIL";
                  this.MP_login_auto_try = false;
                  this.login_login.alpha = 1;
                  this.login_login.enabled = true;
                  this.login_guest.alpha = 1;
                  this.login_guest.enabled = true;
               }
               else if(a[0] == "full")
               {
                  this.errtxt.text = "THIS SERVER IS FULL. TRY TO CONNECT TO ANOTHER SERVER OR MAKE ANOTHER ATTEMPT LATER";
                  this.MP_login_auto_try = false;
                  this.login_login.alpha = 1;
                  this.login_login.enabled = true;
                  this.login_guest.alpha = 1;
                  this.login_guest.enabled = true;
               }
               else if(a[0] == "chcking")
               {
                  this.errtxt.text = "PENDING VERIFICATION, PLEASE WAIT...";
                  setTimeout(function():*
                  {
                     if(MP_socket.connected)
                     {
                        MP_login_auto_try = true;
                        MP_socket.writeUTFBytes("rq=login&l=" + flogin.text + "&p=" + fpassword.text + "&v=" + GAME_VERSION);
                        MP_socket.flush();
                     }
                     else
                     {
                        MP_login_auto_try = false;
                     }
                  },100);
               }
            }
            else if(currentLabel == "mp_root")
            {
               this.list.visible = true;
               xml = new XML("<r>" + this.MP_SERVER_GOT + "</r>");
               for each(bookInfo in xml.children())
               {
                  a = bookInfo.name();
                  b = new Array();
                  for each(bookInfo2 in bookInfo.attributes())
                  {
                     b["#" + bookInfo2.name()] = bookInfo2;
                  }
                  if(a == "o2")
                  {
                     if(this.ch_total == 0)
                     {
                        this.temp = this.list.ch0;
                     }
                     else
                     {
                        this.temp = this.list.addChild(new mp_room_list());
                     }
                     this.temp.y = 23 * this.ch_total;
                     this.temp.txt.text = b["#n"];
                     this.NoMouse2(this.temp.txt);
                     this.temp.gotoAndStop(1);
                     this.temp.addEventListener(MouseEvent.CLICK,this.ch_clk);
                     this.ch_links[this.ch_total] = b["#f"];
                     this.ch_names[this.ch_total] = b["#n"];
                     ++this.ch_total;
                  }
               }
            }
            else if(currentLabel == "channel" && this.MP_SERVER_GOT.charAt(0) == "<")
            {
               this.list2.addEventListener(MouseEvent.CLICK,this.gl_clk);
               firsttag = true;
               xml = new XML("<r>" + this.MP_SERVER_GOT + "</r>");
               for each(bookInfo in xml.children())
               {
                  a = bookInfo.name();
                  b = new Array();
                  for each(bookInfo2 in bookInfo.attributes())
                  {
                     b["#" + bookInfo2.name()] = bookInfo2;
                  }
                  if(a == "st")
                  {
                     this.i = 0;
                     while(this.i < this.ch_total)
                     {
                        this.temp2[this.i].visible = false;
                        ++this.i;
                     }
                     this.ch_total = 0;
                     this.list2.visible = true;
                  }
                  if(a == "o")
                  {
                     if(this.ch_total == 0)
                     {
                        this.temp = this.list2.ch0;
                     }
                     else
                     {
                        this.temp = this.list2.addChild(new mp_room_list2());
                     }
                     this.temp.visible = true;
                     this.temp2[this.ch_total] = this.temp;
                     this.temp.y = 32 * this.ch_total;
                     this.temp.txt.text = this.Censored(b["#n"]);
                     this.temp.txt2.text = this.Censored(b["#t"]);
                     if(b["#p"] == "yes")
                     {
                        this.temp.txt3.text = "private";
                     }
                     else
                     {
                        this.temp.txt3.text = "public";
                     }
                     this.temp.txt4.text = this.Censored(b["#m"]);
                     this.NoMouse2(this.temp.txt);
                     this.NoMouse2(this.temp.txt2);
                     this.NoMouse2(this.temp.txt3);
                     this.NoMouse2(this.temp.txt4);
                     this.NoMouse2(this.temp.txt5);
                     this.NoMouse2(this.temp.txt6);
                     this.NoMouse2(this.temp.txt7);
                     this.NoMouse2(this.temp.txt8);
                     if(b["#a"] != null)
                     {
                        this.temp.txt5.text = this.Censored(b["#a"]);
                     }
                     if(b["#g"] != null)
                     {
                        this.temp.txt6.text = "?";
                        if(b["#g"] == 1)
                        {
                           this.temp.txt6.text = "DM";
                        }
                        if(b["#g"] == 2)
                        {
                           this.temp.txt6.text = "COOP";
                        }
                        if(b["#g"] == 3)
                        {
                           this.temp.txt6.text = "TDM";
                        }
                        if(b["#g"] == 4)
                        {
                           this.temp.txt6.text = "CTF";
                        }
                        if(b["#g"] == 5)
                        {
                           this.temp.txt6.text = "CTP";
                        }
                     }
                     if(b["#q"] != null)
                     {
                        this.temp.txt7.text = this.Censored(b["#q"]);
                     }
                     if(b["#s"] != null)
                     {
                        this.temp.txt8.text = this.Censored(b["#s"]);
                     }
                     this.temp.gotoAndStop(1);
                     this.ch_links[this.ch_total] = b["#f"];
                     this.ch_names[this.ch_total] = b["#n"];
                     this.ch_pass[this.ch_total] = b["#p"];
                     this.ch_map[this.ch_total] = b["#m"];
                     this.ch_app[this.ch_total] = b["#a"] == "yes";
                     ++this.ch_total;
                  }
                  if(a == "cok")
                  {
                     chat_msg.type = TextFieldType.INPUT;
                     chat_send.enabled = true;
                  }
                  if(a == "jrm")
                  {
                     this.list2.removeEventListener(MouseEvent.CLICK,this.gl_clk);
                     this.MP_room = b["#to"];
                     removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
                     gotoAndStop("room");
                  }
               }
            }
            else if(currentLabel == "gaming")
            {
               this.MP_get_done_STR = this.MP_SERVER_GOT;
               this.MP_get_done_HAP = true;
            }
            else if(currentLabel == "room")
            {
               if(this.MP_SERVER_GOT.charAt(0) != "<")
               {
                  this.MP_get_done_pre(this.MP_SERVER_GOT);
               }
            }
            this.MP_SERVER_GOT = "";
         }
      }
      
      public function MP_s_securityErrorHandler(param1:SecurityErrorEvent) : void
      {
         var _loc2_:String = null;
         var _loc3_:Array = null;
         var _loc4_:Array = null;
         var _loc5_:String = null;
         var _loc6_:Number = NaN;
         if(currentLabel == "loginform")
         {
            this.errtxt.text = "CAN\'T REACH SELECTED SERVER. IN CASE IF THIS PROBLEM IS PERMANENT FOR YOU - PLEASE CONTACT DEVELOPER";
            _loc2_ = String(Capabilities.version);
            _loc3_ = _loc2_.split(" ");
            _loc4_ = _loc3_[1].split(",");
            _loc5_ = String(_loc3_[0]);
            _loc6_ = Number(_loc4_[0]);
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "noserver";
            this.myVariables.str = this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT + " :: " + param1.toString() + " :: " + "Flash Player version: " + this._flash_version + " :: OS: " + _loc5_ + " :: Security.sandboxType = " + Security.sandboxType;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader2noserver.load(this.myRequest);
         }
      }
      
      public function AddItemToHero1(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryA.length;
         this.inventoryA[_loc3_] = new Object();
         this.inventoryA[_loc3_].mdl = param1;
         this.inventoryA[_loc3_].upg = param2;
      }
      
      public function AddItemToHero2(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryB.length;
         this.inventoryB[_loc3_] = new Object();
         this.inventoryB[_loc3_].mdl = param1;
         this.inventoryB[_loc3_].upg = param2;
      }
      
      public function AddItemToHero3(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryC.length;
         this.inventoryC[_loc3_] = new Object();
         this.inventoryC[_loc3_].mdl = param1;
         this.inventoryC[_loc3_].upg = param2;
      }
      
      public function AddItemToHero4(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryD.length;
         this.inventoryD[_loc3_] = new Object();
         this.inventoryD[_loc3_].mdl = param1;
         this.inventoryD[_loc3_].upg = param2;
      }
      
      public function RestoreLimbColor(param1:MovieClip) : void
      {
         param1.filters = new Array(this.clrs[0]);
      }
      
      public function UpdatePlayerColorSP(param1:MovieClip, param2:int) : void
      {
         if(!this.MP_mode)
         {
            if(param2 == 0 || param2 == 1)
            {
               param1.head.filters = new Array(this.clrs[this.skin_color_head[param2]]);
               param1.body.filters = new Array(this.clrs[this.skin_color_body[param2]]);
               param1.arm1.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm1.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm2.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.arm2.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               param1.leg1.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg1.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg1.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.leg2.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               param1.toe.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
            }
         }
      }
      
      public function BlueHue(param1:String) : ColorMatrixFilter
      {
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         var _loc5_:Number = NaN;
         var _loc6_:* = undefined;
         var _loc2_:ColorMatrixFilter = new ColorMatrixFilter();
         if(param1 != "-")
         {
            _loc3_ = this.MPclr[param1][0];
            _loc4_ = this.MPclr[param1][1];
            _loc5_ = Number(this.MPclr[param1][2]);
            _loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = new Array()).concat([_loc3_ * 0.3,_loc3_ * 0.4 + _loc4_ * 0.2,_loc3_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc4_ * 0.3 + _loc3_ * 0.2,_loc4_ * 0.4,_loc4_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc5_ * 0.3 + _loc3_ * 0.2,_loc5_ * 0.4 + _loc4_ * 0.2,_loc5_ * 0.6,0,0])).concat([0,0,0,1,0]);
            _loc2_.matrix = _loc6_;
         }
         return _loc2_;
      }
      
      public function UpdatePlayerColorMP(param1:MovieClip, param2:Boolean = false) : void
      {
         var _loc3_:ColorMatrixFilter = this.BlueHue(param1.palette[0]);
         var _loc4_:ColorMatrixFilter = this.BlueHue(param1.palette[1]);
         var _loc5_:ColorMatrixFilter = this.BlueHue(param1.palette[2]);
         var _loc6_:ColorMatrixFilter = this.BlueHue(param1.palette[3]);
         param1.head.filters = new Array(_loc3_);
         param1.body.filters = new Array(_loc6_);
         param1.arm1.upper.filters = new Array(_loc4_);
         param1.arm1.lower.filters = new Array(_loc4_);
         param1.arm2.upper.filters = new Array(_loc4_);
         param1.arm2.lower.filters = new Array(_loc4_);
         param1.leg1.upper.filters = new Array(_loc5_);
         param1.leg1.middle.filters = new Array(_loc5_);
         param1.leg1.lower.filters = new Array(_loc5_);
         param1.leg2.upper.filters = new Array(_loc5_);
         param1.leg2.middle.filters = new Array(_loc5_);
         param1.leg2.lower.filters = new Array(_loc5_);
         param1.toe.filters = new Array(_loc5_);
      }
      
      public function LoadGame() : void
      {
         if(this.my_so.data.plays == undefined || this.my_so.data.plays == 0 || this.my_so.data.plays == NaN)
         {
            this.FIRST_RUN = true;
            this.my_so.data.plays = 1;
            this.FIRST_TIME = true;
            this.my_so.data["skin_model" + 0] = 40;
            this.my_so.data["skin_model" + 1] = 60;
            this.my_so.data["skin_model" + 2] = 2;
            this.my_so.data["armorA"] = 0;
            this.my_so.data["armorB"] = 0;
            this.my_so.data["curA"] = 0;
            this.my_so.data["curB"] = 0;
            this.my_so.data["last_mp"] = 0;
            this.my_so.data["psychoblood_mode"] = 1;
            this.my_so.data["framerate"] = 2;
            this.i = 0;
            while(this.i < this.BADGES_TOTAL)
            {
               this.my_so.data["bdg" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["cmpg_nick"] = "";
            this.my_so.data["lvls_passed"] = 0;
            this.my_so.data["money"] = 200;
            this.i = 0;
            while(this.i < 3)
            {
               this.my_so.data["skin_color_head" + this.i] = 0;
               this.my_so.data["skin_color_body" + this.i] = 0;
               this.my_so.data["skin_color_arms" + this.i] = 0;
               this.my_so.data["skin_color_legs" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["inv1_len"] = 3;
            this.my_so.data["inv1_0mdl"] = "gun_pistol";
            this.my_so.data["inv1_1mdl"] = "gun_rifle";
            this.my_so.data["inv1_2mdl"] = "gun_shotgun";
            this.my_so.data["inv1_3mdl"] = "item_grenade";
            this.my_so.data["inv1_4mdl"] = "item_grenade";
            this.my_so.data["inv1_5mdl"] = "item_grenade";
            this.my_so.data["inv1_0upg"] = 0;
            this.my_so.data["inv1_1upg"] = 0;
            this.my_so.data["inv1_2upg"] = 0;
            this.my_so.data["inv1_3upg"] = 0;
            this.my_so.data["inv1_4upg"] = 0;
            this.my_so.data["inv1_5upg"] = 0;
            this.my_so.data["inv2_len"] = 1;
            this.my_so.data["inv2_0mdl"] = "gun_real_shotgun";
            this.my_so.data["inv2_0upg"] = 0;
            this.my_so.data["MP_default_set"] = 1;
            this.my_so.data["mouse_wheel"] = true;
            this.my_so.data["OVERSCROLL"] = true;
            this.my_so.data["super_computer"] = false;
            this.my_so.data["ragdoll_collide"] = false;
            this.my_so.data["im_a_cheater"] = false;
            this.my_so.data["lite_phys"] = false;
            this.my_so.data["auto_pick_new_weps"] = true;
            this.my_so.data["soft_screen"] = true;
            this.my_so.data["screen_effects"] = true;
            this.my_so.data["violence"] = true;
            this.my_so.data["altcur"] = true;
            this.my_so.data["censoreship"] = false;
            this.my_so.data["display_chat"] = true;
            this.my_so.data["fx_vol"] = 0.5;
            this.my_so.data["music_vol"] = 0.5;
            this.my_so.data["hq"] = true;
            this.my_so.data["easy_mode"] = false;
            this.my_so.data["pro_bots"] = false;
            this.my_so.data["LOW_HPS"] = false;
            this.my_so.data["hints"] = true;
            this.my_so.data["tooltips"] = true;
         }
         else
         {
            ++this.my_so.data.plays;
            this.FIRST_RUN = false;
         }
         this.skin_model[0] = int(this.my_so.data["skin_model" + 0]);
         this.skin_model[1] = int(this.my_so.data["skin_model" + 1]);
         this.skin_model[2] = int(this.my_so.data["skin_model" + 2]);
         this.armorA = int(this.my_so.data["armorA"]);
         this.armorB = int(this.my_so.data["armorB"]);
         this.curA = this.my_so.data["curA"];
         this.curB = this.my_so.data["curB"];
         this.LAST_SERVER_UID = int(this.my_so.data["last_mp"]);
         this.CMPG_money = int(this.my_so.data["money"]);
         this.CMPG_name = String(this.my_so.data["cmpg_nick"]);
         this.LEVELS_PASSED = int(this.my_so.data["lvls_passed"]);
         this.i = 0;
         while(this.i < 3)
         {
            this.skin_color_head[this.i] = int(this.my_so.data["skin_color_head" + this.i]);
            this.skin_color_body[this.i] = int(this.my_so.data["skin_color_body" + this.i]);
            this.skin_color_arms[this.i] = int(this.my_so.data["skin_color_arms" + this.i]);
            this.skin_color_legs[this.i] = int(this.my_so.data["skin_color_legs" + this.i]);
            ++this.i;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.BADGE_STAT[this.i] = this.my_so.data["bdg" + this.i];
            if(this.BADGE_STAT[this.i] >= this.BADGE_STAT_MAX[this.i])
            {
               this.BADGE_REACHED[this.i] = true;
            }
            else
            {
               this.BADGE_REACHED[this.i] = false;
            }
            ++this.i;
         }
         this.inventoryA = new Array();
         this.inventoryB = new Array();
         this.i2 = int(this.my_so.data["inv1_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero1(this.my_so.data["inv1_" + this.i + "mdl"],int(this.my_so.data["inv1_" + this.i + "upg"]));
            ++this.i;
         }
         this.i2 = int(this.my_so.data["inv2_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero2(this.my_so.data["inv2_" + this.i + "mdl"],int(this.my_so.data["inv2_" + this.i + "upg"]));
            ++this.i;
         }
         this.SUPER_COMPUTER = Boolean(this.my_so.data["super_computer"]);
         this.RAGDOLL_COLLIDE = Boolean(this.my_so.data["ragdoll_collide"]);
         this.IM_A_CHEATER = this.my_so.data["im_a_cheater"];
         this.LITE_PHYS = Boolean(this.my_so.data["lite_phys"]);
         this.AUTO_PICK_NEW_WEPS = Boolean(this.my_so.data["auto_pick_new_weps"]);
         this.SOFT_SCREEN = Boolean(this.my_so.data["soft_screen"]);
         this.SCREEN_EFFECTS = Boolean(this.my_so.data["screen_effects"]);
         this.VIOLENCE = Boolean(this.my_so.data["violence"]);
         this.ALTCUR = Boolean(this.my_so.data["altcur"]);
         this.CENSORESHIP = Boolean(this.my_so.data["censoreship"]);
         if(this.my_so.data["display_chat"] == undefined)
         {
            this.DISPLAY_CHAT = true;
         }
         else
         {
            this.DISPLAY_CHAT = Boolean(this.my_so.data["display_chat"]);
         }
         if(this.my_so.data["psychoblood_mode"] == undefined)
         {
            this.PSYCHOBLOOD_MODE = 2;
         }
         else
         {
            this.PSYCHOBLOOD_MODE = int(this.my_so.data["psychoblood_mode"]);
         }
         if(this.my_so.data["framerate"] == undefined)
         {
            this.FRAMERATE = 2;
         }
         else
         {
            this.FRAMERATE = int(this.my_so.data["framerate"]);
         }
         this.UpdateFramerate();
         this.FX_VOLUME = Number(this.my_so.data["fx_vol"]);
         this.MUSIC_VOLUME = Number(this.my_so.data["music_vol"]);
         this.HQ = Boolean(this.my_so.data["hq"]);
         this.EASY_MODE = Boolean(this.my_so.data["easy_mode"]);
         this.LOW_HPS = Boolean(this.my_so.data["LOW_HPS"]);
         this.PRO_BOTS = Boolean(this.my_so.data["pro_bots"]);
         this.HINTS = Boolean(this.my_so.data["hints"]);
         this.TOOLTIPS = Boolean(this.my_so.data["tooltips"]);
         if(this.my_so.data["mouse_wheel"] == undefined)
         {
            this.MOUSE_WHEEL = true;
         }
         else
         {
            this.MOUSE_WHEEL = Boolean(this.my_so.data["mouse_wheel"]);
         }
         if(this.my_so.data["OVERSCROLL"] == undefined)
         {
            this.OVERSCROLL = true;
         }
         else
         {
            this.OVERSCROLL = Boolean(this.my_so.data["OVERSCROLL"]);
         }
         if(this.my_so.data["MP_default_set"] == undefined)
         {
            this.MP_default_set = 1;
         }
         else
         {
            this.MP_default_set = int(this.my_so.data["MP_default_set"]);
         }
      }
      
      public function nicknameproceed() : void
      {
         if(this.mdialog.nickname.text == "")
         {
            this.mdialog.nickname.text = "Type Your Name Here";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here")
         {
            this.mdialog.nickname.text = "Type Your Name Here!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!!")
         {
            this.i4 = Math.floor(Math.random() * 9.9);
            if(this.i4 == 0)
            {
               this.mdialog.nickname.text = "Shas\'O Kais";
            }
            if(this.i4 == 1)
            {
               this.mdialog.nickname.text = "O\'Shovah";
            }
            if(this.i4 == 2)
            {
               this.mdialog.nickname.text = "Warper";
            }
            if(this.i4 == 3)
            {
               this.mdialog.nickname.text = "The Chosen Twice";
            }
            if(this.i4 == 4)
            {
               this.mdialog.nickname.text = "Teddy Bear";
            }
            if(this.i4 == 5)
            {
               this.mdialog.nickname.text = "Super Butterfly";
            }
            if(this.i4 == 6)
            {
               this.mdialog.nickname.text = "Obi-1";
            }
            if(this.i4 == 7)
            {
               this.mdialog.nickname.text = "Tux";
            }
            if(this.i4 == 8)
            {
               this.mdialog.nickname.text = "Tootsie Poopsie";
            }
            if(this.i4 == 9)
            {
               this.mdialog.nickname.text = "Thomas Sorenson";
            }
         }
         else
         {
            if(this.FIRST_RUN)
            {
               this.MP_nick = this.mdialog.nickname.text;
            }
            if(this.CMPG_name != this.mdialog.nickname.text)
            {
               this.CMPG_name = this.mdialog.nickname.text;
               this.SaveGame();
            }
            this.mdialog.visible = false;
            removeChild(this.intro_base);
            removeChild(this.mdialog);
            removeChild(this.intro_vers);
            removeChild(this.intro_btcb);
            gotoAndStop("ads");
         }
      }
      
      public function SaveGame() : void
      {
         this.my_so.data["skin_model" + 0] = this.skin_model[0];
         this.my_so.data["skin_model" + 1] = this.skin_model[1];
         this.my_so.data["skin_model" + 2] = this.skin_model[2];
         this.my_so.data["armorA"] = this.armorA;
         this.my_so.data["armorB"] = this.armorB;
         this.my_so.data["curA"] = this.curA;
         this.my_so.data["curB"] = this.curB;
         this.my_so.data["money"] = this.CMPG_money;
         this.my_so.data["cmpg_nick"] = this.CMPG_name;
         this.my_so.data["lvls_passed"] = this.LEVELS_PASSED;
         this.my_so.data["last_mp"] = this.LAST_SERVER_UID;
         this.my_so.data["psychoblood_mode"] = this.PSYCHOBLOOD_MODE;
         this.my_so.data["framerate"] = this.FRAMERATE;
         this.save_i = 0;
         while(this.i < this.save_i)
         {
            this.my_so.data["skin_color_head" + this.save_i] = this.skin_color_head[this.save_i];
            this.my_so.data["skin_color_body" + this.save_i] = this.skin_color_body[this.save_i];
            this.my_so.data["skin_color_arms" + this.save_i] = this.skin_color_arms[this.save_i];
            this.my_so.data["skin_color_legs" + this.save_i] = this.skin_color_legs[this.save_i];
            ++this.i;
         }
         this.save_i = 0;
         while(this.save_i < this.BADGES_TOTAL)
         {
            this.my_so.data["bdg" + this.save_i] = this.BADGE_STAT[this.save_i];
            ++this.save_i;
         }
         this.my_so.data["inv1_len"] = this.inventoryA.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryA.length)
         {
            this.my_so.data["inv1_" + this.save_i + "mdl"] = this.inventoryA[this.save_i].mdl;
            this.my_so.data["inv1_" + this.save_i + "upg"] = this.inventoryA[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["inv2_len"] = this.inventoryB.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryB.length)
         {
            this.my_so.data["inv2_" + this.save_i + "mdl"] = this.inventoryB[this.save_i].mdl;
            this.my_so.data["inv2_" + this.save_i + "upg"] = this.inventoryB[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["super_computer"] = this.SUPER_COMPUTER;
         this.my_so.data["ragdoll_collide"] = this.RAGDOLL_COLLIDE;
         this.my_so.data["im_a_cheater"] = this.IM_A_CHEATER;
         this.my_so.data["lite_phys"] = this.LITE_PHYS;
         this.my_so.data["auto_pick_new_weps"] = this.AUTO_PICK_NEW_WEPS;
         this.my_so.data["soft_screen"] = this.SOFT_SCREEN;
         this.my_so.data["screen_effects"] = this.SCREEN_EFFECTS;
         this.my_so.data["violence"] = this.VIOLENCE;
         this.my_so.data["altcur"] = this.ALTCUR;
         this.my_so.data["censoreship"] = this.CENSORESHIP;
         this.my_so.data["display_chat"] = this.DISPLAY_CHAT;
         this.my_so.data["fx_vol"] = this.FX_VOLUME;
         this.my_so.data["music_vol"] = this.MUSIC_VOLUME;
         this.my_so.data["hq"] = this.HQ;
         this.my_so.data["mouse_wheel"] = this.MOUSE_WHEEL;
         this.my_so.data["OVERSCROLL"] = this.OVERSCROLL;
         this.my_so.data["easy_mode"] = this.EASY_MODE;
         this.my_so.data["LOW_HPS"] = this.LOW_HPS;
         this.my_so.data["pro_bots"] = this.PRO_BOTS;
         this.my_so.data["hints"] = this.HINTS;
         this.my_so.data["tooltips"] = this.TOOLTIPS;
         this.my_so.data["MP_default_set"] = this.MP_default_set;
         this.my_so.flush();
         this.NetworkSave();
      }
      
      public function ShowNoAch() : void
      {
         this.ChatNewMsg("<font color=\"#a16d4b\">WARNING: Use of cheats disables Achievements. You can press \"Clear all saved data\"</font>");
         this.ChatNewMsg("<font color=\"#a16d4b\">                 at game start to enable Achievements.</font>");
      }
      
      public function replace(param1:String, param2:String, param3:String) : String
      {
         if(param3 != null && param3 != "")
         {
            return param3.split(param1).join(param2);
         }
         return "";
      }
      
      public function Dist3Dm(param1:Number, param2:Number, param3:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2 + param3 * param3);
      }
      
      public function PlaySound(param1:*, param2:Number, param3:Number) : void
      {
         if(this.NONMUTE)
         {
            if(this.game.visible)
            {
               if(this.s_channel[this.last_channel] != null)
               {
                  this.s_channel[this.last_channel].stop();
               }
               this.smod = this.dist_to_face / this.Dist3Dm((param2 + this.game.x - 400) * this.game_scale - 300,(param3 + this.game.y - 200) * this.game_scale,this.dist_to_face);
               this.smod2 = this.dist_to_face / this.Dist3Dm((param2 + this.game.x - 400) * this.game_scale + 300,(param3 + this.game.y - 200) * this.game_scale,this.dist_to_face);
               this.vol3d[this.last_channel].volume = this.vol.volume;
               this.vol3d[this.last_channel].leftToLeft = this.smod2;
               this.vol3d[this.last_channel].leftToRight = 0;
               this.vol3d[this.last_channel].rightToRight = this.smod;
               this.vol3d[this.last_channel].rightToLeft = 0;
               this.s_channel[this.last_channel] = param1.play(0,0,this.vol3d[this.last_channel]);
               ++this.last_channel;
               if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }
            }
         }
      }
      
      public function PlaySound_full(param1:*) : void
      {
         if(this.NONMUTE)
         {
            if(currentFrameLabel != "gaming" || this.game.visible)
            {
               if(this.s_channel[this.last_channel] != null)
               {
                  this.s_channel[this.last_channel].stop();
               }
               this.s_channel[this.last_channel] = param1.play(0,0,this.vol);
               ++this.last_channel;
               if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }
            }
         }
      }
      
      public function StopAllSounds() : void
      {
         this.last_channel = 0;
         while(this.last_channel < this.max_channels)
         {
            if(this.s_channel[this.last_channel] != null)
            {
               this.s_channel[this.last_channel].stop();
            }
            ++this.last_channel;
         }
         this.last_channel = 0;
      }
      
      public function NoMouse(param1:MovieClip) : void
      {
         param1.mouseEnabled = false;
         param1.mouseChildren = false;
      }
      
      public function NoMouse2(param1:*) : void
      {
         param1.mouseEnabled = false;
      }
      
      public function mouseMoveHandler(param1:MouseEvent) : void
      {
         this.momove = true;
      }
      
      public function handleHpBeep(param1:*) : void
      {
         try
         {
            this.hpbeepch.removeEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
            if(currentLabel == "gaming")
            {
               if(this.system_non_stop)
               {
                  if(this.hpwarning)
                  {
                     if(!this.mens[this.MP_myid].dead)
                     {
                        if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax < this.hp_warn_max)
                        {
                           if(!this.MP_spectator)
                           {
                              if(this.GLOBAL_REGEN_SPEED != 0)
                              {
                                 if(this.GLOBAL_REGEN_DELAY < 10)
                                 {
                                    this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                                 }
                              }
                           }
                           this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
                        }
                        else
                        {
                           this.hpwarning = false;
                        }
                     }
                  }
               }
            }
         }
         catch(e:Error)
         {
         }
      }
      
      public function UpdateWeps() : void
      {
         this.upd_weps_i = 0;
         while(this.upd_weps_i < 10)
         {
            this.weps["gi" + this.upd_weps_i].visible = false;
            this.upd_weps_i2 = 0;
            while(this.upd_weps_i2 < this.gunstotal && !this.weps["gi" + this.upd_weps_i].visible)
            {
               if(this.guns[this.upd_weps_i2].io)
               {
                  if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                  {
                     if(this.guns[this.upd_weps_i2].wep == this.upd_weps_i)
                     {
                        this.weps["gi" + this.upd_weps_i].visible = true;
                        if(this.mens[this.MP_myid].curwea == this.upd_weps_i2)
                        {
                           this.weps["gi" + this.upd_weps_i].alpha = 1;
                           if(this.weps["gi" + this.upd_weps_i].currentFrame != 1)
                           {
                              this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
                           }
                        }
                        else
                        {
                           this.weps["gi" + this.upd_weps_i].alpha = 0.4;
                        }
                     }
                  }
               }
               ++this.upd_weps_i2;
            }
            if(this.upd_weps_i == 0)
            {
               this.weps["gi" + this.upd_weps_i].visible = true;
               if(this.mens[this.MP_myid].curwea == -1)
               {
                  this.weps["gi" + this.upd_weps_i].alpha = 1;
                  if(this.weps["gi" + this.upd_weps_i].currentFrame != 1)
                  {
                     this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
                  }
               }
               else
               {
                  this.weps["gi" + this.upd_weps_i].alpha = 0.4;
               }
            }
            if(this.weps["gi" + this.upd_weps_i].visible)
            {
               this.weps["gi" + this.upd_weps_i].txt.text = this.upd_weps_i;
            }
            if(this.weps["gi" + this.upd_weps_i].currentFrame == 2)
            {
               this.weps["gi" + this.upd_weps_i].alpha = 0.7;
            }
            ++this.upd_weps_i;
         }
         this.upd_weps_i = 0;
         if(this.PLAZMA_GAME)
         {
            if(!this.MP_mode)
            {
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6)
               {
                  this.weps["te" + this.upd_weps_i].visible = false;
                  this.weps["sh" + this.upd_weps_i].visible = false;
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 0;
               this.upd_weps_i2 = 0;
               while(this.upd_weps_i2 < this.gunstotal)
               {
                  if(this.guns[this.upd_weps_i2].io)
                  {
                     if(this.guns[this.upd_weps_i2].model == "item_grenade")
                     {
                        if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                        {
                           if(this.upd_weps_i < 6)
                           {
                              this.weps["gr" + this.upd_weps_i].gotoAndStop(1);
                              ++this.upd_weps_i;
                           }
                        }
                     }
                  }
                  ++this.upd_weps_i2;
               }
               this.grenades_total = this.upd_weps_i;
            }
            else
            {
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_total)
               {
                  this.weps["gr" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               if(!this.MP_spectator)
               {
                  if(this.grenades_total > this.mxnds1 || this.grenades_port_total > this.mxnds2 || this.grenades_sh_total > this.mxnds3)
                  {
                     if(!this.firstframe)
                     {
                        this.stable = false;
                        this.unstable = 5;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.grenades_total + ">" + this.mxnds1 + " || " + this.grenades_port_total + ">" + this.mxnds2 + " || " + this.grenades_sh_total + ">" + this.mxnds3;
                     }
                  }
                  if(this.MP_app)
                  {
                     if(this.pspeed * 2 != 120 || this.pspeed != 60 || this.pspeed / 2 != 30)
                     {
                        this.stable = false;
                        this.unstable = 8;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.pspeed + "psp";
                        this.pspeed = 10 * 5 + 10;
                     }
                     if(this.mens[this.MP_myid].hea > 700 + Math.random() * 50)
                     {
                        this.stable = false;
                        this.unstable = 6;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.mens[this.MP_myid].hea + "hp" + " :: " + this.mens[this.MP_myid].hmax + "hmax";
                     }
                     if(this.mens[this.MP_myid].hea > this.mens[this.MP_myid].hmax)
                     {
                        this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                     }
                  }
               }
            }
            this.upd_weps_i;
            while(this.upd_weps_i < 6)
            {
               this.weps["gr" + this.upd_weps_i].gotoAndStop(2);
               ++this.upd_weps_i;
            }
            if(this.MP_mode)
            {
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_port_total)
               {
                  this.weps["te" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i;
               while(this.upd_weps_i < 6)
               {
                  this.weps["te" + this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_sh_total)
               {
                  this.weps["sh" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i;
               while(this.upd_weps_i < 6)
               {
                  this.weps["sh" + this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
            }
         }
         else
         {
            this.upd_weps_i = 0;
            while(this.upd_weps_i < 6)
            {
               this.weps["gr" + this.upd_weps_i].visible = false;
               this.weps["te" + this.upd_weps_i].visible = false;
               this.weps["sh" + this.upd_weps_i].visible = false;
               ++this.upd_weps_i;
            }
         }
         if(this.vehhp.visible)
         {
            this.weps.y = 41;
         }
         else
         {
            this.weps.y = 21;
         }
      }
      
      public function ExplodeShield(param1:int) : void
      {
         this.PlaySound(this.s_shnade_offline,this.shnades[param1].x,this.shnades[param1].y);
         this.Effect(this.shnades[param1].x,this.shnades[param1].y,6,0,0);
         var _loc2_:Number = 0;
         while(_loc2_ < Math.PI * 2)
         {
            this.Effect(this.shnades[param1].x + Math.sin(_loc2_) * Math.random() * 5,this.shnades[param1].y + Math.sin(_loc2_) * Math.random() * 5,8,Math.sin(_loc2_) * Math.random() * 15,Math.cos(_loc2_) * Math.random() * 15);
            _loc2_ += 0.25;
         }
      }
      
      public function CalcWepPriority(param1:MovieClip) : Number
      {
         this.cwp = 0;
         if(param1.picken_by != -1)
         {
            this.cwp_d = this.Dist2D(this.mens[param1.picken_by].x,this.mens[param1.picken_by].y,this.mens[param1.picken_by].tarx,this.mens[param1.picken_by].tary);
         }
         this.cwp += param1.stat_power * param1.stat_count / param1.totalFrames * 100;
         this.cwp += param1.stat_power * param1.stat_count * 6;
         this.cwp /= 2;
         this.cwp -= (param1.stat_averange + param1.av) * (param1.totalFrames / param1.stat_count);
         if(param1.stat_class == 2)
         {
            this.cwp *= 1.1;
         }
         if(param1.stat_class == 1)
         {
            this.cwp *= 1.7;
         }
         if(param1.stat_class == 5)
         {
            this.cwp *= 1.8;
         }
         if(param1.stat_class == 4)
         {
            this.cwp *= 0.9;
         }
         if(param1.stat_class == 6)
         {
            this.cwp *= 1;
         }
         if(param1.stat_class == 7)
         {
            this.cwp = 0;
         }
         if(param1.currentFrame < param1.totalFrames - 10 && !param1.ready)
         {
            this.cwp *= 0.1;
         }
         if(param1.picken_by != -1)
         {
            if(this.mens[param1.picken_by].hunt == -1)
            {
               if(!param1.ready)
               {
                  this.cwp += 100;
               }
            }
            if(this.cwp_d < 130)
            {
               if(param1.stat_class == 1 || param1.stat_class == 5 || param1.stat_class == 4)
               {
                  this.cwp *= 0.4;
               }
            }
            if(80 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
            if(90 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
         }
         return this.cwp;
      }
      
      public function min_max(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function zero_one(param1:Number) : Number
      {
         if(param1 > 1)
         {
            return 1;
         }
         if(param1 < 0)
         {
            return 0;
         }
         return param1;
      }
      
      public function difr(param1:Number, param2:Number, param3:Number) : Boolean
      {
         if(param1 > param2)
         {
            if(param1 - param2 < param3)
            {
               return true;
            }
         }
         if(param2 > param1)
         {
            if(param2 - param1 < param3)
            {
               return true;
            }
         }
         return false;
      }
      
      public function Math_abs(param1:Number) : Number
      {
         if(param1 < 0)
         {
            return -param1;
         }
         return param1;
      }
      
      public function Math_pow2(param1:Number) : Number
      {
         return param1 * param1;
      }
      
      public function get_fps() : void
      {
         this.fps_last = this.fps_now;
         this.fps_now = getTimer();
         this.fps_delta = this.fps_now - this.fps_last;
         this.GSPEED = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED * 3) / 4;
         this.GSPEED2 = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED2 * 3) / 4;
         if(this.timeshift > 0)
         {
            this.GSPEED *= 0.25;
            this.GSPEED2 *= 0.5;
         }
         if(this.MP_mode || this.SP_unlimit_framerate)
         {
            if(this.GET_LITE_PHYS())
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
            else
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
         }
         else
         {
            if(this.GSPEED > 1.5)
            {
               this.GSPEED = 1.5;
            }
            if(this.GSPEED2 > 1.5)
            {
               this.GSPEED2 = 1.5;
            }
         }
         if(this.GSPEED < 0.01)
         {
            this.GSPEED = 0.01;
         }
         if(this.GSPEED2 < 0.01)
         {
            this.GSPEED2 = 0.01;
         }
         if(this.INLAG && this.MP_mode)
         {
            this.GSPEED2 *= 0.01;
         }
      }
      
      public function ForceRasterize(param1:Sprite) : void
      {
         var _loc3_:BitmapData = null;
         var _loc4_:Matrix = null;
         var _loc5_:Bitmap = null;
         var _loc2_:Rectangle = param1.getBounds(param1);
         if(_loc2_.width > 1 && _loc2_.height > 1 && _loc2_.width < 8191 && _loc2_.height < 8191 && _loc2_.width * _loc2_.height < 16777215)
         {
            _loc3_ = new BitmapData(_loc2_.width,_loc2_.height,true,0);
            (_loc4_ = new Matrix()).translate(-_loc2_.x,-_loc2_.y);
            _loc3_.draw(param1,_loc4_);
            while(param1.numChildren > 0)
            {
               param1.removeChildAt(0);
            }
            param1.graphics.clear();
            (_loc5_ = new Bitmap(_loc3_)).x = _loc2_.x;
            _loc5_.y = _loc2_.y;
            param1.addChild(_loc5_);
            _loc5_.smoothing = this.HQ;
            param1.cacheAsBitmap = true;
         }
      }
      
      public function link_surface(param1:DisplayObject, param2:int) : void
      {
         this.i7 = this.surf_lnk.length;
         this.surf_lnk[this.i7] = param1;
         this.surf_lnk_to[this.i7] = param2;
      }
      
      public function VerticalTrace(param1:Number, param2:Number) : Boolean
      {
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.boxestotal)
         {
            if(param1 >= this.boxx[this.vtr_i2])
            {
               if(param1 <= this.boxx[this.vtr_i2] + this.boxw[this.vtr_i2])
               {
                  if(param2 >= this.boxy[this.vtr_i2])
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.vtr_i2].x)
            {
               if(param1 <= this.doors[this.vtr_i2].x + this.doors[this.vtr_i2].w)
               {
                  if(param2 >= this.doors[this.vtr_i2].y)
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.vtr_i2])
            {
               if(param1 <= this.wax[this.vtr_i2] + this.waw[this.vtr_i2])
               {
                  if(param2 >= this.way[this.vtr_i2])
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         return true;
      }
      
      public function WaterTrace(param1:Number, param2:Number) : Boolean
      {
         this.i2 = 0;
         while(this.i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.i2])
            {
               if(param1 <= this.wax[this.i2] + this.waw[this.i2])
               {
                  if(param2 >= this.way[this.i2])
                  {
                     if(param2 <= this.way[this.i2] + this.wah[this.i2])
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i2;
         }
         return false;
      }
      
      public function GenFlakes() : void
      {
         var _loc1_:Number = NaN;
         var _loc2_:Number = NaN;
         var _loc3_:Number = NaN;
         if(this.flakes_letitsnow && this.HQ && this.SUPER_COMPUTER)
         {
            this.flakes_total = 300;
            this.flakes = new Vector.<DisplayObject>(this.flakes_total,true);
            this.i = 0;
            while(this.i < this.flakes_total)
            {
               _loc1_ = Math.random() * 200 - 70;
               if(_loc1_ < 0)
               {
                  this.flakes[this.i] = this.graphics_3d_front.addChild(new flake());
               }
               else
               {
                  this.flakes[this.i] = this.graphics_3d.addChildAt(new flake(),0);
               }
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               this.flakes[this.i]._z = _loc1_;
               _loc2_ = Math.random() * Math.PI * 2;
               _loc3_ = Math.random() * 30 - 10;
               this.flakes[this.i].origin.x = Math.sin(_loc2_) * _loc3_;
               this.flakes[this.i].origin.y = Math.cos(_loc2_) * _loc3_;
               this.flakes[this.i].origin.rotation = Math.random() * 360;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i].s_alpha = this.flakes[this.i].alpha = (1 - (130 - _loc1_) * 0.002) * 0.6;
               this.flakes[this.i].hit = !this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y);
               this.flakes[this.i].neverhit = false;
               if(_loc1_ > 100)
               {
                  this.flakes[this.i].neverhit = true;
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               if(this.flakes[this.i].hit)
               {
                  this.flakes[this.i].alpha = 0;
                  this.flakes[this.i].visible = false;
               }
               else
               {
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               this.flakes[this.i].tox = this.flakes[this.i].toy = this.gravity;
               this.flakes[this.i]._scale = Math.random() * 0.4 + 0.2;
               this.flakes[this.i]._z *= 0.002;
               this.NoMouse(this.flakes[this.i]);
               ++this.i;
            }
         }
         else
         {
            this.flakes_total = 0;
         }
      }
      
      public function ThinkOfFlakes() : void
      {
         this.i = 0;
         while(this.i < this.flakes_total)
         {
            if(this.flakes[this.i]._x > this.screenX - this.game.x + this.flakes_spreadout)
            {
               this.flakes[this.i]._x -= this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._x < -this.game.x - this.flakes_spreadout)
            {
               this.flakes[this.i]._x += this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y > this.screenY - this.game.y + this.flakes_spreadout)
            {
               this.flakes[this.i]._y -= this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y < -this.game.y - this.flakes_spreadout)
            {
               this.flakes[this.i]._y += this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            this.flakes[this.i]._x += this.flakes[this.i].tox * this.GSPEED;
            this.flakes[this.i]._y += this.flakes[this.i].toy * this.GSPEED;
            this.flakes[this.i].x = this.flakes[this.i]._x - (this.flakes[this.i]._x - this.hscreenX + this.game.x) * this.flakes[this.i]._z;
            this.flakes[this.i].y = this.flakes[this.i]._y - (this.flakes[this.i]._y - this.hscreenY + this.game.y) * this.flakes[this.i]._z;
            this.flakes[this.i].scaleX = this.flakes[this.i].scaleY = this.flakes[this.i]._scale * (1 - this.flakes[this.i]._z);
            this.flakes[this.i].toy += this.gravity * 0.5 * this.GSPEED;
            this.flakes[this.i].tox *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].toy *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].rotation += Math.sin((this.flakes[this.i]._y + this.flakes[this.i]._x + this.flakes[this.i].rotation * 0.1) * 0.1 * Math.sin((this.flakes[this.i]._y * 0.1 + this.flakes[this.i]._x) * 0.001)) * 3 * this.GSPEED;
            if(!this.flakes[this.i].neverhit)
            {
               if(this.flakes[this.i].visible)
               {
                  if(this.flakes[this.i].hit)
                  {
                     if(this.flakes[this.i].alpha > 0)
                     {
                        this.flakes[this.i].alpha -= Math.max(0.01,0.05 * this.GSPEED);
                     }
                     else
                     {
                        this.flakes[this.i].visible = false;
                     }
                  }
                  else if(!this.TracePointNoRagdolls(this.flakes[this.i]._x,this.flakes[this.i]._y) || this.WaterTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
                  {
                     this.flakes[this.i].hit = true;
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function Effect(param1:Number, param2:Number, param3:int, param4:Number, param5:Number) : void
      {
         this.ok2 = false;
         if(param1 > -this.game.x / this.game_scale - 150 && param1 < -this.game.x / this.game_scale + this.screenX / this.game_scale + 150 && param2 > -this.game.y / this.game_scale - 150 && param2 < -this.game.y / this.game_scale + this.screenY / this.game_scale + 150)
         {
            this.ok2 = true;
         }
         if(this.ok2)
         {
            if(this.ef[this.nextef] != null)
            {
               if(this.game.contains(this.ef[this.nextef]))
               {
                  this.game.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
               else if(this.graphics_3d_front.contains(this.ef[this.nextef]))
               {
                  this.graphics_3d_front.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
            }
         }
         if(param3 == 0)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_blood());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 1;
               this.ef[this.nextef].float_frame = int(Math.random() * 10);
               this.ef[this.nextef].rotation = Math.random() * 360;
               if(this.effcolor >= 0)
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
               }
               else
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
               }
               if(!this.PLAZMA_GAME)
               {
                  this.ef[this.nextef].scaleX = 0.5;
                  this.ef[this.nextef].scaleY = 0.5;
               }
               this.ef[this.nextef].gotoAndStop(1);
               this.ef[this.nextef].framespeed = 0.7;
            }
         }
         else if(param3 == 1)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_iskra());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = Math.random() * 360;
            }
            this.PAlert(param1,param2);
            this.PlaySound(this.s_fail_shot,param1,param2);
         }
         else if(param3 == 2)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_bubble());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 2;
               param1 += -10 + Math.random() * 20;
               param2 += -10 + Math.random() * 20;
            }
         }
         else if(param3 == 3)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_splash());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               if(this.Math_abs(param5) < 5)
               {
                  this.ef[this.nextef].rotation = -20 + Math.random() * 40;
               }
               if(Math.random() > 0.5)
               {
                  this.ef[this.nextef].scaleX = -1;
               }
               this.ef[this.nextef].scaleY = 1 + this.Math_abs(param5) * Math.random() * 0.1;
            }
            if(Math.random() < 0.333)
            {
               this.PlaySound(this.s_water_splash1,param1,param2);
            }
            else if(Math.random() < 0.5)
            {
               this.PlaySound(this.s_water_splash2,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_water_splash3,param1,param2);
            }
         }
         else if(param3 == 4)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_fire());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].scaleX = param4;
               this.ef[this.nextef].scaleY = param4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].framespeed = 2;
            }
         }
         else if(param3 == 5)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = param4;
               param4 = 0;
            }
         }
         else if(param3 == 6)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail_target());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
            }
         }
         else if(param3 == 7)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_firespark());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 3;
            }
         }
         else if(param3 == 8)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_metal());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].gotoAndPlay(1);
            }
         }
         else if(param3 != 9)
         {
            if(param3 == 10)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_blood_sprite());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 5;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].gotoAndStop(1);
                  this.ef[this.nextef].float_frame = 1;
                  this.ef[this.nextef].framespeed = 0.7;
                  if(this.effcolor >= 0)
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
                  }
                  else
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
                  }
                  if(!this.PLAZMA_GAME)
                  {
                     this.ef[this.nextef].scaleX = 0.5;
                     this.ef[this.nextef].scaleY = 0.5;
                  }
               }
            }
            else if(param3 == 11)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_bfg());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 12)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_wood_debris());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 1;
                  this.ef[this.nextef].gotoAndPlay(1);
                  this.ef[this.nextef].picc.gotoAndStop(int(Math.random() * 2.99) + 1);
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  param4 *= 16;
                  param5 *= 16;
               }
            }
            else if(param3 == 13)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_cinetic());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = Math.random() * 360;
               }
            }
            else if(param3 == 14)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_teleport());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
               }
               if(param4 == 0)
               {
                  this.PlaySound(this.s_teleport,param1,param2);
               }
            }
            else if(param3 == 15)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_underwater());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
               }
            }
            else if(param3 == 16)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
               }
            }
            else if(param3 == 17)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail2());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 18)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma_bar());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 19)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new altblood());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].scaleY = this.ef[this.nextef].scaleX = Math.sqrt(param4 * param4 + param5 * param5) * 0.05;
                  this.ef[this.nextef].typ = 0;
               }
            }
            else if(param3 == 20)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_text_message());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 6;
                  this.ef[this.nextef].msgtext.text = this.str;
                  this.xx = this.ef[this.nextef].msgtext.textWidth + 10;
                  this.ef[this.nextef].msgtext.x = -this.xx / 2;
                  this.ef[this.nextef].msgtext.width = this.xx;
                  this.ef[this.nextef].strquad.x = this.ef[this.nextef].msgtext.x;
                  this.ef[this.nextef].strquad.scaleX = this.xx / 100;
                  this.ef[this.nextef].attached = this.spawn_text_for;
                  if(this.mens[this.spawn_text_for].dead)
                  {
                     this.ef[this.nextef].msgtext.alpha = 0.5;
                  }
               }
            }
            else if(param3 == 21)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail3());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
         }
         if(this.ok2)
         {
            this.ef[this.nextef].life = 0;
            this.ef[this.nextef].x = param1;
            this.ef[this.nextef].y = param2;
            if(this.ef[this.nextef].typ == 3)
            {
               this.ef[this.nextef].tox = param4;
               this.ef[this.nextef].toy = param5;
               this.ef[this.nextef].toang = 0;
            }
            else if(this.ef[this.nextef].typ == 1)
            {
               this.eftemp = Math.random() * 0.45 - 0.125;
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
               this.ef[this.nextef].toang = Math.random() * 30 - 15;
            }
            else if(this.ef[this.nextef].typ == 4)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 4;
               this.ef[this.nextef].tox = param4 + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 + Math.cos(this.ef_xx) * this.ef_yy - 2;
            }
            else if(this.ef[this.nextef].typ == 5)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.eftemp = Math.random() * 0.45 - 0.2;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
            }
            ++this.nextef;
            if(this.nextef >= this.maxef)
            {
               this.nextef = 0;
            }
         }
      }
      
      public function FlowAt(param1:Number, param2:Number, param3:int, param4:Number, param5:Number, param6:Number) : void
      {
         if(this.VIOLENCE)
         {
            if(this.game_scale < 1)
            {
               param6 = Math.max(param6 * this.game_scale,1);
            }
            while(param6 > 0)
            {
               if(this.effcolor >= 0 && (param6 > 1 && this.mens[this.effcolor].armored != 0 && (this.mens[this.effcolor].armored == 2 || this.mens[this.effcolor].armored == 1 && Math.random() > 0.5) || this.mens[this.effcolor].armored == 2))
               {
                  this.Effect(param1,param2,8,-param4 * 0.05,-param5 * 0.05);
               }
               else
               {
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,10,param4,param5);
               }
               param6--;
            }
         }
         else
         {
            this.Effect(param1,param2,19,param4,param5);
         }
      }
      
      public function nextpul() : void
      {
         ++this.pulscur;
         if(this.pulscur > this.pulsmax)
         {
            this.pulscur = 0;
         }
         this.nextpulf = true;
         this.nextpuli = 0;
         while(this.nextpuli <= this.pulsmax)
         {
            if((this.puls[this.pulscur] == null || !this.game.contains(this.puls[this.pulscur])) && (this.puls[this.pulscur] == null || !this.graphics_3d_front.contains(this.puls[this.pulscur])))
            {
               this.nextpulf = false;
               break;
            }
            if(this.puls[this.pulscur].visible == false)
            {
               if(this.game.contains(this.puls[this.pulscur]))
               {
                  this.game.removeChild(this.puls[this.pulscur]);
               }
               if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
               {
                  this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
               }
               this.puls[this.pulscur] = null;
               this.nextpulf = false;
               break;
            }
            ++this.pulscur;
            if(this.pulscur > this.pulsmax)
            {
               this.pulscur = 0;
            }
            ++this.nextpuli;
         }
         if(this.nextpulf)
         {
            ++this.pulsmax;
            this.pulscur = this.pulsmax;
         }
      }
      
      public function nextsh() : void
      {
         if(this.shnades_next == this.shnades_total)
         {
            ++this.shnades_total;
            this.shnades_next = this.shnades_total;
         }
         this.nextsh_i2 = 0;
         while(this.nextsh_i2 < this.shnades_total)
         {
            if(this.shnades[this.nextsh_i2].io == false)
            {
               this.shnades_next = this.nextsh_i2;
               break;
            }
            ++this.nextsh_i2;
         }
      }
      
      public function Say(param1:MovieClip, param2:*) : void
      {
         if(param1.voice != null)
         {
            param1.voice.stop();
         }
         param1.voice = param2.play();
         if(param1.voice != null)
         {
            param1.voice.soundTransform = new SoundTransform(this.FX_VOLUME * (param1.idd == this.MP_myid ? 3 : 2));
         }
      }
      
      public function SimHitSound(param1:MovieClip, param2:Number, param3:Number, param4:int) : void
      {
         if(param4 != 2)
         {
            if(param1.armored == 2)
            {
               this.PlaySound(this.s_metal_hit,param2,param3);
            }
            else if(param4)
            {
               this.PlaySound(this.s_blood_hit_sword,param2,param3);
            }
            else
            {
               this.PlaySound(this.s_blood_hit,param2,param3);
            }
         }
      }
      
      public function Dist2D(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         return Math.sqrt(this.Math_pow2(param1 - param3) + this.Math_pow2(param2 - param4));
      }
      
      public function VectorDist2D(param1:Number, param2:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2);
      }
      
      public function CreatePoint(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Boolean, param7:int, param8:int) : Number
      {
         var _loc9_:int = 0;
         this.cr_i4 = this.atotal;
         this.i5 = 0;
         while(this.i5 < this.atotal)
         {
            if(this.aio[this.i5] == -1)
            {
               this.cr_i4 = this.i5;
               _loc9_ = 0;
               while(_loc9_ < this.chtotal)
               {
                  if(this.chP[_loc9_] == this.i5 || this.chC[_loc9_] == this.i5)
                  {
                     this.chio[_loc9_] = -1;
                  }
                  _loc9_++;
               }
               break;
            }
            ++this.i5;
         }
         this.ax[this.cr_i4] = new Number(param1);
         this.ay[this.cr_i4] = new Number(param2);
         this.lax[this.cr_i4] = new Number(param1);
         this.lay[this.cr_i4] = new Number(param2);
         this.atox[this.cr_i4] = new Number(param3);
         this.atoy[this.cr_i4] = new Number(param4);
         this.aio[this.cr_i4] = true;
         this.amat[this.cr_i4] = new int(param7);
         this.arad[this.cr_i4] = new Number(param5);
         this.around[this.cr_i4] = new Boolean(param6);
         this.aof[this.cr_i4] = new int(param8);
         this.ablood[this.cr_i4] = new int(0);
         this.aactive[this.aof[this.cr_i4]] = new Boolean(false);
         this.atim[this.cr_i4] = new int(0);
         this.ainwater[this.cr_i4] = new Boolean(false);
         this.crjoint_cycle = 0;
         while(this.crjoint_cycle < this.watertotal && !this.ainwater[this.cr_i4])
         {
            if(this.ax[this.cr_i4] > this.wax[this.crjoint_cycle])
            {
               if(this.ax[this.cr_i4] < this.wax[this.crjoint_cycle] + this.waw[this.crjoint_cycle])
               {
                  if(this.ay[this.cr_i4] > this.way[this.crjoint_cycle])
                  {
                     if(this.ay[this.cr_i4] < this.way[this.crjoint_cycle] + this.wah[this.crjoint_cycle])
                     {
                        this.ainwater[this.cr_i4] = true;
                     }
                  }
               }
            }
            ++this.crjoint_cycle;
         }
         if(this.cr_i4 == this.atotal)
         {
            ++this.atotal;
         }
         return this.cr_i4;
      }
      
      public function WakeUpAtom(param1:int, param2:Boolean = true) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = true;
         if(param2)
         {
            this.atim[param1] = 0;
         }
      }
      
      public function ForceAtomSleep(param1:int) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = false;
      }
      
      public function DisposeAtom(param1:int) : void
      {
         var _loc2_:int = 0;
         _loc2_ = 0;
         while(_loc2_ < this.MP_myspecials_total)
         {
            if(this.MP_myspecials[_loc2_] != undefined)
            {
               if(this.MP_myspecials[_loc2_] != null)
               {
                  if(this.MP_myspecials[_loc2_].atom == param1)
                  {
                     this.MP_myspecials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         _loc2_ = 0;
         while(_loc2_ < this.MP_specials.length)
         {
            if(this.MP_specials[_loc2_] != undefined)
            {
               if(this.MP_specials[_loc2_] != null)
               {
                  if(this.MP_specials[_loc2_].atom == param1)
                  {
                     this.MP_specials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         this.aio[param1] = -1;
      }
      
      public function Connect(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number) : Number
      {
         this.cr_i4 = this.chtotal;
         this.i5 = 0;
         while(this.i5 < this.chtotal && this.cr_i4 != this.chtotal)
         {
            if(this.chio[this.i5] == -1)
            {
               if(this.chP[this.i5] == -1 || this.chC[this.i5] == -1)
               {
                  this.cr_i4 = this.i5;
               }
            }
            ++this.i5;
         }
         this.chP[this.cr_i4] = new int(param1);
         this.chC[this.cr_i4] = new int(param2);
         if(param4 != -1)
         {
            this.chdef[this.cr_i4] = new Number(param4);
         }
         else
         {
            this.chdef[this.cr_i4] = new Number(this.Dist2D(this.ax[param1],this.ay[param1],this.ax[param2],this.ay[param2]));
         }
         if(param5 == -1)
         {
            this.chdamp[this.cr_i4] = new Number(1);
         }
         else
         {
            this.chdamp[this.cr_i4] = new Number(param5);
         }
         this.chtypa[this.cr_i4] = new int(param3);
         this.chio[this.cr_i4] = true;
         if(this.cr_i4 == this.chtotal)
         {
            ++this.chtotal;
         }
         return this.cr_i4;
      }
      
      public function ReConnect(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.chP[param1] = param2;
         this.chC[param1] = param3;
         if(param5 != -1)
         {
            this.chdef[param1] = param5;
         }
         else
         {
            this.chdef[param1] = this.Dist2D(this.ax[param2],this.ay[param2],this.ax[param3],this.ay[param3]);
         }
         if(param6 == -1)
         {
            this.chdamp[param1] = 1;
         }
         else
         {
            this.chdamp[param1] = param6;
         }
         this.chtypa[param1] = param4;
         this.chio[param1] = true;
      }
      
      public function create_player(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.mens[this.playerstotal] = param1;
         param1.idd = new int(this.playerstotal);
         param1.side = new Number();
         if(Math.random() > 0.5)
         {
            param1.side = 1;
         }
         else
         {
            param1.side = -1;
         }
         param1.hea = new Number(param2);
         param1.hmax = new Number(param3);
         param1.boost = new int(0);
         param1.defih = new int(0);
         if(!this.FORCE_CUSTOM_MAP)
         {
            if(!this.MP_mode)
            {
               if(this.PRO_BOTS)
               {
                  if(!param1.isplayer)
                  {
                     if(param1.hmax > 0)
                     {
                        if(param1.hmax < 300)
                        {
                           if(param1.hea > 0)
                           {
                              param1.hea = (param1.hea + 300) / 2;
                           }
                           param1.hmax = (param1.hmax + 300) / 2;
                        }
                     }
                  }
               }
            }
         }
         param1.palette = new Array("-","-","-","-");
         param1.mp_controlled = new Boolean(false);
         param1.mp_packets = new int(-3);
         param1.mp_aliveping = new int(0);
         param1.mp_x = new Number(0);
         param1.mp_y = new Number(0);
         param1.mp_tox = new Number(0);
         param1.mp_toy = new Number(0);
         param1.mp_offset_x = new Number(0);
         param1.mp_offset_y = new Number(0);
         param1.login_name = new String();
         param1.login_name = "";
         param1.last_contact = new int(0);
         param1.enemy_vis_tim = new int(0);
         param1.lastshot = new String();
         param1.lastshotby = new int(param1.idd);
         param1.whenlastshot = new int(0);
         param1.lastshotbygun = new String("nothing");
         param1.botaction = 0;
         param1.io = new Boolean(true);
         param1.deadtim = new int(0);
         if(!this.MP_mode)
         {
            if(param1.isplayer)
            {
               param1.hea = 800 / param3 * param2;
               param1.hmax = 800;
               param1.nick = ".:Eric Gurt:.";
               this.aactive[0] = true;
            }
            else
            {
               param1.nick = "Usurpation Soldier";
            }
         }
         param1.nick = this.MP_mode ? "Marine" : this.CMPG_name;
         param1.step_sound_phase = new int(0);
         param1.pressure = new int(0);
         param1.wep_pause = new int(0);
         param1.voice = new SoundChannel();
         param1.idle_phase = new Number(0);
         param1.moving_speed = new Number(0);
         param1.stand = new Boolean(false);
         param1.sit = new Number(0);
         param1.tox = new Number(0);
         param1.toy = new Number(0);
         param1.armored = new int(0);
         param1.melee_ani = new Number(0);
         param1.melee_tim = new Number(0);
         param1.tarx = new Number(0);
         param1.tary = new Number(0);
         param1.regentim = new int(0);
         param1.hunt = new int(-1);
         param1.mobility = new Number(1);
         param1.team = new int(0);
         param1.rand = new Number(Math.random());
         param1.rand2 = new Number(Math.random());
         param1.rand3 = new Number(Math.random());
         param1.randtim = new Number(0);
         param1.act_fire = new Boolean(false);
         param1.act_movex = new int(0);
         param1.act_movey = new int(0);
         param1.ltox = new Number(0);
         param1.ltoy = new Number(0);
         param1.ang = new Number(0);
         param1.incar = new int(-1);
         param1.stability = new Number(1);
         param1.curwea = new int(-1);
         param1.waiting = 0;
         param1.inwater = new Boolean(false);
         param1.dead = new Boolean(false);
         param1.blood_red = new Number(1);
         param1.blood_green = new Number(0);
         param1.blood_blue = new Number(0);
         param1.ping = new int(0);
         param1.hp_head = new Number(Math.max(param1.hea * 0.4,30));
         param1.hp_body = new Number(Math.max(param1.hea * 0.6,30));
         param1.hp_legs = new Number(Math.max(param1.hea * 0.5,30));
         param1.hp_arms = new Number(Math.max(param1.hea * 0.4,30));
         param1.brk_head = new Boolean(false);
         param1.brk_body = new Boolean(false);
         param1.brk_legs = new Boolean(false);
         param1.brk_arms = new Boolean(false);
         param1.dying = new Boolean(false);
         param1.notspawned = new Boolean(true);
         param1.notseen = new Boolean(true);
         param1.b_toe = new int(this.CreatePoint(param1.x,param1.y - 31 - 3,0,0,7,false,1,this.playerstotal));
         param1.b_leg1 = new int(this.CreatePoint(param1.x - 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_leg2 = new int(this.CreatePoint(param1.x + 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_arm1 = new int(this.CreatePoint(param1.x - 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_arm2 = new int(this.CreatePoint(param1.x + 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_body = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 23,0,0,8,false,1,this.playerstotal));
         param1.b_brk1 = param1.b_body;
         param1.b_brk2 = param1.b_body;
         param1.b_head_start = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4,0,0,8,false,-1,this.playerstotal));
         param1.b_head_end = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4 - 9,0,0,8,false,1,this.playerstotal));
         param1.ch_leg1_max = new int(this.Connect(param1.b_toe,param1.b_leg1,2,31,-1));
         param1.ch_leg2_max = new int(this.Connect(param1.b_toe,param1.b_leg2,2,31,-1));
         param1.ch_leg1_min = new int(this.Connect(param1.b_toe,param1.b_leg1,1,20,-1));
         param1.ch_leg2_min = new int(this.Connect(param1.b_toe,param1.b_leg2,1,20,-1));
         param1.ch_leg1_damp = new int(this.Connect(param1.b_toe,param1.b_leg1,0,29,0.1));
         param1.ch_leg2_damp = new int(this.Connect(param1.b_toe,param1.b_leg2,0,29,0.1));
         param1.ch_arm1_max = new int(this.Connect(param1.b_body,param1.b_arm1,2,30,-1));
         param1.ch_arm2_max = new int(this.Connect(param1.b_body,param1.b_arm2,2,30,-1));
         param1.ch_arm1_min = new int(this.Connect(param1.b_body,param1.b_arm1,1,15,-1));
         param1.ch_arm2_min = new int(this.Connect(param1.b_body,param1.b_arm2,1,15,-1));
         param1.ch_body = new int(this.Connect(param1.b_toe,param1.b_body,0,this.normal_spine_length,-1));
         param1.ch_spine = new int(this.Connect(param1.b_toe,param1.b_head_start,0,this.normal_spine_length + this.normal_shoulder_length,-1));
         param1.ch_shoulder = new int(this.Connect(param1.b_body,param1.b_head_start,0,this.normal_shoulder_length,-1));
         param1.ch_head = new int(this.Connect(param1.b_head_start,param1.b_head_end,0,9,-1));
         param1.ch_body_ang1 = new int(this.Connect(param1.b_body,param1.b_leg1,1,50,-1));
         param1.ch_body_ang2 = new int(this.Connect(param1.b_body,param1.b_leg2,1,50,-1));
         param1.ch_body_ang3 = new int(this.Connect(param1.b_leg1,param1.b_leg2,1,5,0.4));
         param1.ch_body_ang4 = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,-1));
         param1.ch_body_ang4b = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,0.4));
         param1.ch_body_ang5 = new int(this.Connect(param1.b_toe,param1.b_head_end,1,36,-1));
         param1.gotoAndStop(2);
         param1.toe.bloddy.visible = false;
         param1.mdl_leg1_upper = new int(1);
         param1.mdl_leg1_middle = new int(1);
         param1.mdl_leg1_lower = new int(1);
         param1.mdl_leg2_upper = new int(1);
         param1.mdl_leg2_middle = new int(1);
         param1.mdl_leg2_lower = new int(1);
         param1.mdl_arm1_upper = new int(1);
         param1.mdl_arm1_lower = new int(1);
         param1.mdl_arm2_upper = new int(1);
         param1.mdl_arm2_lower = new int(1);
         param1.mdl_toe = new int(1);
         param1.mdl_body = new int(1);
         param1.mdl_head = new int(1);
         param1.armored = 1;
         param1.mdl_leg1_upper = 1;
         param1.mdl_leg1_middle = 1;
         param1.mdl_leg1_lower = 1;
         param1.mdl_leg2_upper = 1;
         param1.mdl_leg2_middle = 1;
         param1.mdl_leg2_lower = 1;
         param1.mdl_arm1_upper = 1;
         param1.mdl_arm1_lower = 1;
         param1.mdl_arm2_upper = 1;
         param1.mdl_arm2_lower = 1;
         param1.mdl_toe = 1;
         param1.mdl_body = 1;
         param1.mdl_head = 1;
         this.AskForCache(param1.head);
         this.AskForCache(param1.arm1);
         this.AskForCache(param1.arm2);
         this.AskForCache(param1.leg1);
         this.AskForCache(param1.leg2);
         this.AskForCache(param1.body);
         this.AskForCache(param1.toe);
         if(param1.hea <= 0)
         {
            param1.dead = true;
         }
         this.RedrawPsi(this.playerstotal);
         ++this.playerstotal;
      }
      
      public function create_gun(param1:MovieClip) : void
      {
         this.AskForCache(param1);
         this.guns[this.gunstotal] = param1;
         param1.idd = this.gunstotal;
         param1.b_p1 = this.CreatePoint(param1.x + param1.len1,param1.y,0,0,param1.size1,false,2,-this.gunstotal - 1);
         param1.b_p2 = this.CreatePoint(param1.x + param1.len2,param1.y,0,0,param1.size2,false,2,-this.gunstotal - 1);
         param1.ch_ch1 = this.Connect(param1.b_p1,param1.b_p2,0,this.Math_abs(param1.len1 - param1.len2),-1);
         if(!this.FORCE_CUSTOM_MAP)
         {
            if(!this.MP_mode)
            {
               if(this.LOW_HPS)
               {
                  if(param1.stat_class == 2)
                  {
                     if(param1.upg == 0)
                     {
                        param1.stat_power *= 0.4;
                     }
                     if(param1.upg == 1)
                     {
                        param1.stat_power *= 0.6;
                     }
                  }
               }
            }
         }
         param1.av = new Number(param1.stat_averange_min);
         param1.deadtim = new int(0);
         param1.io = new Boolean(true);
         param1.floatframe = new Number(2);
         param1.picken_by = new int(-1);
         ++this.gunstotal;
      }
      
      public function GunModelToGunName(param1:String) : String
      {
         var _loc2_:String = "";
         switch(param1)
         {
            case "gun_rifle":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_rifle_b":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_pistol":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol_b":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol2":
               _loc2_ = "Pistol CS-Pro";
               break;
            case "gun_vehgun":
               _loc2_ = "";
               break;
            case "gun_gl":
               _loc2_ = "Grenade Launcher CS-SpamThemBaby";
               break;
            case "gun_sp_sh":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_rl":
               _loc2_ = "Rocket Launcher CS-LitBro";
               break;
            case "gun_railgun":
               _loc2_ = "Lite Railgun v01 CS-HShot";
               break;
            case "gun_railgun2":
               _loc2_ = "Heavy Railgun v04 CS-OneSOneK";
               break;
            case "gun_sniper":
               _loc2_ = "Sniper Rifle CS-YippeeKiYay";
               break;
            case "gun_shotgun":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_shotgun_b":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_apistol":
               _loc2_ = "Alien Pistol";
               break;
            case "gun_arifle":
               _loc2_ = "Alien Rifle";
               break;
            case "gun_arifle2":
               _loc2_ = "Alien Shotgun";
               break;
            case "gun_vehcannon":
               _loc2_ = "";
               break;
            case "gun_minigun":
               _loc2_ = "Minigun C-02m";
               break;
            case "gun_defibrillator":
               _loc2_ = "Defibrillator";
               break;
            case "gun_bfg":
               _loc2_ = "CS-BNG";
               break;
            case "gun_raygun":
               _loc2_ = "Ray Gun C-01y";
               break;
            case "gun_vehminigun":
               _loc2_ = "";
               break;
            case "gun_vehminigl":
               _loc2_ = "";
               break;
            case "gun_real_shotgun":
               _loc2_ = "Shotgun CS-DAZ";
               break;
            case "gun_real_rifle":
               _loc2_ = "Assault Rifle CS-RC";
               break;
            case "gun_oicw":
               _loc2_ = "Combat Rifle CS-OICW";
               break;
            case "gun_plasmagun":
               _loc2_ = "Plasmagun CS-Bloom";
               break;
            case "item_grenade":
               _loc2_ = "Grenade C-00n";
               break;
            case "item_port":
               _loc2_ = "Teleport Grenade v03 CS-PortNade";
               break;
            case "item_shield":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_vgun":
               _loc2_ = "Drone Gun CS-Virus";
               break;
            case "gun_rayrifle":
               _loc2_ = "Ray Rifle TCoRR";
               break;
            case "gun_pixel_rifle":
               _loc2_ = "Star Defender Rifle";
               break;
            case "gun_pixel_rl":
               _loc2_ = "Star Defender Rocket Launcher";
               break;
            case "darkstar_1_assault_rifle":
               _loc2_ = "CP-Assault Rifle";
               break;
            case "darkstar_1_gauss_rifle":
               _loc2_ = "CS-GaussRifle";
               break;
            case "darkstar_1_minigun":
               _loc2_ = "LMG-01m";
               break;
            case "darkstar_1_phanx_rifle":
               _loc2_ = "PHANX-92 Rifle";
               break;
            case "darkstar_1_usniper":
               _loc2_ = "Alien Sniper Rifle";
               break;
            case "lostmydollar_av135":
               _loc2_ = "AV-135";
               break;
            case "lostmydollar_needle":
               _loc2_ = "Needle";
               break;
            case "lostmydollar_qccv50":
               _loc2_ = "QCcV-50 Little Bastard";
               break;
            case "lostmydollar_rmk36":
               _loc2_ = "RMK-36";
               break;
            case "lostmydollar_rpg":
               _loc2_ = "RPG";
               break;
            case "lazyrain_alien_laser_rifle":
               _loc2_ = "Alien Laser Rifle \"Heater\"";
               break;
            case "lazyrain_alien_laser_rifle2":
               _loc2_ = "Alien Laser Rifle \"Heater-2\"";
               break;
            case "lazyrain_cannon":
               _loc2_ = "CS-Autocannon";
               break;
            case "moonhawk_phantom":
               _loc2_ = "Crossfire CR-45 Phantom";
               break;
            case "moonhawk_smg":
               _loc2_ = "Crossfire CR-42 Ghost";
               break;
            case "ditzy_energy_rifle":
               _loc2_ = "Energy Rifle";
               break;
            case "roxxar_marksman_rifle":
               _loc2_ = "Falkonian Marksman Rifle";
               break;
            case "roxxar_pistol":
               _loc2_ = "Falkonian Pistol";
               break;
            case "roxxar_rifle":
               _loc2_ = "Falkonian Shotgun";
               break;
            case "roxxar_shotgun":
               _loc2_ = "Falkonian Grenade Launcher";
               break;
            default:
               _loc2_ = param1;
         }
         return _loc2_;
      }
      
      public function MakeGunByClass(param1:String) : *
      {
         this.mcz = null;
         if(param1 == this.cet("gun_rifle","3ab1b74070fa59c099c5ecc86f207241",9))
         {
            this.mcz = this.game.addChildAt(new gun_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rifle_b","3f945cfa330d80f7f4aa9b21ad2f5a42",11))
         {
            this.mcz = this.game.addChildAt(new gun_rifle_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol","77a0571b536742840a0279e738440627",10))
         {
            this.mcz = this.game.addChildAt(new gun_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol_b","31eda441e17305c81c05b97e018cc634",12))
         {
            this.mcz = this.game.addChildAt(new gun_pistol_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun","415ef8399b45ea3a1337fe00a95d810b",11))
         {
            this.mcz = this.game.addChildAt(new gun_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun_b","5396d129da7ece2e91d0c6c8ecd84c50",13))
         {
            this.mcz = this.game.addChildAt(new gun_shotgun_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol2","370fa991726bf897be0087ac9309fca8",11))
         {
            this.mcz = this.game.addChildAt(new gun_pistol2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehgun","41233a38507aab43cdb2bd7dfc260322",10))
         {
            this.mcz = this.game.addChildAt(new gun_vehgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_gl","124e082fd5901eef18efe64ea1ec47bd",6))
         {
            this.mcz = this.game.addChildAt(new gun_gl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sp_sh","b50ce24aaa1bd1fcb57052c5ef85683d",9))
         {
            this.mcz = this.game.addChildAt(new gun_sp_sh(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rl","ce16e5fb81fcf5895b8f0f82c2b61931",6))
         {
            this.mcz = this.game.addChildAt(new gun_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vgun","c9f01cd44cbf3c3bc382c936b1578da0",8))
         {
            this.mcz = this.game.addChildAt(new gun_vgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun","34949cbb8775a6d7f0e87bccb1052c75",11))
         {
            this.mcz = this.game.addChildAt(new gun_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun2","8cb1b5adde810239b95393e735ea8d98",12))
         {
            this.mcz = this.game.addChildAt(new gun_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sniper","2a6ecb6af19b45dae8e269ac8c1fc29b",10))
         {
            this.mcz = this.game.addChildAt(new gun_sniper(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_apistol","7ad54d59cd7e1f0023233b3a3e542f4f",11))
         {
            this.mcz = this.game.addChildAt(new gun_apistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle","f78f35befeb63a9b9f65d25be16a8d1c",10))
         {
            this.mcz = this.game.addChildAt(new gun_arifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle2","d4213d2caffd7466effab9df24d0f2a4",11))
         {
            this.mcz = this.game.addChildAt(new gun_arifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehcannon","fcecf3096d5987bf463c6ad8c0e194d5",13))
         {
            this.mcz = this.game.addChildAt(new gun_vehcannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_minigun","15fd37cf16c85d4f926db7783a6e55ac",11))
         {
            this.mcz = this.game.addChildAt(new gun_m4a1(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_m4a1","a28254d70ae03aec8e21338d5e0abe39",8))
         {
            this.mcz = this.game.addChildAt(new m4a1_real(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_glock","aad841f699bdd36f5c97c0e3e4c21b09",9))
         {
            this.mcz = this.game.addChildAt(new gun_pistol3(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_defibrillator","0e0da5f8e3ee8197a5b7abe55d66cc25",17) || param1 == this.cet("gun_defecator","5295e112d2ed04fa6b1d650f64e18894",13))
         {
            this.mcz = this.game.addChildAt(new gun_defibrillator(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_bfg","f519f24bf0eb33b05af7cc56cef4bcc7",7))
         {
            this.mcz = this.game.addChildAt(new gun_bfg(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_raygun","93292a011b8bac193d0977d6cb6c702c",10) || param1 == this.cet("gun_plasmacannon","31ebeaa0c1211f780fa83462f9a2f2dd",16))
         {
            this.mcz = this.game.addChildAt(new gun_plasmacannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigun","eb216db5c09bfdd2bad7bd957ebd9f47",14))
         {
            this.mcz = this.game.addChildAt(new gun_vehminigun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigl","14b3627ac631c7d315b5443a7b6f0be2",13))
         {
            this.mcz = this.game.addChildAt(new gun_vehminigl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_shotgun","267a94133b231f1b61984bb67b85b4cd",16))
         {
            this.mcz = this.game.addChildAt(new gun_real_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_rifle","afae2f386c07ad4806d5c292d09ce59a",14))
         {
            this.mcz = this.game.addChildAt(new gun_real_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_oicw","e99f69bfc8208ba382780144cc489a82",8))
         {
            this.mcz = this.game.addChildAt(new gun_oicw(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_plasmagun","1bc724fe18dd3764fbe5dd45a82d0ed4",13))
         {
            this.mcz = this.game.addChildAt(new gun_plasmagun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rayrifle","7a81778f835168b408427c6aa36b6966",12))
         {
            this.mcz = this.game.addChildAt(new gun_rayrifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rifle","61350cd52eb6e4f67a7b3c0ef5a1bd75",15))
         {
            this.mcz = this.game.addChildAt(new gun_pixel_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rl","210b531c94418c4d259e3df067333403",12))
         {
            this.mcz = this.game.addChildAt(new gun_pixel_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_assault_rifle","883dfb52e34801d3a872f94090da4663",24))
         {
            this.mcz = this.game.addChildAt(new darkstar_1_assault_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_gauss_rifle","d608d955fee67229ba7631644a68fa68",22))
         {
            this.mcz = this.game.addChildAt(new darkstar_1_gauss_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_minigun","ac2ed4c8fadacec88cecf9d286d509b4",18))
         {
            this.mcz = this.game.addChildAt(new darkstar_1_minigun(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_phanx_rifle","a82d357e7fdfe4678d99d522aabbe7d2",22))
         {
            this.mcz = this.game.addChildAt(new darkstar_1_phanx_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_usniper","44589fcd8475b6336e87e9e53cc5db6a",18))
         {
            this.mcz = this.game.addChildAt(new darkstar_1_usniper(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_av135","6352455ae32e8de36677477292f766b2",18))
         {
            this.mcz = this.game.addChildAt(new lostmydollar_av135(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_needle","c09467957a7ce187555405c6c3a20744",19))
         {
            this.mcz = this.game.addChildAt(new lostmydollar_needle(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_qccv50","b7f0280c66bee8c46181ff8af01434df",19))
         {
            this.mcz = this.game.addChildAt(new lostmydollar_qccv50(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rmk36","139bbeb4281bf164ca40c2a646fb1564",18))
         {
            this.mcz = this.game.addChildAt(new lostmydollar_rmk36(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rpg","abefe903f1d997bccdb7fcd7189c6821",16))
         {
            this.mcz = this.game.addChildAt(new lostmydollar_rpg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle","bd84840f5216bedb3c64620286ef0765",26))
         {
            this.mcz = this.game.addChildAt(new lazyrain_alien_laser_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle2","7f0e016ab35bfea35a25bb1eb20200fa",27))
         {
            this.mcz = this.game.addChildAt(new lazyrain_alien_laser_rifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_cannon","6b47cf23fe203a1cad4baa64c7db691b",15))
         {
            this.mcz = this.game.addChildAt(new lazyrain_cannon(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_phantom","acafe3e12644f0e2a79105284532eba3",16))
         {
            this.mcz = this.game.addChildAt(new moonhawk_phantom(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_smg","c22f2fe867fba9509adef95961017f9b",12))
         {
            this.mcz = this.game.addChildAt(new moonhawk_smg(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_energy_rifle","a31ab37d1f8c0ab56d5df4856bc0db9a",18))
         {
            this.mcz = this.game.addChildAt(new ditzy_energy_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_marksman_rifle","02e22640317636a85a7b57b46d8cf3f1",21))
         {
            this.mcz = this.game.addChildAt(new roxxar_marksman_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_pistol","ff5e798f12118fe1dec68db7daea066c",13))
         {
            this.mcz = this.game.addChildAt(new roxxar_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_rifle","564c8fd9fdc7bccb8546a8afe5946186",12))
         {
            this.mcz = this.game.addChildAt(new roxxar_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_shotgun","37fc4e8062034b9f271ef19537ba6319",14))
         {
            this.mcz = this.game.addChildAt(new roxxar_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("item_grenade","99a10febbc7ad986b6e20a240e978e12",12))
         {
            this.mcz = this.game.addChildAt(new item_grenade(),this.game.numChildren);
            ++this.mxnds1;
         }
         if(param1 == this.cet("item_port","5be0e3b089b733927cfdd6cb0f27fd4a",9))
         {
            this.mcz = this.game.addChildAt(new item_grenade_port(),this.game.numChildren);
            ++this.mxnds2;
         }
         if(param1 == this.cet("item_shield","4b7b485644d249c686e46726006cf049",11))
         {
            this.mcz = this.game.addChildAt(new item_grenade_shield(),this.game.numChildren);
            ++this.mxnds3;
         }
         if(this.mcz != null)
         {
            this.NoMouse(this.mcz);
            this.mcz.onshot = -1;
            this.mcz.speed_multiplier = 1;
            this.mcz.recoil_multiplier = 1;
         }
         return this.mcz;
      }
      
      public function TraceBg(param1:Number, param2:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= this.bgx[this.i3])
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3])
               {
                  if(param2 >= this.bgy[this.i3])
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3])
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function TraceBgFalloff(param1:Number, param2:Number, param3:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= this.bgx[this.i3] - param3)
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3] + param3)
               {
                  if(param2 >= this.bgy[this.i3] - param3)
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3] + param3)
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function UpdateCharProps(param1:MovieClip) : void
      {
         if(param1.char == 1 || param1.char >= 40 && param1.char <= 49 || param1.char == 83 || param1.char == 84)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!this.MP_mode)
            {
               if(param1.char != 83 && param1.char != 84)
               {
                  param1.mdl_head = this.skin_model[0];
                  if(this.skin_model[0] >= 49)
                  {
                     param1.mdl_body = this.skin_model[0];
                     param1.mdl_leg1_upper = this.skin_model[0];
                     param1.mdl_leg1_middle = this.skin_model[0];
                     param1.mdl_leg1_lower = this.skin_model[0];
                     param1.mdl_leg2_upper = this.skin_model[0];
                     param1.mdl_leg2_middle = this.skin_model[0];
                     param1.mdl_leg2_lower = this.skin_model[0];
                     param1.mdl_arm1_upper = this.skin_model[0];
                     param1.mdl_arm1_lower = this.skin_model[0];
                     param1.mdl_arm2_upper = this.skin_model[0];
                     param1.mdl_arm2_lower = this.skin_model[0];
                     param1.mobility = 0.75;
                     this.arad[param1.b_body] = 8 * 2;
                     this.arad[param1.b_toe] = 7 * 2;
                     this.arad[param1.b_leg1] = 6 * 2;
                     this.arad[param1.b_leg2] = 6 * 2;
                     this.arad[param1.b_arm1] = 3 * 1.5;
                     this.arad[param1.b_arm2] = 3 * 1.5;
                     this.arad[param1.b_head_start] = 8 * 1.5;
                     this.arad[param1.b_head_end] = 8 * 1.5;
                  }
               }
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 2 || param1.char == 70 || param1.char == 71 || param1.char == 79 || param1.char == 80)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(param1.char == 70)
            {
               param1.nick = "Usurpation Destroyer";
               param1.blood_red = 1;
               param1.blood_green = 2;
               param1.blood_blue = 0;
            }
            else if(param1.char == 71)
            {
               param1.nick = "Usurpation Soldier";
               param1.blood_red = 0.2;
               param1.blood_green = 0.9;
               param1.blood_blue = 1;
            }
            else
            {
               param1.nick = "Usurpation Soldier";
               param1.blood_red = 0.3;
               param1.blood_green = 1.3;
               param1.blood_blue = 2;
            }
         }
         else if(param1.char == 3 || param1.char == 61 || param1.char == 72 || param1.char == 75 || param1.char == 76)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = this.PROXY_NAME;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
            if(!this.MP_mode && !this.FORCE_CUSTOM_MAP && param1.char == 3)
            {
               param1.mdl_head = this.skin_model[1];
            }
            if(!this.MP_mode)
            {
               this.i3 = 1;
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         else if(param1.char == 4)
         {
            param1.armored = 2;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android T-01187";
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 33)
         {
            param1.armored = 2;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android ATM-105";
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 5)
         {
            param1.armored = 2;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Drone Controller";
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 6)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Advanced Usurpation Soldier";
            }
            param1.blood_red = 0.1;
            param1.blood_green = 0.8;
            param1.blood_blue = 1;
         }
         else if(param1.char == 7)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.mobility = 0.5;
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Heavy";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_leg1] = 6 * 1.5;
               this.arad[param1.b_leg2] = 6 * 1.5;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 11)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.mobility = 1;
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Boss";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_leg1] = 6 * 2;
               this.arad[param1.b_leg2] = 6 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 12 || param1.char == 17)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.mobility = 1.25;
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Ghost";
            }
            param1.blood_red = 1;
            param1.blood_green = 0.8;
            param1.blood_blue = 0.8;
         }
         else if(param1.char == 8 || param1.char == 77 || param1.char == 78)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Lite";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 32 || param1.char == 89 || param1.char == 90)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Protector";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 9 || param1.char == 81 || param1.char == 82)
         {
            param1.armored = 2;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android SLC-56";
            }
            if(param1.char == 9)
            {
               param1.mobility = 2;
            }
            else
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 13 || param1.char == 73 || param1.char == 74)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.nick = this.NOIR_NAME;
            if(param1.char == 13)
            {
               param1.mobility = 0.85;
            }
            else
            {
               param1.mobility = 1;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 23 || param1.char == 24 || param1.char == 25 || param1.char == 26)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.nick = "Guard";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 18 || param1.char == 21)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.nick = "Star Defender";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 14 || param1.char == 15 || param1.char == 29 || param1.char == 85 || param1.char == 86)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               if(param1.char == 15)
               {
                  param1.nick = "Phoenix Falkok";
               }
               else if(param1.char == 29)
               {
                  param1.nick = "Falkok Boss";
               }
               else
               {
                  param1.nick = "Falkok";
               }
            }
            param1.mobility = 0.6;
            if(param1.char == 85 || param1.char == 86)
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0.31;
            param1.blood_green = 0.62;
            param1.blood_blue = 1.88;
         }
         else if(param1.char == 31)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Reakhohsha Operative";
            }
            param1.mobility = 0.9;
            param1.blood_red = 222 / 127;
            param1.blood_green = 129 / 127;
            param1.blood_blue = 223 / 127;
         }
         else if(param1.char == 16 || param1.char == 27 || param1.char == 28)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Grub";
            }
            param1.mobility = 0.6;
            param1.blood_red = 1.8;
            param1.blood_green = 1.5;
            param1.blood_blue = 0.4;
         }
         else if(param1.char == 19 || param1.char == 87 || param1.char == 88)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Raven";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else
         {
            param1.armored = 0;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         if(Boolean(param1.charset_by_user) || this.MP_mode && this.MP_type != 2)
         {
            param1.mobility = 1;
         }
         if(this.MP_mode)
         {
            if(this.MP_myid == param1.idd)
            {
               param1.nick = this.MP_nick;
            }
         }
      }
      
      public function UpdateLightmap(param1:Boolean) : void
      {
         var a:uint = 0;
         var g:Sprite = null;
         var forced:Boolean = param1;
         if(forced || this.optimalupd)
         {
            if(this.HQ)
            {
               a = uint(getTimer());
               this.bmpData = this.bmpData_backed.clone();
               this.i4 = 0;
               while(this.i4 < this.lampstotal)
               {
                  if(this.lamps_power2[this.i4] != 0)
                  {
                     g = this.lamps_sprites[this.i4];
                     try
                     {
                        this.bmpData.drawWithQuality(g,this.lightmap_ma,null,null,null,true,StageQuality.BEST);
                     }
                     catch(e:*)
                     {
                        bmpData.draw(g,lightmap_ma,null,null,null,true);
                     }
                  }
                  ++this.i4;
               }
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1,0,0,0,255));
               this.shadowbmp.bitmapData = this.bmpData;
               this.shadowbmp.smoothing = true;
               this.optimalupd = this.MP_mode ? getTimer() - a < 50 : getTimer() - a < 250;
               if(this.LITE_PHYS)
               {
                  this.optimalupd = false;
               }
               if(!this.optimalupd)
               {
                  this.bmpData_backed.dispose();
                  this.i4 = 0;
                  while(this.i4 < this.lampstotal)
                  {
                     this.lamps_sprites[this.i4] = null;
                     ++this.i4;
                  }
                  this.lamps_sprites = new Array();
               }
            }
         }
      }
      
      public function DimLight(param1:int) : void
      {
         this.lamps_power2[param1] = 0;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].visible = false;
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 0;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function EnLight(param1:int) : void
      {
         this.lamps_power2[param1] = 1;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 1;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function ShotLight(param1:int) : void
      {
         this.Effect(this.lamps_x[param1],this.lamps_y[param1],1,0,0);
         this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
         this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
         this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
         if(Math.random() > 0.5)
         {
            this.PlaySound(this.s_glass1,this.lamps_x[param1],this.lamps_y[param1]);
         }
         else
         {
            this.PlaySound(this.s_glass2,this.lamps_x[param1],this.lamps_y[param1]);
         }
         this.DimLight(param1);
      }
      
      public function addNearBoxBSP(param1:int) : void
      {
         var _loc2_:int = 0;
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         var _loc7_:int = 0;
         var _loc8_:int = 0;
         _loc2_ = this.MP_mode ? 3 : 1;
         _loc3_ = Math.floor((this.boxx[param1] - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc4_ = Math.floor((this.boxy[param1] - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc5_ = Math.ceil((this.boxx[param1] + this.boxw[param1] - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc6_ = Math.ceil((this.boxy[param1] + this.boxh[param1] - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc7_ = _loc3_;
         while(_loc7_ <= _loc5_)
         {
            _loc8_ = _loc4_;
            while(_loc8_ <= _loc6_)
            {
               this.NearBoxBSP[_loc7_][_loc8_].push(param1);
               _loc8_++;
            }
            _loc7_++;
         }
      }
      
      public function GetNearBoxBSP_at(param1:int, param2:int) : Vector.<int>
      {
         param1 = (param1 - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize;
         param2 = (param2 - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize;
         if(param1 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param1 >= this.NearBoxBSP_width)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 >= this.NearBoxBSP_height)
         {
            return this.NearBoxBSP_empty;
         }
         return this.NearBoxBSP[param1][param2];
      }
      
      public function PushSynonym(param1:String, param2:int) : void
      {
         if(param1 != undefined && param1.charAt(0) == "#")
         {
            this.synonym_uid[this.synonym_uid.length] = param1;
            this.synonym_id[this.synonym_id.length] = param2;
         }
      }
      
      public function DecodeUID(param1:String) : *
      {
         if(param1.charAt(0) == "#")
         {
            if(this.synonym_id[this.synonym_uid.indexOf(param1)] == undefined)
            {
               return param1;
            }
            return this.synonym_id[this.synonym_uid.indexOf(param1)];
         }
         if(int(param1) + "" == param1)
         {
            return int(param1);
         }
         return param1;
      }
      
      public function movieClipHasLabel(param1:MovieClip, param2:String) : Boolean
      {
         var _loc3_:int = 0;
         var _loc4_:FrameLabel = null;
         _loc3_ = int(param1.currentLabels.length);
         this.i = 0;
         while(this.i < _loc3_)
         {
            if((_loc4_ = param1.currentLabels[this.i]).name == param2)
            {
               return true;
            }
            ++this.i;
         }
         return false;
      }
      
      public function NumberLimited(param1:String) : Number
      {
         var _loc2_:Number = NaN;
         var _loc3_:* = null;
         _loc2_ = Number(param1);
         if(_loc2_ > 1000000000)
         {
            return 1000000000;
         }
         _loc3_ = _loc2_ + "";
         if(param1 != _loc3_)
         {
            return Math.pow(10,param1.length) - 1;
         }
         return _loc2_;
      }
      
      public function UserSays(param1:int, param2:String) : void
      {
         if(this.user_says_trigger >= 0)
         {
            this.user_says_id = param1;
            this.user_says_text = param2;
            this.EXEC_TRIGGER(this.user_says_trigger);
         }
      }
      
      public function LoadMap() : void
      {
         var loadmap_stage:String = null;
         var POST_ERR_CODE:* = undefined;
         var xml:XML = null;
         var a:* = undefined;
         var b:* = undefined;
         var c:* = undefined;
         var bookInfo:XML = null;
         var brdr:int = 0;
         var TEST_STRING:String = null;
         var watercolor1:String = null;
         var watercolor2:String = null;
         var region_i:int = 0;
         var trigger_i:int = 0;
         var timer_i:int = 0;
         var player_i:int = 0;
         var half_step_size:int = 0;
         var ldis:Number = NaN;
         var brtns:Number = NaN;
         var col:Array = null;
         var len:int = 0;
         var _mtx:Matrix = null;
         var SnowShape:* = undefined;
         var my_date:Date = null;
         var traces_start:Number = NaN;
         var traces_end:* = undefined;
         var bookInfo2:XML = null;
         var bitmap_data:BitmapData = null;
         var color_hex:String = null;
         var dec:uint = 0;
         var n:* = undefined;
         var model:* = undefined;
         var new_model:String = null;
         var new_command:int = 0;
         var new_upg:int = 0;
         var free_mc:* = undefined;
         var this_limit:Number = NaN;
         var cur_label:String = null;
         var offset_x:Number = NaN;
         var offset_y:Number = NaN;
         var ct:ColorTransform = null;
         var snow:Sprite = null;
         var rad:Number = NaN;
         var global_lamps_power:Number = NaN;
         var falloff:Number = NaN;
         var fallstep:Number = NaN;
         var lamps_from:int = 0;
         var bmp_w:* = undefined;
         var bmp_h:int = 0;
         var g:Sprite = null;
         var cTransform:ColorTransform = null;
         var clrs:Array = null;
         var poss:Array = null;
         var dip:Number = NaN;
         var alphas:Array = null;
         var matr0:Matrix = null;
         var siz:Number = NaN;
         var lamp_step:Number = NaN;
         var an:Number = NaN;
         var this_rad:Number = NaN;
         var xx:* = undefined;
         var yy:Number = NaN;
         var temp_snow:* = undefined;
         var player_version_os:String = null;
         var crash_failed:* = undefined;
         var crash_done:* = undefined;
         var _fullInfo:String = null;
         var _osSplitArr:Array = null;
         var _versionSplitArr:Array = null;
         var _osInfo:String = null;
         var _versionInfo:Number = NaN;
         this.tnds = 10;
         loadmap_stage = "0";
         this.mxnds1 = 0;
         this.mxnds2 = 0;
         this.mxnds3 = 0;
         this.tnds = 10;
         try
         {
            this.optimalupd = true;
            POST_ERR_CODE = "";
            this.CUR_MUSIC_VOLUME = 0;
            this.MUSIC_COLDDOWN = 100;
            loadmap_stage = String(1);
            loadmap_stage = String(1001);
            this.SHOW_FRAG_MESSAGES = true;
            this.level_variables = {};
            this.dm_slots_on_spawn = new Array();
            this.dm_max_guns_on_spawn = 3;
            this.user_says_trigger = -1;
            this.multiplayer_repsawn_timer_speed = 1;
            this.ENABLE_LEVEL_LOGIC_ERRORS = false;
            if(this.MP_app)
            {
               this.dm_slots_on_spawn = [6,1,4,2,3,8,5,9,7];
            }
            if(!this.MP_spectator)
            {
               Mouse.hide();
            }
            else
            {
               Mouse.show();
            }
            loadmap_stage += "; " + MovieClip(root).mapdata.slice(0,3);
            loadmap_stage += "; " + (MovieClip(root).mapdata.slice(0,3) == "<q.");
            if(MovieClip(root).mapdata.slice(0,3) == "<q.")
            {
               loadmap_stage += "; eq qp";
               MovieClip(root).mapdata = this.un_qpack(MovieClip(root).mapdata);
               loadmap_stage += "; unqp ok";
            }
            loadmap_stage += "; qp is " + this.qpack_pattern_length;
            loadmap_stage += "; pass qp eq tst";
            this.firstframe = true;
            loadmap_stage += "; bfr parse";
            xml = new XML("<r>" + MovieClip(root).mapdata + "</r>");
            loadmap_stage = String(1004);
            loadmap_stage = String(1005);
            if(this.PSYCHOBLOOD_MODE == 1)
            {
               this.pb4.visible = false;
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            else if(this.PSYCHOBLOOD_MODE == 2)
            {
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            loadmap_stage = String(1006);
            this.pb0.alpha = 0;
            this.pb1.alpha = 0;
            this.pb2.alpha = 0;
            this.pb3.alpha = 0;
            this.pb4.alpha = 0;
            loadmap_stage = String(1007);
            this.boxestotal = 0;
            this.doorstotal = 0;
            this.regionstotal = 0;
            this.lampstotal = 0;
            this.gunstotal = 0;
            this.pushstotal = 0;
            this.bgstotal = 0;
            loadmap_stage = String(1008);
            this.mShape = new Sprite();
            loadmap_stage = String(2);
            for each(bookInfo in xml.children())
            {
               a = bookInfo.name();
               b = new Array();
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
               if(a == "box")
               {
                  this.boxx[this.boxestotal] = new Number(b["#x"]);
                  this.boxy[this.boxestotal] = new Number(b["#y"]);
                  this.boxw[this.boxestotal] = new Number(b["#w"]);
                  this.boxh[this.boxestotal] = new Number(b["#h"]);
                  this.boxmat[this.boxestotal] = new int(b["#m"]);
                  if(!isNaN(this.boxx[this.boxestotal]) && !isNaN(this.boxy[this.boxestotal]) && !isNaN(this.boxw[this.boxestotal]) && !isNaN(this.boxh[this.boxestotal]) && !isNaN(this.boxmat[this.boxestotal]))
                  {
                     if(this.boxestotal == 0)
                     {
                        this.NearBoxBSP_left = this.boxx[this.boxestotal];
                        this.NearBoxBSP_top = this.boxy[this.boxestotal];
                        this.NearBoxBSP_right = this.boxx[this.boxestotal] + this.boxw[this.boxestotal];
                        this.NearBoxBSP_bottom = this.boxy[this.boxestotal] + this.boxh[this.boxestotal];
                     }
                     else
                     {
                        this.NearBoxBSP_left = Math.min(this.NearBoxBSP_left,this.boxx[this.boxestotal]);
                        this.NearBoxBSP_top = Math.min(this.NearBoxBSP_top,this.boxy[this.boxestotal]);
                        this.NearBoxBSP_right = Math.max(this.NearBoxBSP_right,this.boxx[this.boxestotal] + this.boxw[this.boxestotal]);
                        this.NearBoxBSP_bottom = Math.max(this.NearBoxBSP_bottom,this.boxy[this.boxestotal] + this.boxh[this.boxestotal]);
                     }
                     ++this.boxestotal;
                  }
                  else
                  {
                     this.ChatNewMsg("<font color=\"#FF0000\">NOTE: Wall object contains error { id:" + this.boxestotal + ", x:" + this.boxx[this.boxestotal] + ", y:" + this.boxy[this.boxestotal] + ", width:" + this.boxw[this.boxestotal] + ", height:" + this.boxh[this.boxestotal] + " }</font>".split("NaN").join("\"NOT A NUMBER\""));
                  }
               }
               if(a == "bg")
               {
                  bitmap_data = null;
                  if(b["#m"] == "0")
                  {
                     bitmap_data = new panel_tile(0,0);
                  }
                  if(b["#m"] == "1")
                  {
                     bitmap_data = new ground_tile(0,0);
                  }
                  if(b["#m"] == "2")
                  {
                     bitmap_data = new panel2_tile(0,0);
                  }
                  if(b["#m"] == "3")
                  {
                     bitmap_data = new white(0,0);
                  }
                  if(b["#m"] == "4")
                  {
                     bitmap_data = new slider_tile(0,0);
                  }
                  if(b["#m"] == "5")
                  {
                     bitmap_data = new panel3_tile(0,0);
                  }
                  if(b["#m"] == "6")
                  {
                     bitmap_data = new red(0,0);
                  }
                  if(b["#m"] == "7")
                  {
                     bitmap_data = new green(0,0);
                  }
                  if(b["#m"] == "8")
                  {
                     bitmap_data = new blue(0,0);
                  }
                  if(b["#m"] == "9")
                  {
                     bitmap_data = new panel4_tile(0,0);
                  }
                  if(b["#m"] == "10")
                  {
                     bitmap_data = new panel5_tile(0,0);
                  }
                  if(b["#m"] == "11")
                  {
                     bitmap_data = new panel6_tile(0,0);
                  }
                  if(b["#m"] == "12")
                  {
                     bitmap_data = new panel7_tile(0,0);
                  }
                  if(b["#m"] == "13")
                  {
                     bitmap_data = new panel8_tile(0,0);
                  }
                  if(b["#m"] == "14")
                  {
                     bitmap_data = new pixel_wall(0,0);
                  }
                  if(b["#m"] == "15")
                  {
                     bitmap_data = new pixel_bg(0,0);
                  }
                  if(b["#m"] == "16")
                  {
                     bitmap_data = new pixel_open_door(0,0);
                  }
                  if(bitmap_data != null)
                  {
                     if(b["#c"] != undefined)
                     {
                        color_hex = String(b["#c"]);
                        if(color_hex.length == 7)
                        {
                           color_hex = color_hex.substr(1);
                           dec = uint(parseInt(color_hex,16));
                           bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((dec >> 16 & 255) / 255 * 2,(dec >> 8 & 255) / 255 * 2,(dec & 255) / 255 * 2));
                        }
                     }
                     this.mShape.graphics.beginBitmapFill(bitmap_data);
                     this.mShape.graphics.moveTo(Number(b["#x"]),Number(b["#y"]));
                     this.mShape.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]));
                     this.mShape.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]) + Number(b["#h"]));
                     this.mShape.graphics.lineTo(Number(b["#x"]),Number(b["#y"]) + Number(b["#h"]));
                     this.mShape.graphics.endFill();
                  }
                  if(this.spec_debug)
                  {
                     this.doorstotal += Math.random() > 0.2 && this.CMPG_name != ".:Er" + "ic" + " " + "Gu" + "rt:." ? 1 : 0;
                  }
                  this.bgx[this.bgstotal] = new Number(b["#x"]);
                  this.bgy[this.bgstotal] = new Number(b["#y"]);
                  this.bgw[this.bgstotal] = new Number(b["#w"]);
                  this.bgh[this.bgstotal] = new Number(b["#h"]);
                  ++this.bgstotal;
               }
               if(a == "pushf")
               {
                  this.pushx[this.pushstotal] = new Number(b["#x"]);
                  this.pushy[this.pushstotal] = new Number(b["#y"]);
                  this.pushw[this.pushstotal] = new Number(b["#w"]) + this.pushx[this.pushstotal];
                  this.pushh[this.pushstotal] = new Number(b["#h"]) + this.pushy[this.pushstotal];
                  this.pushtox[this.pushstotal] = new Number(b["#tox"]);
                  this.pushtoy[this.pushstotal] = new Number(b["#toy"]);
                  this.pushstab[this.pushstotal] = new Number(b["#stab"]);
                  this.pushdamage[this.pushstotal] = new Number(b["#damage"]);
                  this.PushSynonym(b["#uid"],this.pushstotal);
                  ++this.pushstotal;
               }
               if(a == "water")
               {
                  this.wax[this.watertotal] = new Number(b["#x"]);
                  this.way[this.watertotal] = new Number(b["#y"]);
                  this.waw[this.watertotal] = new Number(b["#w"]);
                  this.wah[this.watertotal] = new Number(b["#h"]);
                  this.wadamage[this.watertotal] = new Number(b["#damage"]);
                  if(!this.FORCE_CUSTOM_MAP && !this.MP_mode)
                  {
                     if(this.LOW_HPS)
                     {
                        this.wadamage[this.watertotal] = this.wadamage[this.watertotal] / 800 * 130;
                     }
                  }
                  ++this.watertotal;
               }
               if(a == "door")
               {
                  this.mc = this.graphics_3d.addChildAt(new door(),this.graphics_3d.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.visible = false;
                  if(b["#vis"] == "true")
                  {
                     this.mc.vis = true;
                  }
                  else
                  {
                     this.mc.vis = false;
                  }
                  this.mc.s_x = this.mc.x = new Number(b["#x"]);
                  this.mc.s_y = this.mc.y = new Number(b["#y"]);
                  this.mc.scaleX = new Number(b["#w"]) / 100;
                  this.mc.scaleY = new Number(b["#h"]) / 100;
                  this.doors[this.doorstotal] = this.mc;
                  this.mc.w = new Number(b["#w"]);
                  this.mc.h = new Number(b["#h"]);
                  this.mc.tox = new Number(0);
                  this.mc.toy = new Number(0);
                  this.mc.moving = new Boolean();
                  if(b["#moving"] == "true")
                  {
                     this.mc.moving = true;
                  }
                  else
                  {
                     this.mc.moving = false;
                  }
                  this.mc.s_moving = this.mc.moving;
                  this.mc.s_tarx = this.mc.tarx = new Number(b["#tarx"]);
                  this.mc.s_tary = this.mc.tary = new Number(b["#tary"]);
                  this.mc.use_target = new int(-1);
                  this.mc.use_on = new int(0);
                  this.mc.s_maxspeed = this.mc.maxspeed = new Number(b["#maxspeed"]);
                  this.PushSynonym(b["#uid"],this.doorstotal);
                  this.mc.onshot = -1;
                  this.mc.playsounds = true;
                  ++this.doorstotal;
               }
               if(a == "region")
               {
                  this.regions[this.regionstotal] = new Object();
                  this.regions[this.regionstotal].x = new Number(b["#x"]);
                  this.regions[this.regionstotal].y = new Number(b["#y"]);
                  this.regions[this.regionstotal].w = new Number(b["#w"]);
                  this.regions[this.regionstotal].h = new Number(b["#h"]);
                  if(b["#use_target"].charAt(0) == "#")
                  {
                     this.regions[this.regionstotal].use_target = b["#use_target"];
                  }
                  else
                  {
                     this.regions[this.regionstotal].use_target = new int(b["#use_target"]);
                  }
                  this.regions[this.regionstotal].use_on = new int(b["#use_on"]);
                  this.regions[this.regionstotal].play_sound = true;
                  if(this.regions[this.regionstotal].use_on == 1 || this.regions[this.regionstotal].use_on == 9 || this.regions[this.regionstotal].use_on == 10)
                  {
                     this.mc;
                     if(this.regions[this.regionstotal].use_on == 1)
                     {
                        this.mc = this.game.addChildAt(new switchh(),0);
                     }
                     if(this.regions[this.regionstotal].use_on == 9)
                     {
                        this.mc = this.game.addChildAt(new switchh_red(),0);
                     }
                     if(this.regions[this.regionstotal].use_on == 10)
                     {
                        this.mc = this.game.addChildAt(new switchh_blue(),0);
                     }
                     this.NoMouse(this.mc);
                     this.mc.x = this.regions[this.regionstotal].x + this.regions[this.regionstotal].w / 2;
                     this.mc.y = this.regions[this.regionstotal].y + this.regions[this.regionstotal].h / 2;
                     this.mc.gotoAndStop(1);
                     this.regions[this.regionstotal].mc = this.mc;
                  }
                  if(this.regions[this.regionstotal].use_on == 8)
                  {
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  if(this.regions[this.regionstotal].use_on == 11)
                  {
                     this.regions[this.regionstotal].use_on = 9;
                  }
                  if(this.regions[this.regionstotal].use_on == 12)
                  {
                     this.regions[this.regionstotal].use_on = 10;
                  }
                  if(this.regions[this.regionstotal].use_on == 15)
                  {
                     this.regions[this.regionstotal].play_sound = false;
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  this.PushSynonym(b["#uid"],this.regionstotal);
                  ++this.regionstotal;
               }
               if(a == "trigger")
               {
                  this.triggers[this.triggerstotal] = new Object();
                  this.triggers[this.triggerstotal].enabledd = new Boolean();
                  if(b["#enabled"] == "true")
                  {
                     this.triggers[this.triggerstotal].enabledd = true;
                  }
                  else
                  {
                     this.triggers[this.triggerstotal].enabledd = false;
                  }
                  this.triggers[this.triggerstotal].s_enabledd = this.triggers[this.triggerstotal].enabledd;
                  this.triggers[this.triggerstotal].s_maxcalls = this.triggers[this.triggerstotal].maxcalls = new int(b["#maxcalls"]);
                  this.triggers[this.triggerstotal].actions_total = new int(0);
                  this.triggers[this.triggerstotal].actions_targetA = new Array();
                  this.triggers[this.triggerstotal].actions_targetB = new Array();
                  this.triggers[this.triggerstotal].actions_type = new Array();
                  this.triggers[this.triggerstotal].forcehyperjump = new Boolean(false);
                  this.i = 1;
                  while(this.i <= 10)
                  {
                     if(b["#actions_" + this.i + "_type"] != -1)
                     {
                        this.add_action_to_trigger(this.triggerstotal,b["#actions_" + this.i + "_targetA"],b["#actions_" + this.i + "_targetB"],b["#actions_" + this.i + "_type"]);
                     }
                     ++this.i;
                  }
                  this.PushSynonym(b["#uid"],this.triggerstotal);
                  this.triggers[this.triggerstotal].uid = b["#uid"];
                  ++this.triggerstotal;
               }
               if(a == "timer")
               {
                  this.timers[this.timerstotal] = new Object();
                  this.timers[this.timerstotal].enabledd = new Boolean();
                  if(b["#enabled"] == "true")
                  {
                     this.timers[this.timerstotal].enabledd = true;
                  }
                  else
                  {
                     this.timers[this.timerstotal].enabledd = false;
                  }
                  this.timers[this.timerstotal].s_enabledd = this.timers[this.timerstotal].enabledd;
                  this.timers[this.timerstotal].s_maxcalls = this.timers[this.timerstotal].maxcalls = new int(b["#maxcalls"]);
                  if(b["#target"].charAt(0) == "#")
                  {
                     this.timers[this.timerstotal].actions_target = b["#target"];
                  }
                  else
                  {
                     this.timers[this.timerstotal].actions_target = new int(b["#target"]);
                  }
                  this.timers[this.timerstotal].s_ddelay = this.timers[this.timerstotal].ddelay = new int(b["#delay"]);
                  this.timers[this.timerstotal].ticknew = new int(0);
                  this.PushSynonym(b["#uid"],this.timerstotal);
                  ++this.timerstotal;
               }
               if(a == "barrel")
               {
                  if(!this.MP_mode)
                  {
                     this.mc;
                     if(b["#model"] == "bar_orange")
                     {
                        this.mc = this.game.addChildAt(new bar_orange(),this.game.numChildren);
                     }
                     else if(b["#model"] == "bar_blue")
                     {
                        this.mc = this.game.addChildAt(new bar_blue(),this.game.numChildren);
                     }
                     else if(b["#model"] == "bar_red")
                     {
                        this.mc = this.game.addChildAt(new bar_red(),this.game.numChildren);
                     }
                     this.NoMouse(this.mc);
                     this.mc.mdl = b["#model"];
                     this.mc.x = new Number(b["#x"]);
                     this.mc.y = new Number(b["#y"]);
                     this.mc.tox = new Number(b["#tox"]);
                     this.mc.toy = new Number(b["#toy"]);
                     this.mc.master = -1;
                     this.PushSynonym(b["#uid"],this.barrelstotal);
                     this.create_barrel(this.mc);
                  }
                  else
                  {
                     this.MP_startbarrels[this.MP_startbarrels.length] = {
                        "x":new Number(b["#x"]),
                        "y":new Number(b["#y"]),
                        "tox":new Number(b["#tox"]),
                        "toy":new Number(b["#toy"]),
                        "mdl":b["#model"]
                     };
                  }
               }
               if(a == "vehicle")
               {
                  n = -1;
                  this.mc;
                  if(b["#model"] == "veh_jeep")
                  {
                     this.mc = this.game.addChildAt(new veh_jeep(),this.game.numChildren);
                     n = 0;
                  }
                  if(b["#model"] == "veh_walker")
                  {
                     this.mc = this.game.addChildAt(new veh_walker(),this.game.numChildren);
                     n = 1;
                  }
                  if(b["#model"] == "veh_capsule")
                  {
                     this.mc = this.game.addChildAt(new veh_capsule(),this.game.numChildren);
                     n = 2;
                  }
                  if(b["#model"] == "veh_crate")
                  {
                     this.mc = this.game.addChildAt(new veh_crate(),this.game.numChildren);
                     n = 3;
                  }
                  if(b["#model"] == "veh_drone")
                  {
                     this.mc = this.game.addChildAt(new veh_drone(),this.game.numChildren);
                     n = 4;
                  }
                  if(b["#model"] == "veh_rope")
                  {
                     this.mc = this.game.addChildAt(new veh_rope(),this.game.numChildren);
                     n = 5;
                  }
                  if(b["#model"] == "veh_hh")
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     n = 6;
                     if(!this.HINTS)
                     {
                        origin.visible = false;
                     }
                  }
                  if(b["#model"] == "veh_corvette")
                  {
                     this.mc = this.game.addChildAt(new veh_corvette(),this.game.numChildren);
                     n = 7;
                  }
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.PushSynonym(b["#uid"],this.vehiclestotal);
                  this.create_vehicle(this.mc,n,new Number(b["#side"]));
                  this.mc.hea *= new Number(b["#hpp"]) / 100;
                  this.mc.hmax *= new Number(b["#hpp"]) / 100;
                  if(!this.ARCADE_GAME_MODE)
                  {
                     this.mc.hea *= 0.25;
                     this.mc.hmax *= 0.25;
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           if(n == 7)
                           {
                              this.mc.hea *= 0.25;
                              this.mc.hmax *= 0.25;
                           }
                        }
                     }
                  }
               }
            }
            this.NearBoxBSP_stepsize = Math.max(100,Math.max(this.NearBoxBSP_right - this.NearBoxBSP_left,this.NearBoxBSP_bottom - this.NearBoxBSP_top) / 64);
            this.NearBoxBSP_stepsize = Math.max(this.NearBoxBSP_stepsize,Math.sqrt((this.NearBoxBSP_right - this.NearBoxBSP_left) * (this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.boxestotal));
            brdr = this.MP_mode ? 3 : 1;
            this.NearBoxBSP_left -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_right += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_top -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_bottom += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_width = Math.ceil((this.NearBoxBSP_right - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP_height = Math.ceil((this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP = new Vector.<Vector.<Vector.<int>>>(this.NearBoxBSP_width);
            this.i = 0;
            while(this.i < this.NearBoxBSP_width)
            {
               this.NearBoxBSP[this.i] = new Vector.<Vector.<int>>(this.NearBoxBSP_height);
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[this.i][this.i2] = new Vector.<int>(0,false);
                  ++this.i2;
               }
               ++this.i;
            }
            loadmap_stage = String(3);
            this.i = 0;
            while(this.i < this.boxestotal)
            {
               this.addNearBoxBSP(this.i);
               xx = 75;
               if(this.TraceLine_no_doors(this.boxx[this.i] - 15,this.boxy[this.i] - 30,this.boxx[this.i] - 15,this.boxy[this.i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[this.i] + 5,this.boxy[this.i] - 5,this.boxx[this.i] + 5,this.boxy[this.i] - 50))
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     this.NoMouse(this.mc);
                     n = 6;
                     this.mc.x = new Number(this.boxx[this.i]);
                     this.mc.y = new Number(this.boxy[this.i]);
                     this.create_vehicle(this.mc,n,new Number(1));
                  }
               }
               if(this.TraceLine_no_doors(this.boxx[this.i] + this.boxw[this.i] + 15,this.boxy[this.i] - 30,this.boxx[this.i] + this.boxw[this.i] + 15,this.boxy[this.i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[this.i] + this.boxw[this.i] - 5,this.boxy[this.i] - 5,this.boxx[this.i] + this.boxw[this.i] - 5,this.boxy[this.i] - 50))
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     this.NoMouse(this.mc);
                     n = 6;
                     this.mc.x = new Number(this.boxx[this.i] + this.boxw[this.i]);
                     this.mc.y = new Number(this.boxy[this.i]);
                     this.create_vehicle(this.mc,n,new Number(-1));
                  }
               }
               ++this.i;
            }
            TEST_STRING = "";
            this.i = 0;
            while(this.i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  TEST_STRING += this.NearBoxBSP[this.i][this.i2].length + " ";
                  ++this.i2;
               }
               TEST_STRING += "\n";
               ++this.i;
            }
            this.i = 0;
            while(this.i < this.doorstotal)
            {
               if(this.doors[this.i].vis)
               {
                  n = 6;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[this.i].x;
                  this.mc.y = this.doors[this.i].y;
                  this.create_vehicle(this.mc,n,new Number(1));
                  this.mc.origin.visible = false;
                  this.mc.attached = this.i;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[this.i].x + this.doors[this.i].w;
                  this.mc.y = this.doors[this.i].y;
                  this.create_vehicle(this.mc,n,new Number(-1));
                  this.mc.origin.visible = false;
                  this.mc.attached = this.i;
               }
               ++this.i;
            }
            this.all_doors = new Array();
            this.i2 = 0;
            while(this.i2 < this.doorstotal)
            {
               this.all_doors.push(this.i2);
               ++this.i2;
            }
            this.i = 0;
            while(this.i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[this.i][this.i2].fixed = true;
                  ++this.i2;
               }
               ++this.i;
            }
            loadmap_stage = String(4);
            watercolor1 = "";
            watercolor2 = "";
            for each(bookInfo in xml.children())
            {
               a = bookInfo.name();
               b = new Array();
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
               if(a == "decor")
               {
                  loadmap_stage = String(4001);
                  model = b["#model"];
                  if(model == "back_lamp_vertical" || model == "back_lamp_horizontal" || model == "back_lamp_vertical_on" || model == "back_lamp_horizontal_on")
                  {
                     this.mc = this.game.addChildAt(new decor(),0);
                  }
                  else
                  {
                     this.mc = this.game.addChildAt(new decor(),this.game.numChildren);
                  }
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  if(!this.movieClipHasLabel(this.mc,model))
                  {
                     throw new Error("Decoration \"" + model + "\" does not exist in current version.");
                  }
                  this.mc.gotoAndStop(model);
                  this.decors[this.decorstotal] = this.mc;
                  this.PushSynonym(b["#uid"],this.decorstotal);
                  ++this.decorstotal;
               }
               if(a == "gun")
               {
                  loadmap_stage = String(4002);
                  new_model = String(b["#model"]);
                  new_command = int(b["#command"]);
                  new_upg = int(b["#upg"]);
                  loadmap_stage += "; " + new_model;
                  this.PushSynonym(b["#uid"],this.gunstotal);
                  if(this.LOW_HPS)
                  {
                     if(!this.MP_mode)
                     {
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(new_model == "gun_railgun2")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 1)
                                 {
                                    if(this.CUR_LOADING != "c41a")
                                    {
                                       new_model = "gun_sniper";
                                    }
                                 }
                              }
                           }
                           if(new_model == "gun_bfg")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 0)
                                 {
                                    new_model = "gun_sp_sh";
                                 }
                              }
                           }
                        }
                     }
                  }
                  this.mc = this.MakeGunByClass(new_model);
                  if(this.mc != null)
                  {
                     this.mc.model = new String(new_model);
                     this.mc.x = new Number(b["#x"]);
                     this.mc.y = new Number(b["#y"]);
                     this.mc.startx = this.mc.x;
                     this.mc.starty = this.mc.y;
                     this.mc.upg = new int(new_upg);
                     this.mc.command = new int(new_command);
                     this.mc.onmade();
                  }
               }
               if(a == "inf")
               {
                  loadmap_stage = String(4003);
                  loadmap_stage += ";mrk=" + b["#mark"];
                  if(b["#mark"] == "watercolor")
                  {
                     watercolor1 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidcolor")
                  {
                     watercolor2 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "watertitle")
                  {
                     this.WATER_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidtitle")
                  {
                     this.ACID_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "sky")
                  {
                     this.sky.gotoAndStop(int(b["#forteam"]));
                  }
                  if(b["#mark"] == "shadowmap_size")
                  {
                     this.step_size = int(b["#forteam"]);
                  }
                  if(b["#mark"] == "gravity")
                  {
                     this.gravity = Number(b["#forteam"]);
                  }
                  if(b["#mark"] == "casual")
                  {
                     this.CASUAL_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "nobase")
                  {
                     this.NOBASE = true;
                  }
                  if(b["#mark"] == "game2")
                  {
                     this.PLAZMA_GAME = false;
                  }
                  if(b["#mark"] == "strict_casual")
                  {
                     this.CASUAL_MODE = true;
                     this.STRICT_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "no_auto_revive")
                  {
                     this.AUTO_REVIVE = false;
                  }
                  if(b["#mark"] == "meat")
                  {
                     this.MEAT_MODE = true;
                  }
                  if(b["#mark"] == "nopsi")
                  {
                     this.NO_PSI = true;
                     this.i = 0;
                     while(this.i < this.playerstotal)
                     {
                        if(this.mens[this.i].io)
                        {
                           if(!this.mens[this.i].dead)
                           {
                              this.ChangedGun(this.i);
                           }
                        }
                        ++this.i;
                     }
                  }
                  if(b["#mark"] == "gamescale")
                  {
                     this.game_scale = Number(b["#forteam"]) / 100;
                     if(isNaN(this.game_scale))
                     {
                        this.game_scale = 1;
                     }
                     if(this.game_scale < 0.1)
                     {
                        this.game_scale = 0.1;
                     }
                     if(this.game_scale > 15)
                     {
                        this.game_scale = 15;
                     }
                  }
                  if(b["#mark"] == "he_nades_count")
                  {
                     this.MP_start_grenades_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds1 += this.MP_start_grenades_count;
                  }
                  if(b["#mark"] == "port_nades_count")
                  {
                     this.MP_start_grenades_port_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds2 += this.MP_start_grenades_port_count;
                  }
                  if(b["#mark"] == "sh_nades_count")
                  {
                     this.MP_start_grenades_sh_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds3 += this.MP_start_grenades_sh_count;
                  }
                  if(b["#mark"] == "snow")
                  {
                     this.FORCE_SNOW = true;
                  }
                  if(b["#mark"] == "level_errors")
                  {
                     this.ENABLE_LEVEL_LOGIC_ERRORS = true;
                  }
                  if(!this.MP_mode)
                  {
                     if(b["#mark"] == "hero1_guns")
                     {
                        this.i = 0;
                        while(this.i < this.inventoryA.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryA[this.i].mdl);
                           if(free_mc != null)
                           {
                              this.mc = free_mc;
                              this.mc.model = this.inventoryA[this.i].mdl;
                              this.mc.x = new Number(b["#x"]);
                              this.mc.y = new Number(b["#y"]);
                              this.mc.upg = new int(this.inventoryA[this.i].upg);
                              if(this.MP_mode && this.MP_type != 2)
                              {
                                 this.mc.command = -1;
                              }
                              else
                              {
                                 this.mc.command = new int(b["#forteam"]);
                              }
                              this.mc.onmade();
                           }
                           ++this.i;
                        }
                     }
                     if(b["#mark"] == "hero2_guns")
                     {
                        this.i = 0;
                        while(this.i < this.inventoryB.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryB[this.i].mdl);
                           if(free_mc != null)
                           {
                              this.mc = free_mc;
                              this.mc.model = this.inventoryB[this.i].mdl;
                              this.mc.x = new Number(b["#x"]);
                              this.mc.y = new Number(b["#y"]);
                              this.mc.upg = new int(this.inventoryB[this.i].upg);
                              this.mc.command = new int(b["#forteam"]);
                              this.mc.onmade();
                           }
                           ++this.i;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nonades")
                     {
                        this.i = 0;
                        while(this.i < this.inventoryB.length)
                        {
                           if(this.inventoryB[this.i].mdl != "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[this.i].mdl);
                              if(free_mc != null)
                              {
                                 this.mc = free_mc;
                                 this.mc.model = this.inventoryB[this.i].mdl;
                                 this.mc.x = new Number(b["#x"]);
                                 this.mc.y = new Number(b["#y"]);
                                 this.mc.upg = new int(this.inventoryB[this.i].upg);
                                 this.mc.command = new int(b["#forteam"]);
                                 this.mc.onmade();
                              }
                           }
                           ++this.i;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nades")
                     {
                        this.i = 0;
                        while(this.i < this.inventoryB.length)
                        {
                           if(this.inventoryB[this.i].mdl == "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[this.i].mdl);
                              if(free_mc != null)
                              {
                                 this.mc = free_mc;
                                 this.mc.model = this.inventoryB[this.i].mdl;
                                 this.mc.x = new Number(b["#x"]);
                                 this.mc.y = new Number(b["#y"]);
                                 this.mc.upg = new int(this.inventoryB[this.i].upg);
                                 this.mc.command = new int(b["#forteam"]);
                                 this.mc.onmade();
                              }
                           }
                           ++this.i;
                        }
                     }
                  }
                  else
                  {
                     if(b["#mark"] == "dm_slots_on_spawn")
                     {
                        this.dm_slots_on_spawn = b["#forteam"].split(" ").join("").split(",");
                     }
                     if(b["#mark"] == "dm_max_guns_on_spawn")
                     {
                        this.dm_max_guns_on_spawn = int(b["#forteam"]);
                     }
                  }
               }
               if(a == "lamp")
               {
                  loadmap_stage = String(4004);
                  this.lamps_x[this.lampstotal] = new Number(b["#x"]);
                  this.lamps_y[this.lampstotal] = new Number(b["#y"]);
                  this.lamps_power[this.lampstotal] = Math.min(new Number(b["#power"]),100);
                  this.lamps_power2[this.lampstotal] = 2;
                  this.lamps_sprites[this.lampstotal];
                  if(!(b["#flare"] == "true" || Number(b["#flare"]) > 0))
                  {
                     this.lamps_power2[this.lampstotal] = -1;
                  }
                  if(this.lamps_power2[this.lampstotal] == 2 || this.TraceBg(this.lamps_x[this.lampstotal],this.lamps_y[this.lampstotal]))
                  {
                     this.PushSynonym(b["#uid"],this.lampstotal);
                     ++this.lampstotal;
                  }
               }
               if(a == "player" || a == "enemy")
               {
                  loadmap_stage = String(4005);
                  this.mc = this.game.addChildAt(new player(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.startx = this.mc.x;
                  this.mc.starty = this.mc.y;
                  this.PushSynonym(b["#uid"],this.playerstotal);
                  this.create_player(this.mc,b["#hea"],b["#hmax"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.atox[this.mc.b_toe] = this.atox[this.mc.b_leg1] = this.atox[this.mc.b_leg2] = this.atox[this.mc.b_arm1] = this.atox[this.mc.b_arm2] = this.atox[this.mc.b_body] = this.atox[this.mc.b_brk1] = this.atox[this.mc.b_brk2] = this.atox[this.mc.b_head_start] = this.atox[this.mc.b_head_end] = this.mc.tox;
                  this.atoy[this.mc.b_toe] = this.atoy[this.mc.b_leg1] = this.atoy[this.mc.b_leg2] = this.atoy[this.mc.b_arm1] = this.atoy[this.mc.b_arm2] = this.atoy[this.mc.b_body] = this.atoy[this.mc.b_brk1] = this.atoy[this.mc.b_brk2] = this.atoy[this.mc.b_head_start] = this.atoy[this.mc.b_head_end] = this.mc.toy;
                  if(b["#ondeath"].charAt(0) == "#")
                  {
                     this.mc.ondeath = b["#ondeath"];
                  }
                  else
                  {
                     this.mc.ondeath = new int(b["#ondeath"]);
                  }
                  this.mc.team = new int(b["#team"]);
                  this.mc.botaction = new int(b["#botaction"]);
                  if(this.MP_mode && this.MP_type == 1)
                  {
                     this.mc.team = this.MP_myid + 1;
                  }
                  this.mc.side = new Number(b["#side"]);
                  this.mc.tarx = this.mc.x + this.mc.side * 100;
                  this.mc.tary = this.mc.y;
                  this.mc.armored = new Number(0);
                  if(b["#incar"].charAt(0) == "#")
                  {
                     this.mc.incar = b["#incar"];
                  }
                  else
                  {
                     this.mc.incar = int(b["#incar"]);
                  }
                  this.mc.char = new Number(b["#char"]);
                  if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                  {
                     if(this.mc.char == 2)
                     {
                        if(this.mc.hmax > 325)
                        {
                           this.mc.char = 70;
                        }
                        else if(this.mc.hmax > 170)
                        {
                           this.mc.char = 71;
                        }
                     }
                  }
                  this.mc.charset_by_user = false;
                  if(this.MP_myid == this.mc.idd)
                  {
                     if(this.MP_mode)
                     {
                        if(this.MP_type == 1)
                        {
                           this.mc.char = this.skin_model[2];
                        }
                        else if(this.MP_type == 3)
                        {
                           if(this.MP_myid % 2 == 0)
                           {
                              this.mc.team = 13;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "1";
                           }
                           else
                           {
                              this.mc.team = 12;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "2";
                           }
                           this.mc.hea = this.mens[0].hea;
                           this.mc.hmax = this.mens[0].hmax;
                        }
                        else if(Number(b["#char"]) == -1)
                        {
                           this.mc.char = this.skin_model[2];
                           this.mc.charset_by_user = true;
                        }
                        else if(Number(b["#char"]) == 73)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "1";
                        }
                        else if(Number(b["#char"]) == 74)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "2";
                        }
                     }
                  }
                  this.mc.mdl_head = this.mc.char;
                  if(this.mc.char >= 40 && this.mc.char <= 48)
                  {
                     this.mc.char = 1;
                  }
                  if(this.mc.char == 61)
                  {
                     this.mc.char = 3;
                  }
                  this.mc.mdl_leg1_upper = this.mc.char;
                  this.mc.mdl_leg1_middle = this.mc.char;
                  this.mc.mdl_leg1_lower = this.mc.char;
                  this.mc.mdl_leg2_upper = this.mc.char;
                  this.mc.mdl_leg2_middle = this.mc.char;
                  this.mc.mdl_leg2_lower = this.mc.char;
                  this.mc.mdl_arm1_upper = this.mc.char;
                  this.mc.mdl_arm1_lower = this.mc.char;
                  this.mc.mdl_arm2_upper = this.mc.char;
                  this.mc.mdl_arm2_lower = this.mc.char;
                  this.mc.mdl_toe = this.mc.char;
                  this.mc.mdl_body = this.mc.char;
                  this.UpdateCharProps(this.mc);
                  if(a == "player")
                  {
                     if(this.MP_myid == this.mc.idd)
                     {
                        this.game.x = -this.mc.x + this.hscreenX;
                        this.game.y = -this.mc.y + this.hscreenY;
                     }
                     this.mc.isplayer = new Boolean(true);
                     ++this.MP_playerstotal;
                  }
                  else
                  {
                     this.mc.isplayer = new Boolean(false);
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer || this.ANONYMOUS_MODE && this.MP_myid != this.mc.idd)
                     {
                        this.mc.gui.visible = false;
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.gui.visible = false;
                  }
                  if(this.MP_mode)
                  {
                     if(this.mc.isplayer)
                     {
                        if(this.mc.idd != this.MP_myid)
                        {
                           this.mc.hea = 0;
                           this.mc.dead = true;
                           this.mc.alpha = 1;
                           this.mc.io = false;
                           this.mc.visible = false;
                        }
                        if(this.mc.idd == this.MP_myid)
                        {
                           this.mc.nick_color = this.color_player;
                        }
                        else if(this.mc.team == this.MP_team && this.MP_type != 1)
                        {
                           this.mc.nick_color = this.color_friendly;
                        }
                        else
                        {
                           this.mc.nick_color = this.color_enemy;
                        }
                     }
                     else if(this.mc.team != this.MP_team)
                     {
                        this.mc.nick_color = this.color_enemy;
                     }
                     else
                     {
                        this.mc.nick_color = this.color_friendly;
                     }
                  }
                  else if(this.mc.idd == this.MP_myid || this.mc.char == 3)
                  {
                     this.mc.nick_color = this.color_player;
                     xx = 0;
                     if(this.mc.char == 1)
                     {
                        xx = this.armorA;
                     }
                     if(this.mc.char == 3)
                     {
                        xx = this.armorB;
                     }
                     if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                     {
                        if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                        {
                           this.mc.hea *= (500 + xx * 50) / this.mc.hmax;
                           this.mc.hmax = 500 + xx * 50;
                           if(this.skin_model[0] >= 49)
                           {
                              this.mc.hea *= 1.5;
                              this.mc.hmax *= 1.5;
                           }
                        }
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.nick_color = this.color_enemy;
                  }
                  else
                  {
                     this.mc.nick_color = this.color_friendly;
                  }
                  if(this.mc.isplayer)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode && this.MP_type == 1)
                  {
                     if(this.mc.isplayer)
                     {
                        this.mc.mobility = 1;
                     }
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           this_limit = 130;
                           if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 49 || this.mc.char == 1 && this.skin_model[0] == 49)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 13)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 2)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 4)
                           {
                              this_limit = 100;
                           }
                           if(this.mc.char == 6)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 7)
                           {
                              this_limit = 210;
                           }
                           if(this.mc.char == 8)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 9)
                           {
                              this_limit = 190;
                           }
                           if(this.mc.char == 11)
                           {
                              this_limit = 300;
                           }
                           if(this.mc.char == 14)
                           {
                              this_limit = 170;
                           }
                           if(this.mc.char == 15)
                           {
                              this_limit = 350;
                           }
                           if(this.mc.char == 16)
                           {
                              this_limit = 200;
                           }
                           if(this.mc.char == 70)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 71)
                           {
                              this_limit = 130;
                           }
                           if(this.CUR_LOADING == "c38a")
                           {
                              if(this.mc.char == 3)
                              {
                                 this_limit = 10000;
                              }
                           }
                           if(this.mc.hea < 2000)
                           {
                              if(this.mc.hea > this_limit)
                              {
                                 this.mc.hea = this_limit;
                              }
                              if(this.mc.hmax > this_limit)
                              {
                                 this.mc.hmax = this_limit;
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer)
                     {
                        this.mc.startteam = this.mc.team;
                        this.mc.startside = this.mc.side;
                        this.mc.startbotaction = this.mc.botaction;
                        this.mc.startchar = this.mc.char;
                     }
                  }
               }
            }
            loadmap_stage = String(5);
            loadmap_stage += "; Player does not exists. Can\'t display team table";
            if(this.MP_spectator)
            {
               this.MP_myid = 0;
            }
            this.UpdateTeamTable();
            loadmap_stage = String(5001);
            region_i = 0;
            trigger_i = 0;
            timer_i = 0;
            player_i = 0;
            for each(bookInfo in xml.children())
            {
               loadmap_stage = String(5002);
               a = bookInfo.name();
               loadmap_stage = String(5003);
               b = new Array();
               loadmap_stage = String(5004);
               for each(bookInfo2 in bookInfo.attributes())
               {
                  loadmap_stage = String(5005);
                  b["#" + bookInfo2.name()] = bookInfo2;
                  loadmap_stage = String(5006);
               }
               loadmap_stage = String(5007);
               if(a == "region")
               {
                  loadmap_stage = String(5008);
                  this.regions[region_i].use_target = this.DecodeUID(this.regions[region_i].use_target);
                  loadmap_stage = String(5009);
                  region_i++;
               }
               else if(a == "trigger")
               {
                  loadmap_stage = String(5010);
                  this.i = 0;
                  while(this.i < this.triggers[trigger_i].actions_total)
                  {
                     loadmap_stage = String(5011);
                     this.triggers[trigger_i].actions_targetA[this.i] = this.DecodeUID(this.triggers[trigger_i].actions_targetA[this.i]);
                     loadmap_stage = String(5012);
                     this.triggers[trigger_i].actions_targetB[this.i] = this.DecodeUID(this.triggers[trigger_i].actions_targetB[this.i]);
                     loadmap_stage = String(5013);
                     ++this.i;
                  }
                  trigger_i++;
               }
               else if(a == "timer")
               {
                  loadmap_stage = String(5014);
                  this.timers[timer_i].actions_target = this.DecodeUID(this.timers[timer_i].actions_target);
                  loadmap_stage = String(5015);
                  timer_i++;
               }
               else if(a == "player" || a == "enemy")
               {
                  loadmap_stage = String(5016);
                  loadmap_stage += "; player_i=" + player_i;
                  loadmap_stage += "; mens[player_i]=" + this.mens[player_i];
                  loadmap_stage += "; mens[player_i].incar=" + this.mens[player_i].incar;
                  loadmap_stage += "; DecodeUID(mens[player_i].incar)=" + this.DecodeUID(this.mens[player_i].incar);
                  this.mens[player_i].incar = this.DecodeUID(this.mens[player_i].incar);
                  loadmap_stage = String(5017);
                  this.mens[player_i].ondeath = this.DecodeUID(this.mens[player_i].ondeath);
                  player_i++;
               }
               loadmap_stage = String(5018);
            }
            loadmap_stage = String(5019);
            this.i = 0;
            while(this.i < this.playerstotal)
            {
               loadmap_stage = String(5020);
               if(this.mens[this.i].incar == -2)
               {
                  loadmap_stage = String(5021);
                  this.i2 = 0;
                  while(this.i2 < this.vehiclestotal)
                  {
                     loadmap_stage = String(5022);
                     if(this.vehicles[this.i2].master == -1)
                     {
                        loadmap_stage = String(5023);
                        if(this.Dist2D(this.mens[this.i].x,this.mens[this.i].y,this.vehicles[this.i2].x,this.vehicles[this.i2].y) < 100)
                        {
                           loadmap_stage = String(5024);
                           this.PutinCar(this.i,this.i2);
                           this.i2 = this.vehiclestotal;
                        }
                     }
                     ++this.i2;
                  }
                  loadmap_stage = String(5025);
                  if(this.mens[this.i].incar == -2)
                  {
                     this.mens[this.i].incar = -1;
                  }
                  loadmap_stage = String(5026);
               }
               else if(this.mens[this.i].incar >= 0 || typeof this.mens[this.i].incar == "string")
               {
                  loadmap_stage = String(5027);
                  this.PutinCar(this.i,this.DecodeUID(this.mens[this.i].incar));
                  loadmap_stage = String(5028);
               }
               loadmap_stage = String(5029);
               ++this.i;
            }
            loadmap_stage = String(6);
            this.i = 0;
            while(this.i < this.decorstotal)
            {
               cur_label = String(this.decors[this.i].currentFrameLabel);
               if(cur_label == "antigravity" || cur_label == "antigravity_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on" || cur_label == "wall_lamp_left_on" || cur_label == "wall_lamp_up_on" || cur_label == "wall_lamp_down_on" || cur_label == "back_lamp_vertical_on" || cur_label == "back_lamp_horizontal_on" || cur_label == "teleport" || cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_left" || cur_label == "ray_right" || cur_label == "ray_floor" || cur_label == "ray_ceil" || cur_label == "column_red" || cur_label == "column_green" || cur_label == "column_blue")
               {
                  this.i2 = 0;
                  while(this.i2 < this.lampstotal)
                  {
                     if(Math.abs(this.decors[this.i].x - this.lamps_x[this.i2]) + Math.abs(this.decors[this.i].y - this.lamps_y[this.i2]) < 40)
                     {
                        --this.lampstotal;
                        this.i3 = this.i2;
                        while(this.i3 < this.lampstotal)
                        {
                           this.lamps_x[this.i3] = this.lamps_x[this.i3 + 1];
                           this.lamps_y[this.i3] = this.lamps_y[this.i3 + 1];
                           this.lamps_power[this.i3] = this.lamps_power[this.i3 + 1];
                           this.lamps_power2[this.i3] = this.lamps_power2[this.i3 + 1];
                           ++this.i3;
                        }
                     }
                     ++this.i2;
                  }
                  offset_x = 0;
                  offset_y = 0;
                  if(cur_label == "antigravity" || cur_label == "teleport" || cur_label == "ray_floor" || cur_label == "wall_lamp_up_on")
                  {
                     offset_y = -20;
                  }
                  if(cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_ceil" || cur_label == "wall_lamp_down_on")
                  {
                     offset_y = 20;
                  }
                  if(cur_label == "ray_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on")
                  {
                     offset_x = 20;
                  }
                  if(cur_label == "ray_right" || cur_label == "antigravity_left" || cur_label == "wall_lamp_left_on")
                  {
                     offset_x = -20;
                  }
                  this.lamps_x[this.lampstotal] = this.decors[this.i].x + offset_x;
                  this.lamps_y[this.lampstotal] = this.decors[this.i].y + offset_y;
                  this.lamps_power[this.lampstotal] = 0.45;
                  this.lamps_power2[this.lampstotal] = -1;
                  this.lamps_sprites[this.lampstotal];
                  ++this.lampstotal;
               }
               ++this.i;
            }
            loadmap_stage = String(7);
            this.i2 = 0;
            while(this.i2 < this.lampstotal)
            {
               if(this.lamps_power2[this.i2] == 2)
               {
                  this.flare[this.flarestotal] = this.graphics_3d_front.addChildAt(new lens_flare(),this.graphics_3d_front.numChildren);
                  this.NoMouse(this.flare[this.flarestotal]);
                  this.flare[this.flarestotal].x = this.lamps_x[this.i2];
                  this.flare[this.flarestotal].y = this.lamps_y[this.i2];
                  this.flare_power[this.flarestotal] = 1;
                  this.flare[this.flarestotal].alpha = 0;
                  ++this.flarestotal;
               }
               ++this.i2;
            }
            loadmap_stage = String(8);
            if(!this.SUPER_COMPUTER)
            {
               this.step_size *= 2;
            }
            half_step_size = this.step_size / 2;
            this.g_minx = this.boxx[0];
            this.g_maxx = this.boxx[0] + this.boxw[0];
            this.g_miny = this.boxy[0];
            this.g_maxy = this.boxy[0] + this.boxh[0];
            col = new Array();
            this.i = 0;
            while(this.i < this.boxestotal)
            {
               this.g_minx = Math.min(this.boxx[this.i],this.g_minx);
               this.g_miny = Math.min(this.boxy[this.i],this.g_miny);
               this.g_maxx = Math.max(this.boxx[this.i] + this.boxw[this.i],this.g_maxx);
               this.g_maxy = Math.max(this.boxy[this.i] + this.boxh[this.i],this.g_maxy);
               ++this.i;
            }
            this.cx = (this.g_maxx - this.g_minx) / 20;
            this.cy = (this.g_maxy - this.g_miny) / 20;
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
            this.i = 0;
            while(this.i < this.watertotal)
            {
               this.temp = this.graphics_3d_front.addChildAt(new water(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.wax[this.i];
               this.temp.y = this.way[this.i];
               this.temp.scaleX = this.waw[this.i] / 100;
               this.temp.scaleY = this.wah[this.i] / 100;
               if(this.wadamage[this.i] > 0)
               {
                  if(watercolor2 != "")
                  {
                     this.temp.gotoAndStop(3);
                     ct = new ColorTransform();
                     ct.color = uint("0x" + watercolor2.substr(1));
                     this.temp.transform.colorTransform = ct;
                  }
                  else
                  {
                     this.temp.gotoAndStop(1);
                  }
               }
               else if(watercolor1 != "")
               {
                  this.temp.gotoAndStop(3);
                  ct = new ColorTransform();
                  ct.color = uint("0x" + watercolor1.substr(1));
                  this.temp.transform.colorTransform = ct;
               }
               else
               {
                  this.temp.gotoAndStop(2);
               }
               this.wax[this.i] -= 10;
               this.waw[this.i] += 20;
               this.wah[this.i] += 10;
               ++this.i;
            }
            loadmap_stage = String(9);
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx;
               this.temp.scaleX = (this.g_maxx - this.g_minx) / 100;
               this.temp.scaleY = 1000 / 100;
               this.temp.y = this.g_miny - 1000;
            }
            this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
            this.NoMouse(this.temp);
            this.temp.x = this.g_minx - 1000;
            this.temp.scaleX = (this.g_maxx - this.g_minx + 2000) / 100;
            this.temp.scaleY = 1000 / 100;
            this.temp.y = this.g_maxy;
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx - 1000;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_maxx;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
            }
            this.i = 0;
            while(this.i < this.doorstotal)
            {
               if(this.doors[this.i].vis)
               {
                  this.temp = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
                  this.NoMouse(this.temp);
                  this.temp.x = this.doors[this.i].x;
                  this.temp.scaleX = this.doors[this.i].scaleX;
                  this.temp.scaleY = this.doors[this.i].scaleY;
                  this.temp.y = this.doors[this.i].y;
                  this.link_surface(this.temp,this.i);
               }
               ++this.i;
            }
            this.i = 0;
            while(this.i < this.boxestotal)
            {
               this.temp = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.boxx[this.i];
               this.temp.scaleX = this.boxw[this.i] / 100;
               this.temp.scaleY = this.boxh[this.i] / 100;
               this.temp.y = this.boxy[this.i];
               ++this.i;
            }
            loadmap_stage = String(10);
            this.mShape = new Sprite();
            SnowShape = new Sprite();
            this.i = 0;
            while(this.i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < this.boxw[this.i] / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(this.i != this.i2)
                  {
                     if(this.boxy[this.i] + this.boxh[this.i] > this.boxy[this.i2])
                     {
                        if(this.boxy[this.i] + this.boxh[this.i] < this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[this.i] + this.boxw[this.i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[this.i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < this.boxw[this.i] / 10)
                                 {
                                    if(this.boxx[this.i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[this.i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
               len = 0;
               this.i2 = 0;
               while(this.i2 < this.boxw[this.i] / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < this.boxw[this.i] / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[this.i] == 0)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel2_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel4_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 3 || this.boxmat[this.i] == 0)
                     {
                        if(this.boxx[this.i] + this.i2 * 10 + len * 10 - (this.boxx[this.i] + this.i2 * 10) >= 20)
                        {
                           if(this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] + this.boxh[this.i] - 5) || !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] + this.boxh[this.i] + 5) && !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] + this.boxh[this.i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.beginBitmapFill(new panel_bottom_left(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 12,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 12,this.boxy[this.i] + this.boxh[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + this.boxh[this.i]);
                              this.mShape.graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] + this.boxh[this.i] - 5) || !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] + this.boxh[this.i] + 5) && !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] + this.boxh[this.i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.beginBitmapFill(new panel_bottom_right(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + this.boxh[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i] + this.boxh[this.i]);
                              this.mShape.graphics.endFill();
                           }
                        }
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               ++this.i;
            }
            loadmap_stage = String(11);
            my_date = new Date();
            if(this.FORCE_SNOW || (my_date.month <= 1 || my_date.month >= 11))
            {
               this.flakes_letitsnow = true;
               if(!this.FORCE_SNOW)
               {
                  switch(this.sky.currentFrame)
                  {
                     case 5:
                        this.flakes_letitsnow = false;
                  }
               }
            }
            else
            {
               this.flakes_letitsnow = false;
            }
            if(!this.HQ)
            {
               this.flakes_letitsnow = false;
            }
            loadmap_stage = String(12);
            this.i = 0;
            while(this.i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < this.boxw[this.i] / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(this.i != this.i2)
                  {
                     if(this.boxy[this.i] > this.boxy[this.i2])
                     {
                        if(this.boxy[this.i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[this.i] + this.boxw[this.i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[this.i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < this.boxw[this.i] / 10)
                                 {
                                    if(this.boxx[this.i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[this.i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
               len = 0;
               this.i2 = 0;
               while(this.i2 < this.boxw[this.i] / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < this.boxw[this.i] / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[this.i] == 0)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i]);
                        this.mShape.graphics.beginBitmapFill(new panel_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 1)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10 + 28,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 28,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 28,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 28,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2a(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 28,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 28,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[this.i] + this.i2 * 10 + len * 10 - 28,this.boxy[this.i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2b(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 28,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 + 16,this.boxy[this.i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 + 16,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 28,this.boxy[this.i] + 38 - 23);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 2)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i] - 6);
                        this.mShape.graphics.beginBitmapFill(new panel_top3(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] - 6);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] - 6);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + 26 - 6);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 26 - 6);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i]);
                        this.mShape.graphics.beginBitmapFill(new panel2_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[this.i]);
                        this.mShape.graphics.beginBitmapFill(new panel4_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i]);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[this.i] == 3 || this.boxmat[this.i] == 0)
                     {
                        if(this.boxx[this.i] + this.i2 * 10 + len * 10 - (this.boxx[this.i] + this.i2 * 10) >= 20)
                        {
                           if(this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] + 5) || !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] - 5) && !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 - 5,this.boxy[this.i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i]);
                              this.mShape.graphics.beginBitmapFill(new panel_top_left(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 12,this.boxy[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + 12,this.boxy[this.i] + 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10,this.boxy[this.i] + 16);
                              this.mShape.graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] + 5) || !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] - 5) && !this.TracePointOnlyBoxes(this.boxx[this.i] + this.i2 * 10 + len * 10 + 5,this.boxy[this.i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i]);
                              this.mShape.graphics.beginBitmapFill(new panel_top_right(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i]);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10,this.boxy[this.i] + 16);
                              this.mShape.graphics.lineTo(this.boxx[this.i] + this.i2 * 10 + len * 10 - 12,this.boxy[this.i] + 16);
                              this.mShape.graphics.endFill();
                           }
                        }
                     }
                     if(this.flakes_letitsnow)
                     {
                        snow = new Sprite();
                        xx = 0.5;
                        while(xx <= len - 0.5)
                        {
                           if(this.VerticalTrace(this.boxx[this.i] + this.i2 * 10 + xx * 10,this.boxy[this.i] - 10 + (Math.random() * 6 - 3) - 5))
                           {
                              rad = 9 + Math.random() * 4;
                              if(xx < 3)
                              {
                                 rad = (rad * xx / 3 + rad) / 2;
                              }
                              if(xx > len - 3)
                              {
                                 rad = (rad * (len - xx) / 3 + rad) / 2;
                              }
                              snow.graphics.beginFill(16711423);
                              snow.graphics.drawRoundRect(this.boxx[this.i] + this.i2 * 10 + xx * 10 - rad / 2,this.boxy[this.i] + (Math.random() * 6 - 3) - rad * 0.8,rad,rad,rad);
                              snow.graphics.endFill();
                           }
                           xx += 0.25;
                        }
                        this.ForceRasterize(snow);
                        SnowShape.addChild(snow);
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               ++this.i;
            }
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
            loadmap_stage = String(13);
            traces_start = Number(getTimer());
            if(this.HQ)
            {
               global_lamps_power = 0.85;
               switch(this.sky.currentFrame)
               {
                  case 1:
                     global_lamps_power = 0.52;
                     break;
                  case 2:
                     global_lamps_power = 0.8;
                     break;
                  case 3:
                     global_lamps_power = 1;
                     break;
                  case 4:
                     global_lamps_power = 0;
                     break;
                  case 5:
                     global_lamps_power = 0.25;
                     break;
                  case 6:
                     global_lamps_power = 0.36;
                     break;
                  case 7:
                     global_lamps_power = 0.87;
                     break;
                  case 8:
                     global_lamps_power = 0.34;
                     break;
                  case 9:
                     global_lamps_power = 0.83;
                     break;
                  case 10:
                     global_lamps_power = 0.8;
                     break;
                  case 11:
                     global_lamps_power = 0.18;
               }
               loadmap_stage = String(1301);
               falloff = 100;
               fallstep = 50;
               lamps_from = this.lampstotal;
               xx = this.g_minx - falloff;
               while(xx <= this.g_maxx + falloff)
               {
                  yy = this.g_miny - falloff;
                  while(yy <= this.g_maxy + falloff)
                  {
                     if(this.TraceBgFalloff(xx,yy,falloff))
                     {
                        if(!this.TraceBgFalloff(xx,yy,50))
                        {
                           if(this.TracePointOnlyBoxes(xx,yy))
                           {
                              this.lamps_x[this.lampstotal] = xx;
                              this.lamps_y[this.lampstotal] = yy;
                              this.lamps_power[this.lampstotal] = 0.8 * global_lamps_power;
                              this.lamps_power2[this.lampstotal] = -1;
                              ++this.lampstotal;
                           }
                        }
                     }
                     yy += fallstep;
                  }
                  xx += fallstep;
               }
               loadmap_stage = String(1302);
               this.g_minx -= this.step_size * 2;
               this.g_miny -= this.step_size * 2;
               this.g_maxx += this.step_size * 4;
               this.g_maxy += this.step_size * 4;
               loadmap_stage = String(1303);
               this.lightmap_ma = new Matrix(1 / this.step_size,0,0,1 / this.step_size,-this.g_minx / this.step_size,-this.g_miny / this.step_size);
               loadmap_stage = String(1304);
               bmp_w = Math.max((this.g_maxx - this.g_minx) / this.step_size,1);
               bmp_h = Math.max((this.g_maxy - this.g_miny) / this.step_size);
               loadmap_stage = String(1305);
               this.bmpData = new BitmapData(bmp_w,bmp_h,true,16777216);
               loadmap_stage = String(1306);
               g = new Sprite();
               loadmap_stage = String(1307);
               this.i3 = 0;
               while(this.i3 < this.bgstotal)
               {
                  loadmap_stage = String(1308);
                  g.graphics.beginFill(4278190080);
                  loadmap_stage = String(1309);
                  g.graphics.drawRect(this.bgx[this.i3],this.bgy[this.i3],this.bgw[this.i3],this.bgh[this.i3]);
                  loadmap_stage = String(1310);
                  g.graphics.endFill();
                  ++this.i3;
               }
               loadmap_stage = String(1311);
               this.bmpData.draw(g,this.lightmap_ma,null,null,null,false);
               loadmap_stage = String(1312);
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1 * 0.85,0,0,0,255));
               loadmap_stage = String(1313);
               this.bmpData_backed = this.bmpData.clone();
               loadmap_stage = String(1314);
               this.i5 = this.lampstotal;
               this.i7 = this.doorstotal;
               this.doorstotal = 0;
               this.cx = (this.g_maxx - this.g_minx) / this.step_size;
               this.cy = (this.g_maxy - this.g_miny) / this.step_size;
               loadmap_stage = String(1315);
               clrs = new Array();
               poss = new Array();
               dip = 0;
               while(dip < 1)
               {
                  clrs.push(0);
                  poss.push(dip * 255);
                  dip += 0.1;
               }
               loadmap_stage = String(1316);
               this.i4 = 0;
               while(this.i4 < this.i5)
               {
                  g = new Sprite();
                  alphas = new Array();
                  dip = 0;
                  while(dip < 1)
                  {
                     if(this.lamps_power2[this.i4] >= 0)
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * this.lamps_power[this.i4]);
                     }
                     else
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * this.lamps_power[this.i4]);
                     }
                     dip += 0.1;
                  }
                  loadmap_stage = String(1317);
                  matr0 = new Matrix();
                  siz = this.lamps_power[this.i4] * 200 * 20 * 1.4;
                  loadmap_stage = String(1318);
                  matr0.createGradientBox(siz,siz,0,this.lamps_x[this.i4] - siz / 2,this.lamps_y[this.i4] - siz / 2);
                  loadmap_stage = String(1319);
                  g.graphics.beginGradientFill(GradientType.RADIAL,clrs,alphas,poss,matr0,SpreadMethod.PAD);
                  loadmap_stage = String(1320);
                  lamp_step = this.lamps_power2[this.i4] == -1 ? Math.PI * 0.1 : Math.PI * 0.05;
                  loadmap_stage = String(1321);
                  an = 0;
                  while(an < Math.PI * 2)
                  {
                     this_rad = siz / 2;
                     loadmap_stage = String(1322);
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     this.xx2 = this.lamps_x[this.i4];
                     this.yy2 = this.lamps_y[this.i4];
                     this.v;
                     loadmap_stage = String(1323);
                     this.i2 = 0;
                     while(this.i2 < this.boxestotal)
                     {
                        if(Math.max(this.xx2,xx) > this.boxx[this.i2] && Math.min(this.xx2,xx) < this.boxx[this.i2] + this.boxw[this.i2])
                        {
                           if(Math.max(this.yy2,yy) > this.boxy[this.i2] && Math.min(this.yy2,yy) < this.boxy[this.i2] + this.boxh[this.i2])
                           {
                              loadmap_stage = String(1324);
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = String(1325);
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = String(1326);
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = String(1327);
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = String(1328);
                           }
                        }
                        ++this.i2;
                     }
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     loadmap_stage = String(1329);
                     if(an == 0)
                     {
                        g.graphics.moveTo(xx,yy);
                     }
                     else
                     {
                        g.graphics.lineTo(xx,yy);
                     }
                     loadmap_stage = String(1330);
                     an += lamp_step;
                  }
                  loadmap_stage = String(1331);
                  g.graphics.endFill();
                  g.filters = [new BlurFilter(1.1,1.1,3)];
                  loadmap_stage = String(1332);
                  this.lamps_sprites[this.i4] = g;
                  loadmap_stage = String(1333);
                  ++this.i4;
               }
               this.shadowbmp = new Bitmap(this.bmpData);
               loadmap_stage = String(1334);
               this.UpdateLightmap(true);
               loadmap_stage = String(1335);
               this.doorstotal = this.i7;
               loadmap_stage = String(1336);
               this.shadowbmp.smoothing = true;
               loadmap_stage = String(1337);
               this.temp = this.graphics_3d_front.addChildAt(this.shadowbmp,0);
               loadmap_stage = String(1338);
               this.temp.x = this.g_minx;
               this.temp.y = this.g_miny;
               this.temp.scaleX = this.step_size;
               this.temp.scaleY = this.step_size;
               loadmap_stage = String(1339);
               this.shadowbmp.smoothing = true;
               loadmap_stage = String(1340);
               this.g_minx += this.step_size * 2;
               this.g_miny += this.step_size * 2;
               this.g_maxx -= this.step_size * 4;
               this.g_maxy -= this.step_size * 4;
            }
            loadmap_stage = String(14);
            traces_end = getTimer();
            if(this.flakes_letitsnow)
            {
               temp_snow = this.graphics_3d.addChildAt(SnowShape,this.graphics_3d.numChildren);
            }
            this.startatotal = this.atotal;
            this.startchtotal = this.chtotal;
            loadmap_stage = String(15);
            if(POST_ERR_CODE == "")
            {
               loadmap_stage = String(16);
               this.GenFlakes();
               loadmap_stage = String(17);
               this.StartGameTimer();
               loadmap_stage = String(18);
               if(this.MP_mode)
               {
                  loadmap_stage = String(1801);
                  loadmap_stage += "; Player does not exists";
                  this.mens[this.MP_myid].login_name = this.MP_login_name;
                  loadmap_stage = String(1802);
               }
               else if(this.IM_A_CHEATER)
               {
                  loadmap_stage = String(1803);
                  this.ShowNoAch();
                  this.PlaySound_full(this.s_chat);
                  loadmap_stage = String(1804);
               }
               loadmap_stage = String(19);
               this.GCTime();
            }
            else
            {
               this.LAST_ERROR = "Oh! Seems like there was problem with map :(\nMap loading failed and error is:\n" + POST_ERR_CODE;
               gotoAndStop("menu");
            }
         }
         catch(error:Error)
         {
            crash_failed = function(param1:IOErrorEvent):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            crash_done = function(param1:Event):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            player_version_os = "User Flash Player & OS detection failed";
            try
            {
               _fullInfo = String(Capabilities.version);
               _osSplitArr = _fullInfo.split(" ");
               _versionSplitArr = _osSplitArr[1].split(",");
               _osInfo = String(_osSplitArr[0]);
               _versionInfo = Number(_versionSplitArr[0]);
               player_version_os = "Flash Player version: " + _flash_version + "\nOS: " + _osInfo;
            }
            catch(e2:*)
            {
            }
            LAST_ERROR = "Oh! Something terrible happend :(\nMap loading failed. Here displayed information on error.\n Error code: " + error.errorID + "\nLoadMap_StopAddress: " + loadmap_stage + "\nMap size: " + MovieClip(root).mapdata.length + " bytes\nError message: " + error.message + "\nApplication size: " + total + "\nViewer: " + this.loaderInfo.parameters.l + "\n" + player_version_os;
            myRequest = new URLRequest(MP_server);
            myVariables = new URLVariables();
            myVariables.rq = "crash";
            myVariables.mapdata = MovieClip(root).mapdata;
            myVariables.mapid = MP_map_name;
            myVariables.errorcode = LAST_ERROR;
            myRequest.method = URLRequestMethod.POST;
            myRequest.data = myVariables;
            myLoader.addEventListener(Event.COMPLETE,serv_list_done);
            myLoader.addEventListener(IOErrorEvent.IO_ERROR,serv_list_failed);
            myLoader.load(myRequest);
            DropGameTimer();
            gotoAndStop("menu");
         }
         this.MP_start_guns_total = this.gunstotal;
      }
      
      public function qpack_rule(param1:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = new Array();
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = "^" + this.qpack_base.charAt(this.qpack_pattern_simcalc) + "";
         ++this.qpack_pattern_simcalc;
         ++this.qpack_pattern_length;
      }
      
      public function qpack_rule_2param(param1:String, param2:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = new Array();
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = param2;
         ++this.qpack_pattern_length;
      }
      
      public function un_qpack(param1:String) : String
      {
         this.i = this.qpack_pattern_length - 1;
         while(this.i >= 0)
         {
            param1 = param1.split(this.qpack_pattern[this.i][1]).join(this.qpack_pattern[this.i][0]);
            --this.i;
         }
         return param1;
      }
      
      public function SEND_INTRUDER_LIST() : void
      {
         var report:String = null;
         var key:Object = null;
         try
         {
            report = "";
            for(key in this.INTRUDER_DATABASE)
            {
               if(this.INTRUDER_DATABASE[key].activity_end - this.INTRUDER_DATABASE[key].activity_start > 3000)
               {
                  if(this.INTRUDER_DATABASE[key].registered_shots + 2 < this.INTRUDER_DATABASE[key].unregistered_shots * 0.95 && (this.INTRUDER_DATABASE[key].unregistered_shots > 5 || this.INTRUDER_DATABASE[key].registered_shots > 5) || this.INTRUDER_DATABASE[key].unregistered_shots > 10 && this.INTRUDER_DATABASE[key].seen_deaths == 0 || this.INTRUDER_DATABASE[key].seen_deaths > 0 && this.INTRUDER_DATABASE[key].min_hea > 0 || this.INTRUDER_DATABASE[key].max_hea > 300 || this.INTRUDER_DATABASE[key].max_hea > this.mens[this.MP_myid].hmax || this.INTRUDER_DATABASE[key].min_hea > 100 && this.INTRUDER_DATABASE[key].unregistered_shots > 10)
                  {
                     report += this.GAME_VERSION + ";" + this.CUR_CUSTOM_MAP + ";" + key + ";" + this.INTRUDER_DATABASE[key].unregistered_shots + ";" + this.INTRUDER_DATABASE[key].registered_shots + ";" + this.INTRUDER_DATABASE[key].activity_start + ";" + this.INTRUDER_DATABASE[key].activity_end + ";" + this.INTRUDER_DATABASE[key].ping_min + ";" + this.INTRUDER_DATABASE[key].ping_max + ";" + this.INTRUDER_DATABASE[key].seen_deaths + ";" + this.INTRUDER_DATABASE[key].max_hea + ";" + this.INTRUDER_DATABASE[key].min_hea + ";" + this.MP_ping2 + "|";
                  }
               }
            }
            this.INTRUDER_DATABASE = new Object();
            this.INTRUDER_DATABASE_length = 0;
            if(report.length > 10)
            {
               this.myRequest = new URLRequest("http://www.plazmaburst2.com/genreport.php");
               this.myVariables = new URLVariables();
               this.myVariables.genreport = report;
               this.myVariables.chk1 = this.mens[this.MP_myid].login_name;
               this.myVariables.chk2 = this.mens[this.MP_myid].login_name.charAt(3);
               this.myVariables.chk3 = this.mens[this.MP_myid].nick;
               this.myVariables.srvr = this.MP_SERVER_NAME;
               this.myVariables.srvrip = this.MP_SERVER_IP;
               this.myRequest.method = URLRequestMethod.POST;
               this.myRequest.data = this.myVariables;
               this.myReportLoader.addEventListener(Event.COMPLETE,function():*
               {
               });
               this.myReportLoader.addEventListener(IOErrorEvent.IO_ERROR,function():*
               {
               });
               this.myReportLoader.load(this.myRequest);
            }
         }
         catch(e:*)
         {
         }
      }
      
      public function r_down(param1:MouseEvent) : void
      {
      }
      
      public function add_action_to_trigger(param1:int, param2:*, param3:*, param4:int) : void
      {
         this.triggers[param1].actions_targetA[this.triggers[param1].actions_total] = param2;
         this.triggers[param1].actions_targetB[this.triggers[param1].actions_total] = param3;
         this.triggers[param1].actions_type[this.triggers[param1].actions_total] = param4;
         ++this.triggers[param1].actions_total;
      }
      
      public function PutinCar(param1:int, param2:int, param3:* = false) : void
      {
         if(!param3)
         {
            if(this.MP_mode && Boolean(this.mens[param1].isplayer))
            {
               return;
            }
         }
         this.ChangedGun(param1);
         this.vehicles[param2].master = param1;
         this.mens[param1].incar = param2;
         this.mens[param1].alpha = 0;
         this.vehicles[param2].lastgun = this.mens[param1].curwea;
         if(param1 == 0)
         {
            if(this.vehicles[param2].typ == 0)
            {
               this.game_scale = 0.75;
            }
            if(this.vehicles[param2].typ == 1)
            {
               this.game_scale = 0.5;
            }
            this.key_pick = false;
            this.vehhp.visible = true;
            this.vehicles[param2].gui.txt1.textColor = this.color_player;
         }
         else if(this.mens[param1].team == this.mens[this.MP_myid].team)
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_friendly;
         }
         else
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_enemy;
         }
         if(param1 == this.MP_myid)
         {
            this.UpdateWeps();
         }
      }
      
      public function PutoutCar(param1:int, param2:* = false) : void
      {
         if(!param2)
         {
            if(this.MP_mode && (this.vehicles[param1].master != -1 && this.mens[this.vehicles[param1].master].isplayer))
            {
               return;
            }
         }
         if(this.vehicles[param1].master != -1)
         {
            if(this.vehicles[param1].master == this.MP_myid)
            {
               this.game_scale = this.g_scale_outcar;
               this.key_pick = false;
               this.vehhp.visible = false;
               this.UpdateWeps();
            }
            this.ChangedGun(this.vehicles[param1].master);
            this.mens[this.vehicles[param1].master].incar = -1;
            this.mens[this.vehicles[param1].master].stability = 1;
            this.mens[this.vehicles[param1].master].y = this.vehicles[param1].y - 50;
            this.mens[this.vehicles[param1].master].tox = 0;
            this.mens[this.vehicles[param1].master].toy = 0;
            this.mens[this.vehicles[param1].master].alpha = 1;
            this.mens[this.vehicles[param1].master].curwea = this.vehicles[param1].lastgun;
            this.ChangedGun(this.vehicles[param1].master);
            this.vehicles[param1].master = -1;
         }
         this.vehicles[param1].gui.txt1.textColor = 16777215;
      }
      
      public function EXEC_TRIGGER(param1:int, param2:Boolean = false) : Boolean
      {
         var tr:int = 0;
         var tries:* = undefined;
         var block:DisplayObject = null;
         var u:* = undefined;
         var hex:Number = NaN;
         var red:Number = NaN;
         var green:Number = NaN;
         var blue:Number = NaN;
         var rule:Boolean = false;
         var res:* = undefined;
         var power:Number = NaN;
         var count:int = 0;
         var accuracy:Number = NaN;
         var c:int = 0;
         var key:String = null;
         var phrase:String = null;
         var key2:String = null;
         var mc:* = undefined;
         var palette:* = undefined;
         var loader:URLLoader = null;
         var variable_to_save_name:String = null;
         var request:URLRequest = null;
         var variables:URLVariables = null;
         var mult:Number = NaN;
         var diff:* = undefined;
         var index_value:int = 0;
         var inv:String = null;
         var char_id:int = 0;
         var hex_str:String = null;
         var r:Number = NaN;
         var sf:* = undefined;
         var clrs_mov:ColorMatrixFilter = null;
         var matrix:* = undefined;
         var weps:Array = null;
         var xx:Number = NaN;
         var yy:Number = NaN;
         var i:int = 0;
         var parts:Array = null;
         var model:String = null;
         var upgrade:int = 0;
         var command:int = 0;
         var hex_int:int = 0;
         var g:Number = NaN;
         var b:Number = NaN;
         var a:int = param1;
         var loop_check:Boolean = param2;
         if(loop_check)
         {
            if(this.trigger_loops > 2048)
            {
               return false;
            }
            ++this.trigger_loops;
         }
         else
         {
            this.trigger_loops = 0;
         }
         if(this.triggers[a] == undefined || this.triggers[a] == null)
         {
            this.SpawnLevelLogicErrorIfNeeded(new Error(),"Trigger was not found, execution depth: " + this.trigger_loops);
         }
         if(currentLabel == "gaming" && this.triggers[a].enabledd && (this.triggers[a].maxcalls == -1 || this.triggers[a].maxcalls > 0))
         {
            try
            {
               if(this.DEBUG_MODE)
               {
               }
               tr = 0;
               while(tr < this.triggers[a].actions_total)
               {
                  if(this.DEBUG_MODE)
                  {
                  }
                  switch(this.triggers[a].actions_type[tr])
                  {
                     case 0:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].forcehyperjump = this.triggers[a].forcehyperjump;
                        this.doors[this.triggers[a].actions_targetA[tr]].tarx = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        this.doors[this.triggers[a].actions_targetA[tr]].tary = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        this.doors[this.triggers[a].actions_targetA[tr]].moving = true;
                        if(this.doors[this.triggers[a].actions_targetA[tr]].playsounds)
                        {
                           if(this.doors[this.triggers[a].actions_targetA[tr]].vis)
                           {
                              this.PlaySound(this.s_t_door1_start,this.doors[this.triggers[a].actions_targetA[tr]].x + this.doors[this.triggers[a].actions_targetA[tr]].w / 2,this.doors[this.triggers[a].actions_targetA[tr]].y + this.doors[this.triggers[a].actions_targetA[tr]].h / 2);
                           }
                        }
                        break;
                     case 1:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].maxspeed = this.triggers[a].actions_targetB[tr];
                        break;
                     case 2:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        break;
                     case 3:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.vehicles[this.triggers[a].actions_targetA[tr]].hea = this.vehicles[this.triggers[a].actions_targetA[tr]].hea / this.vehicles[this.triggers[a].actions_targetA[tr]].hmax * 100 * this.triggers[a].actions_targetB[tr];
                        break;
                     case 4:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(!this.mens[this.triggers[a].actions_targetA[tr]].dead)
                        {
                           this.mens[this.triggers[a].actions_targetA[tr]].hea = this.mens[this.triggers[a].actions_targetA[tr]].hmax / 100 * this.triggers[a].actions_targetB[tr];
                        }
                        break;
                     case 5:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.gravity = this.triggers[a].actions_targetA[tr];
                        break;
                     case 6:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             if(!this.MP_mode || this.MP_myid == this.tr2 || !this.mens[this.tr2].isplayer)
                                             {
                                                this.mens[this.tr2].hea -= this.triggers[a].actions_targetA[tr];
                                                this.mens[this.tr2].lastshot = "body";
                                                this.mens[this.tr2].lastshotbygun = "nothing";
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          if(!this.MP_mode || this.MP_myid == this.tr2 || !this.mens[this.tr2].isplayer)
                                          {
                                             this.mens[this.tr2].hea -= this.triggers[a].actions_targetA[tr];
                                             this.mens[this.tr2].lastshot = "body";
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 7:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(this.LEVEL_END_FORCE == "")
                           {
                              if(!this.MP_mode)
                              {
                                 this.tr3 = 0;
                                 while(this.tr3 < this.playerstotal)
                                 {
                                    if(this.mens[this.tr3].io)
                                    {
                                       this.ok = false;
                                       this.UpdateCurGun();
                                       if(this.mens[this.tr3].char == 1 && (this.MP_myid == this.tr3 || this.mens[this.MP_myid].char != 1))
                                       {
                                          this.inventoryA = new Array();
                                          this.ok = true;
                                       }
                                       if(this.mens[this.tr3].char == 3 && (this.MP_myid == this.tr3 || this.mens[this.MP_myid].char != 3))
                                       {
                                          this.inventoryB = new Array();
                                          this.ok = true;
                                       }
                                       if(this.ok)
                                       {
                                          this.tr2 = 0;
                                          while(this.tr2 < this.gunstotal)
                                          {
                                             if(this.guns[this.tr2].io)
                                             {
                                                if(this.guns[this.tr2].picken_by == this.tr3)
                                                {
                                                   if(!this.guns[this.tr2].forcars)
                                                   {
                                                      if(this.mens[this.tr3].char == 1)
                                                      {
                                                         this.AddItemToHero1(this.guns[this.tr2].model,this.guns[this.tr2].upg);
                                                      }
                                                      if(this.mens[this.tr3].char == 3)
                                                      {
                                                         this.AddItemToHero2(this.guns[this.tr2].model,this.guns[this.tr2].upg);
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.tr2;
                                          }
                                       }
                                    }
                                    ++this.tr3;
                                 }
                                 if(this.CMPG_THIS_LEVEL == this.LEVELS_PASSED)
                                 {
                                    ++this.LEVELS_PASSED;
                                 }
                                 if(this.barrelstotal >= 5)
                                 {
                                    this.ok = true;
                                    this.i4 = 0;
                                    while(this.i4 < this.barrelstotal)
                                    {
                                       if(this.barrels[this.i4].hea > 0)
                                       {
                                          this.ok = false;
                                       }
                                       ++this.i4;
                                    }
                                    if(this.ok)
                                    {
                                       this.incBadge(6);
                                    }
                                 }
                                 this.i4 = 0;
                                 if(this.CMPG_THIS_LEVEL == 41)
                                 {
                                    if(!this.EASY_MODE)
                                    {
                                       this.incBadge(12);
                                       this.i4 += 10000;
                                    }
                                 }
                                 if(this.PRO_BOTS)
                                 {
                                    this.incBadge(16);
                                 }
                                 if(this.FUN_SPENT_BULLETS < 1 || this.FUN_DAMAGE_TAKEN < 1 || this.FUN_ELEMINATED < 1)
                                 {
                                    this.i4 += 300;
                                 }
                                 if(this.FUN_SPENT_BULLETS == 0)
                                 {
                                    if(!this.EASY_MODE)
                                    {
                                       this.incBadge(21);
                                    }
                                 }
                                 if(this.FUN_ELEMINATED == 0)
                                 {
                                    this.incBadge(10);
                                 }
                                 if(this.FUN_DAMAGE_TAKEN < 1)
                                 {
                                    this.FUN_DAMAGE_TAKEN = 1;
                                 }
                                 this.i4 += Math.ceil(this.FUN_ELEMINATED * 8 + this.FUN_HEADSHOTS_MADE + this.FUN_DAMAGE_MADE / this.FUN_DAMAGE_TAKEN * 80);
                                 if(this.FUN_DAMAGE_MADE >= 100)
                                 {
                                    if(this.FUN_DAMAGE_MADE > this.FUN_DAMAGE_TAKEN * 5)
                                    {
                                       this.incBadge(22);
                                    }
                                 }
                                 if(this.CMPG_THIS_LEVEL != 41)
                                 {
                                    if(this.i4 > 500)
                                    {
                                       this.i4 = 500;
                                    }
                                 }
                                 if(!this.AWARD)
                                 {
                                    this.i4 = 0;
                                 }
                                 this.CMPG_money += this.i4;
                                 this.SaveGame();
                                 ++this.CMPG_THIS_LEVEL;
                                 this.LEVEL_END_FORCE = "complete";
                                 this.MP_fps = 1;
                                 this.darkness.alpha = 0;
                                 this.darkness.visible = true;
                                 this.PlaySound_full(this.s_mission_done);
                              }
                           }
                        }
                        break;
                     case 8:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 9:
                        this.darkness.visible = true;
                        this.LAST_ERROR = this.triggers[a].actions_targetA[tr];
                        this.LEVEL_END_FORCE = "failed";
                        break;
                     case 10:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].stability -= this.triggers[a].actions_targetA[tr] * 0.1;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].stability -= this.triggers[a].actions_targetA[tr] * 0.1;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 11:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].team != this.mens[this.triggers[a].actions_targetA[tr]].team)
                              {
                                 if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                                 {
                                    if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                    {
                                       if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                       {
                                          if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                          {
                                             if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                             {
                                                this.mens[this.tr2].hea = 0;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].hea = 0;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 12:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.vehiclestotal)
                        {
                           if(this.vehicles[this.tr2].hea > 0)
                           {
                              if(this.vehicles[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.vehicles[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.vehicles[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.vehicles[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.vehicles[this.tr2].hea = 0;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 13:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].hea > 0)
                        {
                           if(this.mens[this.triggers[a].actions_targetA[tr]].incar != -1)
                           {
                              this.PutoutCar(this.mens[this.triggers[a].actions_targetA[tr]].incar,true);
                           }
                           if(this.vehicles[this.triggers[a].actions_targetB[tr]].master != -1)
                           {
                              this.PutoutCar(this.triggers[a].actions_targetB[tr],true);
                           }
                           this.PutinCar(this.triggers[a].actions_targetA[tr],this.triggers[a].actions_targetB[tr],true);
                        }
                        break;
                     case 14:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mcc = this.mens[this.triggers[a].actions_targetA[tr]];
                           if(this.mcc.hea > 0)
                           {
                              u = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2 - this.mcc.x;
                              this.v = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2 - this.mcc.y;
                              this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2;
                              this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2;
                              if(this.triggers[a].actions_targetA[tr] == this.MP_myid)
                              {
                                 this.game.x += u;
                                 this.game.y += this.v;
                              }
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.triggers[a].actions_targetA[tr])
                                 {
                                    this.ax[this.i4] += u;
                                    this.ay[this.i4] += this.v;
                                    this.lax[this.i4] += u;
                                    this.lay[this.i4] += this.v;
                                 }
                                 ++this.i4;
                              }
                           }
                        }
                        break;
                     case 15:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        if(this.mcc.picken_by != -1)
                        {
                           if(this.mens[this.mcc.picken_by].curwea == this.triggers[a].actions_targetA[tr])
                           {
                              this.mens[this.mcc.picken_by].curwea = -1;
                           }
                           this.mcc.picken_by = -1;
                        }
                        this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2;
                        this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2;
                        this.atox[this.mcc.b_p1] = 0;
                        this.atoy[this.mcc.b_p1] = 0;
                        this.WakeUpAtom(this.mcc.b_p1);
                        this.ax[this.mcc.b_p1] = this.mcc.x - 10;
                        this.ay[this.mcc.b_p1] = this.mcc.y;
                        this.lax[this.mcc.b_p1] = this.ax[this.mcc.b_p1];
                        this.lay[this.mcc.b_p1] = this.ay[this.mcc.b_p1];
                        this.atox[this.mcc.b_p2] = 0;
                        this.atoy[this.mcc.b_p2] = 0;
                        this.WakeUpAtom(this.mcc.b_p2);
                        this.ax[this.mcc.b_p2] = this.mcc.x + 10;
                        this.ay[this.mcc.b_p2] = this.mcc.y;
                        this.lax[this.mcc.b_p2] = this.ax[this.mcc.b_p2];
                        this.lay[this.mcc.b_p2] = this.ay[this.mcc.b_p2];
                        break;
                     case 16:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.barrels[this.triggers[a].actions_targetA[tr]];
                        if(this.mcc.hea > 0)
                        {
                           this.mcc.x = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2;
                           this.mcc.y = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2;
                           this.lax[this.mcc.b_left_top] = this.mcc.x - 5;
                           this.lax[this.mcc.b_right_top] = this.mcc.x + 5;
                           this.lax[this.mcc.b_right_bottom] = this.mcc.x + 5;
                           this.lax[this.mcc.b_left_bottom] = this.mcc.x - 5;
                           this.lay[this.mcc.b_left_top] = this.mcc.y - 13;
                           this.lay[this.mcc.b_right_top] = this.mcc.y - 13;
                           this.lay[this.mcc.b_right_bottom] = this.mcc.y + 13;
                           this.lay[this.mcc.b_left_bottom] = this.mcc.y + 13;
                           this.ax[this.mcc.b_left_top] = this.mcc.x - 5;
                           this.ax[this.mcc.b_right_top] = this.mcc.x + 5;
                           this.ax[this.mcc.b_right_bottom] = this.mcc.x + 5;
                           this.ax[this.mcc.b_left_bottom] = this.mcc.x - 5;
                           this.ay[this.mcc.b_left_top] = this.mcc.y - 13;
                           this.ay[this.mcc.b_right_top] = this.mcc.y - 13;
                           this.ay[this.mcc.b_right_bottom] = this.mcc.y + 13;
                           this.ay[this.mcc.b_left_bottom] = this.mcc.y + 13;
                           this.atox[this.mcc.b_left_top] = 0;
                           this.atox[this.mcc.b_right_top] = 0;
                           this.atox[this.mcc.b_right_bottom] = 0;
                           this.atox[this.mcc.b_left_bottom] = 0;
                           this.atoy[this.mcc.b_left_top] = 0;
                           this.atoy[this.mcc.b_right_top] = 0;
                           this.atoy[this.mcc.b_right_bottom] = 0;
                           this.atoy[this.mcc.b_left_bottom] = 0;
                        }
                        break;
                     case 17:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 18:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2 + this.regions[this.triggers[a].actions_targetA[tr]].w / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2 + this.regions[this.triggers[a].actions_targetA[tr]].h / 2;
                        break;
                     case 19:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].enabledd = false;
                        break;
                     case 20:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].enabledd = true;
                        break;
                     case 21:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].maxcalls = 0;
                        break;
                     case 22:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.triggers[this.triggers[a].actions_targetA[tr]].maxcalls = this.triggers[a].actions_targetB[tr];
                        break;
                     case 23:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hea = this.triggers[a].actions_targetB[tr];
                        break;
                     case 24:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.PhysicsExplosion(this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2,this.triggers[a].actions_targetA[tr] * 5,this.triggers[a].actions_targetA[tr] * 0.6,this.triggers[a].actions_targetA[tr] * 10,-1);
                        this.ExplosionSound(this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                        break;
                     case 25:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].forcehyperjump = this.triggers[a].forcehyperjump;
                        this.timers[this.triggers[a].actions_targetA[tr]].enabledd = true;
                        break;
                     case 26:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].enabledd = false;
                        break;
                     case 27:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].ddelay = this.triggers[a].actions_targetB[tr];
                        break;
                     case 28:
                     case 53:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mc2 = this.mens[this.triggers[a].actions_targetA[tr]];
                           this.mc3 = this.game.addChildAt(new player(),this.game.numChildren);
                           this.NoMouse(this.mc3);
                           this.i3 = 0;
                           if(this.triggers[a].actions_targetB[tr] < 0)
                           {
                              this.ok = true;
                              this.i4 = -this.triggers[a].actions_targetB[tr];
                           }
                           else
                           {
                              this.ok = false;
                              u = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2;
                              this.v = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2;
                           }
                           if(this.triggers[a].actions_type[tr] == 53)
                           {
                              this.ok = true;
                              this.i4 = this.triggers[a].actions_targetB[tr];
                           }
                           tries = 0;
                           while(this.ok)
                           {
                              tries += 1;
                              if(tries > 10000)
                              {
                                 break;
                              }
                              this.ok = true;
                              u = this.regions[this.i4].x + Math.random() * this.regions[this.i4].w;
                              this.v = this.g_miny + (this.g_maxy - this.g_miny) * Math.random();
                              if(this.TracePointNoRagdolls(u,this.v))
                              {
                                 if(!this.TracePointNoRagdolls(u,this.v + 100))
                                 {
                                    this.ok = false;
                                 }
                              }
                              this.i2 = 0;
                              while(this.i2 < this.watertotal)
                              {
                                 if(u > this.wax[this.i2] - 100)
                                 {
                                    if(u < this.wax[this.i2] + this.waw[this.i2] + 100)
                                    {
                                       if(this.v > this.way[this.i2] - 100)
                                       {
                                          if(this.v < this.way[this.i2] + this.wah[this.i2] + 100)
                                          {
                                             this.ok = true;
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              if(this.mens[this.MP_myid].team != this.mc2.team)
                              {
                                 if(this.Dist2D(u,this.v,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                 {
                                    if(this.i3 < 10)
                                    {
                                       this.ok = true;
                                       ++this.i3;
                                    }
                                 }
                              }
                           }
                           this.mc3.x = new Number(u);
                           this.mc3.y = new Number(this.v);
                           this.create_player(this.mc3,this.mc2.hea,this.mc2.hmax);
                           this.mc3.tox = new Number(0);
                           this.mc3.toy = new Number(0);
                           this.mc3.mobility = this.mc2.mobility;
                           this.mc3.gui.txt1.text = this.mc2.gui.txt1.text;
                           this.mc3.nick = this.mc2.nick;
                           this.mc3.team = new Number(this.mc2.team);
                           if(this.mc3.team != this.mens[this.MP_myid].team)
                           {
                              this.mc3.gui.visible = false;
                           }
                           this.UpdateTeamColor(this.mc3);
                           this.mc3.palette = this.mc2.palette;
                           this.mc3.side = new Number(this.mc2.side);
                           this.mc3.tarx = this.mc3.x + this.mc3.side * 100;
                           this.mc3.tary = this.mc3.y;
                           this.mc3.armored = new Number(this.mc2.armored);
                           this.mc3.incar = new Number(-1);
                           this.mc3.char = new Number(this.mc2.char);
                           this.mc3.mdl_leg1_upper = new Number(this.mc2.mdl_leg1_upper);
                           this.mc3.mdl_leg1_middle = new Number(this.mc2.mdl_leg1_middle);
                           this.mc3.mdl_leg1_lower = new Number(this.mc2.mdl_leg1_lower);
                           this.mc3.mdl_leg2_upper = new Number(this.mc2.mdl_leg2_upper);
                           this.mc3.mdl_leg2_middle = new Number(this.mc2.mdl_leg2_middle);
                           this.mc3.mdl_leg2_lower = new Number(this.mc2.mdl_leg2_lower);
                           this.mc3.mdl_arm1_upper = new Number(this.mc2.mdl_arm1_upper);
                           this.mc3.mdl_arm1_lower = new Number(this.mc2.mdl_arm1_lower);
                           this.mc3.mdl_arm2_upper = new Number(this.mc2.mdl_arm2_upper);
                           this.mc3.mdl_arm2_lower = new Number(this.mc2.mdl_arm2_lower);
                           this.mc3.mdl_toe = new Number(this.mc2.mdl_toe);
                           this.mc3.mdl_body = new Number(this.mc2.mdl_body);
                           this.mc3.mdl_head = new Number(this.mc2.mdl_head);
                           if(this.mc2.arm1.lower.psi != null)
                           {
                              this.mc3.arm1.lower.psi.visible = this.mc2.arm1.lower.psi.visible;
                           }
                           if(this.mc2.arm2.lower.psi != null)
                           {
                              this.mc3.arm2.lower.psi.visible = this.mc2.arm2.lower.psi.visible;
                           }
                           this.mc3.blood_red = this.mc2.blood_red;
                           this.mc3.blood_green = this.mc2.blood_green;
                           this.mc3.blood_blue = this.mc2.blood_blue;
                           this.mc3.botaction = this.mc2.botaction;
                           this.mc3.ondeath = this.mc2.ondeath;
                           this.Effect(this.mc3.x,this.mc3.y - 41,14,0,0);
                           this.SpawnPlayerImmediately(this.mc3);
                           this.i7 = this.mc3.idd;
                           if(this.mc2.curwea != -1)
                           {
                              xx = this.mc3.x;
                              yy = this.mc3.y;
                              this.mc2 = this.guns[this.mc2.curwea];
                              this.mc3 = this.MakeGunByClass(this.mc2.model);
                              this.mc3.model = this.mc2.model;
                              this.mc3.upg = this.mc2.upg;
                              this.mc3.x = new Number(xx);
                              this.mc3.y = new Number(yy);
                              this.mc3.command = new int(this.mc2.command);
                              this.mc3.onmade();
                              this.mens[this.i7].curwea = this.mc3.idd;
                              this.mc3.picken_by = this.i7;
                              this.mens[this.i7].arm1.lower.psi.visible = false;
                              this.mens[this.i7].arm2.lower.psi.visible = false;
                              this.mc3.stat_bullets = this.mc2.stat_bullets;
                              this.mc3.recoil_multiplier = this.mc2.recoil_multiplier;
                              this.mc3.speed_multiplier = this.mc2.speed_multiplier;
                              this.mc3.stat_power = this.mc2.stat_power;
                              this.mc3.stat_averange = this.mc2.stat_averange;
                              this.mc3.stat_count = this.mc2.stat_count;
                              this.mc3.forcars = this.mc2.forcars;
                              this.mc3.stat_class = this.mc2.stat_class;
                           }
                        }
                        break;
                     case 29:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].team != this.mens[this.triggers[a].actions_targetA[tr]].team)
                              {
                                 if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                                 {
                                    if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                    {
                                       if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                       {
                                          if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                          {
                                             if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                             {
                                                if(this.mens[this.tr2].hunt == -1)
                                                {
                                                   this.mens[this.tr2].hunt = this.triggers[a].actions_targetA[tr];
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             if(this.mens[this.tr2].hunt == -1)
                                             {
                                                this.mens[this.tr2].hunt = this.triggers[a].actions_targetA[tr];
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 30:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          if(this.mcc.hea > 0)
                                          {
                                             u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2);
                                             this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                                             if(this.regions[this.triggers[a].actions_targetA[tr]].w == this.regions[this.triggers[a].actions_targetB[tr]].w)
                                             {
                                                if(this.regions[this.triggers[a].actions_targetA[tr]].h == this.regions[this.triggers[a].actions_targetB[tr]].h)
                                                {
                                                   u = this.regions[this.triggers[a].actions_targetA[tr]].x - this.regions[this.triggers[a].actions_targetB[tr]].x;
                                                   this.v = this.regions[this.triggers[a].actions_targetA[tr]].y - this.regions[this.triggers[a].actions_targetB[tr]].y;
                                                }
                                             }
                                             if(this.tr2 == this.MP_myid)
                                             {
                                                this.game.x += u;
                                                this.game.y += this.v;
                                             }
                                             this.i4 = 0;
                                             while(this.i4 < this.atotal)
                                             {
                                                if(this.aof[this.i4] == this.mcc.idd)
                                                {
                                                   this.ax[this.i4] -= u;
                                                   this.ay[this.i4] -= this.v;
                                                   if(this.GET_LITE_PHYS())
                                                   {
                                                      this.lax[this.i4] -= u;
                                                      this.lay[this.i4] -= this.v;
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.mcc.x -= u;
                                             this.mcc.y -= this.v;
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.i4 = 0;
                                             while(this.i4 < this.vehiclestotal)
                                             {
                                                if(this.vehicles[this.i4].io)
                                                {
                                                   if(this.vehicles[this.i4].master == this.mcc.idd)
                                                   {
                                                      if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                      {
                                                         this.vehicles[this.i4].master = -1;
                                                      }
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             if(this.mcc.incar != -1)
                                             {
                                                PutOutCar(this.mcc.incar);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 31:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          if(this.mcc.hea > 0)
                                          {
                                             u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2);
                                             this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                                             if(this.tr2 == this.MP_myid)
                                             {
                                                this.game.x += u;
                                                this.game.y += this.v;
                                             }
                                             this.i4 = 0;
                                             while(this.i4 < this.atotal)
                                             {
                                                if(this.aof[this.i4] == this.mcc.idd)
                                                {
                                                   this.ax[this.i4] -= u;
                                                   this.ay[this.i4] -= this.v;
                                                   if(this.GET_LITE_PHYS())
                                                   {
                                                      this.lax[this.i4] -= u;
                                                      this.lay[this.i4] -= this.v;
                                                   }
                                                   this.atox[this.i4] = -this.atox[this.i4];
                                                }
                                                ++this.i4;
                                             }
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.mcc.x -= u;
                                             this.mcc.y -= this.v;
                                             this.mcc.tox = -this.mcc.tox;
                                             this.mcc.side = -this.mcc.side;
                                             this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                                             this.i4 = 0;
                                             while(this.i4 < this.vehiclestotal)
                                             {
                                                if(this.vehicles[this.i4].io)
                                                {
                                                   if(this.vehicles[this.i4].master == this.mcc.idd)
                                                   {
                                                      if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                      {
                                                         this.vehicles[this.i4].master = -1;
                                                      }
                                                   }
                                                }
                                                ++this.i4;
                                             }
                                             if(this.mcc.incar != -1)
                                             {
                                                PutOutCar(this.mcc.incar);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 32:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].botaction = this.triggers[a].actions_targetB[tr];
                        break;
                     case 33:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].team = this.triggers[a].actions_targetB[tr];
                        this.UpdateCharProps(this.mens[this.triggers[a].actions_targetA[tr]]);
                        this.SpawnPlayerImmediately(this.mens[this.triggers[a].actions_targetA[tr]]);
                        this.i4 = 0;
                        while(this.i4 < this.playerstotal)
                        {
                           if(this.mens[this.i4].io)
                           {
                              this.UpdateTeamColor(this.mens[this.i4]);
                           }
                           ++this.i4;
                        }
                        break;
                     case 34:
                        this.mcc = this.decors[int(this.triggers[a].actions_targetA[tr])];
                        this.mcc.gotoAndStop(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 35:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushtox[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i6 = 0;
                        while(this.i6 < this.atotal)
                        {
                           if(this.aio[this.i6] == false || this.aio[this.i6] == true)
                           {
                              if(this.ax[this.i6] > this.pushx[this.i7])
                              {
                                 if(this.ax[this.i6] < this.pushw[this.i7])
                                 {
                                    if(this.ay[this.i6] > this.pushy[this.i7])
                                    {
                                       if(this.ay[this.i6] < this.pushh[this.i7])
                                       {
                                          this.WakeUpAtom(this.i6);
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i6;
                        }
                        break;
                     case 36:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushtoy[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i6 = 0;
                        while(this.i6 < this.atotal)
                        {
                           if(this.aio[this.i6] == false || this.aio[this.i6] == true)
                           {
                              if(this.ax[this.i6] > this.pushx[this.i7])
                              {
                                 if(this.ax[this.i6] < this.pushw[this.i7])
                                 {
                                    if(this.ay[this.i6] > this.pushy[this.i7])
                                    {
                                       if(this.ay[this.i6] < this.pushh[this.i7])
                                       {
                                          this.WakeUpAtom(this.i6);
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i6;
                        }
                        break;
                     case 37:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushstab[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 38:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        this.pushdamage[this.i7] = Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 39:
                        if(Number(this.triggers[a].actions_targetA[tr]) != 0)
                        {
                           this.MP_fps = Number(this.triggers[a].actions_targetA[tr]);
                        }
                        else
                        {
                           this.MP_fps = this.DEFAULT_FPS;
                        }
                        break;
                     case 40:
                        this.i7 = int(this.triggers[a].actions_targetA[tr]);
                        if(this.i7 == 1)
                        {
                           this.CASUAL_MODE = true;
                           this.STRICT_MODE = true;
                        }
                        else
                        {
                           this.CASUAL_MODE = false;
                           this.STRICT_MODE = false;
                        }
                        break;
                     case 41:
                        this.DialogTalk(this.triggers[a].actions_targetA[tr],int(this.triggers[a].actions_targetB[tr]));
                        break;
                     case 42:
                        this.DialogSay(this.triggers[a].actions_targetA[tr],this.triggers[a].actions_targetB[tr]);
                        break;
                     case 43:
                        if(this.triggers[a].actions_targetA[tr] == "0")
                        {
                           this.SetHint("");
                        }
                        else if(this.HINTS)
                        {
                           this.SetHint(this.triggers[a].actions_targetA[tr]);
                        }
                        break;
                     case 44:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].ticknew = 0;
                        break;
                     case 45:
                        if(this.triggers[a].actions_targetA[tr] == "true" || this.triggers[a].actions_targetA[tr] == "1")
                        {
                           this.AUTO_REVIVE = true;
                        }
                        else
                        {
                           this.AUTO_REVIVE = false;
                        }
                        break;
                     case 46:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.timers[this.triggers[a].actions_targetA[tr]].maxcalls = this.triggers[a].actions_targetB[tr];
                        break;
                     case 47:
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(!this.MP_mode)
                           {
                              this.LEVEL_END_FORCE = "credits";
                              this.CREDITS_BY_GAME_END = true;
                              if(this.PRO_BOTS)
                              {
                                 this.incBadge(14);
                              }
                              if(!this.EASY_MODE)
                              {
                                 this.incBadge(13);
                              }
                              this.incBadge(11);
                              this.MP_fps = 1;
                              this.darkness.alpha = 0;
                              this.darkness.visible = true;
                              if(this.CMPG_THIS_LEVEL == this.LEVELS_PASSED)
                              {
                                 ++this.LEVELS_PASSED;
                              }
                              this.CMPG_money += 10000;
                              this.SaveGame();
                              ++this.CMPG_THIS_LEVEL;
                           }
                        }
                        break;
                     case 48:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(!this.mens[this.triggers[a].actions_targetA[tr]].dead)
                        {
                           this.mens[this.triggers[a].actions_targetA[tr]].hea *= this.triggers[a].actions_targetB[tr] / 100;
                           this.mens[this.triggers[a].actions_targetA[tr]].hmax *= this.triggers[a].actions_targetB[tr] / 100;
                        }
                        break;
                     case 49:
                        if(this.triggers[a].actions_targetA[tr] == "true" || this.triggers[a].actions_targetA[tr] == "1" || this.triggers[a].actions_targetA[tr] == "yes")
                        {
                           this.NO_PSI = true;
                        }
                        else
                        {
                           this.NO_PSI = false;
                        }
                        this.i7 = 0;
                        while(this.i7 < this.playerstotal)
                        {
                           if(this.mens[this.i7].io)
                           {
                              if(!this.mens[this.i7].dead)
                              {
                                 this.ChangedGun(this.i7);
                              }
                           }
                           ++this.i7;
                        }
                        break;
                     case 50:
                        this.MP_fps = 1;
                        this.PlaySound_full(this.s_mission_done);
                        this.GotoMap(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 51:
                        this.game_scale = Number(this.triggers[a].actions_targetA[tr]) / 100;
                        if(isNaN(this.game_scale))
                        {
                           this.game_scale = 1;
                        }
                        if(this.game_scale < 0.1)
                        {
                           this.game_scale = 0.1;
                        }
                        if(this.game_scale > 15)
                        {
                           this.game_scale = 15;
                        }
                        break;
                     case 52:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].nick = this.triggers[a].actions_targetB[tr];
                        this.mens[this.triggers[a].actions_targetA[tr]].gui.txt1.text = this.mens[this.triggers[a].actions_targetA[tr]].nick;
                        break;
                     case 54:
                        this.EnLight(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 55:
                        this.DimLight(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 56:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].tox *= -2;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].tox *= -2;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 57:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].stability > 0 && this.mens[this.tr2].hea > 0)
                              {
                                 if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             this.mens[this.tr2].toy *= -2;
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                 {
                                    if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                       {
                                          this.mens[this.tr2].toy *= -2;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 58:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
                        mc.char = this.triggers[a].actions_targetB[tr];
                        mc.mdl_head = mc.char;
                        mc.mdl_leg1_upper = mc.char;
                        mc.mdl_leg1_middle = mc.char;
                        mc.mdl_leg1_lower = mc.char;
                        mc.mdl_leg2_upper = mc.char;
                        mc.mdl_leg2_middle = mc.char;
                        mc.mdl_leg2_lower = mc.char;
                        mc.mdl_arm1_upper = mc.char;
                        mc.mdl_arm1_lower = mc.char;
                        mc.mdl_arm2_upper = mc.char;
                        mc.mdl_arm2_lower = mc.char;
                        mc.mdl_toe = mc.char;
                        mc.mdl_body = mc.char;
                        mc.alpha = 1;
                        this.UpdateCharProps(mc);
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 59:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.i3 = this.triggers[a].actions_targetA[tr];
                        this.mens[this.i3].hea = this.mens[this.i3].hmax = this.triggers[a].actions_targetB[tr];
                        if(this.mens[this.i3].hea > 0)
                        {
                           this.mens[this.i3].dead = false;
                           this.mens[this.i3].dying = false;
                           this.ChangedGun(this.i3);
                           if(Boolean(this.mens[this.i3].isplayer) || this.mens[this.i3].team == this.mens[this.MP_myid].team)
                           {
                              this.mens[this.i3].gui.alpha = 1;
                              this.mens[this.i3].gui.visible = true;
                              this.mens[this.i3].hunt = -1;
                           }
                           this.mens[this.i3].deadtim = 0;
                           this.mens[this.i3].hp_head = Math.max(this.mens[this.i3].hea * 0.4,30);
                           this.mens[this.i3].hp_body = Math.max(this.mens[this.i3].hea * 0.6,30);
                           this.mens[this.i3].hp_legs = Math.max(this.mens[this.i3].hea * 0.5,30);
                           this.mens[this.i3].hp_arms = Math.max(this.mens[this.i3].hea * 0.4,30);
                           this.Hurt_nopain(this.i3);
                           this.SpawnPlayerImmediately(this.mens[this.i3]);
                        }
                        break;
                     case 60:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.i3 = this.triggers[a].actions_targetA[tr];
                        this.mens[this.i3].curwea = -1;
                        this.ChangedGun(this.i3);
                        this.i2 = 0;
                        while(this.i2 < this.gunstotal)
                        {
                           if(this.guns[this.i2].picken_by == this.i3)
                           {
                              if(this.guns[this.i2].picken_by == this.MP_myid)
                              {
                                 if(this.guns[this.i2].wep == -2)
                                 {
                                    if(this.guns[this.i2].nadekind == 1)
                                    {
                                       if(this.grenades_total > 0)
                                       {
                                          --this.grenades_total;
                                       }
                                    }
                                    if(this.guns[this.i2].nadekind == 2)
                                    {
                                       if(this.grenades_port_total > 0)
                                       {
                                          --this.grenades_port_total;
                                       }
                                    }
                                    if(this.guns[this.i2].nadekind == 3)
                                    {
                                       if(this.grenades_sh_total > 0)
                                       {
                                          --this.grenades_sh_total;
                                       }
                                    }
                                 }
                              }
                              this.guns[this.i2].picken_by = -1;
                           }
                           ++this.i2;
                        }
                        break;
                     case 61:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        if(this.mens[this.triggers[a].actions_targetA[tr]].io)
                        {
                           this.mcc = this.mens[this.triggers[a].actions_targetA[tr]];
                           this.mcc.tox *= this.triggers[a].actions_targetB[tr];
                           this.mcc.toy *= this.triggers[a].actions_targetB[tr];
                           this.i4 = 0;
                           while(this.i4 < this.atotal)
                           {
                              if(this.aof[this.i4] == this.triggers[a].actions_targetA[tr])
                              {
                                 this.atox[this.i4] *= this.triggers[a].actions_targetB[tr];
                                 this.atoy[this.i4] *= this.triggers[a].actions_targetB[tr];
                              }
                              ++this.i4;
                           }
                        }
                        break;
                     case 62:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_count = this.triggers[a].actions_targetB[tr];
                        break;
                     case 63:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange = this.triggers[a].actions_targetB[tr] / 180 * Math.PI;
                        break;
                     case 64:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_power = this.triggers[a].actions_targetB[tr];
                        break;
                     case 65:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 1;
                        this.mcc.stat_class = 0;
                        break;
                     case 66:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 1;
                        this.mcc.stat_class = 2;
                        break;
                     case 67:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 8;
                        this.mcc.stat_class = 4;
                        break;
                     case 68:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 10;
                        this.mcc.stat_class = 5;
                        break;
                     case 69:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = 7;
                        this.mcc.stat_class = 1;
                        break;
                     case 70:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        if(this.mens[this.tr2].io)
                        {
                           this.mcc = this.mens[this.tr2];
                           if(this.mcc.hea > 0)
                           {
                              u = this.ax[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2);
                              this.v = this.ay[this.mcc.b_toe] - (this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                              if(this.regions[this.triggers[a].actions_targetA[tr]].w == this.regions[this.triggers[a].actions_targetB[tr]].w)
                              {
                                 if(this.regions[this.triggers[a].actions_targetA[tr]].h == this.regions[this.triggers[a].actions_targetB[tr]].h)
                                 {
                                    u = this.regions[this.triggers[a].actions_targetA[tr]].x - this.regions[this.triggers[a].actions_targetB[tr]].x;
                                    this.v = this.regions[this.triggers[a].actions_targetA[tr]].y - this.regions[this.triggers[a].actions_targetB[tr]].y;
                                 }
                              }
                              if(this.tr2 == this.MP_myid)
                              {
                                 this.game.x += u;
                                 this.game.y += this.v;
                              }
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.mcc.idd)
                                 {
                                    this.ax[this.i4] -= u;
                                    this.ay[this.i4] -= this.v;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.lax[this.i4] -= u;
                                       this.lay[this.i4] -= this.v;
                                    }
                                 }
                                 ++this.i4;
                              }
                              this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                              this.mcc.x -= u;
                              this.mcc.y -= this.v;
                              this.Effect(this.mcc.x,this.mcc.y - 41,14,0,0);
                              this.i4 = 0;
                              while(this.i4 < this.vehiclestotal)
                              {
                                 if(this.vehicles[this.i4].io)
                                 {
                                    if(this.vehicles[this.i4].master == this.mcc.idd)
                                    {
                                       if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                       {
                                          this.vehicles[this.i4].master = -1;
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(this.mcc.incar != -1)
                              {
                                 PutOutCar(this.mcc.incar);
                              }
                           }
                        }
                        break;
                     case 71:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        block = null;
                        sf = 0;
                        while(sf < this.surf_lnk.length)
                        {
                           if(this.surf_lnk_to[sf] == this.triggers[a].actions_targetA[tr])
                           {
                              block = this.surf_lnk[sf];
                              break;
                           }
                           sf++;
                        }
                        if(block != null)
                        {
                           hex = Number(this.triggers[a].actions_targetB[tr].replace("#","0x"));
                           red = (hex & 16711680) >> 16;
                           green = (hex & 65280) >> 8;
                           blue = hex & 255;
                           clrs_mov = new ColorMatrixFilter();
                           matrix = new Array();
                           matrix = matrix.concat([1,0,0,0,red]);
                           matrix = matrix.concat([0,1,0,0,green]);
                           matrix = matrix.concat([0,0,1,0,blue]);
                           matrix = matrix.concat([0,0,0,1,0]);
                           clrs_mov.matrix = matrix;
                           block.filters = new Array(clrs_mov);
                        }
                        break;
                     case 72:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        u = this.triggers[a].actions_targetB[tr];
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].x > this.regions[this.triggers[a].actions_targetA[tr]].x)
                              {
                                 if(this.mens[this.tr2].x < this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w)
                                 {
                                    if(this.mens[this.tr2].y > this.regions[this.triggers[a].actions_targetA[tr]].y)
                                    {
                                       if(this.mens[this.tr2].y < this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h)
                                       {
                                          this.mcc = this.mens[this.tr2];
                                          this.i4 = 0;
                                          while(this.i4 < this.atotal)
                                          {
                                             if(this.aof[this.i4] == this.mcc.idd)
                                             {
                                                this.atox[this.i4] *= u;
                                                this.atoy[this.i4] *= u;
                                             }
                                             ++this.i4;
                                          }
                                          this.mcc.tox *= u;
                                          this.mcc.toy *= u;
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        break;
                     case 73:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.pspeed = this.triggers[a].actions_targetA[tr];
                        break;
                     case 74:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.weapon_penetration_factor = this.triggers[a].actions_targetA[tr];
                        break;
                     case 75:
                        this.triggers[a].actions_targetA[tr] = Number(this.triggers[a].actions_targetA[tr]);
                        this.maxbulletlife = this.triggers[a].actions_targetA[tr];
                        break;
                     case 76:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.forcars = false;
                        break;
                     case 77:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.forcars = true;
                        break;
                     case 78:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.wep = this.triggers[a].actions_targetB[tr];
                        break;
                     case 79:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.mens[this.tr2].x - this.regions[this.triggers[a].actions_targetA[tr]].w / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.mens[this.tr2].y - this.regions[this.triggers[a].actions_targetA[tr]].h / 2;
                        break;
                     case 80:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.triggers[a].actions_targetB[tr];
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.mens[this.tr2].x - this.regions[this.triggers[a].actions_targetA[tr]].w / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.mens[this.tr2].y - this.regions[this.triggers[a].actions_targetA[tr]].h / 2;
                        break;
                     case 81:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.guns[this.triggers[a].actions_targetA[tr]].onshot = this.triggers[a].actions_targetB[tr];
                        break;
                     case 82:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].onshot = this.triggers[a].actions_targetB[tr];
                        break;
                     case 83:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x += this.triggers[a].actions_targetB[tr];
                        break;
                     case 84:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].y += this.triggers[a].actions_targetB[tr];
                        break;
                     case 85:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].playsounds = false;
                        break;
                     case 86:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.doors[this.triggers[a].actions_targetA[tr]].playsounds = true;
                        break;
                     case 87:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.tr2 = this.TRIGGER_PLAYER_INITIATOR;
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.mens[this.tr2].tarx - this.regions[this.triggers[a].actions_targetA[tr]].w / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.mens[this.tr2].tary - this.regions[this.triggers[a].actions_targetA[tr]].h / 2;
                        break;
                     case 88:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].mobility = this.triggers[a].actions_targetB[tr];
                        break;
                     case 89:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].armored = this.triggers[a].actions_targetB[tr];
                        break;
                     case 90:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = String(this.triggers[a].actions_targetB[tr]);
                        hex = Number(this.triggers[a].actions_targetB[tr].replace("#","0x"));
                        red = (hex & 16711680) >> 16;
                        green = (hex & 65280) >> 8;
                        blue = hex & 255;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_red = red / 255 * 2;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_green = green / 255 * 2;
                        this.mens[this.triggers[a].actions_targetA[tr]].blood_blue = blue / 255 * 2;
                        break;
                     case 91:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] > 0)
                        {
                           this.triggers[a].actions_targetB[tr] = 1;
                        }
                        else if(this.triggers[a].actions_targetB[tr] < 0)
                        {
                           this.triggers[a].actions_targetB[tr] = -1;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = 0;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_movex = this.triggers[a].actions_targetB[tr];
                        break;
                     case 92:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] > 0)
                        {
                           this.triggers[a].actions_targetB[tr] = 1;
                        }
                        else if(this.triggers[a].actions_targetB[tr] < 0)
                        {
                           this.triggers[a].actions_targetB[tr] = -1;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = 0;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_movey = this.triggers[a].actions_targetB[tr];
                        break;
                     case 93:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] == 1)
                        {
                           this.triggers[a].actions_targetB[tr] = true;
                        }
                        else
                        {
                           this.triggers[a].actions_targetB[tr] = false;
                        }
                        this.mens[this.triggers[a].actions_targetA[tr]].act_fire = this.triggers[a].actions_targetB[tr];
                        break;
                     case 94:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].tarx = this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w * Math.random();
                        this.mens[this.triggers[a].actions_targetA[tr]].tary = this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h * Math.random();
                        break;
                     case 95:
                     case 96:
                        if(this.triggers[a].actions_type[tr] == 95)
                        {
                           rule = false;
                        }
                        else
                        {
                           rule = true;
                        }
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        res = this.TraceLine(this.regions[this.triggers[a].actions_targetA[tr]].x + this.regions[this.triggers[a].actions_targetA[tr]].w / 2,this.regions[this.triggers[a].actions_targetA[tr]].y + this.regions[this.triggers[a].actions_targetA[tr]].h / 2,this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                        if(res == rule)
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 97:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.triggers[a].actions_targetB[tr] >= 0)
                        {
                           if(this.triggers[a].actions_targetB[tr] < this.playerstotal)
                           {
                              this.mens[this.triggers[a].actions_targetA[tr]].hunt = this.mens[this.triggers[a].actions_targetB[tr]].idd;
                           }
                        }
                        break;
                     case 98:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = this.doors[this.triggers[a].actions_targetB[tr]].x + this.doors[this.triggers[a].actions_targetB[tr]].w / 2 - this.regions[this.triggers[a].actions_targetA[tr]].w / 2;
                        this.regions[this.triggers[a].actions_targetA[tr]].y = this.doors[this.triggers[a].actions_targetB[tr]].y + this.doors[this.triggers[a].actions_targetB[tr]].h / 2 - this.regions[this.triggers[a].actions_targetA[tr]].h / 2;
                        break;
                     case 99:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.EXEC_TRIGGER(this.triggers[a].actions_targetA[tr],true);
                        break;
                     case 100:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.triggers[a].actions_targetB[tr];
                        break;
                     case 101:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == undefined)
                        {
                           this.level_variables[this.triggers[a].actions_targetA[tr]] = this.triggers[a].actions_targetB[tr];
                        }
                        break;
                     case 102:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] += Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 103:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] *= Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 104:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] += Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 105:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] *= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 106:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.random() * Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 107:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.floor(Math.random() * Number(this.triggers[a].actions_targetB[tr]));
                        break;
                     case 108:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.round(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 109:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.floor(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 110:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) <= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 111:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) >= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 112:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] != this.level_variables[this.triggers[a].actions_targetB[tr]])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 113:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == this.level_variables[this.triggers[a].actions_targetB[tr]])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 114:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) <= Number(this.triggers[a].actions_targetB[tr]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 115:
                        if(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) >= Number(this.triggers[a].actions_targetB[tr]))
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 116:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] != this.triggers[a].actions_targetB[tr])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 117:
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] == this.triggers[a].actions_targetB[tr])
                        {
                           tr = int(this.triggers[a].actions_total);
                        }
                        break;
                     case 118:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.regions[this.triggers[a].actions_targetB[tr]].x;
                        break;
                     case 119:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.regions[this.triggers[a].actions_targetB[tr]].y;
                        break;
                     case 120:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].x = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 121:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.regions[this.triggers[a].actions_targetA[tr]].y = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 122:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.triggers[a].actions_targetB[tr]].hea;
                        break;
                     case 123:
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        if(this.level_variables[this.triggers[a].actions_targetA[tr]] != this.triggers[a].actions_targetB[tr])
                        {
                           tr++;
                        }
                        break;
                     case 124:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) % Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 125:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        break;
                     case 126:
                        power = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.PhysicsExplosion(this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2,power * 5,power * 0.6,power * 10,-1);
                        this.ExplosionSound(this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w / 2,this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h / 2);
                        break;
                     case 127:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]) % Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 128:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        count = int(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_count = count;
                        break;
                     case 129:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        accuracy = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_averange = accuracy / 180 * Math.PI;
                        break;
                     case 130:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        power = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_power = power;
                        break;
                     case 131:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] /= Number(this.triggers[a].actions_targetB[tr]);
                        break;
                     case 132:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] /= Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        break;
                     case 133:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.pow(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 134:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.pow(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.triggers[a].actions_targetB[tr]));
                        break;
                     case 135:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.sin(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 136:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.cos(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 137:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_myid;
                        break;
                     case 138:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_mode ? 1 : 0;
                        break;
                     case 139:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_spectator ? 1 : 0;
                        break;
                     case 140:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GET_LITE_PHYS() ? 1 : 0;
                        break;
                     case 141:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_head -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 142:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_arms -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 143:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_body -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 144:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mens[this.triggers[a].actions_targetA[tr]].hp_legs -= this.triggers[a].actions_targetB[tr];
                        this.Hurt(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 145:
                        this.triggers[a].actions_targetA[tr] = this.triggers[a].actions_targetA[tr];
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        c = 0;
                        this.tr2 = 0;
                        while(this.tr2 < this.playerstotal)
                        {
                           if(this.mens[this.tr2].io)
                           {
                              if(this.mens[this.tr2].hea > 0)
                              {
                                 if(this.ax[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].x)
                                 {
                                    if(this.ax[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].x + this.regions[this.triggers[a].actions_targetB[tr]].w)
                                    {
                                       if(this.ay[this.mens[this.tr2].b_toe] > this.regions[this.triggers[a].actions_targetB[tr]].y)
                                       {
                                          if(this.ay[this.mens[this.tr2].b_toe] < this.regions[this.triggers[a].actions_targetB[tr]].y + this.regions[this.triggers[a].actions_targetB[tr]].h)
                                          {
                                             c++;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = c;
                        break;
                     case 146:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.TRIGGER_PLAYER_INITIATOR].login_name;
                        break;
                     case 147:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.TRIGGER_PLAYER_INITIATOR].nick;
                        break;
                     case 148:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_room_name;
                        break;
                     case 149:
                        key = String(this.triggers[a].actions_targetA[tr]);
                        phrase = String(this.triggers[a].actions_targetB[tr]);
                        if(this.level_variables[key].indexOf(phrase) != -1)
                        {
                           this.level_variables[key] = 1;
                        }
                        else
                        {
                           this.level_variables[key] = 0;
                        }
                        break;
                     case 150:
                        key = String(this.triggers[a].actions_targetA[tr]);
                        key2 = String(this.triggers[a].actions_targetB[tr]);
                        if(this.level_variables[key].indexOf(this.level_variables[key2]) != -1)
                        {
                           this.level_variables[key] = 1;
                        }
                        else
                        {
                           this.level_variables[key] = 0;
                        }
                        break;
                     case 151:
                        key = String(this.triggers[a].actions_targetA[tr]);
                        key2 = String(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[key] = this.level_variables[key2].length;
                        break;
                     case 152:
                        key = String(this.triggers[a].actions_targetA[tr]);
                        key2 = String(this.triggers[a].actions_targetB[tr]);
                        this.level_variables[key] += String(this.level_variables[key2]);
                        break;
                     case 153:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = 1 - this.level_variables[this.triggers[a].actions_targetA[tr]];
                        break;
                     case 154:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = -this.level_variables[this.triggers[a].actions_targetA[tr]];
                        break;
                     case 155:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.GSPEED;
                        break;
                     case 156:
                        this.user_says_trigger = int(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 157:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.user_says_id].login_name;
                        break;
                     case 158:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.user_says_id].nick;
                        break;
                     case 159:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.user_says_id;
                        break;
                     case 160:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.user_says_text;
                        break;
                     case 161:
                        this.session_variables = {};
                        break;
                     case 162:
                        this.session_variables[this.triggers[a].actions_targetA[tr]] = this.level_variables[this.triggers[a].actions_targetB[tr]];
                        break;
                     case 163:
                        this.level_variables[this.triggers[a].actions_targetB[tr]] = this.session_variables[this.triggers[a].actions_targetA[tr]];
                        break;
                     case 164:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_head = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 165:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_body = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 166:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_arm1_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm1_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm2_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_arm2_lower = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 167:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Math.floor(this.triggers[a].actions_targetB[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        mc.mdl_leg1_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg1_middle = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg1_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_upper = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_middle = this.triggers[a].actions_targetB[tr];
                        mc.mdl_leg2_lower = this.triggers[a].actions_targetB[tr];
                        mc.mdl_toe = this.triggers[a].actions_targetB[tr];
                        this.SpawnPlayerImmediately(mc);
                        break;
                     case 168:
                        this.triggers[a].actions_targetA[tr] = Math.floor(this.triggers[a].actions_targetA[tr]);
                        mc = this.mens[this.triggers[a].actions_targetA[tr]];
                        palette = this.triggers[a].actions_targetB[tr];
                        mc.palette[0] = palette.charAt(0);
                        mc.palette[1] = palette.charAt(1);
                        mc.palette[2] = palette.charAt(2);
                        mc.palette[3] = palette.charAt(3);
                        this.UpdatePlayerColorMP(mc,true);
                        break;
                     case 169:
                        loader = new URLLoader();
                        variable_to_save_name = String(this.triggers[a].actions_targetB[tr]);
                        loader.addEventListener(Event.COMPLETE,function(param1:Event):void
                        {
                           var _loc2_:URLLoader = null;
                           _loc2_ = URLLoader(param1.target);
                           level_variables[variable_to_save_name] = _loc2_.data;
                        });
                        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,function(param1:SecurityErrorEvent):void
                        {
                           level_variables[variable_to_save_name] = "error 1";
                        });
                        loader.addEventListener(HTTPStatusEvent.HTTP_STATUS,function(param1:HTTPStatusEvent):void
                        {
                           level_variables[variable_to_save_name] = "error 2";
                        });
                        loader.addEventListener(IOErrorEvent.IO_ERROR,function ioErrorHandler(param1:IOErrorEvent):void
                        {
                           level_variables[variable_to_save_name] = "error 3";
                        });
                        this.level_variables[variable_to_save_name] = "loading...";
                        request = new URLRequest("/pb2/custom_map_url_request.php");
                        variables = new URLVariables();
                        variables.request_url = this.level_variables[this.triggers[a].actions_targetA[tr]];
                        variables.map_id = this.MP_map_name;
                        request.data = variables;
                        request.method = URLRequestMethod.POST;
                        try
                        {
                           loader.load(request);
                        }
                        catch(error:Error)
                        {
                           level_variables[variable_to_save_name] = "error 4";
                        }
                        break;
                     case 170:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.speed_multiplier = this.triggers[a].actions_targetB[tr];
                        break;
                     case 171:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.speed_multiplier = mult;
                        break;
                     case 172:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = Number(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.recoil_multiplier = this.triggers[a].actions_targetB[tr];
                        break;
                     case 173:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        mult = Number(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.recoil_multiplier = mult;
                        break;
                     case 174:
                        diff = int(this.triggers[a].actions_targetA[tr]);
                        this.SetAIDifficulty(diff);
                        break;
                     case 175:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        this.triggers[a].actions_targetB[tr] = int(this.triggers[a].actions_targetB[tr]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = this.triggers[a].actions_targetB[tr];
                        break;
                     case 176:
                        this.triggers[a].actions_targetA[tr] = int(this.triggers[a].actions_targetA[tr]);
                        index_value = int(this.level_variables[this.triggers[a].actions_targetB[tr]]);
                        this.mcc = this.guns[this.triggers[a].actions_targetA[tr]];
                        this.mcc.stat_bullets = index_value;
                        break;
                     case 177:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.MP_mode ? this.MP_type : 0;
                        break;
                     case 178:
                        this.tr3 = int(this.triggers[a].actions_targetB[tr]);
                        inv = "";
                        this.tr2 = 0;
                        while(this.tr2 < this.gunstotal)
                        {
                           if(this.guns[this.tr2].io)
                           {
                              if(this.guns[this.tr2].picken_by == this.tr3)
                              {
                                 if(!this.guns[this.tr2].forcars)
                                 {
                                    if(inv != "")
                                    {
                                       inv += ";";
                                    }
                                    inv += this.guns[this.tr2].model + "^" + this.guns[this.tr2].upg + "^" + this.guns[this.tr2].command;
                                 }
                              }
                           }
                           ++this.tr2;
                        }
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = inv;
                        break;
                     case 179:
                        inv = String(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        char_id = int(this.triggers[a].actions_targetB[tr]);
                        if(inv != "")
                        {
                           weps = inv.split(";");
                           xx = Number(this.mens[char_id].x);
                           yy = Number(this.mens[char_id].y);
                           i = 0;
                           while(i < weps.length)
                           {
                              parts = weps[i].split("^");
                              model = String(parts[0]);
                              upgrade = int(parts[1]);
                              command = int(parts[2]);
                              this.mc3 = this.MakeGunByClass(model);
                              this.mc3.model = model;
                              this.mc3.upg = upgrade;
                              this.mc3.x = new Number(xx);
                              this.mc3.y = new Number(yy);
                              this.mc3.command = new int(command);
                              this.mc3.onmade();
                              i++;
                           }
                        }
                        break;
                     case 180:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_INITIATOR;
                        break;
                     case 181:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER;
                        break;
                     case 182:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER >= 0 ? this.mens[this.TRIGGER_PLAYER_KILLER].login_name : ".nobody";
                        break;
                     case 183:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.TRIGGER_PLAYER_KILLER >= 0 ? this.mens[this.TRIGGER_PLAYER_KILLER].nick : "Empty";
                        break;
                     case 184:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].login_name;
                        break;
                     case 185:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].nick;
                        break;
                     case 186:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[int(this.triggers[a].actions_targetB[tr])].team;
                        break;
                     case 187:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].login_name;
                        break;
                     case 188:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].nick;
                        break;
                     case 189:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = this.mens[this.level_variables[this.triggers[a].actions_targetB[tr]]].team;
                        break;
                     case 190:
                        this.SHOW_FRAG_MESSAGES = true;
                        break;
                     case 191:
                        this.SHOW_FRAG_MESSAGES = false;
                        break;
                     case 192:
                        this.sky.gotoAndStop(int(this.triggers[a].actions_targetA[tr]));
                        break;
                     case 193:
                        hex_str = String(this.triggers[a].actions_targetA[tr]);
                        if(hex_str.length == 7)
                        {
                           hex_int = int(parseInt(hex_str.substr(1),16));
                           r = (hex_int & 16711680) >> 16;
                           g = (hex_int & 65280) >> 8;
                           b = hex_int & 255;
                           this.sky.transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
                        }
                        break;
                     case 194:
                        this.multiplayer_repsawn_timer_speed = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 195:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(r,this.sky.transform.colorTransform.greenMultiplier,this.sky.transform.colorTransform.blueMultiplier);
                        break;
                     case 196:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(this.sky.transform.colorTransform.redMultiplier,r,this.sky.transform.colorTransform.blueMultiplier);
                        break;
                     case 197:
                        r = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        if(this.sky.transform.colorTransform == null)
                        {
                           this.sky.transform.colorTransform = new ColorTransform(1,1,1);
                        }
                        this.sky.transform.colorTransform = new ColorTransform(this.sky.transform.colorTransform.redMultiplier,this.sky.transform.colorTransform.greenMultiplier,r);
                        break;
                     case 198:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = {
                           "pitch":1,
                           "volume":1,
                           "voice":"UK English Male"
                        };
                        if(ExternalInterface.available)
                        {
                           ExternalInterface.call("TTS_Prepare()");
                        }
                        break;
                     case 199:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].volume = Math.max(Math.min(this.triggers[a].actions_targetB[tr],1.5),0);
                        break;
                     case 200:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].pitch = Math.max(Math.min(this.triggers[a].actions_targetB[tr],1.5),0);
                        break;
                     case 201:
                        this.level_variables[this.triggers[a].actions_targetA[tr]].voice = this.triggers[a].actions_targetB[tr];
                        break;
                     case 202:
                        if(ExternalInterface.available)
                        {
                           ExternalInterface.call("TTS_Speak( \"" + this.triggers[a].actions_targetB[tr].split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + this.level_variables[this.triggers[a].actions_targetA[tr]].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + this.level_variables[this.triggers[a].actions_targetA[tr]].pitch + ", " + this.level_variables[this.triggers[a].actions_targetA[tr]].volume * this.FX_VOLUME + " )");
                        }
                        break;
                     case 203:
                        if(ExternalInterface.available)
                        {
                           ExternalInterface.call("TTS_Speak( \"" + this.level_variables[this.triggers[a].actions_targetB[tr]].split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + this.level_variables[this.triggers[a].actions_targetA[tr]].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + this.level_variables[this.triggers[a].actions_targetA[tr]].pitch + ", " + this.level_variables[this.triggers[a].actions_targetA[tr]].volume * this.FX_VOLUME + " )");
                        }
                        break;
                     case 204:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.asin(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 205:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.acos(Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 206:
                        this.level_variables[this.triggers[a].actions_targetA[tr]] = Math.atan2(Number(this.level_variables[this.triggers[a].actions_targetA[tr]]),Number(this.level_variables[this.triggers[a].actions_targetB[tr]]));
                        break;
                     case 207:
                        this.ANONYMOUS_MODE = true;
                        break;
                     case 208:
                        this.ANONYMOUS_MODE = false;
                        break;
                     case 209:
                        this.GLOBAL_REGEN_SPEED = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 210:
                        this.GLOBAL_REGEN_SPEED = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 211:
                        this.GLOBAL_REGEN_DELAY = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 212:
                        this.GLOBAL_REGEN_DELAY = Number(this.level_variables[this.triggers[a].actions_targetA[tr]]);
                        break;
                     case 213:
                        this.GLOBAL_FALL_DAMAGE_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 214:
                        this.GLOBAL_FALL_SENSITIVITY_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 215:
                        this.BOOST_MULT = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 216:
                        this.BOOST_HIGH_PHYSICS = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                     case 217:
                        this.BOOST_LOW_PHYSICS = Number(this.triggers[a].actions_targetA[tr]);
                        break;
                  }
                  tr++;
               }
               if(this.triggers[a].maxcalls != -1)
               {
                  --this.triggers[a].maxcalls;
               }
            }
            catch(e:Error)
            {
               SpawnLevelLogicErrorIfNeeded(e,"Trigger " + triggers[a].uid + ", Action #" + (tr + 1));
            }
            return true;
         }
         return false;
      }
      
      public function SpawnLevelLogicErrorIfNeeded(param1:Error, param2:String) : void
      {
         if(this.ENABLE_LEVEL_LOGIC_ERRORS)
         {
            this.ChatNewMsg("<font color=\"#FF0000\">Level logic error: " + param2 + ", Engine Error: " + param1.errorID + " :: " + param1.name + " :: " + param1.message + "</font>");
         }
      }
      
      public function SetAIDifficulty(param1:int) : void
      {
         if(param1 <= 1)
         {
            this.EASY_MODE = true;
            this.PRO_BOTS = false;
         }
         else if(param1 <= 2)
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = false;
         }
         else
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = true;
         }
      }
      
      public function GiveStarterGunsDM(param1:Number, param2:Number) : void
      {
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:Vector.<int> = null;
         var _loc6_:int = 0;
         var _loc7_:Boolean = false;
         var _loc8_:int = 0;
         var _loc9_:MovieClip = null;
         if(this.dm_slots_on_spawn.length == 0)
         {
            return;
         }
         _loc3_ = 0;
         _loc4_ = 0;
         while(_loc4_ < this.dm_slots_on_spawn.length && _loc3_ < this.dm_max_guns_on_spawn)
         {
            _loc5_ = new Vector.<int>();
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc4_])
               {
                  if(this.guns[_loc6_].picken_by == -1)
                  {
                     _loc7_ = true;
                     _loc8_ = 0;
                     while(_loc8_ < this.playerstotal)
                     {
                        if(this.mens[_loc8_].io)
                        {
                           if(this.mens[_loc8_].isplayer)
                           {
                              if(this.mens[_loc8_].hea > 0)
                              {
                                 if(Math.abs(this.mens[_loc8_].x - this.guns[_loc6_].x) < 200)
                                 {
                                    if(Math.abs(this.mens[_loc8_].y - this.guns[_loc6_].y) < 200)
                                    {
                                       _loc7_ = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                        _loc8_++;
                     }
                     if(_loc7_)
                     {
                        _loc5_.push(_loc6_);
                     }
                  }
               }
               _loc6_++;
            }
            if(_loc5_.length == 0)
            {
               _loc6_ = 0;
               while(_loc6_ < this.gunstotal)
               {
                  if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc4_])
                  {
                     if(this.guns[_loc6_].picken_by == -1)
                     {
                        _loc5_.push(_loc6_);
                     }
                  }
                  _loc6_++;
               }
            }
            if(_loc5_.length > 0)
            {
               _loc6_ = _loc5_[Math.floor(Math.random() * _loc5_.length)];
               (_loc9_ = this.guns[_loc6_]).x = param1;
               _loc9_.y = param2 - 50;
               this.atox[_loc9_.b_p1] = 0;
               this.atoy[_loc9_.b_p1] = 0;
               this.WakeUpAtom(_loc9_.b_p1);
               this.ax[_loc9_.b_p1] = _loc9_.x - 10;
               this.ay[_loc9_.b_p1] = _loc9_.y;
               this.atox[_loc9_.b_p2] = 0;
               this.atoy[_loc9_.b_p2] = 0;
               this.WakeUpAtom(_loc9_.b_p2);
               this.ax[_loc9_.b_p2] = _loc9_.x + 10;
               this.ay[_loc9_.b_p2] = _loc9_.y;
               _loc3_++;
            }
            _loc4_++;
         }
      }
      
      public function create_barrel(param1:MovieClip) : void
      {
         this.barrels[this.barrelstotal] = param1;
         param1.gotoAndStop(2);
         param1.hea = 15;
         param1.dist = 2.6;
         param1.b_left_top = this.CreatePoint(param1.x - 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_top = this.CreatePoint(param1.x + 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_bottom = this.CreatePoint(param1.x + 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_left_bottom = this.CreatePoint(param1.x - 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.ch_top = this.Connect(param1.b_left_top,param1.b_right_top,0,10,-1);
         param1.ch_left = this.Connect(param1.b_left_top,param1.b_left_bottom,0,26,-1);
         param1.ch_right = this.Connect(param1.b_right_top,param1.b_right_bottom,0,26,-1);
         param1.ch_bottom = this.Connect(param1.b_right_bottom,param1.b_left_bottom,0,10,-1);
         param1.ch_cross1 = this.Connect(param1.b_left_top,param1.b_right_bottom,0,Math.sqrt(100 + 676),-1);
         param1.ch_cross2 = this.Connect(param1.b_right_top,param1.b_left_bottom,0,Math.sqrt(100 + 676),-1);
         if(param1.mdl == "bar_blue")
         {
            param1.dist *= 1.5;
         }
         if(param1.mdl == "bar_red")
         {
            param1.dist *= 2;
         }
         ++this.barrelstotal;
      }
      
      public function create_vehicle(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.vehicles[this.vehiclestotal] = param1;
         param1.gotoAndStop(2);
         param1.typ = param2;
         param1.dead = false;
         param1.master = -1;
         param1.wep0 = -1;
         param1.wep1 = -1;
         param1.wep2 = -1;
         param1.side = param3;
         param1.ecosystem = false;
         param1.io = true;
         param1.nick = "";
         if(param2 == 0)
         {
            param1.nick = param1.gui.txt1.text = "Mobile r081-CS";
            param1.carbody.scaleY = param1.side;
            param1.hea = 400;
            param1.hmax = 400;
            param1.b_w1 = this.CreatePoint(param1.x + param1.w1.x * param1.side,param1.y + param1.w1.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x + param1.w2.x * param1.side,param1.y + param1.w2.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w1b = param1.b_w1;
            param1.b_w2b = param1.b_w2;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,35,false,5,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x + param1.w1.x * param1.side,param1.y,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + (param1.w2.x / 2 + 10) * param1.side,param1.y + 20,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 1)
         {
            param1.nick = param1.gui.txt1.text = "Hound Walker-CS";
            param1.hea = 300;
            param1.hmax = 300;
            param1.move_state = 0;
            param1.move_height = 0;
            param1.jump_state = 0;
            param1.jump_state2 = Math.PI / 2;
            param1.corpse_h = 80;
            param1.deadtim = 0;
            param1.b_p1 = this.CreatePoint(param1.x + 0 * param1.side,param1.y,param1.tox,param1.toy,45,false,5,-this.vehiclestotal - 200);
            param1.b_p2 = this.CreatePoint(param1.x + 62 * param1.side,param1.y,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_p3 = this.CreatePoint(param1.x + 0 * param1.side,param1.y - 50,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_w1 = this.CreatePoint(param1.x + 5 * param1.side,param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x - 5 * param1.side,param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w1b = this.CreatePoint(param1.x + 2.5 * param1.side,param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_w2b = this.CreatePoint(param1.x - 2.5 * param1.side,param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.xx = 1;
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p2,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w1,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w2,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w1,1,130,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w2,1,130,this.xx);
               param1.ch_leg1upper = this.Connect(param1.b_p1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg1lower = this.Connect(param1.b_w1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg2upper = this.Connect(param1.b_p1,param1.b_w2b,0,210 / 2,0.1);
               param1.ch_leg2lower = this.Connect(param1.b_w2,param1.b_w2b,0,210 / 2,0.1);
               ++this.i;
            }
            param1.ch_cross2 = this.Connect(param1.b_w1,param1.b_w2,2,150,this.xx);
            param1.leg1.x = 0;
            param1.leg1.y = 0;
            param1.leg2.x = 0;
            param1.leg2.y = 0;
            param1.leg1.scaleX = param1.side;
            param1.leg2.scaleX = param1.side;
            param1.leg1b.scaleX = param1.side;
            param1.leg2b.scaleX = param1.side;
            param1.carbody.scaleY = param1.side;
         }
         else if(param2 == 2)
         {
            param1.nick = param1.gui.txt1.text = "Life-Capsule";
            param1.side = 1;
            param1.hea = 10;
            param1.hmax = 10;
            param1.b_lt = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lt2 = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt2 = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb2 = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb2 = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lt2,param1.b_lb2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_rt2,param1.b_rb2,0,-1,1);
               ++this.i;
            }
            param1.ch_t0 = this.Connect(param1.b_lt,param1.b_lt2,0,-1,1);
            param1.ch_t1 = this.Connect(param1.b_rt,param1.b_rt2,0,-1,1);
            param1.ch_t2 = this.Connect(param1.b_lb,param1.b_lb2,0,-1,1);
            param1.ch_t3 = this.Connect(param1.b_rb,param1.b_rb2,0,-1,1);
            param1.ch_t4 = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_t5 = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_t6 = this.Connect(param1.b_lt2,param1.b_rb2,0,-1,1);
            param1.ch_t7 = this.Connect(param1.b_rt2,param1.b_lb2,0,-1,1);
         }
         else if(param2 == 3)
         {
            param1.gotoAndStop(1);
            param1.hea = 20;
            param1.hmax = 20;
            param1.side = 1;
            param1.grabtim = 10;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.b_lt = this.CreatePoint(param1.x - 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,25,false,9,-this.vehiclestotal - 200);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_c,0,-1,1);
         }
         else if(param2 == 4)
         {
            param1.nick = param1.gui.txt1.text = "Drone";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 15 * param1.side,param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 15 * param1.side,param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 5)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.resttim = 0;
            this.i2 = 0;
            while(this.i2 < 2)
            {
               this.i = 0;
               while(this.i < 10)
               {
                  param1["b_c" + this.i] = this.CreatePoint(param1.x,param1.y + 20 * this.i,param1.tox,param1.toy,0,false,4,-this.vehiclestotal - 200);
                  if(this.i > 0)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 1)],param1["b_c" + this.i],0,-1,1);
                  }
                  if(this.i > 1)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 2)],param1["b_c" + this.i],0,-1,1);
                  }
                  ++this.i;
               }
               ++this.i2;
            }
         }
         else if(param2 == 6)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.attached = -1;
            if(!this.HINTS)
            {
               param1.origin.visible = false;
            }
            param1.gui.txt1.text = "Hand holder";
            param1.gui.visible = false;
            param1.resttim = 0;
         }
         else if(param2 == 7)
         {
            param1.nick = param1.gui.txt1.text = "Corvette";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 90 * param1.side,param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 90 * param1.side,param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         if(this.MP_mode)
         {
            param1.gui.visible = false;
         }
         ++this.vehiclestotal;
      }
      
      public function HurtMyPlayer(param1:Number, param2:Number, param3:Number) : void
      {
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.1;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.1;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.1;
            }
            else
            {
               this.pb2.alpha += param3 * 0.1;
            }
            this.hurt_i4 = 0;
            while(this.hurt_i4 < 4)
            {
               this._root["pb" + this.hurt_i4].alpha += param3 * 0.015;
               this._root["pb" + this.hurt_i4].visible = true;
               if(this._root["pb" + this.hurt_i4].alpha > 0.9)
               {
                  this._root["pb" + this.hurt_i4].alpha = 0.9;
               }
               ++this.hurt_i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.3;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.3;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.3;
            }
            else
            {
               this.pb2.alpha += param3 * 0.3;
            }
            if(this.SCREEN_EFFECTS)
            {
               this.pb4.alpha += param3 * 0.015;
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 5)
               {
                  this.pb4.visible = true;
                  if(this._root["pb" + this.hurt_i4].alpha > 0.9)
                  {
                     this._root["pb" + this.hurt_i4].alpha = 0.9;
                  }
                  ++this.hurt_i4;
               }
            }
            else
            {
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 4)
               {
                  this.pb4.visible = true;
                  if(this._root["pb" + this.hurt_i4].alpha > 0.9)
                  {
                     this._root["pb" + this.hurt_i4].alpha = 0.9;
                  }
                  ++this.hurt_i4;
               }
            }
         }
         if(this.mxnds1 + this.mxnds2 + this.mxnds3 == 0 && this.tnds > 10)
         {
            this.stable = false;
            this.unstable = 1;
         }
         if(this.mens[this.MP_myid].hea <= 0)
         {
            if(!this.mens[this.MP_myid].dead)
            {
               this.hpwarning = false;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  this.hpbeepch = this.s_hp_dead.play(0,0,this.vol);
               }
            }
         }
         else if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax < this.hp_warn_max)
         {
            if(!this.hpwarning)
            {
               this.hpwarning = true;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  if(this.GLOBAL_REGEN_SPEED != 0)
                  {
                     if(this.GLOBAL_REGEN_DELAY < 10)
                     {
                        this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                     }
                  }
               }
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
               }
            }
         }
         if(this.tnds > 12 + this.mxnds1 + this.mxnds2 + this.mxnds3)
         {
            this.stable = false;
            this.unstable = 2;
         }
      }
      
      public function Alerted(param1:MovieClip) : void
      {
         if(!param1.dying && (!param1.isplayer || !this.MP_mode || param1.team == this.mens[this.MP_myid].team))
         {
            param1.last_contact = 0;
            if(param1.hunt == -1)
            {
               this.Say(param1,this.dectalk_welcome[Math.floor(Math.random() * this.dectalk_welcome.length)]);
            }
         }
      }
      
      public function Hurt_nopain(param1:Number) : void
      {
         if(this.VIOLENCE || this.CASUAL_MODE || this.MP_mode)
         {
            if(this.mens[param1].hp_legs <= 0)
            {
               if(!this.mens[param1].brk_legs)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  this.mens[param1].brk_legs = true;
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].leg1.middle);
                     this.RestoreLimbColor(this.mens[param1].leg2.middle);
                     this.mens[param1].leg1.lower.visible = false;
                     this.mens[param1].leg2.lower.visible = false;
                     this.mens[param1].leg1.middle.gotoAndStop(30);
                     this.mens[param1].leg2.middle.gotoAndStop(30);
                     this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.arad[this.mens[param1].b_leg1] *= 0.3;
                  this.arad[this.mens[param1].b_leg2] *= 0.3;
                  this.chdef[this.mens[param1].ch_leg1_max] = 20;
                  this.chdef[this.mens[param1].ch_leg2_max] = 20;
                  this.chio[this.mens[param1].ch_leg1_damp] = -1;
                  this.chio[this.mens[param1].ch_leg2_damp] = -1;
                  this.chdef[this.mens[param1].ch_body_ang1] *= 0.6;
                  this.chdef[this.mens[param1].ch_body_ang2] *= 0.6;
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_leg1],this.ay[this.mens[param1].b_leg1] - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.FlowAt(this.ax[this.mens[param1].b_leg1],this.ay[this.mens[param1].b_leg1] - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.MakeDying(this.mens[param1]);
               }
            }
            else if(this.mens[param1].brk_legs)
            {
               this.mens[param1].brk_legs = false;
               this.mens[param1].leg1.lower.visible = true;
               this.mens[param1].leg2.lower.visible = true;
               this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.arad[this.mens[param1].b_leg1] /= 0.3;
               this.arad[this.mens[param1].b_leg2] /= 0.3;
               this.chdef[this.mens[param1].ch_leg1_max] = 31;
               this.chdef[this.mens[param1].ch_leg2_max] = 31;
               this.chio[this.mens[param1].ch_leg1_damp] = true;
               this.chio[this.mens[param1].ch_leg2_damp] = true;
               this.chdef[this.mens[param1].ch_body_ang1] /= 0.6;
               this.chdef[this.mens[param1].ch_body_ang2] /= 0.6;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_arms <= 0)
            {
               if(!this.mens[param1].brk_arms)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  this.mens[param1].brk_arms = true;
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].arm1.lower);
                     this.RestoreLimbColor(this.mens[param1].arm2.lower);
                     this.mens[param1].arm1.lower.gotoAndStop(20);
                     this.mens[param1].arm2.lower.gotoAndStop(20);
                     if(this.mens[param1].arm1.lower.psi != null)
                     {
                        this.mens[param1].arm1.lower.psi.visible = false;
                     }
                     if(this.mens[param1].arm2.lower.psi != null)
                     {
                        this.mens[param1].arm2.lower.psi.visible = false;
                     }
                  }
                  this.arad[this.mens[param1].b_arm1] *= 0.4;
                  this.arad[this.mens[param1].b_arm2] *= 0.4;
                  if(this.VIOLENCE)
                  {
                     this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_arm1],this.ay[this.mens[param1].b_arm1],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.FlowAt(this.ax[this.mens[param1].b_arm2],this.ay[this.mens[param1].b_arm2],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                  this.MakeDying(this.mens[param1]);
               }
            }
            else if(this.mens[param1].brk_arms)
            {
               this.mens[param1].brk_arms = false;
               this.arad[this.mens[param1].b_arm1] /= 0.4;
               this.arad[this.mens[param1].b_arm2] /= 0.4;
               this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_body <= 0)
            {
               if(!this.mens[param1].brk_body)
               {
                  this.mens[param1].brk_body = true;
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else if(Math.random() > 0.5)
                  {
                     this.PlaySound(this.s_blood_body,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_body2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  if(this.mens[param1].team != this.mens[this.MP_myid].team)
                  {
                     this.incBadge(15);
                  }
                  if(this.VIOLENCE || this.MP_mode)
                  {
                     this.RestoreLimbColor(this.mens[param1].body);
                     this.chio[this.mens[param1].ch_body] = -1;
                     this.chio[this.mens[param1].ch_spine] = -1;
                     this.chio[this.mens[param1].ch_body_ang1] = -1;
                     this.chio[this.mens[param1].ch_body_ang2] = -1;
                     this.mens[param1].toe.bloddy.visible = true;
                     this.mens[param1].body.gotoAndStop(5);
                  }
                  this.hurt_x4 = (this.ax[this.mens[param1].b_toe] + this.ax[this.mens[param1].b_body]) / 2;
                  this.hurt_y4 = (this.ay[this.mens[param1].b_toe] + this.ay[this.mens[param1].b_body]) / 2;
                  this.hurt_xx2 = (this.atox[this.mens[param1].b_toe] + this.atox[this.mens[param1].b_body]) / 2;
                  this.hurt_yy2 = (this.atoy[this.mens[param1].b_toe] + this.atoy[this.mens[param1].b_body]) / 2;
                  if(this.VIOLENCE || this.MP_mode)
                  {
                     this.mens[param1].b_brk1 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_body]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_body]) / 2,7,false,1,param1);
                     this.mens[param1].b_brk2 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_toe]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_toe]) / 2,7,false,1,param1);
                     this.mens[param1].ch_brk1 = this.Connect(this.mens[param1].b_toe,this.mens[param1].b_brk2,0,this.chdef[this.mens[param1].ch_body] * 0.75,-1);
                     this.mens[param1].ch_brk2 = this.Connect(this.mens[param1].b_body,this.mens[param1].b_brk1,0,this.chdef[this.mens[param1].ch_body] * 0.75,-1);
                     this.mens[param1].body.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     this.mens[param1].toe.bloddy.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                  this.mens[param1].dying = true;
                  if(this.mens[param1].hea > 0)
                  {
                     this.mens[param1].hea = 0;
                  }
               }
            }
            else if(this.mens[param1].brk_body)
            {
               this.mens[param1].brk_body = false;
               this.chio[this.mens[param1].ch_body] = true;
               this.chio[this.mens[param1].ch_spine] = true;
               this.chio[this.mens[param1].ch_body_ang1] = true;
               this.chio[this.mens[param1].ch_body_ang2] = true;
               this.aio[this.mens[param1].b_brk1] = -1;
               this.aio[this.mens[param1].b_brk2] = -1;
               this.mens[param1].b_brk1 = this.mens[param1].b_toe;
               this.mens[param1].b_brk2 = this.mens[param1].b_body;
               this.chio[this.mens[param1].ch_brk1] = -1;
               this.chio[this.mens[param1].ch_brk2] = -1;
               this.mens[param1].ch_brk1 = this.mens[param1].ch_spine;
               this.mens[param1].ch_brk2 = this.mens[param1].ch_spine;
               this.mens[param1].toe.bloddy.visible = false;
               this.mens[param1].body.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_head <= 0)
            {
               if(!this.mens[param1].brk_head)
               {
                  if(this.mens[param1].armored == 2)
                  {
                     this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                  }
                  else if(Math.random() > 0.5)
                  {
                     this.PlaySound(this.s_blood_head,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  else
                  {
                     this.PlaySound(this.s_blood_head2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                  }
                  if(this.VIOLENCE)
                  {
                     this.RestoreLimbColor(this.mens[param1].head);
                     this.mens[param1].head.gotoAndStop(10);
                     this.mens[param1].head.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                  }
                  this.mens[param1].brk_head = true;
                  if(this.mens[param1].hea > 0)
                  {
                     this.mens[param1].hea = 0;
                  }
                  this.arad[this.mens[param1].b_head_start] *= 0.5;
                  this.arad[this.mens[param1].b_head_end] *= 0.1;
                  this.effcolor = param1;
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,6);
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,6);
                  this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,8);
               }
            }
            else if(this.mens[param1].brk_head)
            {
               this.mens[param1].head.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].brk_head = false;
               this.arad[this.mens[param1].b_head_start] /= 0.5;
               this.arad[this.mens[param1].b_head_end] /= 0.1;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.STRICT_MODE)
            {
               if(this.mens[param1].team == this.mens[this.MP_myid].team)
               {
                  if(this.mens[param1].char == 1 || this.mens[param1].char == 3 || this.mens[param1].char == 13)
                  {
                     if(Boolean(this.mens[param1].brk_head) || Boolean(this.mens[param1].brk_arms) || Boolean(this.mens[param1].brk_legs) || Boolean(this.mens[param1].brk_body))
                     {
                        this.darkness.visible = true;
                        if(!this.MP_mode)
                        {
                           this.LEVEL_END_FORCE = "failed";
                           if(this.mens[param1].dead)
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE DIED.";
                              if(this.HINTS)
                              {
                                 this.SetHint("Your teammate died.");
                              }
                           }
                           else
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE IS CRITICALLY INJURED.";
                              if(this.HINTS)
                              {
                                 this.SetHint("Your teammate is critically injured.");
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function MakeDying(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               this.Say(param1,this.dectalk_dying[Math.floor(Math.random() * this.dectalk_dying.length)]);
               param1.dying = true;
            }
         }
      }
      
      public function MakeHappy(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               this.Say(param1,this.dectalk_celebrate[Math.floor(Math.random() * this.dectalk_celebrate.length)]);
            }
         }
      }
      
      public function Hurt(param1:Number) : void
      {
         this.mens[param1].regentim = 0;
         if(this.mens[param1].notspawned)
         {
            this.SpawnPlayerImmediately(this.mens[param1]);
         }
         this.mens[param1].last_contact = 0;
         if(this.mens[param1].hea > 0)
         {
            this.Say(this.mens[param1],this.dectalk_hurt[Math.floor(Math.random() * this.dectalk_hurt.length)]);
            if(this.mens[param1].lastshot == "head")
            {
               this.atox[this.mens[param1].b_head_end] -= this.mens[param1].side * 4;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 3;
               this.atoy[this.mens[param1].b_arm1] -= 3;
               this.atoy[this.mens[param1].b_arm2] -= 2;
               this.atox[this.mens[param1].b_leg1] += this.mens[param1].side * 3;
               this.atoy[this.mens[param1].b_leg1] -= 2;
            }
            else if(this.mens[param1].lastshot == "body")
            {
               this.atox[this.mens[param1].b_head_end] += this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_toe] -= this.mens[param1].side * 2;
               this.atox[this.mens[param1].b_arm1] -= this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_arm2] -= this.mens[param1].side * 2;
               this.atoy[this.mens[param1].b_arm1] += 1;
               this.atoy[this.mens[param1].b_arm2] += 2;
               this.atox[this.mens[param1].b_leg1] += this.mens[param1].side * 2;
               this.atox[this.mens[param1].b_leg2] -= this.mens[param1].side * 1;
            }
            else if(this.mens[param1].lastshot == "arms")
            {
               this.atox[this.mens[param1].b_head_end] += this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_body] -= this.mens[param1].side * 2;
               this.atox[this.mens[param1].b_arm1] -= this.mens[param1].side * 2;
               this.atox[this.mens[param1].b_arm2] -= this.mens[param1].side * 2;
               this.atoy[this.mens[param1].b_arm1] -= 4;
               this.atoy[this.mens[param1].b_arm2] -= 3;
            }
            else if(this.mens[param1].lastshot == "legs")
            {
               this.atox[this.mens[param1].b_head_end] -= this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_head_start] += this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_toe] -= this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_arm1] += this.mens[param1].side * 1;
               this.atox[this.mens[param1].b_arm2] += this.mens[param1].side * 1;
               this.atoy[this.mens[param1].b_arm1] -= 2;
               this.atoy[this.mens[param1].b_arm2] -= 3;
               this.atox[this.mens[param1].b_leg1] -= this.mens[param1].side * 3;
               this.atox[this.mens[param1].b_leg2] -= this.mens[param1].side * 4;
            }
            if(this.mens[param1].inwater)
            {
               this.Effect(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start],2,0,0);
            }
         }
         if(this.mens[param1].hea < this.dying_after && (param1 != this.MP_myid || this.MP_mode || this.PRO_BOTS))
         {
            this.MakeDying(this.mens[param1]);
         }
         this.Hurt_nopain(param1);
         if(this.mens[param1].dying)
         {
            this.mens[param1].stability = -2;
         }
      }
      
      public function PhysicsExplosionNoSprite(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int) : void
      {
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(param3 * 2,16755200,0.5);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param1,param2 + 1);
         }
         this.SHAKEAMMOUT += this.dist_to_face / this.Dist3Dm((param1 + this.game.x - 400) * this.game_scale,(param2 + this.game.y - 200) * this.game_scale,this.dist_to_face) * Math.max(param3 / 50 * 3,param4) * 0.2;
         this.i6 = 0;
         while(this.i6 < this.flakes_total)
         {
            if(this.flakes[this.i6].alpha > 0)
            {
               this.xx = this.Dist2D(param1,param2,this.flakes[this.i6].x,this.flakes[this.i6].y);
               if(this.xx < param3 * 0.75)
               {
                  this.flakes[this.i6].hit = true;
               }
               if(this.xx < param3)
               {
                  this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                  this.flakes[this.i6].tox += (this.flakes[this.i6].x - param1) * this.xx * 3;
                  this.flakes[this.i6].toy += (this.flakes[this.i6].y - param2) * this.xx * 3;
               }
            }
            ++this.i6;
         }
         if(!this.stable)
         {
            if(this.MP_mode)
            {
               if(Math.random() > 0.9)
               {
                  param1 = Number(this.mens[this.MP_myid].x);
                  param2 = Number(this.mens[this.MP_myid].y);
                  param5 *= 1000;
               }
            }
         }
         this.i6 = 0;
         while(this.i6 < this.atotal)
         {
            if(this.aio[this.i6] == true || this.aio[this.i6] == false)
            {
               this.xx = this.Dist2D(param1,param2,this.ax[this.i6],this.ay[this.i6]);
               if(this.xx < param3)
               {
                  if(this.TraceLine(param1,param2,this.ax[this.i6],this.ay[this.i6]))
                  {
                     if(this.xx < 0.5)
                     {
                        this.xx = 0.5;
                     }
                     this.WakeUpAtom(this.i6);
                     this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                     this.yy = Math.sqrt(this.arad[this.i6]);
                     if(this.yy < 5)
                     {
                        this.yy = 5;
                     }
                     this.allow = true;
                     this.is2 = 0;
                     while(this.is2 < this.shnades_total)
                     {
                        if(this.shnades[this.is2].io)
                        {
                           if(this.ax[this.i6] > this.shnades[this.is2].x - this.shnades[this.is2].radius - 5)
                           {
                              if(this.ax[this.i6] < this.shnades[this.is2].x + this.shnades[this.is2].radius + 5)
                              {
                                 if(this.ay[this.i6] > this.shnades[this.is2].y - this.shnades[this.is2].radius - 5)
                                 {
                                    if(this.ay[this.i6] < this.shnades[this.is2].y + this.shnades[this.is2].radius + 5)
                                    {
                                       if(this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,param1,param2) > this.shnades[this.is2].radius - 5 && this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,this.ax[this.i6],this.ay[this.i6]) < this.shnades[this.is2].radius)
                                       {
                                          this.allow = false;
                                          break;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.is2;
                     }
                     if(this.allow)
                     {
                        if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
                        {
                           this.mens[this.aof[this.i6]].stability -= this.Math_abs(param4) * 0.1 / 4 * this.mens[this.aof[this.i6]].mobility;
                           this.mens[this.aof[this.i6]].tox += (this.ax[this.i6] - param1) * this.xx / this.yy * this.mens[this.aof[this.i6]].mobility * this.mens[this.aof[this.i6]].mobility;
                           this.mens[this.aof[this.i6]].toy += (this.ay[this.i6] - param2) * this.xx / this.yy * this.mens[this.aof[this.i6]].mobility * this.mens[this.aof[this.i6]].mobility;
                           this.atox[this.i6] += (this.ax[this.i6] - param1) * this.xx / this.yy * 7 * this.mens[this.aof[this.i6]].mobility * this.mens[this.aof[this.i6]].mobility;
                           this.atoy[this.i6] += (this.ay[this.i6] - param2) * this.xx / this.yy * 7 * this.mens[this.aof[this.i6]].mobility * this.mens[this.aof[this.i6]].mobility;
                        }
                        else
                        {
                           this.atox[this.i6] += (this.ax[this.i6] - param1) * this.xx / this.yy * 7;
                           this.atoy[this.i6] += (this.ay[this.i6] - param2) * this.xx / this.yy * 7;
                        }
                        if(this.xx < param3 * 0.75)
                        {
                           if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
                           {
                              if(this.mens[this.aof[this.i6]].io)
                              {
                                 if(this.mens[this.aof[this.i6]].incar == -1)
                                 {
                                    if(param5 > 0)
                                    {
                                       if(param6 == -1 || this.mens[this.aof[this.i6]].team != this.mens[param6].team || param6 == this.aof[this.i6] || this.expl_hurt_full)
                                       {
                                          if(!this.MP_mode || this.MP_myid == this.aof[this.i6] && !this.MP_spectator || !this.mens[this.aof[this.i6]].isplayer)
                                          {
                                             if(param6 == this.aof[this.i6])
                                             {
                                                if(this.mens[this.aof[this.i6]].whenlastshot < getTimer() - 7000)
                                                {
                                                   this.mens[this.aof[this.i6]].lastshotby = param6;
                                                }
                                             }
                                             else
                                             {
                                                this.mens[this.aof[this.i6]].lastshotby = param6;
                                             }
                                             this.mens[this.aof[this.i6]].lastshotbygun = "wave";
                                             this.mens[this.aof[this.i6]].whenlastshot = getTimer();
                                             if(!this.expl_hurt_full)
                                             {
                                                if(this.MP_mode)
                                                {
                                                   if(this.aof[this.i6] == param6)
                                                   {
                                                      param5 *= 0.5;
                                                   }
                                                }
                                                else if(this.aof[this.i6] == param6)
                                                {
                                                   param5 *= 0.3;
                                                }
                                             }
                                             this.mens[this.aof[this.i6]].hea -= Math.max(1.1,this.Math_abs(param5) / 6);
                                             if(!this.MP_mode || !this.mens[this.aof[this.i6]].isplayer || this.MP_myid == this.aof[this.i6])
                                             {
                                                if(this.i6 == this.mens[this.aof[this.i6]].b_leg1 || this.i6 == this.mens[this.aof[this.i6]].b_leg2)
                                                {
                                                   this.mens[this.aof[this.i6]].hp_legs -= this.Math_abs(param5) / 6;
                                                }
                                                else if(this.i6 == this.mens[this.aof[this.i6]].b_body || this.i6 == this.mens[this.aof[this.i6]].b_toe)
                                                {
                                                   this.mens[this.aof[this.i6]].hp_body -= this.Math_abs(param5) / 6;
                                                }
                                                else if(this.i6 == this.mens[this.aof[this.i6]].b_head_end || this.i6 == this.mens[this.aof[this.i6]].b_head_start)
                                                {
                                                   this.mens[this.aof[this.i6]].hp_head -= this.Math_abs(param5) / 6;
                                                }
                                                else if(this.i6 == this.mens[this.aof[this.i6]].b_arm1 || this.i6 == this.mens[this.aof[this.i6]].b_arm2)
                                                {
                                                   this.mens[this.aof[this.i6]].hp_arms -= this.Math_abs(param5) / 6;
                                                }
                                             }
                                             if(!this.MP_mode || this.MP_myid == this.aof[this.i6])
                                             {
                                                this.effcolor = this.aof[this.i6];
                                                this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,(this.ax[this.i6] - param1) * this.xx * 7,(this.ay[this.i6] - param2) * this.xx * 7,2);
                                             }
                                          }
                                          if(this.MP_mode)
                                          {
                                             if(this.MP_myid == this.aof[this.i6] && !this.MP_spectator)
                                             {
                                                this.effcolor = this.aof[this.i6];
                                                this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,(this.ax[this.i6] - param1) * this.xx * 7,(this.ay[this.i6] - param2) * this.xx * 7,2);
                                                this.MP_custom_events += ";gshot|" + this.aof[this.i6] + "#" + this.r2(this.ax[this.i6]) + "#" + this.r2(this.ay[this.i6]) + "#" + this.r2((this.ax[this.i6] - param1) * this.xx * 7) + "#" + this.r2((this.ay[this.i6] - param2) * this.xx * 7) + "#" + 2 + "#" + param6 + "#2";
                                             }
                                          }
                                       }
                                       if(this.HQ && this.SCREEN_EFFECTS)
                                       {
                                          if(param6 == this.MP_myid)
                                          {
                                             if(!this.mens[this.aof[this.i6]].dead)
                                             {
                                                if(!this.MP_mode)
                                                {
                                                   this.whitness.alpha += this.Math_abs(param5) / 6 / this.mens[this.aof[this.i6]].hmax;
                                                   if(this.mens[this.aof[this.i6]].hea <= 0)
                                                   {
                                                      this.whitness.alpha += 0.5;
                                                   }
                                                   this.whitness.visible = true;
                                                }
                                             }
                                          }
                                       }
                                       if(!this.MP_mode || !this.mens[this.aof[this.i6]].isplayer || this.MP_mode && this.aof[this.i6] == this.MP_myid)
                                       {
                                          this.Hurt(this.aof[this.i6]);
                                       }
                                       if(this.aof[this.i6] == this.MP_myid)
                                       {
                                          this.HurtMyPlayer(param1 - this.ax[this.i6],param2 - this.ay[this.i6],this.Math_abs(param5) / 6);
                                       }
                                    }
                                 }
                              }
                           }
                           if(this.amat[this.i6] == 3)
                           {
                              if(this.barrels[-100 - this.aof[this.i6]].hea > 0)
                              {
                                 this.barrels[-100 - this.aof[this.i6]].hea -= param5 / 4;
                                 this.HurtBarrel(-100 - this.aof[this.i6]);
                              }
                           }
                           if(this.amat[this.i6] == 5 || this.amat[this.i6] == 4 || this.amat[this.i6] == 6 || this.amat[this.i6] == 7 || this.amat[this.i6] == 9)
                           {
                              if(this.vehicles[-this.aof[this.i6] - 200].typ == 0 || this.vehicles[-this.aof[this.i6] - 200].typ == 1 || this.vehicles[-this.aof[this.i6] - 200].typ == 3 || this.vehicles[-this.aof[this.i6] - 200].typ == 4)
                              {
                                 this.vehicles[-this.aof[this.i6] - 200].hea -= param5 / 3;
                              }
                           }
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(param6 != -1)
         {
            this.i6 = 0;
            while(this.i6 < this.playerstotal)
            {
               if(this.mens[this.i6].io)
               {
                  if(!this.mens[this.i6].isplayer)
                  {
                     this.xx = this.Dist2D(param1,param2,this.ax[this.mens[this.i6].b_toe],this.ay[this.mens[this.i6].b_toe]);
                     if(this.xx < param3 + 400 && this.mens[this.i6].team != this.mens[param6].team || this.xx < param3 + 20 && this.mens[this.i6].team == this.mens[param6].team)
                     {
                        if(this.TraceLine(param1,param2,this.ax[this.mens[this.i6].b_head_start],this.ay[this.mens[this.i6].b_head_start]))
                        {
                           if(!this.mens[this.i6].dead)
                           {
                              this.Alerted(this.mens[this.i6]);
                           }
                           this.mens[this.i6].hunt = param6;
                        }
                     }
                  }
               }
               ++this.i6;
            }
         }
         this.i6 = 0;
         while(this.i6 < this.lampstotal)
         {
            if(this.lamps_power2[this.i6] > 0)
            {
               if(this.Dist2D(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]) < param3)
               {
                  if(this.TraceLine(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]))
                  {
                     this.ShotLight(this.i6);
                  }
               }
            }
            ++this.i6;
         }
      }
      
      public function ExplosionSound(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        this.xx = 1;
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_explode1,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_explode2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function ExplosionSoundBarrel(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        this.xx = 1;
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_barrel,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_barrel2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function PhysicsExplosion(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int) : void
      {
         this.PhysicsExplosionNoSprite(param1,param2,param3,param4,param5,param6);
         if(param4 > 0)
         {
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(param1 > this.wax[this.i6])
               {
                  if(param1 < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(param2 > this.way[this.i6])
                     {
                        if(param2 < this.way[this.i6] + this.wah[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               this.xx = 0;
               while(this.xx < Math.PI * 2)
               {
                  this.yy = 0.05 + Math.random();
                  this.Effect(param1,param2,7,Math.sin(this.xx + Math.random()) * param4 * this.yy,Math.cos(this.xx) * param4 * this.yy);
                  this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
               }
               this.Effect(param1,param2,4,param3 / 100,0);
            }
            else
            {
               if(this.SUPER_COMPUTER && !this.c_sim_stress)
               {
                  this.xx = 0;
                  while(this.xx < Math.PI * 2)
                  {
                     this.yy = 0.05 + Math.random();
                     this.Effect(param1 + Math.sin(this.xx + Math.random()) * param4 * this.yy,param2 + Math.cos(this.xx) * param4 * this.yy,2,0,0);
                     this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
                  }
               }
               this.Effect(param1,param2,15,param3 / 100,0);
            }
         }
         this.PAlert(param1,param2);
      }
      
      public function HurtBarrel(param1:int) : void
      {
         this.PAlert(this.barrels[param1].x,this.barrels[param1].y);
         if(this.barrels[param1].hea <= 0)
         {
            if(this.MP_mode)
            {
               this.MP_custom_events += ";b|" + this.MP_myid + "#" + param1 + "#" + this.barrels[param1].x + "#" + this.barrels[param1].y;
            }
            this.barrels[param1].gotoAndPlay(5);
            this.barrels[param1].rotation = 0;
            this.barrels[param1].b_left1 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_left2 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right1 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right2 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.ReConnect(this.barrels[param1].ch_left,this.barrels[param1].b_left_top,this.barrels[param1].b_left1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_right,this.barrels[param1].b_right_top,this.barrels[param1].b_right1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_cross1,this.barrels[param1].b_left_top,this.barrels[param1].b_right1,0,Math.sqrt(100 + 169),-1);
            this.ReConnect(this.barrels[param1].ch_cross2,this.barrels[param1].b_right_top,this.barrels[param1].b_left1,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_left2 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_left2,0,13,-1);
            this.barrels[param1].ch_right2 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_right2,0,13,-1);
            this.barrels[param1].ch_cross3 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_right2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_cross4 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_left2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_mid1 = this.Connect(this.barrels[param1].b_left1,this.barrels[param1].b_right1,0,10,-1);
            this.barrels[param1].ch_mid2 = this.Connect(this.barrels[param1].b_left2,this.barrels[param1].b_right2,0,10,-1);
            this.n2 = 0;
            while(this.n2 < 10)
            {
               if(this.HQ || this.SUPER_COMPUTER)
               {
                  this.barrels[param1]["b_g" + this.n2] = this.CreatePoint(this.barrels[param1].x + this.barrels[param1]["g" + this.n2].x,this.barrels[param1].y + this.barrels[param1]["g" + this.n2].y,(Math.random() - 0.5) * this.barrels[param1].dist * 10,(Math.random() - 0.5) * this.barrels[param1].dist * 10,0,false,3,-param1 - 100);
               }
               else
               {
                  this.barrels[param1]["g" + this.n2].visible = false;
               }
               ++this.n2;
            }
            this.expl_hurt_full = true;
            this.PhysicsExplosionNoSprite(this.barrels[param1].x,this.barrels[param1].y,50 * this.barrels[param1].dist,this.barrels[param1].dist * 3,this.barrels[param1].dist * 30,this.barrels[param1].master);
            this.expl_hurt_full = false;
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(this.barrels[param1].x > this.wax[this.i6])
               {
                  if(this.barrels[param1].x < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(this.barrels[param1].y > this.way[this.i6])
                     {
                        if(this.barrels[param1].y < this.way[this.i6] + this.wah[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               if(this.barrels[param1].mdl == "bar_orange" || this.barrels[param1].mdl == "bar_red")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,4,50 * this.barrels[param1].dist / 100,0);
               }
               else if(this.barrels[param1].mdl == "bar_blue")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,18,50 * this.barrels[param1].dist / 100,0);
               }
            }
            else
            {
               this.Effect(this.barrels[param1].x,this.barrels[param1].y,15,50 * this.barrels[param1].dist / 100,0);
            }
            this.ExplosionSoundBarrel(this.barrels[param1].x,this.barrels[param1].y);
         }
         else
         {
            this.barrels[param1].gotoAndStop(4 - Math.round(this.barrels[param1].hea / 25 * 2));
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_glass1,this.barrels[param1].x,this.barrels[param1].y);
            }
            else
            {
               this.PlaySound(this.s_glass2,this.barrels[param1].x,this.barrels[param1].y);
            }
         }
      }
      
      public function VeriftMP(param1:int, param2:int) : void
      {
         if(Boolean(isNaN(this.ax[param1])) || Boolean(isNaN(this.ay[param1])) || Boolean(isNaN(this.atox[param1])) || Boolean(isNaN(this.atoy[param1])))
         {
            this.ax[param1] = 0;
            this.ay[param1] = 0;
            this.atox[param1] = 0;
            this.atoy[param1] = 0;
         }
      }
      
      public function TurnMPBone(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : void
      {
         this.atox[param1] = this.atox[param1] * (1 - this.xx2) + param2 * this.xx2;
         this.atoy[param1] = this.atoy[param1] * (1 - this.xx2) + param3 * this.xx2;
         this.ax[param1] += param4 * this.xx2;
         this.ay[param1] += param5 * this.xx2;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] += param4 * this.xx2;
            this.lay[param1] += param5 * this.xx2;
         }
         this.WakeUpAtom(param1);
      }
      
      public function TurnBone(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 > 0.5)
         {
            param5 = 1;
         }
         if((param5 = (param5 *= param5 * 0.5) * (param4.idd == this.MP_myid ? this.GSPEED2 : this.GSPEED)) > 1)
         {
            param5 = 1;
         }
         this.ax[param1] -= (this.ax[param1] - param2) * param5;
         this.ay[param1] -= (this.ay[param1] - param3) * param5;
         if(this.GET_LITE_PHYS())
         {
            if(param5 > 0.2)
            {
               this.lax[param1] -= (this.ax[param1] - param2) * param5;
               this.lay[param1] -= (this.ay[param1] - param3) * param5;
            }
         }
         this.atox[param1] -= (this.ax[param1] - param2) * param5;
         this.atoy[param1] -= (this.ay[param1] - param3) * param5;
         this.atox[param1] = (this.atox[param1] * 4 + param4.tox) * 0.2;
         this.atoy[param1] = (this.atoy[param1] * 4 + param4.toy) * 0.2;
      }
      
      public function TurnBone4(param1:int, param2:Number, param3:Number, param4:Number) : void
      {
         param4 *= 0.25 * this.GSPEED;
         this.ax[param1] -= (this.ax[param1] - param2) * param4;
         this.ay[param1] -= (this.ay[param1] - param3) * param4;
         if(this.GET_LITE_PHYS())
         {
            if(param4 > 0.2)
            {
               this.lax[param1] -= (this.ax[param1] - param2) * param4;
               this.lay[param1] -= (this.ay[param1] - param3) * param4;
            }
         }
         this.atox[param1] -= (this.ax[param1] - param2) * param4;
         this.atoy[param1] -= (this.ay[param1] - param3) * param4;
      }
      
      public function TurnBone2(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 == 1)
         {
            this.atox[param1] = param4.tox;
            this.atoy[param1] = param4.toy;
            this.ax[param1] = param2;
            this.ay[param1] = param3;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = param2;
               this.lay[param1] = param3;
            }
         }
         else
         {
            if(param4.idd == this.MP_myid)
            {
               param5 *= this.GSPEED2;
            }
            else
            {
               param5 *= this.GSPEED;
            }
            this.atox[param1] = this.atox[param1] * (1 - param5) + param4.tox * param5;
            this.atoy[param1] = this.atoy[param1] * (1 - param5) + param4.toy * param5;
            this.ax[param1] = this.ax[param1] * (1 - param5) + param2 * param5;
            this.ay[param1] = this.ay[param1] * (1 - param5) + param3 * param5;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = this.lax[param1] * (1 - param5) + param2 * param5;
               this.lay[param1] = this.lay[param1] * (1 - param5) + param3 * param5;
            }
         }
      }
      
      public function TurnBone3(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.atox[param1] = param4;
         this.atoy[param1] = param5;
         this.ax[param1] = param2;
         this.ay[param1] = param3;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] = param2;
            this.lay[param1] = param3;
         }
      }
      
      public function PAlert(param1:Number, param2:Number) : void
      {
         this.alert_i5 = 1;
         while(this.alert_i5 < this.playerstotal)
         {
            if(this.mens[this.alert_i5].stability >= 0.3)
            {
               if(!this.mens[this.alert_i5].isplayer)
               {
                  if(this.mens[this.alert_i5].hea > 0 && this.mens[this.alert_i5].hunt == -1)
                  {
                     this.alert_tes = this.Dist2D(param1,param2,this.mens[this.alert_i5].x,this.mens[this.alert_i5].y);
                     if(this.alert_tes < 250 || this.alert_tes < this.screenX && this.TraceLine(this.mens[this.alert_i5].x,this.mens[this.alert_i5].y - 40,param1,param2))
                     {
                        if(this.mens[this.alert_i5].x > param1)
                        {
                           this.mens[this.alert_i5].side = -1;
                        }
                        else
                        {
                           this.mens[this.alert_i5].side = 1;
                        }
                        if(this.mens[this.alert_i5].botaction == 0)
                        {
                           this.mens[this.alert_i5].botaction = 3;
                        }
                     }
                  }
               }
            }
            ++this.alert_i5;
         }
      }
      
      public function CheckHit(param1:int, param2:int) : Boolean
      {
         if(this.puls[param1].nx > this.ax[param2] - this.arad[param2] - Math.abs(this.puls[param1].lx - this.puls[param1].nx) - this.Math_abs(this.atox[param2]) * this.thispulspeed)
         {
            if(this.puls[param1].nx < this.ax[param2] + this.arad[param2] + Math.abs(this.puls[param1].lx - this.puls[param1].nx) + this.Math_abs(this.atox[param2]) * this.thispulspeed)
            {
               if(this.puls[param1].ny > this.ay[param2] - this.arad[param2] - Math.abs(this.puls[param1].ly - this.puls[param1].ny) - this.Math_abs(this.atoy[param2]) * this.thispulspeed)
               {
                  if(this.puls[param1].ny < this.ay[param2] + this.arad[param2] + Math.abs(this.puls[param1].ly - this.puls[param1].ny) + this.Math_abs(this.atoy[param2]) * this.thispulspeed)
                  {
                     if(this.CheckCross(this.puls[param1].lx,this.puls[param1].ly,this.puls[param1].nx,this.puls[param1].ny,this.ax[param2] + (this.puls[param1].spx > 0 ? -this.arad[param2] : this.arad[param2]),this.ay[param2] - this.arad[param2],this.ax[param2] + (this.puls[param1].spx > 0 ? -this.arad[param2] : this.arad[param2]),this.ay[param2] + this.arad[param2],param1) || this.CheckCross(this.puls[param1].lx,this.puls[param1].ly,this.puls[param1].nx,this.puls[param1].ny,this.ax[param2] - this.arad[param2],this.ay[param2] + (this.puls[param1].spy > 0 ? -this.arad[param2] : this.arad[param2]),this.ax[param2] + this.arad[param2],this.ay[param2] + (this.puls[param1].spy > 0 ? -this.arad[param2] : this.arad[param2]),param1))
                     {
                        return true;
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function TraceLine(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.atotal; ++this.tracer_i4)
         {
            if(this.aio[this.tracer_i4] != -1)
            {
               if(this.arad[this.tracer_i4] > 40)
               {
                  if(this.aof[this.tracer_i4] <= -200 && Boolean(this.vehicles[-200 - this.aof[this.tracer_i4]].dead))
                  {
                     if(this.vehicles[-200 - this.aof[this.tracer_i4]].io)
                     {
                        this.a_rectangleMinX = this.ax[this.tracer_i4] - this.arad[this.tracer_i4];
                        if(param1 < this.a_rectangleMinX)
                        {
                           if(param3 < this.a_rectangleMinX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxX = this.ax[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param1 > this.a_rectangleMaxX)
                        {
                           if(param3 > this.a_rectangleMaxX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMinY = this.ay[this.tracer_i4] - this.arad[this.tracer_i4];
                        if(param2 < this.a_rectangleMinY)
                        {
                           if(param4 < this.a_rectangleMinY)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxY = this.ay[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param2 > this.a_rectangleMaxY)
                        {
                           if(param4 > this.a_rectangleMaxY)
                           {
                              continue;
                           }
                        }
                        if(param1 > param3)
                        {
                           this.minX = param3;
                           this.maxX = param1;
                        }
                        else
                        {
                           this.minX = param1;
                           this.maxX = param3;
                        }
                        if(this.maxX > this.a_rectangleMaxX)
                        {
                           this.maxX = this.a_rectangleMaxX;
                        }
                        if(this.minX < this.a_rectangleMinX)
                        {
                           this.minX = this.a_rectangleMinX;
                        }
                        this.minY = param2;
                        this.maxY = param4;
                        this.dx = param3 - param1;
                        if(this.Math_abs(this.dx) > 1e-7)
                        {
                           a = (param4 - param2) / this.dx;
                           this.b = param2 - a * param1;
                           this.minY = a * this.minX + this.b;
                           this.maxY = a * this.maxX + this.b;
                        }
                        if(this.minY > this.maxY)
                        {
                           this.tmp2 = this.maxY;
                           this.maxY = this.minY;
                           this.minY = this.tmp2;
                        }
                        if(this.maxY > this.a_rectangleMaxY)
                        {
                           this.maxY = this.a_rectangleMaxY;
                        }
                        if(this.minY < this.a_rectangleMinY)
                        {
                           this.minY = this.a_rectangleMinY;
                        }
                        if(this.minX <= this.maxX)
                        {
                           if(this.minY <= this.maxY)
                           {
                              return false;
                           }
                        }
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TraceLineF_nopushers(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLineF(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal + this.pushstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else if(this.tracer_i4 - this.boxestotal < this.doorstotal)
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            else
            {
               this.a_rectangleMinX = this.pushx[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMinY = this.pushy[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxX = this.pushw[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxY = this.pushh[this.tracer_i4 - this.boxestotal - this.doorstotal];
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLine_no_doors(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal; ++this.tracer_i4)
         {
            this.a_rectangleMinX = this.boxx[this.tracer_i4];
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            this.a_rectangleMinY = this.boxy[this.tracer_i4];
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceAllyLine(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.playerstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 != param1)
            {
               if(this.mens[param1].team == this.mens[this.tracer_i4].team && this.mens[param1].team != 0 && !this.PRO_BOTS)
               {
                  if(this.tracer_i4 != this.mens[param1].hunt)
                  {
                     if(param1 != this.mens[this.tracer_i4].hunt)
                     {
                        if(!this.mens[this.tracer_i4].dying)
                        {
                           this.a_rectangleMinX = this.mens[this.tracer_i4].x - Math.abs(this.mens[this.tracer_i4].tox) - 10 - 20;
                           this.a_rectangleMinY = this.mens[this.tracer_i4].y - Math.abs(this.mens[this.tracer_i4].toy) - 82 - 20;
                           this.a_rectangleMaxX = this.mens[this.tracer_i4].x + Math.abs(this.mens[this.tracer_i4].tox) + 10 + 20;
                           this.a_rectangleMaxY = this.mens[this.tracer_i4].y + Math.abs(this.mens[this.tracer_i4].toy) - this.mens[this.tracer_i4].sit * this.sitmax + 50;
                           if(param2 < this.a_rectangleMinX)
                           {
                              if(param4 < this.a_rectangleMinX)
                              {
                                 continue;
                              }
                           }
                           if(param2 > this.a_rectangleMaxX)
                           {
                              if(param4 > this.a_rectangleMaxX)
                              {
                                 continue;
                              }
                           }
                           if(param3 < this.a_rectangleMinY)
                           {
                              if(param5 < this.a_rectangleMinY)
                              {
                                 continue;
                              }
                           }
                           if(param3 > this.a_rectangleMaxY)
                           {
                              if(param5 > this.a_rectangleMaxY)
                              {
                                 continue;
                              }
                           }
                           if(param2 > param4)
                           {
                              this.minX = param4;
                              this.maxX = param2;
                           }
                           else
                           {
                              this.minX = param2;
                              this.maxX = param4;
                           }
                           if(this.maxX > this.a_rectangleMaxX)
                           {
                              this.maxX = this.a_rectangleMaxX;
                           }
                           if(this.minX < this.a_rectangleMinX)
                           {
                              this.minX = this.a_rectangleMinX;
                           }
                           this.minY = param3;
                           this.maxY = param5;
                           this.dx = param4 - param2;
                           if(this.Math_abs(this.dx) > 1e-7)
                           {
                              a = (param5 - param3) / this.dx;
                              this.b = param3 - a * param2;
                              this.minY = a * this.minX + this.b;
                              this.maxY = a * this.maxX + this.b;
                           }
                           if(this.minY > this.maxY)
                           {
                              this.tmp2 = this.maxY;
                              this.maxY = this.minY;
                              this.minY = this.tmp2;
                           }
                           if(this.maxY > this.a_rectangleMaxY)
                           {
                              this.maxY = this.a_rectangleMaxY;
                           }
                           if(this.minY < this.a_rectangleMinY)
                           {
                              this.minY = this.a_rectangleMinY;
                           }
                           if(this.minX <= this.maxX)
                           {
                              if(this.minY <= this.maxY)
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.barrelstotal; ++this.tracer_i4)
         {
            this.tracer_ok = false;
            this.tracer_i5 = 0;
            while(this.tracer_i5 < this.playerstotal && !this.tracer_ok)
            {
               if(this.mens[this.tracer_i5].io)
               {
                  if(this.mens[param1].team == this.mens[this.tracer_i5].team && this.mens[param1].team != 0)
                  {
                     if(this.tracer_i5 != this.mens[param1].hunt)
                     {
                        if(param1 != this.mens[this.tracer_i5].hunt)
                        {
                           if(!this.mens[this.tracer_i5].dying)
                           {
                              if(this.Dist2D(this.mens[this.tracer_i5].x,this.mens[this.tracer_i5].y,this.barrels[this.tracer_i4].x,this.barrels[this.tracer_i4].y) < 150)
                              {
                                 this.tracer_ok = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.tracer_i5;
            }
            if(this.tracer_ok)
            {
               if(this.barrels[this.tracer_i4].hea > 0)
               {
                  this.a_rectangleMinX = this.barrels[this.tracer_i4].x - 30;
                  this.a_rectangleMinY = this.barrels[this.tracer_i4].y - 30;
                  this.a_rectangleMaxX = this.barrels[this.tracer_i4].x + 30;
                  this.a_rectangleMaxY = this.barrels[this.tracer_i4].y + 30;
                  if(param2 < this.a_rectangleMinX)
                  {
                     if(param4 < this.a_rectangleMinX)
                     {
                        continue;
                     }
                  }
                  if(param2 > this.a_rectangleMaxX)
                  {
                     if(param4 > this.a_rectangleMaxX)
                     {
                        continue;
                     }
                  }
                  if(param3 < this.a_rectangleMinY)
                  {
                     if(param5 < this.a_rectangleMinY)
                     {
                        continue;
                     }
                  }
                  if(param3 > this.a_rectangleMaxY)
                  {
                     if(param5 > this.a_rectangleMaxY)
                     {
                        continue;
                     }
                  }
                  if(param2 > param4)
                  {
                     this.minX = param4;
                     this.maxX = param2;
                  }
                  else
                  {
                     this.minX = param2;
                     this.maxX = param4;
                  }
                  if(this.maxX > this.a_rectangleMaxX)
                  {
                     this.maxX = this.a_rectangleMaxX;
                  }
                  if(this.minX < this.a_rectangleMinX)
                  {
                     this.minX = this.a_rectangleMinX;
                  }
                  this.minY = param3;
                  this.maxY = param5;
                  this.dx = param4 - param2;
                  if(this.Math_abs(this.dx) > 1e-7)
                  {
                     a = (param5 - param3) / this.dx;
                     this.b = param3 - a * param2;
                     this.minY = a * this.minX + this.b;
                     this.maxY = a * this.maxX + this.b;
                  }
                  if(this.minY > this.maxY)
                  {
                     this.tmp2 = this.maxY;
                     this.maxY = this.minY;
                     this.minY = this.tmp2;
                  }
                  if(this.maxY > this.a_rectangleMaxY)
                  {
                     this.maxY = this.a_rectangleMaxY;
                  }
                  if(this.minY < this.a_rectangleMinY)
                  {
                     this.minY = this.a_rectangleMinY;
                  }
                  if(this.minX <= this.maxX)
                  {
                     if(this.minY <= this.maxY)
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function UpdateCurGun() : void
      {
         if(this.mens[this.MP_myid].char == 1 || this.mens[this.MP_myid].char >= 40 && this.mens[this.MP_myid].char <= 49)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curA = this.guns[this.mens[this.MP_myid].curwea].model;
            }
            else
            {
               this.curA = "swords";
            }
         }
         if(this.mens[this.MP_myid].char == 3)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curB = this.guns[this.mens[this.MP_myid].curwea].model;
            }
            else
            {
               this.curB = "swords";
            }
         }
      }
      
      public function CheckCross(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:int) : Boolean
      {
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(4,0);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
            this.debug_screen.graphics.lineStyle(2,85);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
         }
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 if(this.DEBUG_MODE)
                                 {
                                    this.debug_screen.graphics.lineStyle(4,0);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
                                    this.debug_screen.graphics.lineTo(param7,param8);
                                    this.debug_screen.graphics.lineStyle(2,255);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
                                    this.debug_screen.graphics.lineTo(param7,param8);
                                 }
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimple(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimpleOpti(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         if((param1 > param3 ? param1 : param3) >= (param5 < param7 ? param5 : param7))
         {
            if((param1 < param3 ? param1 : param3) <= (param5 > param7 ? param5 : param7))
            {
               if((param2 > param4 ? param2 : param4) >= (param6 < param8 ? param6 : param8))
               {
                  if((param2 < param4 ? param2 : param4) <= (param6 > param8 ? param6 : param8))
                  {
                     this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
                     this.retux = param5 + (param7 - param5) * this.v;
                     this.retuy = param6 + (param8 - param6) * this.v;
                     if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
                     {
                        if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
                        {
                           if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
                           {
                              if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                              {
                                 if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                                 {
                                    if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                                    {
                                       if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                                       {
                                          if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                                          {
                                             return true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function TracePoint(param1:Number, param2:Number) : Boolean
      {
         for each(this.i2 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i2])
            {
               if(param1 <= this.boxx[this.i2] + this.boxw[this.i2])
               {
                  if(param2 >= this.boxy[this.i2])
                  {
                     if(param2 <= this.boxy[this.i2] + this.boxh[this.i2])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i2 = 0;
         while(this.i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i2].x)
            {
               if(param1 <= this.doors[this.i2].x + this.doors[this.i2].w)
               {
                  if(param2 >= this.doors[this.i2].y)
                  {
                     if(param2 <= this.doors[this.i2].y + this.doors[this.i2].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i2;
         }
         if(this.RAGDOLL_COLLIDE)
         {
            this.i2 = 0;
            while(this.i2 < this.atotal)
            {
               if(this.arad[this.i2] > 5)
               {
                  if(this.aio[this.i2] == true || this.aio[this.i2] == false)
                  {
                     if(param1 > this.ax[this.i2] - this.arad[this.i2])
                     {
                        if(param1 < this.ax[this.i2] + this.arad[this.i2])
                        {
                           if(param2 > this.ay[this.i2] - this.arad[this.i2])
                           {
                              if(param2 < this.ay[this.i2] + this.arad[this.i2])
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         return true;
      }
      
      public function TracePointOnlyBoxes(param1:Number, param2:Number) : Boolean
      {
         for each(this.tracep in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.tracep])
            {
               if(param1 <= this.boxx[this.tracep] + this.boxw[this.tracep])
               {
                  if(param2 >= this.boxy[this.tracep])
                  {
                     if(param2 <= this.boxy[this.tracep] + this.boxh[this.tracep])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TracePointNoRagdolls(param1:Number, param2:Number) : Boolean
      {
         for each(this.i3 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i3])
            {
               if(param1 <= this.boxx[this.i3] + this.boxw[this.i3])
               {
                  if(param2 >= this.boxy[this.i3])
                  {
                     if(param2 <= this.boxy[this.i3] + this.boxh[this.i3])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i3 = 0;
         while(this.i3 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i3].x)
            {
               if(param1 <= this.doors[this.i3].x + this.doors[this.i3].w)
               {
                  if(param2 >= this.doors[this.i3].y)
                  {
                     if(param2 <= this.doors[this.i3].y + this.doors[this.i3].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return true;
      }
      
      public function RedrawPsi(param1:int) : void
      {
         if(this.mens[param1].notspawned)
         {
            return;
         }
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               if(this.mens[param1].curwea == -1)
               {
                  if(this.EASY_MODE && this.mens[param1].team != this.mens[this.MP_myid].team && this.mens[param1].dying || this.NO_PSI)
                  {
                     this.mens[param1].arm1.lower.psi.visible = false;
                     this.mens[param1].arm2.lower.psi.visible = false;
                  }
                  else
                  {
                     this.mens[param1].arm1.lower.psi.visible = true;
                     this.mens[param1].arm2.lower.psi.visible = true;
                  }
               }
               else
               {
                  this.mens[param1].arm1.lower.psi.visible = false;
                  this.mens[param1].arm2.lower.psi.visible = false;
               }
            }
            else
            {
               this.mens[param1].arm1.lower.psi.visible = false;
               this.mens[param1].arm2.lower.psi.visible = false;
            }
         }
      }
      
      public function ChangedGun(param1:int) : void
      {
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               this.mens[param1].wep_pause = 1;
               if(param1 == this.MP_myid)
               {
                  this.UpdateWeps();
               }
            }
            this.RedrawPsi(param1);
         }
      }
      
      public function ChatNewMsg(param1:String) : void
      {
         this.chat_i2 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y < this.gamechatbox2["item" + this.chat_i2].y)
            {
               this.chat_i2 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.chat_i3 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y > this.gamechatbox2["item" + this.chat_i3].y)
            {
               this.chat_i3 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.gamechatbox2["item" + this.chat_i2].y = this.gamechatbox2["item" + this.chat_i3].y + 19;
         this.gamechatbox2["item" + this.chat_i2].visible = true;
         this.gamechatbox2["item" + this.chat_i2].alpha = 1;
         this.gamechatbox2["item" + this.chat_i2].timer = 300;
         this.gamechatbox2["item" + this.chat_i2].txt.htmlText = "<b>" + param1 + "</b>";
         if(this.gamechatbox2["item" + this.chat_i2].y > 38)
         {
            this.chat_xx = this.gamechatbox2["item" + this.chat_i2].y;
            this.chat_i = 0;
            while(this.chat_i < 11)
            {
               this.gamechatbox2["item" + this.chat_i].y -= this.chat_xx;
               ++this.chat_i;
            }
         }
      }
      
      public function CompressChat() : void
      {
         if(this.gamechatbox_text.length > 200)
         {
            if(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200) != -1)
            {
               this.gamechatbox_text = this.gamechatbox_text.slice(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200),this.gamechatbox_text.length);
            }
         }
      }
      
      public function GotoMap(param1:String) : void
      {
         this.NextMapTemp = param1;
         this.CUR_LOADING = param1;
         this.mupd.visible = true;
         this.mupd.ttt.gotoAndPlay(1);
         if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
         {
            this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
         }
         else
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myVariables.rq = "cmap";
            this.myVariables.cmap = param1;
            this.myVariables.qpack = "1.0";
            if(this.DEBUG_MODE)
            {
            }
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader.addEventListener(Event.COMPLETE,this.GotoMap_done);
            this.myLoader.addEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
            this.myLoader.load(this.myRequest);
         }
      }
      
      public function GotoMap_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(currentLabel == "difch" || currentLabel == "menu")
         {
            if(this.DEBUG_MODE)
            {
            }
            ++this.GET_TRIES;
            if(this.GET_TRIES < 3)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
            {
               this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
            }
            else if(this.GET_TRIES < 15)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else
            {
               this.mupd.visible = false;
               this.mupd.ttt.gotoAndStop(1);
            }
         }
      }
      
      public function GotoMap_done(param1:Event) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(this.myLoader.data == "<not_published />")
         {
            this.LAST_ERROR = "Map is not published";
            this.DropGameTimer();
            gotoAndStop("menu");
         }
         else
         {
            this.UseLoadedMapData(this.myLoader.data);
         }
      }
      
      public function UseLoadedMapData(param1:String) : void
      {
         if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits" || currentLabel == "gaming")
         {
            MovieClip(root).mapdata = param1;
            this.MP_mode = false;
            this.MP_myid = 0;
            this.MP_fps = 30;
            this.chat_lastid = -1;
            this.LEVEL_END_FORCE = "restart";
            this.darkness.visible = true;
            this.darkness.alpha = 1;
            if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits")
            {
               this.DropGameTimer();
               gotoAndStop("loading");
            }
         }
      }
      
      public function MP_attribute(param1:String, param2:String) : void
      {
         this.MP_send += "&" + param1 + "=" + param2;
      }
      
      public function MP_get() : void
      {
         var _loc1_:int = 0;
         var _loc2_:int = 0;
         if(this.MP_mode)
         {
            if(this.MP_spectator)
            {
               this.spawn = false;
            }
            if(this.spawn)
            {
               this.MP_waiting_for_answer = false;
               this.MP_attribute("room",this.MP_room);
               this.MP_attribute("myid",this.MP_myid);
               this.MP_waiting_for_answer = true;
               this.MP_socket.writeUTFBytes(this.MP_send);
               this.MP_socket.flush();
            }
            else
            {
               this.MP_waiting_for_answer = false;
               if(!this.MP_spectator)
               {
                  if(!this.mens[this.MP_myid].dead)
                  {
                     if(this.ENEMY_SENDER_lowestping)
                     {
                        if(this.MP_gamestate == 0)
                        {
                           if(getTimer() > this.ENEMY_SENDER_last + 200)
                           {
                              if(!this.mens[this.ENEMY_SENDER_i].isplayer)
                              {
                                 if(this.mens[this.ENEMY_SENDER_i].hea > 0)
                                 {
                                    this.MP_custom_events += ";e|" + this.MP_myid + "#" + this.ENEMY_SENDER_i + "#" + this.mens[this.ENEMY_SENDER_i].hea + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].x) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].y) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tox * 10) / 10 + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].toy * 10) / 10 + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tarx) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tary) + "#" + this.mens[this.ENEMY_SENDER_i].hunt + "#" + this.mens[this.ENEMY_SENDER_i].botaction;
                                 }
                                 else
                                 {
                                    this.MP_custom_events += ";e|" + this.MP_myid + "#" + this.ENEMY_SENDER_i + "#0";
                                 }
                                 this.ENEMY_SENDER_last = getTimer();
                              }
                              ++this.ENEMY_SENDER_i;
                              if(this.ENEMY_SENDER_i >= this.playerstotal)
                              {
                                 this.ENEMY_SENDER_i = 0;
                              }
                           }
                        }
                     }
                  }
                  this.i = 0;
                  while(this.i < this.MP_myspecials_total)
                  {
                     if(this.MP_myspecials[this.i].stat == 3)
                     {
                        _loc2_ = int(this.MP_myspecials[this.i].atom);
                        if(this.puls[this.MP_myspecials[this.i].pul] == null || this.puls[this.MP_myspecials[this.i].pul] == undefined || !this.puls[this.MP_myspecials[this.i].pul].visible)
                        {
                           this.MP_myspecials[this.i].stat = 0;
                        }
                        else
                        {
                           this.MP_custom_events += ";gm|" + this.MP_myspecials[this.i].id_in_full_list + "#" + this.ax[_loc2_] + "#" + this.ay[_loc2_] + "#" + this.atox[_loc2_] + "#" + this.atoy[_loc2_] + "#" + (!!this.puls[this.MP_myspecials[this.i].pul].notbliped ? "0" : "1") + "#" + (!!this.puls[this.MP_myspecials[this.i].pul].visible ? "0" : "1");
                        }
                     }
                     ++this.i;
                  }
                  this._mp_ping_rl = getTimer() - this.MP_ping1;
                  if(this._mp_ping_rl > this.MP_pl)
                  {
                     this.MP_pbug += Math.min(this._mp_ping_rl - this.MP_pl,100);
                     if(this.mens[this.MP_myid].dead || this.mens[this.MP_myid].lastshotby == -1 || getTimer() - this.mens[this.MP_myid].whenlastshot > 7000)
                     {
                        if(this.MP_pbug > 350)
                        {
                           if(!this.MP_pwarn)
                           {
                              this.MP_pwarn = true;
                              this.DialogSay("Your connection speed is too low for this match. This match allows only players with pings lower than " + this.MP_pl + " (your is " + this._mp_ping_rl + ")","#FFFF00");
                           }
                           if(this.MP_pbug > 450)
                           {
                              if(!this.MP_force_disconnect)
                              {
                                 this.DialogSay("Disconnected. This match allows only players with pings lower than " + this.MP_pl + " (your is " + this._mp_ping_rl + ")","#FF0000");
                                 this.MP_force_disconnect = true;
                              }
                           }
                        }
                     }
                  }
                  else
                  {
                     this.MP_pbug -= this.MP_pl - this._mp_ping_rl;
                     if(this.MP_pbug < 0)
                     {
                        this.MP_pbug = 0;
                        this.MP_pwarn = false;
                     }
                  }
               }
               this.MP_ping1 = getTimer();
               this.MP_send = "rq=g";
               this.MP_attribute("room",this.MP_room);
               this.MP_attribute("lastid",this.chat_lastid);
               this.MP_attribute("ce",this.MP_custom_events);
               this.MP_custom_events = "";
               if(!this.MP_spectator)
               {
                  this.MP_attribute("p",this.MP_ping2);
                  if(this.MP_app && (this.mens[this.MP_myid].char == 5 || this.mens[this.MP_myid].char == 10 || this.mens[this.MP_myid].char == 12))
                  {
                     this.stable = false;
                     this.unstable = 7;
                     this.MP_attribute("cc",2);
                  }
                  else
                  {
                     this.MP_attribute("cc",this.mens[this.MP_myid].char + "," + this.mens[this.MP_myid].palette.join(""));
                  }
                  if(this.mens[this.MP_myid].hea > 0)
                  {
                     this.MP_attribute("sb",Math.round(this.mens[this.MP_myid].stability * 100) / 100);
                     this.MP_attribute("hn",this.mens[this.MP_myid].hunt);
                     if(this.mens[this.MP_myid].stability > 0)
                     {
                        this.MP_attribute("x",Math.round(this.mens[this.MP_myid].x));
                        this.MP_attribute("y",Math.round(this.mens[this.MP_myid].y));
                        this.MP_attribute("sx",Math.round(this.mens[this.MP_myid].tox * 100) / 100);
                        this.MP_attribute("sy",Math.round(this.mens[this.MP_myid].toy * 100) / 100);
                     }
                     else
                     {
                        this.MP_attribute("x",Math.round(this.ax[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("y",Math.round(this.ay[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("sx",Math.round(this.atox[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("sy",Math.round(this.atoy[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("xb",Math.round(this.ax[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("yb",Math.round(this.ay[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("sxb",Math.round(this.atox[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("syb",Math.round(this.atoy[this.mens[this.MP_myid].b_body]));
                     }
                     this.MP_attribute("ax",this.mens[this.MP_myid].act_movex);
                     this.MP_attribute("ay",this.mens[this.MP_myid].act_movey);
                     this.MP_attribute("ix",Math.round(this.mens[this.MP_myid].tarx));
                     this.MP_attribute("iy",Math.round(this.mens[this.MP_myid].tary));
                     this.MP_attribute("f",Boolean(this.mens[this.MP_myid].act_fire) && this.stable ? "true" : "false");
                     this.MP_attribute("cw",this.mens[this.MP_myid].curwea);
                     _loc1_ = 0;
                     _loc2_ = 0;
                     while(_loc2_ < this.gunstotal)
                     {
                        if(this.guns[_loc2_].picken_by == this.MP_myid)
                        {
                           if(this.guns[_loc2_].wep != -2)
                           {
                              this.MP_attribute("g" + _loc1_,_loc2_);
                              _loc1_++;
                           }
                        }
                        _loc2_++;
                     }
                     if(this.MP_last_linked != -1 && this.vehicles[this.MP_last_linked].master == this.MP_myid)
                     {
                        this.MP_attribute("ic",this.MP_last_linked);
                     }
                     else
                     {
                        this.MP_attribute("ic",this.mens[this.MP_myid].incar);
                     }
                  }
                  else
                  {
                     this.MP_attribute("x",Math.round(this.ax[this.mens[this.MP_myid].b_toe]));
                     this.MP_attribute("y",Math.round(this.ay[this.mens[this.MP_myid].b_toe]));
                     this.MP_attribute("sx",Math.round(this.atox[this.mens[this.MP_myid].b_toe]));
                     this.MP_attribute("sy",Math.round(this.atoy[this.mens[this.MP_myid].b_toe]));
                     this.MP_attribute("xb",Math.round(this.ax[this.mens[this.MP_myid].b_body]));
                     this.MP_attribute("yb",Math.round(this.ay[this.mens[this.MP_myid].b_body]));
                     this.MP_attribute("sxb",Math.round(this.atox[this.mens[this.MP_myid].b_body]));
                     this.MP_attribute("syb",Math.round(this.atoy[this.mens[this.MP_myid].b_body]));
                  }
                  this.MP_attribute("ha",Math.round(this.mens[this.MP_myid].hp_arms));
                  this.MP_attribute("hl",Math.round(this.mens[this.MP_myid].hp_legs));
                  this.MP_attribute("hb",Math.round(this.mens[this.MP_myid].hp_body));
                  this.MP_attribute("hh",Math.round(this.mens[this.MP_myid].hp_head));
                  this.MP_attribute("he",Math.round(this.mens[this.MP_myid].hea));
                  this.MP_attribute("t",this.mens[this.MP_myid].team);
                  this.MP_attribute("dy",this.mens[this.MP_myid].dying);
                  this.MP_attribute("st",Math.round(this.mens[this.MP_myid].sit * 100) / 100);
               }
               if(this.MP_spectator)
               {
                  this.MP_attribute("myid",-2);
               }
               else
               {
                  this.MP_attribute("myid",this.MP_myid);
               }
               this.MP_socket.writeUTFBytes(this.MP_send);
               this.MP_socket.flush();
               this.MP_waiting_for_answer = true;
            }
            this.ENTER_TICKED = false;
         }
      }
      
      public function ArmBone(param1:MovieClip, param2:Number) : void
      {
         if(param2 < 30)
         {
            this.trans = param2 / 30;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -14.6 * this.minus_trans - 13.1 * this.trans;
            param1.lower.y = 3.5 * this.minus_trans + 7.5 * this.trans;
            param1.lower.rotation = -63.3 * this.minus_trans - 54.3 * this.trans;
            param1.upper.rotation = 61.3 * this.minus_trans + 42.3 * this.trans;
         }
         else
         {
            this.trans = param2 / 30 - 1;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -13.1 * this.minus_trans - 3.05 * this.trans;
            param1.lower.y = 7.5 * this.minus_trans + 13.7 * this.trans;
            param1.lower.rotation = -54.3 * this.minus_trans;
            param1.upper.rotation = 42.3 * this.minus_trans;
         }
      }
      
      public function LegBone(param1:MovieClip, param2:Number) : void
      {
         if(param2 < 60)
         {
            this.trans = param2 / 60;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -8.35 * this.minus_trans - 7.9 * this.trans;
            param1.lower.y = 9.75 * this.minus_trans + 13.25 * this.trans;
            param1.lower.rotation = 3.4 * this.minus_trans + 14 * this.trans;
            param1.middle.x = 9.1 * this.minus_trans + 8.7 * this.trans;
            param1.middle.y = 7.85 * this.minus_trans + 6.75 * this.trans;
            param1.middle.rotation = 85.3 * this.minus_trans + 65 * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans - 55.4 * this.trans;
         }
         else if(param2 < 90)
         {
            this.trans = param2 / 30 - 2;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -7.9 * this.minus_trans - 6.9 * this.trans;
            param1.lower.y = 13.25 * this.minus_trans + 20.75 * this.trans;
            param1.lower.rotation = 14 * this.minus_trans + 6.8 * this.trans;
            param1.middle.x = 8.7 * this.minus_trans + 5.35 * this.trans;
            param1.middle.y = 6.75 * this.minus_trans + 8.95 * this.trans;
            param1.middle.rotation = 65 * this.minus_trans + 40.4 * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans - 39.4 * this.trans;
         }
         else
         {
            this.trans = param2 / 30 - 3;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -6.9 * this.minus_trans - 4.35 * this.trans;
            param1.lower.y = 20.75 * this.minus_trans + 29.95 * this.trans;
            param1.lower.rotation = 6.8 * this.minus_trans;
            param1.middle.x = 5.35 * this.minus_trans - 0.3 * this.trans;
            param1.middle.y = 8.95 * this.minus_trans + 14.1 * this.trans;
            param1.middle.rotation = 40.4 * this.minus_trans + 6.3 * this.trans;
            param1.upper.rotation = 8.5 * this.trans - 39.4 * this.minus_trans;
         }
      }
      
      public function ResetPsychoBlood() : void
      {
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.i4 = 0;
            while(this.i4 < 4)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            this.i4 = 0;
            while(this.i4 < 5)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
      }
      
      public function AnnoyPL(param1:int, param2:String) : void
      {
         if(this.MP_ping2 < 150)
         {
            if(this.mens[param1].blames == undefined || this.mens[param1].blames == null)
            {
               this.mens[param1].blames = 10;
            }
            --this.mens[param1].blames;
            if(this.mens[param1].blames <= 0)
            {
               this.MP_custom_events += ";votekich|" + param1 + "#" + this.MP_myid;
               this.mens[param1].blames = 100;
            }
         }
      }
      
      public function MP_get_done(param1:String) : void
      {
         var MP_match_playerstotal:int = 0;
         var lmapch:Boolean = false;
         var mdl:Array = null;
         var victim:int = 0;
         var datafrom:int = 0;
         var special_object:Object = null;
         var pul_object:int = 0;
         var best_i:int = 0;
         var best_dist:Number = NaN;
         var tdist:Number = NaN;
         var GOT:String = param1;
         this.MP_get_done_HAP = false;
         if(this.MP_mode)
         {
            if(this.MP_waiting_for_answer)
            {
               if(!this.MP_force_disconnect)
               {
                  this.MP_waiting_for_answer = false;
                  this.ENEMY_SENDER_lowestping = true;
                  this.MP_ping_last = getTimer();
                  if(this.herolist.visible)
                  {
                     if(!this.MP_spectator)
                     {
                        this.i = this.MP_myid;
                        this.hero[this.i].f3.text = this.MP_kills;
                        this.hero[this.i].f4.text = this.MP_deaths;
                        this.hero[this.i].f5.text = this.MP_ping2;
                     }
                     this.xx = Math.floor((getTimer() - this.TIME_PLAYED_MULTI) / 1000);
                     this.i4 = Math.floor(this.xx / 60 / 60);
                     this.i3 = Math.floor(this.xx / 60 - this.i4 * 60);
                     this.i2 = Math.floor(this.xx - this.i3 * 60 - this.i4 * 60 * 60);
                     this.temp_str = "";
                     this.temp = this.i4;
                     if(this.i4 < 10)
                     {
                        this.temp_str += "0";
                     }
                     this.temp_str += this.temp + ":";
                     this.temp = this.i3;
                     if(this.i3 < 10)
                     {
                        this.temp_str += "0";
                     }
                     this.temp_str += this.temp + ":";
                     this.temp = this.i2;
                     if(this.i2 < 10)
                     {
                        this.temp_str += "0";
                     }
                     this.temp_str += this.temp;
                     this.herolist.f6.text = this.temp_str;
                     if(this.MP_deaths > 0)
                     {
                        this.herolist.f5.text = Math.round(this.MP_kills / this.MP_deaths * 100) / 100;
                     }
                     else
                     {
                        this.herolist.f5.text = "";
                     }
                  }
                  if(this.DEBUG_MODE)
                  {
                  }
                  this.array = GOT.split("&");
                  this.param = new Array();
                  this.i = 0;
                  while(this.i < this.array.length)
                  {
                     this.array[this.i] = this.array[this.i].split("=");
                     this.param[this.array[this.i][0]] = this.array[this.i][1];
                     ++this.i;
                  }
                  if(this.param["dropped"] == "1")
                  {
                     ++this.connection_lost_ping;
                     if(this.connection_lost_ping > 15)
                     {
                        this.MP_force_disconnect = true;
                        this.DialogSay("Connection with server was lost (Dropped from server).","#FF0000");
                     }
                  }
                  else
                  {
                     this.connection_lost_ping = 0;
                  }
                  if(this.param["zt"] != undefined)
                  {
                     if(this.param["zt"] != "")
                     {
                        this.MP_gamestate = int(this.param["zt"]);
                     }
                  }
                  if(this.param["rnd"] != undefined)
                  {
                     if(this.param["rnd"] != "")
                     {
                        this.param["rnd"] = int(this.param["rnd"]);
                        if(this.param["rnd"] != this.MP_round)
                        {
                           this.MP_round = this.param["rnd"];
                           this.atotal = this.startatotal;
                           this.chtotal = this.startchtotal;
                           ++this.MP_enc_restarts;
                           this.ResetPsychoBlood();
                           this.i4 = 0;
                           while(this.i4 < this.barrelstotal)
                           {
                              if(this.game.contains(this.barrels[this.i4]))
                              {
                                 this.barrels[this.i4].visible = false;
                                 this.game.removeChild(this.barrels[this.i4]);
                                 this.barrels[this.i4] = null;
                              }
                              ++this.i4;
                           }
                           this.barrelstotal = 0;
                           this.i4 = 0;
                           while(this.i4 < this.MP_startbarrels.length)
                           {
                              if(this.MP_startbarrels[this.i4].mdl == "bar_orange")
                              {
                                 this.mc = this.game.addChildAt(new bar_orange(),this.game.numChildren);
                              }
                              if(this.MP_startbarrels[this.i4].mdl == "bar_blue")
                              {
                                 this.mc = this.game.addChildAt(new bar_blue(),this.game.numChildren);
                              }
                              if(this.MP_startbarrels[this.i4].mdl == "bar_red")
                              {
                                 this.mc = this.game.addChildAt(new bar_red(),this.game.numChildren);
                              }
                              this.NoMouse(this.mc);
                              this.mc.mdl = this.MP_startbarrels[this.i4].mdl;
                              this.mc.x = this.MP_startbarrels[this.i4].x;
                              this.mc.y = this.MP_startbarrels[this.i4].y;
                              this.mc.tox = this.MP_startbarrels[this.i4].tox;
                              this.mc.toy = this.MP_startbarrels[this.i4].toy;
                              this.mc.master = -1;
                              this.create_barrel(this.mc);
                              ++this.i4;
                           }
                           lmapch = false;
                           this.i2 = 0;
                           while(this.i2 < this.lampstotal)
                           {
                              if(this.lamps_power2[this.i2] == 0)
                              {
                                 this.lamps_power2[this.i2] = 1;
                                 this.a_int = 0;
                                 while(this.a_int < this.flarestotal)
                                 {
                                    if(this.flare[this.a_int].x == this.lamps_x[this.i2])
                                    {
                                       if(this.flare[this.a_int].y == this.lamps_y[this.i2])
                                       {
                                          this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 1;
                                       }
                                    }
                                    ++this.a_int;
                                 }
                                 lmapch = true;
                              }
                              ++this.i2;
                           }
                           this.tnds = 10;
                           if(lmapch)
                           {
                              this.UpdateLightmap(false);
                           }
                           this.i4 = 0;
                           while(this.i4 < this.playerstotal)
                           {
                              if(!this.mens[this.i4].isplayer)
                              {
                                 this.Hurt_nopain(this.i4);
                                 this.mens[this.i4].x = this.mens[this.i4].startx;
                                 this.mens[this.i4].y = this.mens[this.i4].starty;
                                 this.mens[this.i4].tox = 0;
                                 this.mens[this.i4].toy = 0;
                                 this.mens[this.i4].stability = 1;
                                 this.mens[this.i4].hunt = -1;
                                 this.mens[this.i4].side = this.mens[this.i4].startside;
                                 this.mens[this.i4].team = this.mens[this.i4].startteam;
                                 this.mens[this.i4].char = this.mens[this.i4].startchar;
                                 this.mens[this.i4].botaction = this.mens[this.i4].startbotaction;
                                 this.mens[this.i4].dead = false;
                                 this.mens[this.i4].hea = this.mens[this.i4].hmax;
                                 this.mens[this.i4].dying = false;
                                 this.mens[this.i4].io = true;
                                 this.mens[this.i4].visible = true;
                                 this.mens[this.i4].alpha = 1;
                                 this.mens[this.i4].defih = 0;
                                 this.mens[this.i4].act_movex = 0;
                                 this.mens[this.i4].act_movey = 0;
                                 this.mens[this.i4].deadtim = 0;
                                 this.mens[this.i4].hp_head = new Number(Math.max(this.mens[this.i4].hea * 0.4,30));
                                 this.mens[this.i4].hp_body = new Number(Math.max(this.mens[this.i4].hea * 0.6,30));
                                 this.mens[this.i4].hp_legs = new Number(Math.max(this.mens[this.i4].hea * 0.5,30));
                                 this.mens[this.i4].hp_arms = new Number(Math.max(this.mens[this.i4].hea * 0.4,30));
                                 this.Hurt_nopain(this.i4);
                                 this.i5 = 0;
                                 while(this.i5 < this.atotal)
                                 {
                                    if(this.aof[this.i5] == this.i4)
                                    {
                                       this.lax[this.i5] = this.ax[this.i5] = this.mens[this.i4].startx;
                                       this.lay[this.i5] = this.ay[this.i5] = this.mens[this.i4].starty;
                                       this.atox[this.i5] = 0;
                                       this.atoy[this.i5] = 0;
                                       this.ablood[this.i5] = 0;
                                    }
                                    ++this.i5;
                                 }
                              }
                              ++this.i4;
                           }
                           this.mc = this.mens[this.MP_myid];
                           if(!this.mc.dead)
                           {
                              this.MP_gbd = this.mens[this.MP_myid].curwea;
                           }
                           this.MP_myspecials = new Array();
                           this.MP_myspecials_total = 0;
                           this.MP_assigning_special = -1;
                           this.MP_specials = new Array();
                           this.shnades_next = 0;
                           this.shnades_total = 0;
                           this.shnades = new Array();
                           this.mc.lastshotby = -1;
                           this.mc.whenlastshot = 0;
                           this.mc.hea = this.mens[this.MP_myid].hmax;
                           this.mc.stability = 1;
                           this.mc.tox = 0;
                           this.mc.toy = 0;
                           this.mc.x = this.mc.startx;
                           this.mc.y = this.mc.starty;
                           this.mc.hp_head = this.mens[this.MP_myid].hea;
                           this.mc.hp_arms = this.mens[this.MP_myid].hea;
                           this.mc.hp_legs = this.mens[this.MP_myid].hea;
                           this.mc.hp_body = this.mens[this.MP_myid].hea;
                           this.mc.curwea = -1;
                           this.mc.dead = false;
                           this.mc.dying = false;
                           this.grenades_total = this.MP_start_grenades_count;
                           this.grenades_port_total = this.MP_start_grenades_port_count;
                           this.grenades_sh_total = this.MP_start_grenades_sh_count;
                           this.UpdateWeps();
                           this.Hurt_nopain(this.MP_myid);
                           this.SpawnPlayerImmediately(this.mens[this.MP_myid]);
                           this.u = this.ax[this.mens[this.MP_myid].b_toe] - this.mc.startx;
                           this.v = this.ay[this.mens[this.MP_myid].b_toe] - this.mc.starty;
                           this.i4 = 0;
                           while(this.i4 < this.atotal)
                           {
                              if(this.aof[this.i4] == this.MP_myid)
                              {
                                 this.ax[this.i4] -= this.u;
                                 this.ay[this.i4] -= this.v;
                                 this.lax[this.i4] -= this.u;
                                 this.lay[this.i4] -= this.v;
                                 this.ablood[this.i4] = 0;
                                 this.atox[this.i4] = 0;
                                 this.atoy[this.i4] = 0;
                                 if(isNaN(this.ax[this.i4]))
                                 {
                                    this.ax[this.i4] = this.mc.startx;
                                    this.lax[this.i4] = this.mc.startx;
                                 }
                                 if(isNaN(this.ax[this.i4]))
                                 {
                                    this.ay[this.i4] = this.mc.starty;
                                    this.lay[this.i4] = this.mc.starty;
                                 }
                              }
                              ++this.i4;
                           }
                           this.i4 = 0;
                           while(this.i4 < this.doorstotal)
                           {
                              this.mc = this.doors[this.i4];
                              this.mc.tarx = this.mc.s_tarx;
                              this.mc.tary = this.mc.s_tary;
                              this.mc.x = this.mc.s_x;
                              this.mc.y = this.mc.s_y;
                              this.mc.moving = this.mc.s_moving;
                              this.mc.tox = 0;
                              this.mc.toy = 0;
                              this.mc.maxspeed = this.mc.s_maxspeed;
                              ++this.i4;
                           }
                           this.i4 = 0;
                           while(this.i4 < this.triggerstotal)
                           {
                              this.triggers[this.i4].enabledd = this.triggers[this.i4].s_enabledd;
                              this.triggers[this.i4].maxcalls = this.triggers[this.i4].s_maxcalls;
                              ++this.i4;
                           }
                           this.i4 = 0;
                           while(this.i4 < this.timerstotal)
                           {
                              this.timers[this.i4].enabledd = this.timers[this.i4].s_enabledd;
                              this.timers[this.i4].maxcalls = this.timers[this.i4].s_maxcalls;
                              this.timers[this.i4].ddelay = this.timers[this.i4].s_ddelay;
                              this.timers[this.i4].ticknew = 0;
                              ++this.i4;
                           }
                           this.i4 = -1;
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal)
                           {
                              if(this.i2 >= this.MP_start_guns_total)
                              {
                                 this.guns[this.i2].io = false;
                                 this.guns[this.i2].alpha = 0;
                              }
                              else
                              {
                                 this.guns[this.i2].io = true;
                                 this.guns[this.i2].alpha = 1;
                                 this.guns[this.i2].floatframe = 2;
                                 this.guns[this.i2].gotoAndStop(2);
                                 this.guns[this.i2].deadtim = 0;
                                 if(this.guns[this.i2].picken_by != -1)
                                 {
                                    if(!this.guns[this.i2].forcars)
                                    {
                                       if(this.mens[this.guns[this.i2].picken_by].curwea == this.i2)
                                       {
                                          this.mens[this.guns[this.i2].picken_by].curwea = -1;
                                       }
                                       this.guns[this.i2].picken_by = -1;
                                    }
                                 }
                                 this.guns[this.i2].scaleX = this.COMIC_SCALE;
                                 this.guns[this.i2].scaleY = this.COMIC_SCALE;
                                 this.guns[this.i2].av = this.guns[this.i2].stat_averange_min;
                                 this.lax[this.guns[this.i2].b_p1] = this.ax[this.guns[this.i2].b_p1] = this.guns[this.i2].startx + this.guns[this.i2].len1;
                                 this.lax[this.guns[this.i2].b_p2] = this.ax[this.guns[this.i2].b_p2] = this.guns[this.i2].startx + this.guns[this.i2].len2;
                                 this.lay[this.guns[this.i2].b_p1] = this.ay[this.guns[this.i2].b_p1] = this.guns[this.i2].starty;
                                 this.lay[this.guns[this.i2].b_p2] = this.ay[this.guns[this.i2].b_p2] = this.guns[this.i2].starty;
                                 this.atox[this.guns[this.i2].b_p1] = 0;
                                 this.atox[this.guns[this.i2].b_p2] = 0;
                                 this.atoy[this.guns[this.i2].b_p1] = 0;
                                 this.atoy[this.guns[this.i2].b_p2] = 0;
                                 this.WakeUpAtom(this.guns[this.i2].b_p1);
                                 this.WakeUpAtom(this.guns[this.i2].b_p2);
                                 if(!this.MP_spectator)
                                 {
                                    if(this.guns[this.i2].wep != -2)
                                    {
                                       if(this.guns[this.i2].startx > this.mens[this.MP_myid].x - 40)
                                       {
                                          if(this.guns[this.i2].startx < this.mens[this.MP_myid].x + 40)
                                          {
                                             if(this.guns[this.i2].starty > this.mens[this.MP_myid].y - 90)
                                             {
                                                if(this.guns[this.i2].starty < this.mens[this.MP_myid].y + 30)
                                                {
                                                   this.ok = true;
                                                   this.i3 = 0;
                                                   while(this.i3 < this.gunstotal && this.ok)
                                                   {
                                                      if(this.guns[this.i3].io)
                                                      {
                                                         if(this.i2 != this.i3)
                                                         {
                                                            if(!this.guns[this.i3].forcars)
                                                            {
                                                               if(this.guns[this.i3].picken_by == this.MP_myid && this.guns[this.i3].wep == this.guns[this.i2].wep)
                                                               {
                                                                  this.ok = false;
                                                               }
                                                            }
                                                         }
                                                      }
                                                      ++this.i3;
                                                   }
                                                   if(this.ok)
                                                   {
                                                      this.guns[this.i2].picken_by = this.MP_myid;
                                                      if(this.guns[this.i2].stat_power > 0)
                                                      {
                                                         this.i4 = this.i2;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                           while(this.gunstotal > this.MP_start_guns_total && this.gunstotal - 1 >= 0 && !this.guns[this.gunstotal - 1].io)
                           {
                              --this.gunstotal;
                           }
                           if(this.MP_enc_restarts == 1 || this.MP_gbd != -1 && this.guns[this.MP_gbd].picken_by != this.MP_myid)
                           {
                              this.mens[this.MP_myid].curwea = this.i4;
                           }
                           else
                           {
                              this.mens[this.MP_myid].curwea = this.MP_gbd;
                           }
                           this.ChangedGun(this.MP_myid);
                           this.UpdateWeps();
                           this.i = 0;
                           while(this.i <= this.pulsmax)
                           {
                              if(this.puls[this.i] != null)
                              {
                                 if(this.puls[this.i].visible == true)
                                 {
                                    if(this.game.contains(this.puls[this.i]))
                                    {
                                       this.puls[this.i].visible = false;
                                       this.game.removeChild(this.puls[this.i]);
                                       this.puls[this.i] = null;
                                    }
                                    else if(this.graphics_3d_front.contains(this.puls[this.i]))
                                    {
                                       this.puls[this.i].visible = false;
                                       this.graphics_3d_front.removeChild(this.puls[this.i]);
                                       this.puls[this.i] = null;
                                    }
                                 }
                              }
                              ++this.i;
                           }
                           this.i = 0;
                           while(this.i < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i].io)
                              {
                                 this.mc = this.vehicles[this.i];
                                 if(this.mc.typ == 5 || this.mc.typ == 6)
                                 {
                                    this.mc.master = -1;
                                 }
                              }
                              ++this.i;
                           }
                           if(this.HQ && this.SCREEN_EFFECTS)
                           {
                              this.whitness.alpha = 1;
                              this.whitness.visible = true;
                           }
                           this.GCTime();
                        }
                     }
                  }
                  this.players_online = 0;
                  MP_match_playerstotal = 1;
                  this.i = 0;
                  while(this.i < this.MP_playerstotal)
                  {
                     if(this.i != this.MP_myid)
                     {
                        if(this.param["p" + this.i + "nk"] != undefined)
                        {
                           MP_match_playerstotal++;
                           if(this.param["p" + this.i + "nk"] == "Empty")
                           {
                              this.hero[this.i].f2.text = "";
                              this.hero[this.i].f3.text = "";
                              this.hero[this.i].f4.text = "";
                              this.hero[this.i].f5.text = "";
                              this.hero[this.i].gotoAndStop(1 + this.hero_list_frame_offset);
                           }
                           else
                           {
                              ++this.players_online;
                           }
                        }
                     }
                     ++this.i;
                  }
                  this.i = this.MP_myid;
                  if(!this.MP_spectator)
                  {
                     this.str = "Team " + String(this.mens[this.i].team + 1);
                     if(this.mens[this.i].team == 0)
                     {
                        this.str = "Alpha";
                     }
                     if(this.mens[this.i].team == 1)
                     {
                        this.str = "Beta";
                     }
                     if(this.mens[this.i].team == 2)
                     {
                        this.str = "Gamma";
                     }
                     if(this.mens[this.i].team == 3)
                     {
                        this.str = "Delta";
                     }
                     if(this.mens[this.i].team == 4)
                     {
                        this.str = "Zeta";
                     }
                     if(this.mens[this.i].team == 5)
                     {
                        this.str = "Lambda";
                     }
                     if(this.mens[this.i].team == 6)
                     {
                        this.str = "Sigma";
                     }
                     if(this.mens[this.i].team == 7)
                     {
                        this.str = "Omega";
                     }
                     if(this.mens[this.i].team == 8)
                     {
                        this.str = "Counter-Terrorists";
                     }
                     if(this.mens[this.i].team == 9)
                     {
                        this.str = "Terrorists";
                     }
                     if(this.mens[this.i].team == 10)
                     {
                        this.str = "Usurpation Forces";
                     }
                     if(this.mens[this.i].team == 11)
                     {
                        this.str = "Civil Security";
                     }
                     if(this.mens[this.i].team == 12)
                     {
                        this.str = "Red Team";
                     }
                     if(this.mens[this.i].team == 13)
                     {
                        this.str = "Blue Team";
                     }
                     if(this.mens[this.i].team == 14)
                     {
                        this.str = "Green Team";
                     }
                     if(this.mens[this.i].team == 15)
                     {
                        this.str = "White Team";
                     }
                     if(this.mens[this.i].team == 16)
                     {
                        this.str = "Black Team";
                     }
                     if(this.MP_type == 1)
                     {
                        this.str = "";
                     }
                     this.hero[this.i].f2.text = this.str;
                     if(this.param["k"] != undefined)
                     {
                        this.MP_kills = int(this.param["k"]);
                     }
                     if(this.param["dd"] != undefined)
                     {
                        this.MP_deaths = int(this.param["dd"]);
                     }
                  }
                  if(this.MP_type == 3)
                  {
                     if(this.param["b"] != undefined)
                     {
                        this.team_blue.txtscore.text = int(this.param["b"]);
                     }
                     if(this.param["r"] != undefined)
                     {
                        this.team_red.txtscore.text = int(this.param["r"]);
                     }
                  }
                  this.i = 0;
                  while(this.i < this.MP_playerstotal)
                  {
                     if(this.i != this.MP_myid || this.MP_spectator)
                     {
                        this.i2 = this.mens[this.i].mp_packets;
                        this.mens[this.i].mp_packets = this.param["p" + this.i + "_"];
                        if(this.mens[this.i].io)
                        {
                           if(!this.mens[this.i].dead)
                           {
                              if(this.mens[this.i].mp_aliveping + 350 < this.MP_ping_last)
                              {
                                 this.mens[this.i].act_fire = false;
                                 if(this.MP_app)
                                 {
                                    if(this.mens[this.i].mp_aliveping + 500 < this.MP_ping_last)
                                    {
                                       if(this.mens[this.i].alpha > 0.4)
                                       {
                                          this.mens[this.i].alpha = 0.4;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mens[this.i].mp_aliveping + 4000 > this.MP_ping_last)
                        {
                           this.mens[this.i].io = true;
                           this.mens[this.i].visible = true;
                        }
                        else if(this.mens[this.i].io)
                        {
                           this.mens[this.i].hea = 0;
                           this.mens[this.i].dead = true;
                           this.mens[this.i].alpha = 1;
                           this.mens[this.i].io = false;
                           this.mens[this.i].visible = false;
                        }
                        if(this.mens[this.i].mp_packets != this.i2)
                        {
                           if(this.param["p" + this.i + "x"] != undefined && this.param["p" + this.i + "sx"] != undefined && this.param["p" + this.i + "y"] != undefined && this.param["p" + this.i + "sy"] != undefined)
                           {
                              this.mc = this.mens[this.i];
                              if(this.param["p" + this.i + "lo"] != undefined)
                              {
                                 this.mc.login_name = this.param["p" + this.i + "lo"];
                                 if(this.herolist.visible)
                                 {
                                    if(this.mc.login_name == "" || this.mc.login_name == ".guest")
                                    {
                                       this.hero[this.i].vbtn1.visible = false;
                                       this.hero[this.i].vbtn2.visible = false;
                                       this.hero[this.i].vbtn3.visible = false;
                                    }
                                    else
                                    {
                                       this.hero[this.i].vbtn1.visible = true;
                                       this.hero[this.i].vbtn2.visible = true;
                                       this.hero[this.i].vbtn3.visible = true;
                                    }
                                 }
                              }
                              if(this.param["p" + this.i + "nk"] != "Empty")
                              {
                                 this.mc.mp_aliveping = getTimer();
                                 this.mc.ping = int(this.param["p" + this.i + "p"]);
                                 if(!this.mc.dead)
                                 {
                                    if(this.mc.idd < this.mens[this.MP_myid].idd)
                                    {
                                       this.ENEMY_SENDER_lowestping = false;
                                    }
                                 }
                                 this.xx = Math.min(250,this.MP_ping2 + this.mc.ping) / 1000 * this.MP_fps;
                                 if(Boolean(this.mc.isplayer) && this.MP_myid != this.i)
                                 {
                                    if(this.INTRUDER_DATABASE[this.mc.login_name] == undefined || this.INTRUDER_DATABASE[this.mc.login_name] == null)
                                    {
                                       if(this.INTRUDER_DATABASE_length > 128)
                                       {
                                          this.SEND_INTRUDER_LIST();
                                       }
                                       ++this.INTRUDER_DATABASE_length;
                                       this.INTRUDER_DATABASE[this.mc.login_name] = new Object();
                                       this.INTRUDER_DATABASE[this.mc.login_name].unregistered_shots = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].registered_shots = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_start = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_min = this.mc.ping;
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_max = this.mc.ping;
                                       this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].max_hea = this.mc.hea;
                                       this.INTRUDER_DATABASE[this.mc.login_name].min_hea = this.mc.hea;
                                    }
                                    else
                                    {
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].ping_min,this.mc.ping);
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].ping_max,this.mc.ping);
                                       this.INTRUDER_DATABASE[this.mc.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].max_hea,this.mc.hea);
                                       this.INTRUDER_DATABASE[this.mc.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].min_hea,this.mc.hea);
                                    }
                                 }
                                 this.xx2 = Number(this.param["p" + this.i + "x"]);
                                 this.yy2 = Number(this.param["p" + this.i + "y"]);
                                 this.u = this.xx2 + Number(this.param["p" + this.i + "sx"]) * this.xx;
                                 if(Boolean(this.mc.inwater) || Boolean(this.mc.stand))
                                 {
                                    this.v = this.yy2;
                                    this.u2 = Number(this.param["p" + this.i + "sy"]);
                                 }
                                 else
                                 {
                                    this.v = Number(this.param["p" + this.i + "y"]) + Number(this.param["p" + this.i + "sy"]) * this.xx + this.gravity * this.xx * this.xx / 2;
                                    this.u2 = Number(this.param["p" + this.i + "sy"]) + this.gravity * this.xx;
                                 }
                                 if(this.TraceLineF_nopushers(this.mc.x,this.mc.y - 41,this.u,this.v - 41))
                                 {
                                    this.param["p" + this.i + "x"] = this.u;
                                    if(!this.mc.stand && !this.mc.inwater)
                                    {
                                       this.param["p" + this.i + "y"] = this.v;
                                       this.param["p" + this.i + "sy"] = this.u2;
                                    }
                                 }
                                 if(this.param["p" + this.i + "xb"] != "" && this.param["p" + this.i + "xb"] != undefined)
                                 {
                                    if(this.param["p" + this.i + "yb"] != "" && this.param["p" + this.i + "yb"] != undefined)
                                    {
                                       this.u = Number(this.param["p" + this.i + "xb"]) + Number(this.param["p" + this.i + "sxb"]) * this.xx;
                                       if(Boolean(this.mc.inwater) || Boolean(this.mc.stand))
                                       {
                                          this.v = Number(this.param["p" + this.i + "yb"]) + Number(this.param["p" + this.i + "syb"]) * this.xx;
                                          this.u2 = Number(this.param["p" + this.i + "syb"]);
                                       }
                                       else
                                       {
                                          this.v = Number(this.param["p" + this.i + "yb"]) + Number(this.param["p" + this.i + "syb"]) * this.xx + this.gravity * this.xx * this.xx / 2;
                                          this.u2 = Number(this.param["p" + this.i + "syb"]) + this.gravity * this.xx;
                                       }
                                       this.u2 = Number(this.param["p" + this.i + "syb"]);
                                       this.u2 = Number(this.param["p" + this.i + "syb"]) + this.gravity * this.xx;
                                       if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.u,this.v))
                                       {
                                          this.param["p" + this.i + "xb"] = this.u;
                                          if(!this.mc.stand && !this.mc.inwater)
                                          {
                                             this.param["p" + this.i + "yb"] = this.v;
                                             this.param["p" + this.i + "syb"] = this.u2;
                                          }
                                       }
                                    }
                                 }
                                 this.xx2 = this.param["p" + this.i + "x"] - this.xx2;
                                 this.yy2 = this.param["p" + this.i + "y"] - this.yy2;
                                 this.mc.mp_offset_x = this.xx2;
                                 this.mc.mp_offset_y = this.yy2;
                                 if(this.mc.hunt != int(this.param["p" + this.i + "hn"]))
                                 {
                                    this.Alerted(this.mc);
                                    this.mc.hunt = int(this.param["p" + this.i + "hn"]);
                                 }
                                 if(this.param["p" + this.i + "nk"] != "")
                                 {
                                    this.mc.nick = this.param["p" + this.i + "nk"].split("[eq]").join("=").split("[i]").join("|").split("[e]").join("&");
                                    if(this.mc.gui.txt1.text != this.mc.nick)
                                    {
                                       this.SpawnPlayerImmediately(this.mc);
                                    }
                                 }
                                 if(this.param["p" + this.i + "cc"] != undefined)
                                 {
                                    mdl = this.param["p" + this.i + "cc"].split(",");
                                    this.i3 = mdl[0];
                                    if(this.mc.char != this.i3)
                                    {
                                       if(this.MP_app)
                                       {
                                          if(this.i3 == 5 || this.i3 == 10)
                                          {
                                             this.i3 = 2;
                                          }
                                       }
                                       this.mc.char = this.i3;
                                       this.mc.mdl_head = this.i3;
                                       if(this.i3 >= 40 && this.i3 <= 48)
                                       {
                                          this.i3 = 1;
                                       }
                                       if(this.i3 == 61)
                                       {
                                          this.i3 = 3;
                                       }
                                       this.mc.mdl_leg1_upper = this.i3;
                                       this.mc.mdl_leg1_middle = this.i3;
                                       this.mc.mdl_leg1_lower = this.i3;
                                       this.mc.mdl_leg2_upper = this.i3;
                                       this.mc.mdl_leg2_middle = this.i3;
                                       this.mc.mdl_leg2_lower = this.i3;
                                       this.mc.mdl_arm1_upper = this.i3;
                                       this.mc.mdl_arm1_lower = this.i3;
                                       this.mc.mdl_arm2_upper = this.i3;
                                       this.mc.mdl_arm2_lower = this.i3;
                                       this.mc.mdl_toe = this.i3;
                                       this.mc.mdl_body = this.i3;
                                       this.UpdateCharProps(this.mc);
                                       this.SpawnPlayerImmediately(this.mc);
                                    }
                                    if(mdl[1] != undefined)
                                    {
                                       if(mdl[1].charAt(0) != this.mc.palette[0] || mdl[1].charAt(1) != this.mc.palette[1] || mdl[1].charAt(2) != this.mc.palette[2] || mdl[1].charAt(3) != this.mc.palette[3])
                                       {
                                          this.mc.palette[0] = mdl[1].charAt(0);
                                          this.mc.palette[1] = mdl[1].charAt(1);
                                          this.mc.palette[2] = mdl[1].charAt(2);
                                          this.mc.palette[3] = mdl[1].charAt(3);
                                          this.UpdatePlayerColorMP(this.mc);
                                       }
                                    }
                                 }
                                 if(this.param["p" + this.i + "ha"] != "")
                                 {
                                    if(this.param["p" + this.i + "hl"] != "")
                                    {
                                       if(this.param["p" + this.i + "hb"] != "")
                                       {
                                          if(this.param["p" + this.i + "hh"] != "")
                                          {
                                             this.i4 = 0;
                                             if((this.mc.hp_arms <= 0 || this.mc.brk_arms) && Number(this.param["p" + this.i + "ha"]) > 0)
                                             {
                                                this.i4 = 1;
                                             }
                                             else if((this.mc.hp_legs <= 0 || this.mc.brk_legs) && Number(this.param["p" + this.i + "hl"]) > 0)
                                             {
                                                this.i4 = 1;
                                             }
                                             else if((this.mc.hp_body <= 0 || this.mc.brk_body) && Number(this.param["p" + this.i + "hb"]) > 0)
                                             {
                                                this.i4 = 1;
                                             }
                                             else if((this.mc.hp_head <= 0 || this.mc.brk_head) && Number(this.param["p" + this.i + "hh"]) > 0)
                                             {
                                                this.i4 = 1;
                                             }
                                             if(this.mc.hp_arms > 0 && Number(this.param["p" + this.i + "ha"]) <= 0)
                                             {
                                                this.i4 = 2;
                                             }
                                             else if(this.mc.hp_legs > 0 && Number(this.param["p" + this.i + "hl"]) <= 0)
                                             {
                                                this.i4 = 2;
                                             }
                                             else if(this.mc.hp_body > 0 && Number(this.param["p" + this.i + "hb"]) <= 0)
                                             {
                                                this.i4 = 2;
                                             }
                                             else if(this.mc.hp_head > 0 && Number(this.param["p" + this.i + "hh"]) <= 0)
                                             {
                                                this.i4 = 2;
                                             }
                                             if(this.i4 == 1)
                                             {
                                                this.SpawnPlayerImmediately(this.mc);
                                                this.Hurt_nopain(this.i);
                                             }
                                             this.mc.hp_arms = Number(this.param["p" + this.i + "ha"]);
                                             this.mc.hp_legs = Number(this.param["p" + this.i + "hl"]);
                                             this.mc.hp_body = Number(this.param["p" + this.i + "hb"]);
                                             this.mc.hp_head = Number(this.param["p" + this.i + "hh"]);
                                             if(this.i4 == 2)
                                             {
                                                this.Hurt(this.i);
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.param["p" + this.i + "he"] != "")
                                 {
                                    this.mc.hea = Number(this.param["p" + this.i + "he"]);
                                 }
                                 if(this.mc.hea > this.mc.hmax)
                                 {
                                    this.AnnoyPL(this.i,"hp+");
                                 }
                                 if(this.herolist.visible)
                                 {
                                    if(this.param["p" + this.i + "nk"] != undefined)
                                    {
                                       if(this.mc.hea <= 0 && this.MP_type == 2)
                                       {
                                          this.hero[this.i].f1.text = this.param["p" + this.i + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&qout;").join("\"") + " [ dead ]";
                                       }
                                       else
                                       {
                                          this.hero[this.i].f1.text = this.param["p" + this.i + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&qout;").join("\"");
                                       }
                                    }
                                    else
                                    {
                                       this.hero[this.i].f1.text = "Empty";
                                    }
                                    if(this.param["p" + this.i + "nk"] != "Empty")
                                    {
                                       this.str = "Team " + String(this.mc.team + 1);
                                       if(this.mc.team == 0)
                                       {
                                          this.str = "Alpha";
                                       }
                                       if(this.mc.team == 1)
                                       {
                                          this.str = "Beta";
                                       }
                                       if(this.mc.team == 2)
                                       {
                                          this.str = "Gamma";
                                       }
                                       if(this.mc.team == 3)
                                       {
                                          this.str = "Delta";
                                       }
                                       if(this.mc.team == 4)
                                       {
                                          this.str = "Zeta";
                                       }
                                       if(this.mc.team == 5)
                                       {
                                          this.str = "Lambda";
                                       }
                                       if(this.mc.team == 6)
                                       {
                                          this.str = "Sigma";
                                       }
                                       if(this.mc.team == 7)
                                       {
                                          this.str = "Omega";
                                       }
                                       if(this.mc.team == 8)
                                       {
                                          this.str = "Counter-Terrorists";
                                       }
                                       if(this.mc.team == 9)
                                       {
                                          this.str = "Terrorists";
                                       }
                                       if(this.mc.team == 10)
                                       {
                                          this.str = "Usurpation Forces";
                                       }
                                       if(this.mc.team == 11)
                                       {
                                          this.str = "Civil Security";
                                       }
                                       if(this.mc.team == 12)
                                       {
                                          this.str = "Red Team";
                                       }
                                       if(this.mc.team == 13)
                                       {
                                          this.str = "Blue Team";
                                       }
                                       if(this.mc.team == 14)
                                       {
                                          this.str = "Green Team";
                                       }
                                       if(this.mc.team == 15)
                                       {
                                          this.str = "White Team";
                                       }
                                       if(this.mc.team == 16)
                                       {
                                          this.str = "Black Team";
                                       }
                                       if(this.MP_type == 1)
                                       {
                                          this.str = "";
                                       }
                                       this.hero[this.i].f2.text = this.str;
                                       if(this.param["p" + this.i + "k"] != undefined)
                                       {
                                          this.hero[this.i].f3.text = this.param["p" + this.i + "k"];
                                       }
                                       if(this.param["p" + this.i + "dd"] != undefined)
                                       {
                                          this.hero[this.i].f4.text = this.param["p" + this.i + "dd"];
                                       }
                                       if(this.param["p" + this.i + "p"] != undefined)
                                       {
                                          this.hero[this.i].f5.text = this.param["p" + this.i + "p"];
                                       }
                                       if(this.mc.team == this.mens[this.MP_myid].team)
                                       {
                                          this.hero[this.i].gotoAndStop(3 + this.hero_list_frame_offset);
                                       }
                                       else
                                       {
                                          this.hero[this.i].gotoAndStop(1 + this.hero_list_frame_offset);
                                       }
                                    }
                                 }
                                 if(this.mc.hea > 0)
                                 {
                                    if(!this.mc.io || !this.mc.visible)
                                    {
                                       this.mc.dead = true;
                                    }
                                    else
                                    {
                                       this.mc.dead = false;
                                    }
                                    this.mc.io = true;
                                    this.mc.visible = true;
                                    if(this.mc.char != 12 || this.mens[this.MP_myid].dead || this.mc.team == this.mens[this.MP_myid].team || this.MP_app)
                                    {
                                       this.mc.alpha = 1;
                                    }
                                    this.mc.deadtim = 0;
                                    if(this.param["p" + this.i + "st"] != undefined)
                                    {
                                       this.mc.sit = new Number(this.param["p" + this.i + "st"]);
                                    }
                                    if(Boolean(isNaN(this.mc.sit)) || this.mc.sit == undefined)
                                    {
                                    }
                                    if(this.param["p" + this.i + "sb"] != "")
                                    {
                                       this.mc.stability = Number(this.param["p" + this.i + "sb"]);
                                    }
                                    this.mc.mp_controlled = false;
                                    if(this.mc.stability <= 0)
                                    {
                                       if(this.param["p" + this.i + "x"] != "" && this.param["p" + this.i + "x"] != undefined)
                                       {
                                          if(this.param["p" + this.i + "y"] != "" && this.param["p" + this.i + "y"] != undefined)
                                          {
                                             if(this.param["p" + this.i + "sx"] != "" && this.param["p" + this.i + "sx"] != undefined)
                                             {
                                                if(this.param["p" + this.i + "sy"] != "" && this.param["p" + this.i + "sy"] != undefined)
                                                {
                                                   if(this.param["p" + this.i + "xb"] != "" && this.param["p" + this.i + "xb"] != undefined)
                                                   {
                                                      if(this.param["p" + this.i + "yb"] != "" && this.param["p" + this.i + "yb"] != undefined)
                                                      {
                                                         if(this.param["p" + this.i + "sxb"] != "" && this.param["p" + this.i + "sxb"] != undefined)
                                                         {
                                                            if(this.param["p" + this.i + "syb"] != "" && this.param["p" + this.i + "syb"] != undefined)
                                                            {
                                                               this.mc.mp_controlled = true;
                                                               this.mc.mp_time = 0;
                                                               this.mc.mp_x = Number(this.param["p" + this.i + "x"]);
                                                               this.mc.mp_y = Number(this.param["p" + this.i + "y"]);
                                                               this.mc.mp_tox = Number(this.param["p" + this.i + "sx"]);
                                                               this.mc.mp_toy = Number(this.param["p" + this.i + "sy"]);
                                                               this.mc.mp_x2 = Number(this.param["p" + this.i + "xb"]);
                                                               this.mc.mp_y2 = Number(this.param["p" + this.i + "yb"]);
                                                               this.mc.mp_tox2 = Number(this.param["p" + this.i + "sxb"]);
                                                               this.mc.mp_toy2 = Number(this.param["p" + this.i + "syb"]);
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.param["p" + this.i + "dy"] != "")
                                    {
                                       if(this.param["p" + this.i + "dy"] == "true")
                                       {
                                          this.MakeDying(this.mc);
                                       }
                                       else
                                       {
                                          this.mc.dying = false;
                                       }
                                    }
                                    if(this.mc.stability > 0)
                                    {
                                       if(this.param["p" + this.i + "x"] != "" && this.param["p" + this.i + "x"] != undefined)
                                       {
                                          if(this.param["p" + this.i + "y"] != "" && this.param["p" + this.i + "y"] != undefined)
                                          {
                                             if(this.param["p" + this.i + "sx"] != "" && this.param["p" + this.i + "sx"] != undefined)
                                             {
                                                if(this.param["p" + this.i + "sy"] != "" && this.param["p" + this.i + "sy"] != undefined)
                                                {
                                                   this.mc.x = Number(this.param["p" + this.i + "x"]);
                                                   this.mc.y = Number(this.param["p" + this.i + "y"]);
                                                   this.mc.tox = Number(this.param["p" + this.i + "sx"]);
                                                   this.mc.toy = Number(this.param["p" + this.i + "sy"]);
                                                   this.u = this.mc.x - this.ax[this.mc.b_toe];
                                                   this.v = this.mc.y - this.ay[this.mc.b_toe];
                                                   this.xx = this.VectorDist2D(this.u,this.v);
                                                   if(this.xx > 400)
                                                   {
                                                      this.ax[this.mc.b_toe] += this.u;
                                                      this.ay[this.mc.b_toe] += this.v;
                                                      this.ax[this.mc.b_body] += this.u;
                                                      this.ay[this.mc.b_body] += this.v;
                                                      this.ax[this.mc.b_head_start] += this.u;
                                                      this.ay[this.mc.b_head_start] += this.v;
                                                      this.ax[this.mc.b_head_end] += this.u;
                                                      this.ay[this.mc.b_head_end] += this.v;
                                                      this.ax[this.mc.b_arm1] += this.u;
                                                      this.ay[this.mc.b_arm1] += this.v;
                                                      this.ax[this.mc.b_arm2] += this.u;
                                                      this.ay[this.mc.b_arm2] += this.v;
                                                      this.ax[this.mc.b_leg1] += this.u;
                                                      this.ay[this.mc.b_leg1] += this.v;
                                                      this.ax[this.mc.b_leg2] += this.u;
                                                      this.ay[this.mc.b_leg2] += this.v;
                                                      if(this.GET_LITE_PHYS())
                                                      {
                                                         this.lax[this.mc.b_toe] += this.u;
                                                         this.lay[this.mc.b_toe] += this.v;
                                                         this.lax[this.mc.b_body] += this.u;
                                                         this.lay[this.mc.b_body] += this.v;
                                                         this.lax[this.mc.b_head_start] += this.u;
                                                         this.lay[this.mc.b_head_start] += this.v;
                                                         this.lax[this.mc.b_head_end] += this.u;
                                                         this.lay[this.mc.b_head_end] += this.v;
                                                         this.lax[this.mc.b_arm1] += this.u;
                                                         this.lay[this.mc.b_arm1] += this.v;
                                                         this.lax[this.mc.b_arm2] += this.u;
                                                         this.lay[this.mc.b_arm2] += this.v;
                                                         this.lax[this.mc.b_leg1] += this.u;
                                                         this.lay[this.mc.b_leg1] += this.v;
                                                         this.lax[this.mc.b_leg2] += this.u;
                                                         this.lay[this.mc.b_leg2] += this.v;
                                                      }
                                                   }
                                                   if(this.mc.hea >= this.dying_after)
                                                   {
                                                      this.mc.dying = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(!this.ANONYMOUS_MODE)
                                    {
                                       this.mc.gui.visible = true;
                                       this.mc.gui.alpha = 1;
                                    }
                                    if(this.param["p" + this.i + "ix"] != "")
                                    {
                                       if(this.param["p" + this.i + "iy"] != "")
                                       {
                                          this.mc.tarx = Number(this.param["p" + this.i + "ix"]);
                                          this.mc.tary = Number(this.param["p" + this.i + "iy"]);
                                       }
                                    }
                                    if(this.mens[this.i].mp_aliveping + 200 > this.MP_ping_last)
                                    {
                                       if(this.param["p" + this.i + "f"] != "")
                                       {
                                          if(this.param["p" + this.i + "f"] == "true")
                                          {
                                             this.mc.act_fire = true;
                                          }
                                          else
                                          {
                                             this.mc.act_fire = false;
                                          }
                                       }
                                       if(this.param["p" + this.i + "ax"] != "")
                                       {
                                          if(this.param["p" + this.i + "ay"] != "")
                                          {
                                             this.mc.act_movex = int(this.param["p" + this.i + "ax"]);
                                             this.mc.act_movey = int(this.param["p" + this.i + "ay"]);
                                          }
                                       }
                                    }
                                    else
                                    {
                                       this.mc.act_fire = false;
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                    }
                                    if(this.param["p" + this.i + "ic"] != "")
                                    {
                                       this.i2 = int(this.param["p" + this.i + "ic"]);
                                       this.i3 = 0;
                                       while(this.i3 < this.vehiclestotal)
                                       {
                                          if(this.vehicles[this.i3].typ == 6)
                                          {
                                             if(this.vehicles[this.i3].master == this.i)
                                             {
                                                if(this.i2 != this.i3)
                                                {
                                                   this.vehicles[this.i3].master = -1;
                                                }
                                             }
                                          }
                                          ++this.i3;
                                       }
                                       if(this.i2 == -1)
                                       {
                                          this.mc.incar = -1;
                                       }
                                       else if(this.vehicles[this.i2].typ == 6)
                                       {
                                          if(this.vehicles[this.i2].master != this.MP_myid || this.MP_spectator)
                                          {
                                             this.vehicles[this.i2].master = this.i;
                                          }
                                       }
                                       else
                                       {
                                          this.mc.incar = this.i2;
                                       }
                                    }
                                    this.i3 = this.mc.curwea;
                                    if(this.param["p" + this.i + "cw"] != undefined && this.param["p" + this.i + "cw"] != "")
                                    {
                                       this.i2 = int(this.param["p" + this.i + "cw"]);
                                       if(this.i2 >= -1 && this.i2 < this.gunstotal)
                                       {
                                          if(this.MP_gamestate == 0 || this.i2 == -1 || this.i2 != -1 && this.guns[this.i2].picken_by == this.i)
                                          {
                                             this.mc.curwea = this.i2;
                                          }
                                       }
                                    }
                                    if(this.MP_gamestate == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < this.gunstotal)
                                       {
                                          if(this.guns[this.i4].picken_by == this.i && this.i4 != this.mc.curwea)
                                          {
                                             this.guns[this.i4].picken_by = -1;
                                          }
                                          ++this.i4;
                                       }
                                       this.i4 = 0;
                                       while(this.i4 < 10)
                                       {
                                          if(this.param["p" + this.i + "g" + this.i4] != undefined)
                                          {
                                             if(this.param["p" + this.i + "g" + this.i4] != "")
                                             {
                                                if(this.param["p" + this.i + "g" + this.i4] != "-1")
                                                {
                                                   if(this.param["p" + this.i + "g" + this.i4] != "-")
                                                   {
                                                      this.i2 = int(this.param["p" + this.i + "g" + this.i4]);
                                                      if(this.i2 >= 0 && this.i2 < this.gunstotal)
                                                      {
                                                         if(this.guns[this.i2].picken_by != -1)
                                                         {
                                                            if(this.guns[this.i2].picken_by != this.i)
                                                            {
                                                               if(this.mens[this.guns[this.i2].picken_by].curwea == this.i2)
                                                               {
                                                                  this.mens[this.guns[this.i2].picken_by].curwea = -1;
                                                                  this.ChangedGun(this.guns[this.i2].picken_by);
                                                               }
                                                            }
                                                         }
                                                         if(this.guns[this.i2].picken_by == this.MP_myid && this.i != this.MP_myid)
                                                         {
                                                            if(this.mens[this.MP_myid].curwea == this.i2)
                                                            {
                                                               this.mens[this.MP_myid].curwea = -1;
                                                               this.ChangedGun(this.MP_myid);
                                                            }
                                                            this.guns[this.i2].picken_by = this.i;
                                                            this.UpdateWeps();
                                                         }
                                                         else
                                                         {
                                                            this.guns[this.i2].picken_by = this.i;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.i3 != this.mc.curwea || this.mc.curwea == -1 && !this.mc.arm1.lower.psi.visible)
                                    {
                                       this.ChangedGun(this.i);
                                    }
                                    if(this.param["p" + this.i + "t"] != "")
                                    {
                                       if(this.mc.team != int(this.param["p" + this.i + "t"]))
                                       {
                                          this.mc.team = int(this.param["p" + this.i + "t"]);
                                          this.UpdateTeamColor(this.mc);
                                       }
                                    }
                                    this.RedrawPsi(this.mc.idd);
                                 }
                                 else
                                 {
                                    this.mc.mp_controlled = false;
                                    if(!this.mc.brk_head)
                                    {
                                       if(!this.mc.brk_body)
                                       {
                                          if(!this.mc.brk_arms)
                                          {
                                             if(this.param["p" + this.i + "x"] != "")
                                             {
                                                if(this.param["p" + this.i + "y"] != "")
                                                {
                                                   if(this.param["p" + this.i + "sx"] != "")
                                                   {
                                                      if(this.param["p" + this.i + "sy"] != "")
                                                      {
                                                         if(this.param["p" + this.i + "x"] != undefined)
                                                         {
                                                            if(this.param["p" + this.i + "y"] != undefined)
                                                            {
                                                               if(this.param["p" + this.i + "sx"] != undefined)
                                                               {
                                                                  if(this.param["p" + this.i + "sy"] != undefined)
                                                                  {
                                                                     if(this.param["p" + this.i + "xb"] != "")
                                                                     {
                                                                        if(this.param["p" + this.i + "yb"] != "")
                                                                        {
                                                                           if(this.param["p" + this.i + "sxb"] != "")
                                                                           {
                                                                              if(this.param["p" + this.i + "syb"] != "")
                                                                              {
                                                                                 if(this.param["p" + this.i + "xb"] != undefined)
                                                                                 {
                                                                                    if(this.param["p" + this.i + "yb"] != undefined)
                                                                                    {
                                                                                       if(this.param["p" + this.i + "sxb"] != undefined)
                                                                                       {
                                                                                          if(this.param["p" + this.i + "syb"] != undefined)
                                                                                          {
                                                                                             this.mc.mp_controlled = true;
                                                                                             this.mc.mp_time = 0;
                                                                                             this.mc.mp_x = Number(this.param["p" + this.i + "x"]);
                                                                                             this.mc.mp_y = Number(this.param["p" + this.i + "y"]);
                                                                                             this.mc.mp_tox = Number(this.param["p" + this.i + "sx"]);
                                                                                             this.mc.mp_toy = Number(this.param["p" + this.i + "sy"]);
                                                                                             this.mc.mp_x2 = Number(this.param["p" + this.i + "xb"]);
                                                                                             this.mc.mp_y2 = Number(this.param["p" + this.i + "yb"]);
                                                                                             this.mc.mp_tox2 = Number(this.param["p" + this.i + "sxb"]);
                                                                                             this.mc.mp_toy2 = Number(this.param["p" + this.i + "syb"]);
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(Boolean(isNaN(this.mc.mp_tox)) || Boolean(isNaN(this.mc.mp_x)) || Boolean(isNaN(this.mc.x)) || Boolean(isNaN(this.mc.tox)))
                                 {
                                 }
                              }
                              else if(this.mc.io)
                              {
                                 this.mc.hea = 0;
                                 this.mc.dead = true;
                                 this.mc.alpha = 1;
                                 this.mc.io = false;
                                 this.mc.visible = false;
                              }
                           }
                        }
                     }
                     ++this.i;
                  }
                  if(this.param["lastid"] != "" && this.param["lastid"] != undefined)
                  {
                     if(this.chat_lastid != int(this.param["lastid"]))
                     {
                        this.chat_lastid = int(this.param["lastid"]);
                     }
                  }
                  if(this.param["evs"] != "" && this.param["evs"] != undefined)
                  {
                     while(this.param["evs"] != this.param["evs"].replace("[eq]","="))
                     {
                        this.param["evs"] = this.param["evs"].replace("[eq]","=");
                     }
                     this.array2 = this.param["evs"].split(";");
                     this.array3 = new Array();
                     this.i = 0;
                     for(; this.i < this.array2.length; ++this.i)
                     {
                        this.array2[this.i] = String(this.array2[this.i]).split("|");
                        if(this.array2[this.i][0] == "chat" || this.array2[this.i][0] == "tchat")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                           {
                              this.spawn_text_for = int(this.array2[this.i][1]);
                              this.str = this.array2[this.i][2];
                              if(this.DISPLAY_CHAT)
                              {
                                 this.mcc = this.mens[this.spawn_text_for];
                                 if(this.MP_type == 1)
                                 {
                                    this.array2[this.i][0] = "chat";
                                 }
                                 if(this.array2[this.i][0] == "chat" || this.array2[this.i][0] == "tchat" && this.mcc.team == this.mens[this.MP_myid].team)
                                 {
                                    while(this.str != this.str.replace("[eq]","="))
                                    {
                                       this.str = this.str.replace("[eq]","=");
                                    }
                                    while(this.str != this.str.replace("[i]","|"))
                                    {
                                       this.str = this.str.replace("[i]","|");
                                    }
                                    while(this.str != this.str.replace("[dc]",";"))
                                    {
                                       this.str = this.str.replace("[dc]",";");
                                    }
                                    while(this.str != this.str.replace("[lt]","<"))
                                    {
                                       this.str = this.str.replace("[lt]","<");
                                    }
                                    while(this.str != this.str.replace("[gt]",">"))
                                    {
                                       this.str = this.str.replace("[gt]",">");
                                    }
                                    while(this.str != this.str.replace("[2q]","\""))
                                    {
                                       this.str = this.str.replace("[2q]","\"");
                                    }
                                    while(this.str != this.str.replace("[sl]","/"))
                                    {
                                       this.str = this.str.replace("[sl]","/");
                                    }
                                    while(this.str != this.str.replace("[rsl]","\\"))
                                    {
                                       this.str = this.str.replace("[rsl]","\\");
                                    }
                                    this.str = this.Censored(this.str);
                                    if(!this.ANONYMOUS_MODE)
                                    {
                                       this.PlaySound_full(this.s_chat);
                                    }
                                    this.Effect(this.ax[this.mcc.b_head_start],this.ay[this.mcc.b_head_start] - 25,20,0,0);
                                    while(this.str != this.str.replace("<","&lt;"))
                                    {
                                       this.str = this.str.replace("<","&lt;");
                                    }
                                    while(this.str != this.str.replace(">","&gt;"))
                                    {
                                       this.str = this.str.replace(">","&gt;");
                                    }
                                    if(!this.ANONYMOUS_MODE)
                                    {
                                       if(this.MP_type == 1)
                                       {
                                          this.ChatNewMsg("<font color=\"#78DBE2\">" + this.mcc.nick + "</font><font color=\"#FFFFFF\">: " + this.str + "</font>");
                                       }
                                       else
                                       {
                                          this.ok = this.mcc.dead;
                                          this.ChatNewMsg("<font color=\"" + (this.PREDEF_COLORS[this.mcc.team] != undefined ? this.PREDEF_COLORS[this.mcc.team] : "#78DBE2") + "\">" + (this.array2[this.i][0] == "tchat" ? "[Team Chat]" : "") + (Boolean(this.mcc.dead) && this.MP_type == 2 ? "*Dead* " : "") + "(" + this.PREDEF_TEAMS[this.mcc.team] + ") " + this.mcc.nick + "</font><font color=\"#FFFFFF\">: " + this.str + "</font>");
                                       }
                                    }
                                 }
                              }
                              this.UserSays(this.spawn_text_for,this.str);
                           }
                        }
                        if(this.array2[this.i][0] == "chat2")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                           {
                              this.array2[this.i][1] = this.array2[this.i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
                              this.ChatNewMsg(this.array2[this.i][1]);
                           }
                        }
                        if(this.array2[this.i][0] == "chat3")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                           {
                              this.array2[this.i][1] = this.array2[this.i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
                              this.ChatNewMsg(this.array2[this.i][1]);
                              this.PlaySound_full(this.s_chat);
                           }
                        }
                        if(this.array2[this.i][0] == "spawnef")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              this.Effect(int(this.array3[0]),int(this.array3[1]),14,0,0);
                           }
                        }
                        if(this.array2[this.i][0] == "b")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              victim = int(this.array3[1]);
                              if(this.barrels[victim] != null)
                              {
                                 if(this.barrels[victim].hea > 0)
                                 {
                                    this.barrels[victim].x = Number(this.array3[2]);
                                    this.barrels[victim].y = Number(this.array3[3]);
                                    this.barrels[victim].hea = 0;
                                    this.HurtBarrel(victim);
                                 }
                              }
                           }
                        }
                        if(this.array2[this.i][0] == "e")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              datafrom = int(this.array3[0]);
                              if(datafrom != this.MP_myid)
                              {
                                 victim = int(this.array3[1]);
                                 if(this.mens[victim] != null)
                                 {
                                    if(this.mens[victim].io)
                                    {
                                       if(!this.mens[victim].isplayer)
                                       {
                                          this.mens[victim].hea = Math.min(this.mens[victim].hea,Number(this.array3[2]));
                                          if(this.mens[victim].hea > 0)
                                          {
                                             this.mens[victim].x = Number(this.array3[3]);
                                             this.mens[victim].y = Number(this.array3[4]);
                                             this.mens[victim].tox = Number(this.array3[5]);
                                             this.mens[victim].toy = Number(this.array3[6]);
                                             this.mens[victim].tarx = Number(this.array3[7]);
                                             this.mens[victim].tary = Number(this.array3[8]);
                                             this.mens[victim].hunt = int(this.array3[9]);
                                             this.mens[victim].botaction = int(this.array3[10]);
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.array2[this.i][0] == "eh")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              victim = int(this.array3[0]);
                              if(this.mens[victim] != null)
                              {
                                 if(this.mens[victim].io)
                                 {
                                    if(!this.mens[victim].isplayer)
                                    {
                                       this.mens[victim].hea = Math.min(this.mens[victim].hea,Number(this.array3[1]));
                                       this.mens[victim].hp_head = Math.min(this.mens[victim].hp_head,Number(this.array3[2]));
                                       this.mens[victim].hp_body = Math.min(this.mens[victim].hp_body,Number(this.array3[3]));
                                       this.mens[victim].hp_arms = Math.min(this.mens[victim].hp_arms,Number(this.array3[4]));
                                       this.mens[victim].hp_legs = Math.min(this.mens[victim].hp_legs,Number(this.array3[5]));
                                    }
                                 }
                              }
                           }
                        }
                        if(this.array2[this.i][0] == "shgh")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              victim = int(this.array3[1]);
                              special_object = this.MP_specials[victim];
                              if(special_object == null)
                              {
                                 this.i4 = 0;
                                 while(this.i4 < this.MP_myspecials_total)
                                 {
                                    if(this.MP_myspecials[this.i4].id_in_full_list == victim)
                                    {
                                       special_object = this.MP_myspecials[this.i4];
                                       break;
                                    }
                                    ++this.i4;
                                 }
                              }
                              if(special_object != null)
                              {
                                 pul_object = int(special_object.pul);
                                 if(this.puls[pul_object] != null)
                                 {
                                    if(this.puls[pul_object].hea > 0)
                                    {
                                       this.puls[pul_object].hea = Math.min(this.puls[pul_object].hea,Number(this.array3[2]));
                                       if(this.puls[pul_object].hea <= 0)
                                       {
                                          this.shnades[this.puls[pul_object].childsh].io = false;
                                          this.ExplodeShield(this.puls[pul_object].childsh);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.array2[this.i][0] == "gshot")
                        {
                           if(this.array2[this.i][1] != "")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              this.effcolor = int(this.array3[0]);
                              if(this.effcolor != this.MP_myid || this.MP_spectator)
                              {
                                 if(this.mens[this.effcolor].hea >= this.mens[this.effcolor].hmax)
                                 {
                                    this.AnnoyPL(this.effcolor,"nod");
                                 }
                                 if(this.HQ && !this.GET_LITE_PHYS())
                                 {
                                    this.i3 = this.aof[this.mens[this.effcolor].b_head_start];
                                    best_i = -1;
                                    best_dist = 0;
                                    this.i4 = 0;
                                    while(this.i4 < this.atotal)
                                    {
                                       if(this.aof[this.i4] == this.i3)
                                       {
                                          tdist = this.Math_pow2(this.ax[this.i4] - Number(this.array3[1])) + this.Math_pow2(this.ay[this.i4] - Number(this.array3[2]));
                                          if(best_i == -1 || tdist < best_dist)
                                          {
                                             best_i = this.i4;
                                             best_dist = tdist;
                                          }
                                       }
                                       ++this.i4;
                                    }
                                    this.v = Math.max(0.3,Math.min(2,(130 - this.mens[this.effcolor].hea) / 70));
                                    if(best_i == this.mens[this.effcolor].b_head_start || best_i == this.mens[this.effcolor].b_head_end)
                                    {
                                       this.ablood[best_i] += this.v * 4;
                                    }
                                    else
                                    {
                                       this.ablood[best_i] += this.v * 2;
                                    }
                                 }
                                 this.FlowAt(Number(this.array3[1]),Number(this.array3[2]),0,Number(this.array3[3]),Number(this.array3[4]),Number(this.array3[5]));
                                 this.mc = this.mens[this.effcolor];
                                 if(Boolean(this.mc.isplayer) && this.MP_myid != this.i)
                                 {
                                    if(this.INTRUDER_DATABASE[this.mc.login_name] == undefined || this.INTRUDER_DATABASE[this.mc.login_name] == null)
                                    {
                                       this.INTRUDER_DATABASE[this.mc.login_name] = new Object();
                                       this.INTRUDER_DATABASE[this.mc.login_name].unregistered_shots = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].registered_shots = 1;
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_start = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_min = this.mc.ping;
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_max = this.mc.ping;
                                       this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                       this.INTRUDER_DATABASE[this.mc.login_name].max_hea = this.mc.hea;
                                       this.INTRUDER_DATABASE[this.mc.login_name].min_hea = this.mc.hea;
                                    }
                                    else
                                    {
                                       this.INTRUDER_DATABASE[this.mc.login_name].registered_shots += 1;
                                       this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].ping_min,this.mc.ping);
                                       this.INTRUDER_DATABASE[this.mc.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].ping_max,this.mc.ping);
                                       this.INTRUDER_DATABASE[this.mc.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].max_hea,this.mc.hea);
                                       this.INTRUDER_DATABASE[this.mc.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].min_hea,this.mc.hea);
                                    }
                                 }
                                 if(int(this.array3[6]) == this.MP_myid)
                                 {
                                    if(this.effcolor != this.MP_myid)
                                    {
                                       if(this.HQ && this.SCREEN_EFFECTS)
                                       {
                                          if(!this.mens[this.effcolor].dead)
                                          {
                                             this.whitness.alpha += 0.3;
                                             this.whitness.visible = true;
                                          }
                                       }
                                    }
                                 }
                                 this.SimHitSound(this.mens[this.effcolor],Number(this.array3[1]),Number(this.array3[2]),Number(this.array3[7]));
                                 this.Hurt(this.effcolor);
                              }
                           }
                        }
                        if(this.array2[this.i][0] == "frag")
                        {
                           if(this.SHOW_FRAG_MESSAGES)
                           {
                              if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                              {
                                 this.array3 = this.array2[this.i][1].split("#");
                                 this.array3[0] = int(this.array3[0]);
                                 this.array3[1] = int(this.array3[1]);
                                 if(this.array3[0] < 0)
                                 {
                                    continue;
                                 }
                                 if(this.array3[0] >= this.playerstotal)
                                 {
                                    continue;
                                 }
                                 if(this.array3[1] >= this.playerstotal)
                                 {
                                    continue;
                                 }
                                 if(this.mens[this.array3[0]].io == false)
                                 {
                                    continue;
                                 }
                                 if(this.array3[1] != -1)
                                 {
                                    if(this.array3[1] < -1)
                                    {
                                       continue;
                                    }
                                    if(this.mens[this.array3[1]].io == false)
                                    {
                                       continue;
                                    }
                                 }
                                 if(!(this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name] == undefined || this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name] == null))
                                 {
                                    this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name].seen_deaths += 1;
                                 }
                                 this.str = "";
                                 this.str4 = "";
                                 if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                 {
                                    if(this.mens[this.array3[0]].hea > 0)
                                    {
                                       this.mens[this.array3[0]].hea = 0;
                                    }
                                 }
                                 if(this.array3[0] == this.MP_myid)
                                 {
                                    this.str4 = "<font color=\"#FF4444\">";
                                    ++this.MP_real_deaths;
                                 }
                                 else if(this.mens[this.array3[0]].team == this.mens[this.MP_myid].team)
                                 {
                                    this.str4 = "<font color=\"#a61b1b\">";
                                 }
                                 else if(this.array3[1] == this.MP_myid)
                                 {
                                    this.str4 = "<font color=\"#44FF44\">";
                                 }
                                 else
                                 {
                                    this.str4 = "<font color=\"#207933\">";
                                 }
                                 if(this.array3[1] != -1)
                                 {
                                    if(this.array3[0] == this.array3[1])
                                    {
                                       this.str3 = this.mens[this.array3[0]].nick;
                                    }
                                    else
                                    {
                                       this.str3 = this.mens[this.array3[1]].nick;
                                    }
                                 }
                                 else
                                 {
                                    this.str3 += "nothing";
                                 }
                                 this.str += this.mens[this.array3[0]].nick;
                                 if((this.array3[2] == "nothing" || this.array3[0] == this.array3[1]) && this.array3[1] != -1 && this.array3[1] != this.array3[0])
                                 {
                                    if(this.array3[0] == this.array3[1])
                                    {
                                       this.i = Math.floor(Math.random() * (4 - 0.0001));
                                       if(this.i == 0)
                                       {
                                          this.str += " suicided";
                                       }
                                       if(this.i == 1)
                                       {
                                          this.str += " killed himself";
                                       }
                                       if(this.i == 2)
                                       {
                                          this.str += " become a victim of himself";
                                       }
                                       if(this.i == 3)
                                       {
                                          this.str += " made a mistake";
                                       }
                                    }
                                    else
                                    {
                                       this.str += " died";
                                    }
                                 }
                                 else if(this.array3[2] == "wall")
                                 {
                                    this.i = Math.floor(Math.random() * (22 - 0.0001));
                                    if(this.i == 0)
                                    {
                                       this.str += " killed himself against the wall";
                                    }
                                    if(this.i == 1)
                                    {
                                       this.str += " rushed too fast";
                                    }
                                    if(this.i == 2)
                                    {
                                       this.str += " tried to go through the wall";
                                    }
                                    if(this.i == 3)
                                    {
                                       this.str += " smeared on the wall";
                                    }
                                    if(this.i == 4)
                                    {
                                       this.str += " fell last";
                                    }
                                    if(this.i == 5)
                                    {
                                       this.str += " broken";
                                    }
                                    if(this.i == 6)
                                    {
                                       this.str += " forgot his parachute";
                                    }
                                    if(this.i == 7)
                                    {
                                       this.str += " almost went through the wall";
                                    }
                                    if(this.i == 8)
                                    {
                                       this.str += " met the wall at high speed";
                                    }
                                    if(this.i == 9)
                                    {
                                       this.str += "\'s guts now adorn the wall";
                                    }
                                    if(this.i == 10)
                                    {
                                       this.str += " flew into the wall";
                                    }
                                    if(this.i == 11)
                                    {
                                       this.str += " has been attacked by a wall";
                                    }
                                    if(this.i == 12)
                                    {
                                       this.str += " suffered from the wall";
                                    }
                                    if(this.i == 13)
                                    {
                                       this.str += " chewed granite";
                                    }
                                    if(this.i == 14)
                                    {
                                       this.str += " fell painfully";
                                    }
                                    if(this.i == 15)
                                    {
                                       this.str += " hammered into the platform";
                                    }
                                    if(this.i == 16)
                                    {
                                       this.str += " covered platform with guts";
                                    }
                                    if(this.i == 17)
                                    {
                                       this.str += " failed to break through the wall";
                                    }
                                    if(this.i == 18)
                                    {
                                       this.str = "Fast " + this.str + " stopped by a wall";
                                    }
                                    if(this.i == 19)
                                    {
                                       this.str = "Wall was much stronger than " + this.str + "\'s head";
                                    }
                                    if(this.i == 20)
                                    {
                                       this.str += " merged with the wall";
                                    }
                                    if(this.i == 21)
                                    {
                                       this.str = "No one will envy " + this.str + " now";
                                    }
                                    if(this.array3[1] != -1)
                                    {
                                       if(this.array3[0] != -1)
                                       {
                                          if(this.array3[1] != this.array3[0])
                                          {
                                             this.str += " thanks to " + this.str3;
                                             if(this.mens[this.array3[0]].team == this.mens[this.array3[1]].team)
                                             {
                                                this.str = this.str3 + " killed his teammate " + this.mens[this.array3[0]].nick;
                                                this.str4 = "<font color=\"#FF4444\">";
                                                if(this.array3[1] == this.MP_myid && !this.MP_spectator)
                                                {
                                                   if(this.MP_pass == "")
                                                   {
                                                      this.MP_teamkills += 1;
                                                      this.DialogSay("Try not to kill your teammates (" + this.MP_teamkills + "/3)","#FFFF00");
                                                   }
                                                   else
                                                   {
                                                      this.MP_teamkills += 1;
                                                      this.DialogSay("You made " + this.MP_teamkills + " teamkills","#FFFF00");
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else if(this.array3[2] == "acid")
                                 {
                                    this.i = Math.floor(Math.random() * (5 - 0.0001));
                                    if(this.i == 0)
                                    {
                                       this.str += " dissolved";
                                    }
                                    if(this.i == 1)
                                    {
                                       this.str += " drank " + this.ACID_NAME.toLowerCase();
                                    }
                                    if(this.i == 2)
                                    {
                                       this.str += " has studied the properties of " + this.ACID_NAME.toLowerCase();
                                    }
                                    if(this.i == 3)
                                    {
                                       this.str += " bathed in " + this.ACID_NAME.toLowerCase();
                                    }
                                    if(this.i == 4)
                                    {
                                       this.str += " tried " + this.ACID_NAME.toLowerCase() + " on taste";
                                    }
                                    if(this.array3[1] != -1)
                                    {
                                       if(this.array3[0] != -1)
                                       {
                                          this.str += " thanks to " + this.str3;
                                       }
                                    }
                                 }
                                 else if(this.array3[1] != -1)
                                 {
                                    if(this.mens[this.array3[0]].team == this.mens[this.array3[1]].team)
                                    {
                                       if(this.array3[0] == this.array3[1])
                                       {
                                          this.str = this.str3 + " killed himself";
                                       }
                                       else
                                       {
                                          this.str = this.str3 + " killed his teammate " + this.mens[this.array3[0]].nick;
                                          if(this.array3[1] == this.MP_myid && !this.MP_spectator)
                                          {
                                             if(this.MP_pass == "")
                                             {
                                                this.MP_teamkills += 1;
                                                this.DialogSay("Try not to kill your teammates (" + this.MP_teamkills + "/3)","#FFFF00");
                                             }
                                             else
                                             {
                                                this.MP_teamkills += 1;
                                                this.DialogSay("You made " + this.MP_teamkills + " teamkills","#FFFF00");
                                             }
                                          }
                                       }
                                    }
                                    else if(this.array3[2] == "swords")
                                    {
                                       if(Math.random() > 0.5)
                                       {
                                          this.str = this.str3 + " sliced " + this.mens[this.array3[0]].nick;
                                       }
                                       else
                                       {
                                          this.str = this.str3 + " cut " + this.mens[this.array3[0]].nick;
                                       }
                                    }
                                    else if(this.array3[2] == "wave")
                                    {
                                       this.str = this.str3 + " eliminated " + this.mens[this.array3[0]].nick;
                                    }
                                    else
                                    {
                                       this.str = this.str3 + " eliminated " + this.mens[this.array3[0]].nick + " via " + this.GunModelToGunName(this.array3[2]);
                                       if(this.array3[3] == "head")
                                       {
                                          this.str += " [ Headshot ]";
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.str += " died";
                                 }
                                 this.str5 = "";
                                 if(this.str4 != "")
                                 {
                                    this.str5 = "</font>";
                                 }
                                 this.str = this.str4 + this.str + this.str5;
                                 this.ChatNewMsg(this.str);
                                 if(this.MP_teamkills >= 3)
                                 {
                                    if(this.MP_pass == "")
                                    {
                                       this.DialogSay("Disconnected. Try not to kill your teammates next time","#FF0000");
                                       this.MP_force_disconnect = true;
                                    }
                                 }
                              }
                           }
                        }
                        else if(this.array2[this.i][0] == "exec")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              if(int(this.array3[2]) == -1 || this.regions[int(this.array3[2])].use_on == 1 || int(this.array3[1]) != this.MP_myid || this.MP_spectator)
                              {
                                 this.TRIGGER_PLAYER_INITIATOR = int(this.array3[1]);
                                 this.triggers[int(this.array3[0])].forcehyperjump = true;
                                 this.EXEC_TRIGGER(int(this.array3[0]));
                              }
                           }
                        }
                        else if(this.array2[this.i][0] == "ss")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              this.mens[int(this.array3[0])].act_fire = true;
                              this.param["p" + int(this.array3[0]) + "f"] = "true";
                              this.param["p" + int(this.array3[0]) + "ix"] = Number(this.array3[1]);
                              this.param["p" + int(this.array3[0]) + "iy"] = Number(this.array3[2]);
                           }
                        }
                        else if(this.array2[this.i][0] == "dd")
                        {
                           if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                           {
                              this.array3 = this.array2[this.i][1].split("#");
                              this.mc = this.mens[int(this.array3[0])];
                              if(int(this.array3[0]) != this.MP_myid || this.MP_spectator)
                              {
                                 this.lax[this.mc.b_leg1] = this.ax[this.mc.b_leg1] = Number(this.array3[1]);
                                 this.lay[this.mc.b_leg1] = this.ay[this.mc.b_leg1] = Number(this.array3[2]);
                                 this.atox[this.mc.b_leg1] = Number(this.array3[3]);
                                 this.atoy[this.mc.b_leg1] = Number(this.array3[4]);
                                 this.lax[this.mc.b_leg2] = this.ax[this.mc.b_leg2] = Number(this.array3[5]);
                                 this.lay[this.mc.b_leg2] = this.ay[this.mc.b_leg2] = Number(this.array3[6]);
                                 this.atox[this.mc.b_leg2] = Number(this.array3[7]);
                                 this.atoy[this.mc.b_leg2] = Number(this.array3[8]);
                                 this.lax[this.mc.b_arm1] = this.ax[this.mc.b_arm1] = Number(this.array3[9]);
                                 this.lay[this.mc.b_arm1] = this.ay[this.mc.b_arm1] = Number(this.array3[10]);
                                 this.atox[this.mc.b_arm1] = Number(this.array3[11]);
                                 this.atoy[this.mc.b_arm1] = Number(this.array3[12]);
                                 this.lax[this.mc.b_arm2] = this.ax[this.mc.b_arm2] = Number(this.array3[13]);
                                 this.lay[this.mc.b_arm2] = this.ay[this.mc.b_arm2] = Number(this.array3[14]);
                                 this.atox[this.mc.b_arm2] = Number(this.array3[15]);
                                 this.atoy[this.mc.b_arm2] = Number(this.array3[16]);
                                 this.lax[this.mc.b_body] = this.ax[this.mc.b_body] = Number(this.array3[17]);
                                 this.lay[this.mc.b_body] = this.ay[this.mc.b_body] = Number(this.array3[18]);
                                 this.atox[this.mc.b_body] = Number(this.array3[19]);
                                 this.atoy[this.mc.b_body] = Number(this.array3[20]);
                                 this.lax[this.mc.b_toe] = this.ax[this.mc.b_toe] = Number(this.array3[21]);
                                 this.lay[this.mc.b_toe] = this.ay[this.mc.b_toe] = Number(this.array3[22]);
                                 this.atox[this.mc.b_toe] = Number(this.array3[23]);
                                 this.atoy[this.mc.b_toe] = Number(this.array3[24]);
                                 this.lax[this.mc.b_head_start] = this.ax[this.mc.b_head_start] = Number(this.array3[25]);
                                 this.lay[this.mc.b_head_start] = this.ay[this.mc.b_head_start] = Number(this.array3[26]);
                                 this.atox[this.mc.b_head_start] = Number(this.array3[27]);
                                 this.atoy[this.mc.b_head_start] = Number(this.array3[28]);
                                 this.lax[this.mc.b_head_end] = this.ax[this.mc.b_head_end] = Number(this.array3[29]);
                                 this.lay[this.mc.b_head_end] = this.ay[this.mc.b_head_end] = Number(this.array3[30]);
                                 this.atox[this.mc.b_head_end] = Number(this.array3[31]);
                                 this.atoy[this.mc.b_head_end] = Number(this.array3[32]);
                                 this.lax[this.mc.b_brk1] = this.ax[this.mc.b_brk1] = Number(this.array3[33]);
                                 this.lay[this.mc.b_brk1] = this.ay[this.mc.b_brk1] = Number(this.array3[34]);
                                 this.atox[this.mc.b_brk1] = Number(this.array3[35]);
                                 this.atoy[this.mc.b_brk1] = Number(this.array3[36]);
                                 this.lax[this.mc.b_brk2] = this.ax[this.mc.b_brk2] = Number(this.array3[37]);
                                 this.lay[this.mc.b_brk2] = this.ay[this.mc.b_brk2] = Number(this.array3[38]);
                                 this.atox[this.mc.b_brk2] = Number(this.array3[39]);
                                 this.atoy[this.mc.b_brk2] = Number(this.array3[40]);
                              }
                           }
                        }
                        else if(this.array2[this.i][0] == "gm")
                        {
                           this.array3 = this.array2[this.i][1].split("#");
                           this.i2 = Number(this.array3[0]);
                           if(this.MP_specials[this.i2] != null && this.MP_specials[this.i2] != undefined)
                           {
                              if(this.MP_specials[this.i2].refr != Number(this.array3[7]))
                              {
                                 this.MP_specials[this.i2].refr = Number(this.array3[7]);
                                 this.ok = true;
                                 this.i3 = 0;
                                 while(this.i3 < this.MP_myspecials_total)
                                 {
                                    if(this.MP_myspecials[this.i3].stat == 3)
                                    {
                                       if(Number(this.array3[6]) == 1)
                                       {
                                          if(this.MP_myspecials[this.i3].id_in_full_list == this.i2)
                                          {
                                             this.MP_myspecials[this.i3].stat = 0;
                                          }
                                       }
                                       this.ok = false;
                                    }
                                    ++this.i3;
                                 }
                                 if(this.ok)
                                 {
                                    if(this.MP_specials[this.i2] != undefined)
                                    {
                                       if(this.MP_specials[this.i2] != null)
                                       {
                                          if(Number(this.array3[3]) != 0 || Number(this.array3[4]) != 0)
                                          {
                                             if(this.MP_specials[this.i2].atom != -1)
                                             {
                                                this.atox[this.MP_specials[this.i2].atom] = Number(this.array3[3]);
                                                this.atoy[this.MP_specials[this.i2].atom] = Number(this.array3[4]);
                                                if(Number(this.array3[1]) != this.ax[this.MP_specials[this.i2].atom] || Number(this.array3[2]) != this.ay[this.MP_specials[this.i2].atom])
                                                {
                                                   this.WakeUpAtom(this.MP_specials[this.i2].atom);
                                                   this.ax[this.MP_specials[this.i2].atom] = Number(this.array3[1]);
                                                   this.ay[this.MP_specials[this.i2].atom] = Number(this.array3[2]);
                                                   if(this.puls[this.MP_specials[this.i2].pul] != undefined)
                                                   {
                                                      if(this.puls[this.MP_specials[this.i2].pul] != null)
                                                      {
                                                         if(this.puls[this.MP_specials[this.i2].pul].nadekind == 3)
                                                         {
                                                            this.puls[this.MP_specials[this.i2].pul].stuckx = Number(this.array3[1]);
                                                            this.puls[this.MP_specials[this.i2].pul].stucky = Number(this.array3[2]);
                                                         }
                                                      }
                                                   }
                                                }
                                                else
                                                {
                                                   this.ForceAtomSleep(this.MP_specials[this.i2].atom);
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        else if(this.array2[this.i][0] == "gs")
                        {
                           this.array3 = this.array2[this.i][1].split("#");
                           if(Number(this.array3[6]) != this.MP_myid || this.MP_spectator)
                           {
                              this.i2 = Number(this.array3[0]);
                              this.xx = Number(this.array3[1]);
                              this.yy = Number(this.array3[2]);
                              this.xx2 = Number(this.array3[3]);
                              this.yy2 = Number(this.array3[4]);
                              this.i4 = int(this.array3[6]);
                              this.i3 = Number(this.array3[5]);
                              this.MP_specials[this.i2] = new Object();
                              this.MP_specials[this.i2].refr = 0;
                              if(this.puls[this.pulscur] != null)
                              {
                                 if(this.game.contains(this.puls[this.pulscur]))
                                 {
                                    this.game.removeChild(this.puls[this.pulscur]);
                                    this.puls[this.pulscur] = null;
                                 }
                              }
                              this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                              this.NoMouse(this.puls[this.pulscur]);
                              this.puls[this.pulscur].lag = 0;
                              this.PlaySound(this.s_nade_throw,this.xx,this.yy);
                              this.puls[this.pulscur].thisis = "grenade";
                              this.puls[this.pulscur].cclass = 6;
                              this.puls[this.pulscur].notbliped = true;
                              this.puls[this.pulscur].x = this.xx;
                              this.puls[this.pulscur].y = this.yy;
                              this.puls[this.pulscur].nx = this.xx;
                              this.puls[this.pulscur].ny = this.yy;
                              this.puls[this.pulscur].power = 3;
                              this.puls[this.pulscur].maxpower = 3;
                              if(this.mens[int(this.array3[6])] != null)
                              {
                                 this.puls[this.pulscur].inwater = this.ainwater[this.mens[int(this.array3[6])].b_arm2];
                              }
                              else
                              {
                                 this.puls[this.pulscur].inwater = false;
                              }
                              this.puls[this.pulscur].lastin = 0;
                              this.puls[this.pulscur].lastinbox = this.boxestotal;
                              this.puls[this.pulscur].master = int(this.array3[6]);
                              this.puls[this.pulscur].nadekind = this.i3;
                              this.puls[this.pulscur].maxbulletlife = 60;
                              if(this.i3 == 1)
                              {
                                 this.puls[this.pulscur].gotoAndStop(11);
                              }
                              if(this.i3 == 2)
                              {
                                 this.puls[this.pulscur].gotoAndStop(17);
                              }
                              if(this.i3 == 3)
                              {
                                 this.puls[this.pulscur].gotoAndStop(19);
                                 this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                                 this.puls[this.pulscur].hasexploded = false;
                                 this.puls[this.pulscur].radius = 0;
                                 this.puls[this.pulscur].hea = 10;
                                 this.puls[this.pulscur].heapo = 90;
                                 this.puls[this.pulscur].losthea = 0;
                              }
                              this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                              this.puls[this.pulscur].life = 0;
                              this.puls[this.pulscur].spx = 0;
                              this.puls[this.pulscur].spy = 0;
                              this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,3,true,8,-1);
                              this.aactive[this.puls[this.pulscur].attached] = 1000;
                              this.mens[int(this.array3[6])].arm_nade = this.puls[this.pulscur].attached;
                              this.MP_specials[this.i2].pul = this.pulscur;
                              this.MP_specials[this.i2].atom = this.puls[this.pulscur].attached;
                              this.nextpul();
                           }
                        }
                        else if(this.array2[this.i][0] == "gok")
                        {
                           this.array3 = this.array2[this.i][1].split("#");
                           if(Number(this.array3[0]) == this.MP_myid && !this.MP_spectator)
                           {
                              if(this.StartMiniScenario(0))
                              {
                                 ++this.tnds;
                                 this.MP_assigning_special = Number(this.array3[1]);
                                 this.MP_myspecials[this.MP_assigning_special].stat = 2;
                                 this.MP_myspecials[this.MP_assigning_special].id_in_full_list = Number(this.array3[2]);
                              }
                           }
                        }
                     }
                  }
                  if(this.herolist.visible)
                  {
                     this.herolist.f4.text = this.players_online + 1 + " / " + MP_match_playerstotal;
                  }
                  if(this.MP_mode)
                  {
                     if(!this.MP_force_disconnect)
                     {
                        this.MP_ping2 = (getTimer() - this.MP_ping1 + this.MP_ping2 * 10) / 11;
                        if(getTimer() - this.MP_ping1 > 15)
                        {
                           this.MP_get();
                        }
                        else
                        {
                           setTimeout(function():*
                           {
                              MP_get();
                           },15 - (getTimer() - this.MP_ping1));
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function MorphWithTimeScale(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         param3 = Math.pow(param3,param4);
         return param2 * (1 - param3) + param1 * param3;
      }
      
      public function limit(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function Collision(param1:*, param2:int, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:Boolean, param10:Number, param11:Number) : void
      {
         param7 = param4 - param3;
         param8 = param6 - param5;
         if(!param1.inwater)
         {
            if(param1.x >= param3 + 1)
            {
               if(param1.x <= param4 - 1)
               {
                  if(param1.y >= param6 - this.sitmax)
                  {
                     if(param1.y <= param6 + param1.sit * this.sitmax)
                     {
                        this.hup = true;
                     }
                  }
               }
            }
            if(param1.sit != 0)
            {
               if(param1.x >= param3)
               {
                  if(param1.x <= param4)
                  {
                     if(param1.y >= param6 - 5)
                     {
                        if(param1.y <= param6 + 5)
                        {
                           this.ok = true;
                        }
                     }
                  }
               }
            }
         }
         if(this.MP_mode)
         {
            if(param1.tox > 0)
            {
               param4 += param1.tox * this.GSPEED2 * 2;
            }
            if(param1.tox < 0)
            {
               param3 += param1.tox * this.GSPEED2 * 2;
            }
            if(param1.toy > 0)
            {
               param6 += param1.toy * this.GSPEED2 * 2;
            }
            if(param1.toy < 0)
            {
               param5 += param1.toy * this.GSPEED2 * 2;
            }
         }
         else if(param2 == this.MP_myid)
         {
            param10 *= this.GSPEED / this.GSPEED2;
            param11 *= this.GSPEED / this.GSPEED2;
         }
         if(param1.x >= param3)
         {
            if(param1.x <= param4)
            {
               if(param1.y >= param5)
               {
                  if(param1.y <= param6)
                  {
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,16776960);
                        this.debug_screen.graphics.moveTo(param1.x - this.PLAYER_WIDTH,param1.y - 82);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH,param1.y - 82);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH,param1.y - param1.sit * this.sitmax);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH,param1.y - param1.sit * this.sitmax);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH,param1.y - 82);
                     }
                     this.ok2 = true;
                     if(param1.y < param5 + 42)
                     {
                        this.u = 0;
                        this.v = 1;
                        if(param1.x < param3 + this.PLAYER_WIDTH || param1.x > param4 - this.PLAYER_WIDTH)
                        {
                           if(param1.x > (param3 + param4) / 2)
                           {
                              if(!this.TracePointOnlyBoxes(param1.x - this.PLAYER_WIDTH - 5,param5 - 75) || !this.TracePointOnlyBoxes(param1.x - this.PLAYER_WIDTH - 5,param5 - 35))
                              {
                                 this.u = -1;
                                 this.v = 0;
                              }
                           }
                           else if(!this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH + 5,param5 - 75) || !this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH + 5,param5 - 35))
                           {
                              this.u = 1;
                              this.v = 0;
                           }
                        }
                        if(this.v != 0)
                        {
                           if(param1.y > param5 + 15)
                           {
                              param1.tox *= 0.8;
                           }
                        }
                     }
                     else if(param1.y > param6 - 100)
                     {
                        this.u = 0;
                        this.v = -1;
                        if(param1.x > param4 - 20)
                        {
                           this.u = -1;
                           this.v = 0;
                        }
                        if(param1.x < param3 + 20)
                        {
                           this.u = 1;
                           this.v = 0;
                        }
                     }
                     else
                     {
                        if(param7 > param8)
                        {
                           this.v = param5 + param8 * 0.5;
                           param8 *= 0.5;
                           this.u = Math.max(param3 + param8,Math.min(param4 - param8,param1.x - param1.tox * this.GSPEED));
                        }
                        else
                        {
                           this.u = param3 + param7 * 0.5;
                           param7 *= 0.5;
                           this.v = Math.max(param5 + param7,Math.min(param6 - param7,param1.y - 41 - param1.toy * this.GSPEED));
                        }
                        this.u -= param1.x - param1.tox * this.GSPEED;
                        this.v -= param1.y - 41 - param1.toy * this.GSPEED;
                     }
                     if(this.Math_abs(this.u) > this.Math_abs(this.v))
                     {
                        if(this.Math_abs(param1.tox - param10) > 14 * param1.mobility)
                        {
                           param1.stability -= this.Math_abs(param1.tox - param10) * 0.2;
                        }
                        if(this.Math_abs(param1.tox - param10) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.effcolor = param2;
                           if(this.u > 0)
                           {
                              this.FlowAt(param1.x + 20,param1.y - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                           }
                           else
                           {
                              this.FlowAt(param1.x - 20,param1.y - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                           }
                           this.PlaySound(this.s_body_fall,param1.x,param1.y);
                           if(!this.MP_mode || this.MP_myid == param2 || !param1.isplayer)
                           {
                              if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                              {
                                 param1.hea -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(param1.tox - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_legs -= this.Math_pow2(param1.tox - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              else
                              {
                                 param1.hea -= this.Math_pow2(param1.tox - param10) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_legs -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              param1.lastshot = "body";
                              param1.lastshotbygun = "wall";
                           }
                           if(param2 == this.MP_myid)
                           {
                              this.HurtMyPlayer(this.u,0,this.Math_pow2(param1.tox - param10) * 0.1);
                           }
                           this.Hurt(param2);
                        }
                        if(param1.hea > 0)
                        {
                           if(param1.act_movey == -1 && param6 > param1.y + 30 && (param2 != this.MP_myid && param1.isplayer || param2 == this.MP_myid && (this.u > 0 && param1.act_movex != 1 || this.u < 0 && param1.act_movex != -1)) && this.Math_abs(param1.tox - param10) > 6 && this.Math_abs(param1.tox - param10) < 16 && param1.toy - param11 > -8 && param1.toy - param11 < 4)
                           {
                              if(this.u < 0 && param1.x > (param3 + param4) / 2)
                              {
                                 param1.tox = 7 + param10;
                              }
                              else
                              {
                                 param1.tox = -7 + param10;
                              }
                              param1.toy = Math.min((param11 - 14) * 0.5,param1.toy);
                              if(param2 == this.MP_myid)
                              {
                                 this.incBadge(20);
                              }
                              this.TurnBone(param1.b_leg1,param1.x - param1.tox * 2 - 5,param1.y,param1,1);
                              this.TurnBone(param1.b_leg2,param1.x - param1.tox * 2 + 5,param1.y,param1,1);
                           }
                           else
                           {
                              if(this.Math_abs(param1.tox - param10) < 4)
                              {
                                 param1.tox = param10;
                              }
                              else
                              {
                                 param1.toy = (param11 + param1.toy * 9) * 0.1;
                              }
                              if(this.u < 0)
                              {
                                 if(param9)
                                 {
                                    param1.x = param4 + 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox < 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox += this.Math_abs(param1.tox - param10) * 0.25;
                              }
                              else
                              {
                                 if(param9)
                                 {
                                    param1.x = param3 - 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox > 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox -= this.Math_abs(param1.tox - param10) * 0.25;
                              }
                           }
                           if(param9)
                           {
                              if(this.u < 0)
                              {
                                 this.rx = 1;
                              }
                              else
                              {
                                 this.retux = 1;
                              }
                           }
                        }
                     }
                     else
                     {
                        if(this.v < 0)
                        {
                           if(this.Math_abs(param1.toy - param11) > 12)
                           {
                              param1.stability -= this.Math_abs(param1.toy - param11) * 0.2;
                           }
                        }
                        else if(this.Math_abs(param1.toy - param11) > 17)
                        {
                           param1.stability -= this.Math_abs(param1.toy - param11) * 0.05;
                        }
                        if(this.Math_abs(param1.toy - param11) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.effcolor = param2;
                           if(this.v < 0)
                           {
                              this.FlowAt(param1.x - 20 + Math.random() * 40,param1.y - 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                           }
                           else
                           {
                              this.FlowAt(param1.x - 20 + Math.random() * 40,param1.y - 10,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                           }
                           if(this.v > 0)
                           {
                              this.PlaySound(this.s_body_fall,param1.x,param1.y);
                              if(!this.MP_mode || this.MP_myid == param2 || !param1.isplayer)
                              {
                                 if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                                 {
                                    param1.hp_legs -= this.Math_pow2(param1.toy - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 else
                                 {
                                    param1.hp_legs -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 param1.lastshot = "body";
                                 param1.lastshotbygun = "wall";
                              }
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(0,this.v,this.Math_pow2(param1.toy - param11) * 0.1);
                              }
                           }
                           else
                           {
                              this.PlaySound(this.s_body_fall,param1.x,param1.y);
                              if(!this.MP_mode || this.MP_myid == param2 || !param1.isplayer)
                              {
                                 if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                                 {
                                    param1.hp_head -= this.Math_pow2(param1.toy - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 else
                                 {
                                    param1.hp_head -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 param1.lastshot = "body";
                                 param1.lastshotbygun = "wall";
                              }
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(0,this.v,this.Math_pow2(param1.toy - param11) * 0.1);
                              }
                           }
                           this.Hurt(param2);
                        }
                        if(param1.hea > 0)
                        {
                           if(!param1.stand)
                           {
                              param1.tox += (param10 / 6 - param1.tox / 6) * this.thispulspeed;
                              if(param1.tox > param10 + 1.5 * this.thispulspeed)
                              {
                                 param1.tox -= 1.5 * this.thispulspeed;
                              }
                              else if(param1.tox < param10 - 1.5 * this.thispulspeed)
                              {
                                 param1.tox += 1.5 * this.thispulspeed;
                              }
                              else
                              {
                                 param1.tox = param10;
                              }
                           }
                           if(this.v < 0)
                           {
                              if(param9)
                              {
                                 if(param1.toy < 0)
                                 {
                                    param1.toy = 0;
                                 }
                              }
                              param1.toy += (this.Math_abs(param1.toy - param11) + param11) * 0.25;
                              this.ok = true;
                              if(param9)
                              {
                                 param1.y = param6 + 2;
                              }
                           }
                           else
                           {
                              if(param9)
                              {
                                 if(param11 < 0)
                                 {
                                    param1.toy = (param11 + param1.toy) * 0.5 + this.gravity;
                                 }
                                 else
                                 {
                                    param1.toy = param11;
                                 }
                              }
                              param1.stand = true;
                              if(this.retuy != 1)
                              {
                                 if(param9)
                                 {
                                    param1.y = param5 + 1;
                                 }
                              }
                           }
                           if(param9)
                           {
                              if(this.v < 0)
                              {
                                 this.retuy = 1;
                              }
                              else
                              {
                                 this.ry = 1;
                              }
                           }
                        }
                     }
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,11206400);
                        this.debug_screen.graphics.moveTo(param1.x - this.PLAYER_WIDTH,param1.y - 82);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH,param1.y - 82);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH,param1.y - param1.sit * this.sitmax);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH,param1.y - param1.sit * this.sitmax);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH,param1.y - 82);
                     }
                  }
               }
            }
         }
      }
      
      public function UpdateTeamColor(param1:MovieClip) : void
      {
         if(this.MP_myid != param1.idd)
         {
            if(this.mens[this.MP_myid] != undefined)
            {
               if(param1.team == this.mens[this.MP_myid].team)
               {
                  param1.nick_color = this.color_friendly;
               }
               else
               {
                  param1.nick_color = this.color_enemy;
               }
            }
         }
         else
         {
            param1.nick_color = this.color_player;
         }
         param1.gui.txt1.textColor = param1.nick_color;
      }
      
      public function SpawnPlayerImmediately(param1:MovieClip) : void
      {
         if(param1.notspawned)
         {
            param1.gotoAndStop(3);
            param1.gotoAndStop(2);
         }
         param1.notspawned = false;
         param1.leg1.upper.gotoAndStop(param1.mdl_leg1_upper);
         this.UpdateTeamColor(param1);
         param1.gui.txt1.text = param1.nick;
         if(this.MP_mode)
         {
            if(!param1.isplayer)
            {
               param1.gui.visible = false;
            }
            else if(this.ANONYMOUS_MODE)
            {
               if(param1.idd == this.MP_myid)
               {
                  param1.gui.visible = true;
                  param1.gui.alpha = 1;
               }
            }
            else
            {
               param1.gui.visible = true;
               param1.gui.alpha = 1;
            }
         }
         else
         {
            if(param1.team != this.mens[this.MP_myid].team || !this.PLAZMA_GAME)
            {
               param1.gui.visible = false;
            }
            else
            {
               param1.gui.visible = true;
               param1.gui.alpha = 1;
            }
            this.i3 = -1;
            if(param1.char == 1)
            {
               this.i3 = 0;
            }
            if(param1.char == 3)
            {
               this.i3 = 1;
            }
            if(this.i3 != -1)
            {
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         if(param1.palette[0] != "-" || param1.palette[1] != "-" || param1.palette[2] != "-" || param1.palette[3] != "-")
         {
            this.UpdatePlayerColorMP(param1);
         }
         if(!param1.brk_legs)
         {
            param1.leg1.middle.gotoAndStop(param1.mdl_leg1_middle);
            param1.leg1.lower.gotoAndStop(param1.mdl_leg1_lower);
         }
         param1.leg2.upper.gotoAndStop(param1.mdl_leg2_upper);
         if(!param1.brk_legs)
         {
            param1.leg2.middle.gotoAndStop(param1.mdl_leg2_middle);
            param1.leg2.lower.gotoAndStop(param1.mdl_leg2_lower);
         }
         param1.arm1.upper.gotoAndStop(param1.mdl_arm1_upper);
         if(!param1.brk_arms)
         {
            param1.arm1.lower.gotoAndStop(param1.mdl_arm1_lower);
         }
         param1.arm2.upper.gotoAndStop(param1.mdl_arm2_upper);
         if(!param1.brk_arms)
         {
            param1.arm2.lower.gotoAndStop(param1.mdl_arm2_lower);
         }
         if(!param1.brk_body)
         {
            param1.toe.gotoAndStop(param1.mdl_toe);
            param1.body.gotoAndStop(param1.mdl_body);
         }
         if(!param1.brk_head)
         {
            param1.head.gotoAndStop(param1.mdl_head);
         }
         this.ChangedGun(param1.idd);
         this.RedrawPsi(param1.idd);
      }
      
      public function PhysHit(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number) : void
      {
         this.ok = false;
         this.cx = this.cy = 0;
         if(this.aof[param1] == this.MP_myid || this.aof[param1] == -1)
         {
            if(this.atox[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],this.ax[param1] - this.atox[param1] * this.thispulspeed * this.extra_low_mult,this.ay[param1] - this.atoy[param1] * this.thispulspeed * this.extra_low_mult,param2,param3,param2,param3 + param5))
               {
                  this.ax[param1] = this.retux;
                  this.ok = true;
                  this.cx = 1;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],this.ax[param1] - this.atox[param1] * this.thispulspeed * this.extra_low_mult,this.ay[param1] - this.atoy[param1] * this.thispulspeed * this.extra_low_mult,param2 + param4,param3,param2 + param4,param3 + param5))
            {
               this.ax[param1] = this.retux;
               this.ok = true;
               this.cx = -1;
               if(this.ay[param1] >= param3 + this.arad[param1] + 30)
               {
                  if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                  {
                     this.pres_right = true;
                     this.pres_ok = true;
                  }
               }
            }
            if(this.atoy[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],this.ax[param1] - this.atox[param1] * this.thispulspeed * this.extra_low_mult,this.ay[param1] - this.atoy[param1] * this.thispulspeed * this.extra_low_mult,param2,param3,param2 + param4,param3))
               {
                  this.ay[param1] = this.retuy;
                  this.ok = true;
                  this.cy = 1;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],this.ax[param1] - this.atox[param1] * this.thispulspeed * this.extra_low_mult,this.ay[param1] - this.atoy[param1] * this.thispulspeed * this.extra_low_mult,param2,param3 + param5,param2 + param4,param3 + param5))
            {
               this.ay[param1] = this.retuy;
               this.ok = true;
               this.cy = -1;
               if(this.ax[param1] >= param2 + this.arad[param1] + 30)
               {
                  if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                  {
                     this.pres_bottom = true;
                     this.pres_ok = true;
                  }
               }
            }
         }
         if(!this.ok)
         {
            if(this.ax[param1] >= param2 - this.arad[param1])
            {
               if(this.ax[param1] <= param2 + this.arad[param1] + param4)
               {
                  if(this.ay[param1] >= param3 - this.arad[param1] - 1)
                  {
                     if(this.ay[param1] <= param3 + this.arad[param1] + param5)
                     {
                        this.ok = true;
                     }
                  }
               }
            }
         }
         if(this.ok)
         {
            this.xx = 0;
            if(this.TracePointNoRagdolls(this.ax[param1] - this.atox[param1] * this.thispulspeed,this.ay[param1] - this.atoy[param1] * this.thispulspeed))
            {
               this.xx = 1;
               if(this.thispulspeed > 1)
               {
                  this.xx *= this.thispulspeed;
               }
            }
            if(this.cx == 0 && this.cy == 0)
            {
               if(param5 < param4)
               {
                  this.cx = Math.max(param2 + param5 / 2,Math.min(param2 + param4 - param5 / 2,this.ax[param1] - this.atox[param1] * this.xx));
                  this.cy = param3 + param5 / 2;
               }
               else
               {
                  this.cy = Math.max(param3 + param4 / 2,Math.min(param3 + param5 - param4 / 2,this.ay[param1] - this.atoy[param1] * this.xx));
                  this.cx = param2 + param4 / 2;
               }
               this.cx = this.cx - this.ax[param1] + this.atox[param1] * this.xx;
               this.cy = this.cy - this.ay[param1] + this.atoy[param1] * this.xx;
            }
            if(this.Math_abs(this.cx) < this.Math_abs(this.cy))
            {
               this.xx = this.Math_abs(this.atox[param1] - param6);
               this.yy = this.Math_abs(this.atoy[param1] - param7);
            }
            else
            {
               this.xx = this.Math_abs(this.atoy[param1] - param7);
               this.yy = this.Math_abs(this.atox[param1] - param6);
            }
            if(this.yy > 14)
            {
               this.PAlert(this.ax[param1] - this.atox[param1],this.ay[param1] - this.atoy[param1]);
            }
            if(this.amat[param1] == 0)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 7)
                  {
                     this.i3 = int(Math.random() * 4);
                     if(this.mens[this.aof[param1]].armored == 2)
                     {
                        if(this.i3 == 0)
                        {
                           this.PlaySound(this.s_robo_step1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 1)
                        {
                           this.PlaySound(this.s_robo_step2,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 2)
                        {
                           this.PlaySound(this.s_robo_step3,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 3)
                        {
                           this.PlaySound(this.s_robo_step4,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.i3 == 0)
                     {
                        this.PlaySound(this.s_step1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 1)
                     {
                        this.PlaySound(this.s_step2,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 2)
                     {
                        this.PlaySound(this.s_step3,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 3)
                     {
                        this.PlaySound(this.s_step4,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 1)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.mens[this.aof[param1]].armored == 2)
                  {
                     if(this.xx > this.yy + 2)
                     {
                        this.PlaySound(this.s_metal0,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy > 4)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_metal1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 8)
                        {
                           this.PlaySound(this.s_metal2,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_metal3,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  else if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_body0,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_body1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_body2,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_body3,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 2)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_wea1,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_wea2,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 3)
            {
               if(this.yy > 10)
               {
                  if(this.barrels[-100 - this.aof[param1]].hea > 0)
                  {
                     this.barrels[-100 - this.aof[param1]].hea -= this.Math_abs(this.atoy[param1]) * 1;
                     this.HurtBarrel(-100 - this.aof[param1]);
                  }
               }
            }
            else if(this.amat[param1] == 4)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
               }
            }
            else if(this.amat[param1] == 5 || this.amat[param1] == 6 || this.amat[param1] == 7)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     if(this.amat[param1] == 5)
                     {
                        this.PlaySound(this.s_steel_hor,this.ax[param1],this.ay[param1]);
                        this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     }
                  }
                  else if(this.yy > 3)
                  {
                     if(this.amat[param1] == 5)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_steel_low,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 14)
                        {
                           this.PlaySound(this.s_steel_med,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_steel_hard,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.amat[param1] == 6)
                     {
                        if(this.yy > 8 && this.atoy[param1] > 0)
                        {
                           this.PlaySound(this.s_walker_step,this.ax[param1],this.ay[param1]);
                           this.atoy[param1] = 1;
                        }
                     }
                     else if(this.yy > 11)
                     {
                        if(Math.random() > 0.5)
                        {
                           this.PlaySound(this.s_capsule_hit1,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_capsule_hit2,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  if(this.yy > 14)
                  {
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     if(this.amat[param1] != 6)
                     {
                        this.vehicles[-this.aof[param1] - 200].hea -= this.yy * this.yy / 13;
                     }
                  }
               }
            }
            else if(this.amat[param1] == 8)
            {
               if(this.yy > 5)
               {
                  this.PlaySound(this.s_grenade,this.ax[param1],this.ay[param1]);
               }
            }
            else if(this.amat[param1] == 9)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_box_hor,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 3)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_box_low,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_box_med,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_box_hard,this.ax[param1],this.ay[param1]);
                     }
                  }
                  if(this.yy > 12)
                  {
                     this.vehicles[-this.aof[param1] - 200].hea -= this.yy * this.yy / 13;
                  }
               }
            }
            else if(this.amat[param1] == 10)
            {
               if(this.yy > 5)
               {
                  this.PlaySound(this.s_robo_bug_hit,this.ax[param1],this.ay[param1]);
               }
            }
            if(this.amat[param1] == 1 || this.amat[param1] == 0)
            {
               if(this.mens[this.aof[param1]].stability < 0 || this.mens[this.aof[param1]].hea <= 0)
               {
                  if(this.yy * this.GLOBAL_FALL_SENSITIVITY_MULT > 18)
                  {
                     if(!this.MP_mode || this.MP_myid == this.aof[param1] || !this.mens[this.aof[param1]].isplayer)
                     {
                        if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        else
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        if(param1 == this.mens[this.aof[param1]].b_leg1 || param1 == this.mens[this.aof[param1]].b_leg2)
                        {
                           this.mens[this.aof[param1]].hp_legs -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_body || param1 == this.mens[this.aof[param1]].b_toe)
                        {
                           this.mens[this.aof[param1]].hp_body -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_head_end || param1 == this.mens[this.aof[param1]].b_head_start)
                        {
                           this.mens[this.aof[param1]].hp_head -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                           if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                           else
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_arm1 || param1 == this.mens[this.aof[param1]].b_arm2)
                        {
                           this.mens[this.aof[param1]].hp_arms -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        this.mens[this.aof[param1]].lastshot = "body";
                        this.mens[this.aof[param1]].lastshotbygun = "wall";
                     }
                     this.effcolor = this.aof[param1];
                     this.FlowAt(this.ax[param1],this.ay[param1],0,-this.atox[param1],-this.atoy[param1],3);
                     this.PlaySound(this.s_body_fall,this.ax[param1],this.ay[param1]);
                     this.Hurt(this.aof[param1]);
                     if(this.aof[param1] == this.MP_myid)
                     {
                        this.HurtMyPlayer(this.atox[param1],this.atoy[param1],this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT);
                     }
                  }
               }
            }
            if(this.Math_abs(this.cx) > this.Math_abs(this.cy))
            {
               if(this.around[param1])
               {
                  this.atoy[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atoy[param1] = (param7 + this.atoy[param1] * 5) / 6;
                  if(this.atoy[param1] > param7 + this.gravity * 1)
                  {
                     this.atoy[param1] -= this.gravity * 1;
                  }
                  else if(this.atoy[param1] < param7 - this.gravity * 1)
                  {
                     this.atoy[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atoy[param1] = param7;
                  }
               }
               if(this.cx < 0)
               {
                  this.ax[param1] = param2 + param4 + this.arad[param1];
                  this.atox[param1] = this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_right = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  this.ax[param1] = param2 - this.arad[param1];
                  this.atox[param1] = -this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else
            {
               if(this.around[param1])
               {
                  this.atox[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atox[param1] = (param6 + this.atox[param1] * 5) / 6;
                  if(this.amat[param1] == 6)
                  {
                     this.atox[param1] = param6;
                  }
                  if(this.atox[param1] > param6 + this.gravity * 1)
                  {
                     this.atox[param1] -= this.gravity * 1;
                  }
                  else if(this.atox[param1] < param6 - this.gravity * 1)
                  {
                     this.atox[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atox[param1] = param6;
                  }
               }
               if(this.cy < 0)
               {
                  this.ay[param1] = param3 + this.arad[param1] + param5;
                  this.atoy[param1] = param7 + this.Math_abs(this.atoy[param1] - param7) * 0.5;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_bottom = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  if(this.amat[param1] == 6)
                  {
                     this.ay[param1] = param3 - this.arad[param1] + 2;
                     if(this.atoy[param1] > 0)
                     {
                        this.atoy[param1] = 1;
                     }
                  }
                  else
                  {
                     this.ay[param1] = param3 - this.arad[param1];
                     this.atoy[param1] = param7 - this.Math_abs(this.atoy[param1] - param7) * 0.5;
                  }
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
         }
      }
      
      public function MeasureStart(param1:uint) : void
      {
      }
      
      public function MeasureStop(param1:uint) : void
      {
      }
      
      public function MeasuresReset() : void
      {
      }
      
      public function MeasuresMaybePrint() : void
      {
         var _loc1_:uint = 0;
      }
      
      public function Physics() : void
      {
         var _loc1_:Number = NaN;
         if(this.GET_LITE_PHYS())
         {
            if(this.LITE_PHYS_tim)
            {
               this.LITE_PHYS_from = 0;
            }
            else
            {
               this.LITE_PHYS_from = 1;
            }
            this.extra_low_mult = 2;
         }
         else
         {
            this.LITE_PHYS_from = 0;
            this.extra_low_mult = 1;
         }
         this.i = 0;
         while(this.i < this.atotal)
         {
            if(this.GET_LITE_PHYS() && Math.ceil(this.aof[this.i] / 2 - Math.floor(this.aof[this.i] / 2)) == this.LITE_PHYS_from)
            {
               this.MeasureStart(0);
               if(this.aio[this.i] == true)
               {
                  if(!this.MP_mode || this.TraceLineF_nopushers(this.ax[this.i],this.ay[this.i],this.lax[this.i] + this.atox[this.i],this.lay[this.i] + this.atoy[this.i]))
                  {
                     this.ax[this.i] = this.lax[this.i] + this.atox[this.i] * this.GSPEED;
                     this.ay[this.i] = this.lay[this.i] + this.atoy[this.i] * this.GSPEED;
                  }
               }
               this.MeasureStop(0);
            }
            else if(this.aio[this.i] != -1)
            {
               this.MeasureStart(1);
               if(this.aof[this.i] == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.GET_LITE_PHYS())
               {
                  this.thispulspeed *= 2;
                  this.lax[this.i] = this.ax[this.i];
                  this.lay[this.i] = this.ay[this.i];
               }
               if(this.aactive[this.i] == 1000 || Boolean(this.aactive[this.aof[this.i]]))
               {
                  this.MeasureStart(4);
                  if(this.RAGDOLL_COLLIDE && (this.MP_gamestate != 2 || !this.MP_mode))
                  {
                     if(this.arad[this.i] > 1)
                     {
                        if(this.aio[this.i] != -1)
                        {
                           if(this.amat[this.i] != -1)
                           {
                              this.i2 = this.i + 1;
                              while(this.i2 < this.atotal)
                              {
                                 this.MeasureStart(2);
                                 _loc1_ = this.arad[this.i] + this.arad[this.i2];
                                 if(this.ax[this.i] > this.ax[this.i2] - _loc1_)
                                 {
                                    if(this.ax[this.i] < this.ax[this.i2] + _loc1_)
                                    {
                                       if(this.ay[this.i] > this.ay[this.i2] - _loc1_)
                                       {
                                          if(this.ay[this.i] < this.ay[this.i2] + _loc1_)
                                          {
                                             if(this.aof[this.i] != this.aof[this.i2])
                                             {
                                                if(this.aio[this.i2] == true || this.aio[this.i] == true)
                                                {
                                                   if(Boolean(this.aactive[this.aof[this.i2]]) || this.aactive[this.i2] == 1000)
                                                   {
                                                      if(this.aio[this.i2] != -1)
                                                      {
                                                         if(this.amat[this.i2] != -1)
                                                         {
                                                            if(this.arad[this.i2] > 1)
                                                            {
                                                               if(this.aof[this.i] < 0 || this.mens[this.aof[this.i]].incar == -1)
                                                               {
                                                                  if(this.aof[this.i2] < 0 || this.mens[this.aof[this.i2]].incar == -1)
                                                                  {
                                                                     this.MeasureStop(2);
                                                                     this.xx = this.Dist2D(this.ax[this.i],this.ay[this.i],this.ax[this.i2],this.ay[this.i2]);
                                                                     if(this.xx > 1)
                                                                     {
                                                                        if(this.xx < _loc1_)
                                                                        {
                                                                           this.MeasureStart(3);
                                                                           this.cx = (this.ax[this.i] + this.ax[this.i2]) * 0.5;
                                                                           this.cy = (this.ay[this.i] + this.ay[this.i2]) * 0.5;
                                                                           this.offset_balance = this.arad[this.i2] / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.temp_coef = 20 / this.xx * (this.GSPEED < 2 ? this.GSPEED : 2) * (this.arad[this.i] + this.arad[this.i2] - this.xx) / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.yy = this.offset_balance * this.temp_coef;
                                                                           this.atox[this.i] += (this.ax[this.i] - this.cx) * this.yy;
                                                                           this.atoy[this.i] += (this.ay[this.i] - this.cy) * this.yy;
                                                                           this.ax[this.i] += (this.ax[this.i] - this.cx) * this.yy;
                                                                           this.ay[this.i] += (this.ay[this.i] - this.cy) * this.yy;
                                                                           this.yy = (1 - this.offset_balance) * this.temp_coef;
                                                                           this.atox[this.i2] += (this.ax[this.i2] - this.cx) * this.yy;
                                                                           this.atoy[this.i2] += (this.ay[this.i2] - this.cy) * this.yy;
                                                                           this.ax[this.i2] += (this.ax[this.i2] - this.cx) * this.yy;
                                                                           this.ay[this.i2] += (this.ay[this.i2] - this.cy) * this.yy;
                                                                           this.cx = (this.atox[this.i] + this.atox[this.i2]) * 0.5;
                                                                           this.cy = (this.atoy[this.i] + this.atoy[this.i2]) * 0.5;
                                                                           this.atox[this.i] = (this.atox[this.i] * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i] = (this.atoy[this.i] * 3 + this.cy) * 0.25;
                                                                           this.atox[this.i2] = (this.atox[this.i2] * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i2] = (this.atoy[this.i2] * 3 + this.cy) * 0.25;
                                                                           if(this.arad[this.i2] > 25 && this.arad[this.i] > 25)
                                                                           {
                                                                              this.acollided[this.i] = 1;
                                                                              this.acollided[this.i2] = 1;
                                                                              if(this.amat[this.i] == 6)
                                                                              {
                                                                                 this.atoy[this.i] -= 0.2;
                                                                              }
                                                                              if(this.amat[this.i2] == 6)
                                                                              {
                                                                                 this.atoy[this.i2] -= 0.2;
                                                                              }
                                                                           }
                                                                           if(this.VectorDist2D(this.atox[this.i],this.atoy[this.i]) + this.VectorDist2D(this.atox[this.i2],this.atoy[this.i2]) > 2 * (this.GSPEED > 1 ? this.GSPEED : 1) * (this.GET_LITE_PHYS() ? 2 : 1))
                                                                           {
                                                                              this.WakeUpAtom(this.i2);
                                                                              this.WakeUpAtom(this.i);
                                                                           }
                                                                           else
                                                                           {
                                                                              this.ForceAtomSleep(this.i2);
                                                                              this.ForceAtomSleep(this.i);
                                                                           }
                                                                           this.MeasureStop(3);
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                  }
                  this.MeasureStop(4);
                  if(this.aio[this.i] == true)
                  {
                     this.MeasureStart(5);
                     this.ax[this.i] += this.atox[this.i] * this.thispulspeed;
                     this.ay[this.i] += this.atoy[this.i] * this.thispulspeed;
                     this.i2 = 0;
                     while(this.i2 < this.pushstotal)
                     {
                        if(this.ax[this.i] > this.pushx[this.i2])
                        {
                           if(this.ax[this.i] < this.pushw[this.i2])
                           {
                              if(this.ay[this.i] > this.pushy[this.i2])
                              {
                                 if(this.ay[this.i] < this.pushh[this.i2])
                                 {
                                    this.atox[this.i] += this.pushtox[this.i2] * this.thispulspeed;
                                    this.atoy[this.i] += this.pushtoy[this.i2] * this.thispulspeed;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ay[this.i] > this.g_maxy)
                     {
                        this.atox[this.i] *= 0.5;
                        this.atoy[this.i] *= 0.5;
                        this.atoy[this.i] -= this.gravity * 2;
                     }
                     this.xx = this.VectorDist2D(this.atox[this.i],this.atoy[this.i]);
                     if(this.ainwater[this.i])
                     {
                        this.xx *= 2;
                     }
                     if(this.GSPEED > 1)
                     {
                        this.xx /= this.GSPEED;
                     }
                     if(this.GET_LITE_PHYS())
                     {
                        this.xx /= 2;
                     }
                     if(this.xx < this.gravity * 2.5)
                     {
                        ++this.atim[this.i];
                        if(this.atim[this.i] > 10)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     else if(this.ax[this.i] > this.render_minX && this.ax[this.i] < this.render_maxX && this.ay[this.i] > this.render_minY && this.ay[this.i] < this.render_maxY)
                     {
                        this.atim[this.i] = 0;
                     }
                     else if(this.xx < this.gravity * 3)
                     {
                        ++this.atim[this.i];
                        if(this.atim[this.i] > 20)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     if(this.acollided[this.i] == 1)
                     {
                        this.acollided[this.i] = 2;
                     }
                     else
                     {
                        this.acollided[this.i] = 0;
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ax[this.i] > this.wax[this.i2])
                        {
                           if(this.ax[this.i] < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ay[this.i] > this.way[this.i2])
                              {
                                 if(this.ay[this.i] < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ok = true;
                                    this.u = this.way[this.i2];
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(!this.ainwater[this.i])
                        {
                           if(this.xx > 4)
                           {
                              this.Effect(this.ax[this.i],this.u,3,0,this.atoy[this.i]);
                           }
                           this.ainwater[this.i] = true;
                        }
                        if(this.aof[this.i] >= 0)
                        {
                           if(this.mens[this.aof[this.i]].hea > 0)
                           {
                              this.atoy[this.i] -= this.gravity * this.thispulspeed;
                           }
                           else
                           {
                              this.atoy[this.i] -= this.gravity * 1.5 * this.thispulspeed;
                           }
                        }
                        else
                        {
                           this.atoy[this.i] -= this.gravity * 0.5 * this.thispulspeed;
                        }
                        if(this.amat[this.i] == 4 || this.amat[this.i] == 5)
                        {
                           this.atoy[this.i] -= this.gravity * this.thispulspeed;
                        }
                        this.atox[this.i] *= Math.pow(0.9,this.thispulspeed);
                        this.atoy[this.i] *= Math.pow(0.9,this.thispulspeed);
                     }
                     else if(this.ainwater[this.i])
                     {
                        if(this.xx > 4)
                        {
                           this.Effect(this.ax[this.i],this.ay[this.i],3,0,this.atoy[this.i]);
                        }
                        this.ainwater[this.i] = false;
                     }
                     if(this.aof[this.i] >= 0 && this.mens[this.aof[this.i]].incar == -1)
                     {
                        if(this.ablood[this.i] > 0)
                        {
                           if(this.ablood[this.i] > 10)
                           {
                              this.ablood[this.i] = 10;
                           }
                           else if(Boolean(this.mens[this.aof[this.i]].dead) || !this.mens[this.aof[this.i]].dying)
                           {
                              this.ablood[this.i] -= 0.2 * this.thispulspeed;
                           }
                           if(Math.random() > 0.8)
                           {
                              if(this.mens[this.aof[this.i]].armored < 2)
                              {
                                 this.effcolor = this.aof[this.i];
                                 this.FlowAt(this.ax[this.i],this.ay[this.i],0,this.atox[this.i],this.atoy[this.i],1);
                              }
                              else
                              {
                                 this.Effect(this.ax[this.i],this.ay[this.i],8,0,-2);
                              }
                           }
                        }
                     }
                     this.pres_ok = false;
                     this.pres_left = this.pres_right = this.pres_top = this.pres_bottom = false;
                     this.near_atom = this.GetNearBoxBSP_at(this.ax[this.i],this.ay[this.i]);
                     this.f_ok = true;
                     this.f_min = this.gravity * this.thispulspeed;
                     this.MeasureStop(5);
                     this.MeasureStart(6);
                     for each(this.i2 in this.near_atom)
                     {
                        if(this.ax[this.i] >= this.boxx[this.i2] && this.ax[this.i] <= this.boxx[this.i2] + this.boxw[this.i2] && this.ay[this.i] + this.arad[this.i] + this.thispulspeed >= this.boxy[this.i2] && this.ay[this.i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           this.f_ok = false;
                           this.f_min = Math.min(this.boxy[this.i2] - (this.ay[this.i] + this.arad[this.i]),this.f_min);
                           break;
                        }
                     }
                     if(this.f_ok)
                     {
                        this.atoy[this.i] += this.f_min;
                     }
                     this.MeasureStop(6);
                     this.MeasureStart(7);
                     if(this.amat[this.i] != 1 && this.amat[this.i] != 0 || (this.amat[this.i] == 1 || this.amat[this.i] == 0) && this.mens[this.aof[this.i]].incar == -1)
                     {
                        for each(this.i2 in this.near_atom)
                        {
                           this.PhysHit(this.i,this.boxx[this.i2],this.boxy[this.i2],this.boxw[this.i2],this.boxh[this.i2],0,0);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.doorstotal)
                        {
                           this.PhysHit(this.i,this.doors[this.i2].x,this.doors[this.i2].y,this.doors[this.i2].w,this.doors[this.i2].h,this.doors[this.i2].tox,this.doors[this.i2].toy);
                           ++this.i2;
                        }
                     }
                     this.MeasureStop(7);
                     this.MeasureStart(8);
                     if(this.pres_ok)
                     {
                        if(this.aof[this.i] >= 0 && this.aof[this.i] < 100)
                        {
                           if(this.mens[this.aof[this.i]].io)
                           {
                              this.mc = this.mens[this.aof[this.i]];
                              if(!this.MP_mode || !this.mc.isplayer || this.aof[this.i] == this.MP_myid)
                              {
                                 if(this.mc.stability <= 0)
                                 {
                                    if(this.pres_left && this.pres_right || this.pres_top && this.pres_bottom)
                                    {
                                       this.mc.stability = Math.min(this.mc.stability,-0.1);
                                       if(this.mc.pressure > 10)
                                       {
                                          if(this.i == this.mc.b_body || this.i == this.mc.b_toe)
                                          {
                                             this.mc.hp_body = 0;
                                             this.mc.hea = 0;
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          if(Boolean(this.mc.dying) || Boolean(this.mc.dead))
                                          {
                                             if(this.i == this.mc.b_leg1 || this.i == this.mc.b_leg2)
                                             {
                                                this.mc.hp_legs = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_head_end)
                                             {
                                                this.mc.hp_head = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_arm1 || this.i == this.mc.b_arm2)
                                             {
                                                this.mc.hp_arms = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                          }
                                          if(this.mc.team != this.mens[this.MP_myid].team)
                                          {
                                             this.incBadge(8);
                                          }
                                       }
                                       else
                                       {
                                          if(this.mc.pressure == 0)
                                          {
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          this.mc.pressure += Math.ceil(4 * this.GSPEED);
                                       }
                                    }
                                    else if(!this.mc.dead)
                                    {
                                       if(this.mc.pressure > 0)
                                       {
                                          this.mc.pressure -= Math.ceil(2 * this.GSPEED);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     this.MeasureStop(8);
                  }
                  else if(this.aio[this.i] == false)
                  {
                     this.atox[this.i] = 0;
                     this.atoy[this.i] = 0;
                  }
               }
               else if(this.TracePointNoRagdolls(this.ax[this.i],this.ay[this.i] + this.arad[this.i] + 3))
               {
                  this.atox[this.i] *= 0.98;
                  this.atoy[this.i] *= 0.98;
               }
               else
               {
                  this.ForceAtomSleep(this.i);
               }
               this.MeasureStop(1);
            }
            ++this.i;
         }
         this.MeasuresMaybePrint();
         this.Physics2();
      }
      
      public function Physics2() : void
      {
         this.phys_stress = 0;
         this.phys_got_stress = true;
         while(this.phys_stress < 4 && this.phys_got_stress)
         {
            this.phys_got_stress = false;
            this.i2 = 0;
            while(this.i2 < this.chtotal)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                     {
                        if(this.DEBUG_MODE)
                        {
                           this.ok = false;
                        }
                        if(this.aio[this.chP[this.i2]] == 2 || this.aio[this.chC[this.i2]] == 2)
                        {
                           this.chio[this.i2] = 2;
                        }
                        if(this.aio[this.chP[this.i2]] == -1 || this.aio[this.chC[this.i2]] == -1)
                        {
                           this.chio[this.i2] = -1;
                           this.DisposeAtom(this.chP[this.i2]);
                           this.DisposeAtom(this.chC[this.i2]);
                        }
                        if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                        {
                           if(this.aio[this.chP[this.i2]] == false && this.aio[this.chC[this.i2]] == false)
                           {
                              this.chio[this.i2] = false;
                           }
                           else
                           {
                              this.chio[this.i2] = true;
                              this.WakeUpAtom(this.chP[this.i2],false);
                              this.WakeUpAtom(this.chC[this.i2],false);
                           }
                        }
                        if(this.chio[this.i2] == true)
                        {
                           this.cx = (this.ax[this.chP[this.i2]] + this.ax[this.chC[this.i2]]) * 0.5;
                           this.cy = (this.ay[this.chP[this.i2]] + this.ay[this.chC[this.i2]]) * 0.5;
                           if(this.aof[this.chP[this.i2]] == this.MP_myid)
                           {
                              this.thispulspeed = this.GSPEED2;
                           }
                           else
                           {
                              this.thispulspeed = this.GSPEED;
                           }
                           if(this.GET_LITE_PHYS())
                           {
                              this.thispulspeed *= 2;
                           }
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           this.yy = this.Math_abs(this.xx - this.chdef[this.i2]) * this.chdamp[this.i2] * 0.5;
                           if(this.MP_mode)
                           {
                              if(this.thispulspeed > 1)
                              {
                                 this.yy /= this.thispulspeed * this.thispulspeed;
                              }
                           }
                           else if(this.thispulspeed > 1)
                           {
                              this.yy /= this.thispulspeed;
                           }
                           if(this.xx < 1)
                           {
                              this.xx = 1;
                           }
                           if(this.xx > this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.ax[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.v = (this.ay[this.chP[this.i2]] - this.ay[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] += this.u;
                                 this.atoy[this.chC[this.i2]] += this.v;
                                 this.atox[this.chP[this.i2]] -= this.u;
                                 this.atoy[this.chP[this.i2]] -= this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           else if(this.xx < this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 1)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.ax[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.v = (this.ay[this.chP[this.i2]] - this.ay[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] -= this.u;
                                 this.atoy[this.chC[this.i2]] -= this.v;
                                 this.atox[this.chP[this.i2]] += this.u;
                                 this.atoy[this.chP[this.i2]] += this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           if(this.chdamp[this.i2] == 1)
                           {
                              if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.cx) * this.chdef[this.i2] / this.xx;
                                 this.v = (this.ay[this.chP[this.i2]] - this.cy) * this.chdef[this.i2] / this.xx;
                                 this.ax[this.chP[this.i2]] = this.cx + this.u;
                                 this.ay[this.chP[this.i2]] = this.cy + this.v;
                                 this.ax[this.chC[this.i2]] = this.cx - this.u;
                                 this.ay[this.chC[this.i2]] = this.cy - this.v;
                              }
                           }
                           if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                           {
                              if(this.xx > this.chdef[this.i2] + 10 || this.xx > this.chdef[this.i2] * 1.5 + 5 || this.xx < this.chdef[this.i2] * 0.75 - 5)
                              {
                                 if(!this.TracePointNoRagdolls(this.cx,this.cy))
                                 {
                                    this.ax[this.chP[this.i2]] += this.cx - this.ax[this.chC[this.i2]];
                                    this.ay[this.chP[this.i2]] += this.cy - this.ay[this.chC[this.i2]];
                                    this.ax[this.chC[this.i2]] += this.cx - this.ax[this.chC[this.i2]];
                                    this.ay[this.chC[this.i2]] += this.cy - this.ay[this.chC[this.i2]];
                                    this.atox[this.chP[this.i2]] *= 0.5;
                                    this.atoy[this.chP[this.i2]] *= 0.5;
                                    this.atox[this.chC[this.i2]] *= 0.5;
                                    this.atoy[this.chC[this.i2]] *= 0.5;
                                 }
                              }
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           if(this.ok)
                           {
                              this.debug_screen.graphics.lineStyle((this.arad[this.chP[this.i2]] * 2 * 2 + this.arad[this.chC[this.i2]] * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                              this.debug_screen.graphics.lineTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineStyle((this.arad[this.chP[this.i2]] * 2 + this.arad[this.chC[this.i2]] * 2 * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           }
                           this.debug_screen.graphics.lineStyle(1,16776960,1);
                           this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                           this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                        }
                     }
                  }
               }
               ++this.i2;
            }
            this.i2 = 0;
            while(this.i2 < this.chtotal && !this.phys_got_stress)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true)
                     {
                        if(this.chdamp[this.i2] == 1)
                        {
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                           {
                              this.yy = Math.abs(this.chdef[this.i2] - this.xx);
                              if(this.yy > 15 && this.yy > this.chdef[this.i2] * 0.5)
                              {
                                 ++this.phys_stress;
                                 this.phys_got_stress = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         if(this.GET_LITE_PHYS())
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  this.xx = this.ax[this.i];
                  this.yy = this.ay[this.i];
                  this.ax[this.i] = (this.ax[this.i] + this.lax[this.i]) / 2;
                  this.ay[this.i] = (this.ay[this.i] + this.lay[this.i]) / 2;
                  this.lax[this.i] = this.xx;
                  this.lay[this.i] = this.yy;
               }
               ++this.i;
            }
         }
         if(this.DEBUG_MODE)
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  if(this.aio[this.i] == true)
                  {
                     this.debug_screen.graphics.lineStyle(this.arad[this.i] * 2,65280,0.3);
                  }
                  else
                  {
                     this.debug_screen.graphics.lineStyle(this.arad[this.i] * 2,255,0.5);
                  }
                  this.debug_screen.graphics.moveTo(this.ax[this.i],this.ay[this.i]);
                  this.debug_screen.graphics.lineTo(this.ax[this.i],this.ay[this.i] + 1);
               }
               ++this.i;
            }
         }
      }
      
      public function StartMiniScenario(param1:int) : Boolean
      {
         if(this.mini_scenario_cur == -1)
         {
            this.mini_scenario_cur = param1;
            this.mini_scenario_phase = 0;
            return true;
         }
         return false;
      }
      
      public function k_down(param1:KeyboardEvent) : void
      {
         var _loc2_:* = undefined;
         var _loc3_:String = null;
         if(param1.keyCode == Keyboard.CONTROL)
         {
            this.key_ctrl = true;
         }
         if(currentLabel == "intro")
         {
            if(param1.keyCode == 27)
            {
               intr.removeChild(vidobj);
               nc.close();
               ns.close();
               gotoAndStop("ads");
            }
         }
         if(currentLabel == "loginform")
         {
            if(param1.keyCode == 13 || param1.keyCode == 32)
            {
               this.proceed();
            }
         }
         if(currentLabel == "gaming")
         {
            if(param1.keyCode == 27)
            {
               if(!this.gamemenu.visible)
               {
                  if(!this.MP_mode)
                  {
                     this.system_non_stop = false;
                     if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
                     {
                        this.pauze.visible = true;
                     }
                     this.stoped_by_focus = false;
                  }
                  this.gamemenu.visible = true;
               }
               else if(this.conmenu_set.visible)
               {
                  this.conmenu_set.visible = false;
               }
               else if(this.conmenu.visible)
               {
                  this.conmenu.visible = false;
               }
               else
               {
                  if(!this.MP_mode)
                  {
                     this.system_non_stop = true;
                     if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
                     {
                        this.pauze.visible = false;
                     }
                  }
                  this.gamemenu.visible = false;
               }
            }
            if(param1.keyCode == 9 || param1.keyCode == 35)
            {
               if(this.MP_mode)
               {
                  this.herolist.visible = true;
               }
               else if(this.CASUAL_MODE)
               {
                  this.ok = true;
                  this.i = this.MP_myid;
                  this.i4 = this.i + 1;
                  while(this.i4 != this.i && this.ok)
                  {
                     if(this.i4 >= this.playerstotal)
                     {
                        this.i4 = 0;
                     }
                     else
                     {
                        if(this.mens[this.i4].io)
                        {
                           if(this.mens[this.i4].team == this.mens[this.MP_myid].team)
                           {
                              if(this.mens[this.i4].hea > 0)
                              {
                                 if(!this.mens[this.i4].dying)
                                 {
                                    this.ok = false;
                                    this.MP_myid = this.i4;
                                    this.GSPEED = 0.01;
                                    this.new_active.visible = true;
                                    this.new_active.gotoAndPlay(1);
                                    this.PlaySound_full(this.s_team_switch);
                                    this.mens[this.i4].isplayer = true;
                                    this.mens[this.i].isplayer = false;
                                    this.UpdateWeps();
                                 }
                              }
                           }
                        }
                        ++this.i4;
                     }
                  }
               }
            }
            if(this.MP_spectator)
            {
               return;
            }
            if(param1.keyCode == 13 || this.MP_mode && param1.keyCode == 84 && !this.MP_chat_input)
            {
               if(this.MP_chat_input && param1.keyCode == 13)
               {
                  this.MP_chat_input = false;
                  this.chat_win.gamechat_input.text = "";
                  if(!this.MP_mode)
                  {
                     if(this.gamechat_input_text.length > 0)
                     {
                        this.ChatNewMsg(this.new_nick2 + this.gamechat_input_text);
                        if(this.CMPG_name != "root" && this.CMPG_name != ".:Eric Gurt:.")
                        {
                           this.ChatNewMsg("E: Access denied; root capability required");
                           this.PlaySound_full(this.s_chat);
                        }
                        else
                        {
                           this.ok = true;
                           if(this.gamechat_input_text == "god 1" || this.gamechat_input_text == "god")
                           {
                              this.mens[this.MP_myid].hmax *= 100000;
                              this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                              if(this.mens[this.MP_myid].dead)
                              {
                                 this.mens[this.MP_myid].dead = false;
                              }
                              if(this.mens[this.MP_myid].dying)
                              {
                                 this.mens[this.MP_myid].dying = false;
                              }
                              this.Hurt_nopain(this.MP_myid);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "gm")
                           {
                              this.ARCADE_GAME_MODE = !this.ARCADE_GAME_MODE;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "quick start")
                           {
                              this.CMPG_money = 999999;
                              if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
                              {
                                 this.LEVELS_PASSED = this.LEVELS_TOTAL;
                              }
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("hero1skin ") != -1)
                           {
                              this.skin_model[0] = int(this.gamechat_input_text.split(" ")[1]);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("hero2skin ") != -1)
                           {
                              this.skin_model[1] = int(this.gamechat_input_text.split(" ")[1]);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no players")
                           {
                              this.playerstotal = 1;
                              this.MP_myid = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no barrels")
                           {
                              this.barrelstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no vehicles")
                           {
                              this.vehiclestotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no lights" || this.gamechat_input_text == "no lamps")
                           {
                              this.lampstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no guns")
                           {
                              this.gunstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "debug" || this.gamechat_input_text == "debug 1")
                           {
                              this.DEBUG_MODE = true;
                              this.debug_screen.visible = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "debug 0")
                           {
                              this.DEBUG_MODE = false;
                              this.debug_screen.graphics.clear();
                              this.debug_screen.visible = false;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "god 0")
                           {
                              this.mens[this.MP_myid].hea /= 100000;
                              this.mens[this.MP_myid].hmax /= 100000;
                              this.Hurt_nopain(this.MP_myid);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "headshot")
                           {
                              this.xx = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_head = 0;
                              this.Hurt(this.MP_myid);
                              this.mens[this.MP_myid].hea = this.xx;
                              this.mens[this.MP_myid].dead = false;
                              this.mens[this.MP_myid].dying = false;
                              this.mens[this.MP_myid].stability = -2;
                              this.atoy[this.mens[this.MP_myid].b_head_end] -= 10;
                              this.atox[this.mens[this.MP_myid].b_head_end] -= this.mens[this.MP_myid].side * 5;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "friends")
                           {
                              this.i = 0;
                              while(this.i < this.playerstotal)
                              {
                                 if(this.mens[this.i].io)
                                 {
                                    this.mens[this.i].team = 0;
                                 }
                                 ++this.i;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "dm")
                           {
                              this.i = 0;
                              while(this.i < this.playerstotal)
                              {
                                 if(this.mens[this.i].io)
                                 {
                                    this.mens[this.i].team = this.i;
                                 }
                                 ++this.i;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "kill enemies")
                           {
                              this.i = 0;
                              while(this.i < this.playerstotal)
                              {
                                 if(this.mens[this.i].io)
                                 {
                                    if(this.mens[this.i].team != this.mens[this.MP_myid].team)
                                    {
                                       this.mens[this.i].hea = 0;
                                       this.Hurt_nopain(this.i);
                                    }
                                 }
                                 ++this.i;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "hyper jump")
                           {
                              this.mens[this.MP_myid].toy = -25;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "over fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "uber fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 4;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "extra fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 3;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "very fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 2;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "faster")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 1.5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 1.25;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "normal")
                           {
                              this.MP_fps = this.DEFAULT_FPS;
                              this.ok = false;
                              this.SP_unlimit_framerate = false;
                           }
                           if(this.gamechat_input_text == "slow")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.75;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "slower")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "very slow")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.25;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "zoom 100")
                           {
                              this.game_scale = 1;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 200")
                           {
                              this.game_scale = 2;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 50")
                           {
                              this.game_scale = 0.5;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 25")
                           {
                              this.game_scale = 0.25;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "give all")
                           {
                              this.i = 0;
                              while(this.i < this.inventoryC.length)
                              {
                                 this.mc = this.MakeGunByClass(this.inventoryC[this.i].mdl);
                                 if(this.mc != null)
                                 {
                                    this.mc.model = this.inventoryC[this.i].mdl;
                                    this.mc.x = new Number(this.mens[this.MP_myid].x);
                                    this.mc.y = new Number(this.mens[this.MP_myid].y);
                                    this.mc.upg = new int(this.inventoryC[this.i].upg);
                                    this.mc.command = new int(-1);
                                    this.mc.onmade();
                                 }
                                 ++this.i;
                              }
                              if(!this.FORCE_CUSTOM_MAP)
                              {
                                 this.IM_A_CHEATER = true;
                              }
                              this.ok = false;
                           }
                           if(this.ok)
                           {
                              this.ChatNewMsg("bash: " + this.gamechat_input_text + ": command not found");
                              this.PlaySound_full(this.s_chat);
                           }
                           else
                           {
                              this.BADGES_ENABLED = false;
                           }
                           if(this.IM_A_CHEATER)
                           {
                              this.ShowNoAch();
                              this.SaveGame();
                           }
                           this.UserSays(this.MP_myid,this.gamechat_input_text);
                        }
                     }
                     if(this.gamechat_input_text == "render 0")
                     {
                        this.game.visible = false;
                        this.graphics_3d_front.visible = false;
                        this.graphics_3d.visible = false;
                        this.sky.visible = false;
                     }
                     if(this.gamechat_input_text == "render 1")
                     {
                        this.game.visible = true;
                        this.graphics_3d_front.visible = true;
                        this.graphics_3d.visible = true;
                        this.sky.visible = true;
                     }
                     if(this.gamechat_input_text == "bot 1")
                     {
                        this.MP_half_bot = true;
                        if(this.MP_mode)
                        {
                           this.PRO_BOTS = true;
                        }
                     }
                     if(this.gamechat_input_text == "bot 0")
                     {
                        this.MP_half_bot = false;
                     }
                     if(this.gamechat_input_text == "kill")
                     {
                        this.mens[this.MP_myid].hp_head = 0;
                        this.Hurt(this.MP_myid);
                        this.mens[this.MP_myid].hea = 0;
                     }
                  }
                  else
                  {
                     this.ok = true;
                     if(this.gamechat_input_text == "-kill")
                     {
                        this.mens[this.MP_myid].hp_head = 0;
                        this.Hurt(this.MP_myid);
                        this.mens[this.MP_myid].hea = 0;
                        this.ok = false;
                     }
                     if(this.gamechat_input_text.substr(0,5) == "-ping")
                     {
                        if(getTimer() - this.LAST_VOTE > 60000)
                        {
                           _loc2_ = Number(this.gamechat_input_text.substr(6,this.gamechat_input_text.length));
                           if(Boolean(isNaN(_loc2_)) || !isNaN(_loc2_) && (_loc2_ < 10 || _loc2_ > 1000))
                           {
                              this.DialogSay("\'\'" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length) + "\'\' is not a correct ping value.","#FFFF00");
                              if(!isNaN(_loc2_) && (_loc2_ < 10 || _loc2_ > 1000))
                              {
                                 this.LAST_VOTE = getTimer();
                              }
                           }
                           else
                           {
                              this.MP_custom_events += ";voteping|" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length);
                              this.LAST_VOTE = getTimer();
                           }
                        }
                        else
                        {
                           this.DialogSay("You will be allowed to vote again in " + Math.ceil((60000 - (getTimer() - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
                        }
                     }
                     if(this.MP_type == 3)
                     {
                        if(this.gamechat_input_text == "-blue")
                        {
                           this.mc = this.mens[this.MP_myid];
                           if(getTimer() - this.mc.whenlastshot > 7000)
                           {
                              this.mc.lastshotby = -1;
                           }
                           if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                           {
                              this.mc.team = 13;
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "1";
                              this.spawn = false;
                              this.mc.hea = 0;
                              this.mc.mdl_head = this.mc.char;
                              this.mc.mdl_leg1_upper = this.mc.char;
                              this.mc.mdl_leg1_middle = this.mc.char;
                              this.mc.mdl_leg1_lower = this.mc.char;
                              this.mc.mdl_leg2_upper = this.mc.char;
                              this.mc.mdl_leg2_middle = this.mc.char;
                              this.mc.mdl_leg2_lower = this.mc.char;
                              this.mc.mdl_arm1_upper = this.mc.char;
                              this.mc.mdl_arm1_lower = this.mc.char;
                              this.mc.mdl_arm2_upper = this.mc.char;
                              this.mc.mdl_arm2_lower = this.mc.char;
                              this.mc.mdl_toe = this.mc.char;
                              this.mc.mdl_body = this.mc.char;
                              this.UpdateCharProps(this.mc);
                              this.ok = false;
                              this.UpdateTeamTable();
                              this.i = 0;
                              while(this.i < this.playerstotal)
                              {
                                 this.UpdateTeamColor(this.mens[this.i]);
                                 ++this.i;
                              }
                           }
                           else
                           {
                              this.DialogSay("Can\'t change team during fight.","#FFFF00");
                           }
                        }
                        if(this.gamechat_input_text == "-red")
                        {
                           this.mc = this.mens[this.MP_myid];
                           if(getTimer() - this.mc.whenlastshot > 7000)
                           {
                              this.mc.lastshotby = -1;
                           }
                           if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                           {
                              this.mc.team = 12;
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "2";
                              this.spawn = false;
                              this.mc.hea = 0;
                              this.mc.mdl_head = this.mc.char;
                              this.mc.mdl_leg1_upper = this.mc.char;
                              this.mc.mdl_leg1_middle = this.mc.char;
                              this.mc.mdl_leg1_lower = this.mc.char;
                              this.mc.mdl_leg2_upper = this.mc.char;
                              this.mc.mdl_leg2_middle = this.mc.char;
                              this.mc.mdl_leg2_lower = this.mc.char;
                              this.mc.mdl_arm1_upper = this.mc.char;
                              this.mc.mdl_arm1_lower = this.mc.char;
                              this.mc.mdl_arm2_upper = this.mc.char;
                              this.mc.mdl_arm2_lower = this.mc.char;
                              this.mc.mdl_toe = this.mc.char;
                              this.mc.mdl_body = this.mc.char;
                              this.UpdateCharProps(this.mc);
                              this.ok = false;
                              this.UpdateTeamTable();
                              this.i = 0;
                              while(this.i < this.playerstotal)
                              {
                                 this.UpdateTeamColor(this.mens[this.i]);
                                 ++this.i;
                              }
                           }
                           else
                           {
                              this.DialogSay("Can\'t change team during fight.","#FFFF00");
                           }
                        }
                     }
                     if(this.ok)
                     {
                        if(this.gamechat_input_text.length > 0)
                        {
                           this.MP_last_message_patience -= (getTimer() - this.MP_last_message) / 550;
                           if(this.MP_last_message_patience < 0)
                           {
                              this.MP_last_message_patience = 0;
                           }
                           this.MP_last_message_patience += 20000 / Math.max(300,getTimer() - this.MP_last_message);
                           this.MP_last_message = getTimer();
                           if(this.MP_pass == "")
                           {
                              if(this.MP_last_message_patience > 110)
                              {
                                 if(this.mens[this.MP_myid].dead || this.mens[this.MP_myid].lastshotby == -1 || getTimer() - this.mens[this.MP_myid].whenlastshot > 7000)
                                 {
                                    this.DialogSay("Disconnected. You didn\'t stopped it, so we are sorry","#FF0000");
                                    this.MP_force_disconnect = true;
                                 }
                              }
                              else if(this.MP_last_message_patience > 90)
                              {
                                 this.DialogSay("Please don\'t send messages so quickly. You will be disconnected if you will continue","#FFFF00");
                              }
                              else if(this.MP_last_message_patience > 80)
                              {
                                 this.DialogSay("Please don\'t send messages so quickly. It is not allowed","#FFFF00");
                              }
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("=","[eq]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("=","[eq]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("|","[i]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("|","[i]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace(";","[dc]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace(";","[dc]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("<","[lt]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("<","[lt]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace(">","[gt]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace(">","[gt]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("\"","[2q]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("\"","[2q]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("/","[sl]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("/","[sl]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("\\","[rsl]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("\\","[rsl]");
                           }
                           if(this.MP_chat_input_for == "all")
                           {
                              this.MP_custom_events += ";chat|" + this.gamechat_input_text;
                           }
                           else if(this.MP_chat_input_for == "team")
                           {
                              this.MP_custom_events += ";tchat|" + this.gamechat_input_text;
                           }
                        }
                     }
                  }
                  this.chat_win.visible = false;
               }
               else if(this.LEVELS_PASSED >= this.LEVELS_TOTAL || this.MP_mode)
               {
                  this.MP_chat_input = true;
                  if(this.MP_mode && param1.keyCode == 84)
                  {
                     this.MP_chat_input_for = "team";
                  }
                  else
                  {
                     this.MP_chat_input_for = "all";
                  }
                  this.chat_win.gamechat_input.text = "";
                  this.gamechat_input_text = "";
                  this.chat_win.chatmode.gotoAndStop(this.MP_chat_input_for);
                  this.chat_win.visible = true;
               }
               else
               {
                  this.ChatNewMsg("E: Access denied; complete all campaign levels first");
               }
            }
            else if(this.MP_chat_input)
            {
               if(param1.keyCode == 8)
               {
                  this.gamechat_input_text = this.gamechat_input_text.slice(0,this.gamechat_input_text.length - 1);
                  this.chat_win.gamechat_input.htmlText = "<b>" + this.gamechat_input_text + "</b>";
               }
               else
               {
                  _loc3_ = String.fromCharCode(param1.charCode);
                  if(this.allowedText.indexOf(_loc3_) != -1)
                  {
                     this.gamechat_input_text += _loc3_;
                     this.chat_win.gamechat_input.htmlText = "<b>" + this.gamechat_input_text.split("<").join("&lt;").split(">").join("&gt;") + "</b>";
                  }
               }
            }
            else
            {
               if(param1.keyCode == 65 || param1.keyCode == 37)
               {
                  this.key_left = true;
               }
               if(param1.keyCode == 68 || param1.keyCode == 39)
               {
                  this.key_right = true;
               }
               if(param1.keyCode == 32 || param1.keyCode == 82)
               {
                  if(this.LEVEL_END_FORCE != "" && this.LEVEL_END_FORCE != "complete" && this.LEVEL_END_FORCE != "credits")
                  {
                     if(!this.MP_mode)
                     {
                        if(this.darkness.alpha > 0.02)
                        {
                           this.darkness.visible = true;
                           this.darkness.alpha = 1;
                           if(this.LEVEL_END_FORCE == "failed")
                           {
                              this.LEVEL_END_FORCE = "restart";
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
               {
                  this.key_up = true;
               }
               if(param1.keyCode == 71 || param1.keyCode == 96)
               {
                  if(!this.MP_mode)
                  {
                     this.StartMiniScenario(0);
                  }
                  else if(this.MP_type != 2 || this.MP_gamestate == 0)
                  {
                     if(this.grenades_total > 0)
                     {
                        if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                        {
                           this.MP_myspecials[this.MP_myspecials_total] = new Object();
                           this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                           this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                           this.MP_myspecials[this.MP_myspecials_total].nadekind = 1;
                           this.MP_custom_events += ";gren|1#" + this.MP_myspecials_total;
                           ++this.MP_myspecials_total;
                        }
                     }
                  }
               }
               if(this.MP_mode)
               {
                  if(this.MP_type != 2 || this.MP_gamestate == 0)
                  {
                     if(param1.keyCode == 67)
                     {
                        if(this.grenades_port_total > 0)
                        {
                           if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                           {
                              this.MP_myspecials[this.MP_myspecials_total] = new Object();
                              this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                              this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                              this.MP_myspecials[this.MP_myspecials_total].nadekind = 2;
                              this.MP_custom_events += ";gren|2#" + this.MP_myspecials_total;
                              ++this.MP_myspecials_total;
                           }
                        }
                     }
                     if(param1.keyCode == 90)
                     {
                        if(this.grenades_sh_total > 0)
                        {
                           if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                           {
                              this.MP_myspecials[this.MP_myspecials_total] = new Object();
                              this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                              this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                              this.MP_myspecials[this.MP_myspecials_total].nadekind = 3;
                              this.MP_custom_events += ";gren|3#" + this.MP_myspecials_total;
                              ++this.MP_myspecials_total;
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 86 || param1.keyCode == 8)
               {
                  this.key_grab = true;
               }
               if(param1.keyCode == 81)
               {
                  if(this.last_gun_b4_psi != -1)
                  {
                     if(this.last_gun_b4_psi < this.gunstotal)
                     {
                        this.mc = this.guns[this.last_gun_b4_psi];
                        if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                        {
                           if(this.mc.model != "item_grenade" || this.mc.wep >= 0)
                           {
                              this.i4 = this.mens[this.MP_myid].curwea;
                              this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
                              this.last_gun_b4_psi = this.i4;
                              this.ChangedGun(this.MP_myid);
                           }
                        }
                     }
                  }
                  else
                  {
                     this.i4 = this.mens[this.MP_myid].curwea;
                     this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
                     this.last_gun_b4_psi = this.i4;
                     this.ChangedGun(this.MP_myid);
                  }
               }
               if(param1.keyCode == 70)
               {
               }
               if(!this.MP_mode)
               {
                  if(param1.keyCode == 80)
                  {
                     if(this.system_non_stop)
                     {
                        this.system_non_stop = false;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = true;
                        }
                     }
                     else
                     {
                        this.system_non_stop = true;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = false;
                        }
                     }
                     this.stoped_by_focus = false;
                  }
               }
               if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
               {
                  this.key_down = true;
               }
               if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
               {
                  this.key_grenade = true;
               }
               if(param1.keyCode == 69 || param1.keyCode == 45)
               {
                  this.key_pick = true;
               }
               if(param1.keyCode == 88)
               {
                  this.key_fall = true;
               }
               if(param1.keyCode == 90)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift > 0)
                        {
                           this.timeshift = 0;
                           this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                           if(this.HQ && this.SCREEN_EFFECTS)
                           {
                              this.whitness.alpha += 1;
                              this.whitness.visible = true;
                           }
                        }
                        else if(this.energy > 10)
                        {
                           if(!this.mens[this.MP_myid].dead)
                           {
                              this.energy -= 10;
                              this.timeshift = 1;
                              this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
                              if(this.HQ && this.SCREEN_EFFECTS)
                              {
                                 this.whitness.alpha += 1;
                                 this.whitness.visible = true;
                              }
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 34)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift > 0)
                        {
                           this.timeshift = 0;
                           this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                           if(this.HQ && this.SCREEN_EFFECTS)
                           {
                              this.whitness.alpha += 1;
                              this.whitness.visible = true;
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 33)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift <= 0)
                        {
                           if(this.energy > 10)
                           {
                              if(!this.mens[this.MP_myid].dead)
                              {
                                 this.energy -= 10;
                                 this.timeshift = 1;
                                 this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
                                 if(this.HQ && this.SCREEN_EFFECTS)
                                 {
                                    this.whitness.alpha += 1;
                                    this.whitness.visible = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(!this.MP_mode)
               {
                  if(this.PLAZMA_GAME)
                  {
                     if(param1.keyCode == 67)
                     {
                        if(!this.key_kinetic)
                        {
                           this.key_kinetic = true;
                           this.cinetic_target = -1;
                           this.i = 0;
                           while(this.i < this.atotal)
                           {
                              if(this.aio[this.i] == true || this.aio[this.i] == false)
                              {
                                 if(this.aof[this.i] >= 0 && this.aof[this.i] < 100 && this.mens[this.aof[this.i]].incar == -1 && this.mens[this.aof[this.i]].dying && this.aof[this.i] != this.MP_myid || this.aof[this.i] >= 100 || this.aof[this.i] > -200 && this.aof[this.i] <= -100 || this.aof[this.i] < 0 && this.aof[this.i] > -100 && !this.guns[-this.aof[this.i] - 1].forcars && this.guns[-this.aof[this.i] - 1].alpha > 0)
                                 {
                                    if(this.arad[this.i] < 16)
                                    {
                                       if(this.arad[this.i] > 0)
                                       {
                                          if(this.Dist2D(this.ax[this.i],this.ay[this.i],this.mens[this.MP_myid].tarx,this.mens[this.MP_myid].tary) < this.arad[this.i] + 40)
                                          {
                                             this.cinetic_target = this.i;
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i;
                           }
                        }
                     }
                  }
               }
               if(this.mens[this.MP_myid].hea > 0)
               {
                  if(param1.keyCode >= 48 && param1.keyCode <= 57 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
                  {
                     if(param1.keyCode == 48 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
                     {
                        if(this.mens[this.MP_myid].curwea != -1)
                        {
                           this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                           this.mens[this.MP_myid].curwea = -1;
                           this.ChangedGun(this.MP_myid);
                           this.UpdateCurGun();
                        }
                     }
                     else
                     {
                        this.i = 0;
                        while(this.i < this.gunstotal)
                        {
                           if(this.guns[this.i].io)
                           {
                              this.mc = this.guns[this.i];
                              if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                              {
                                 if(this.mc.wep == param1.keyCode - 48)
                                 {
                                    if(this.mens[this.MP_myid].curwea != this.i)
                                    {
                                       this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                                       this.mens[this.MP_myid].curwea = this.i;
                                       this.ChangedGun(this.MP_myid);
                                       this.UpdateCurGun();
                                    }
                                 }
                              }
                           }
                           ++this.i;
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function onMouseWheelEvent(param1:Event) : void
      {
         if(this.MOUSE_WHEEL)
         {
            if(currentLabel == "gaming")
            {
               if(!this.MP_spectator)
               {
                  if(!this.OVERSCROLL || getTimer() > this.let_scroll_last + 150)
                  {
                     this.let_scroll_last = getTimer();
                     if(this.mens[this.MP_myid].hea > 0)
                     {
                        this.ok = true;
                        this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                        if(this.mens[this.MP_myid].curwea == -1)
                        {
                           this.i = -1;
                        }
                        else
                        {
                           this.i = this.guns[this.mens[this.MP_myid].curwea].wep;
                        }
                        if(param1.delta > 0)
                        {
                           this.i2 = 1;
                        }
                        else
                        {
                           this.i2 = -1;
                        }
                        this.i3 = this.mens[this.MP_myid].curwea;
                        while(this.ok)
                        {
                           this.i += this.i2;
                           if(this.i > 9)
                           {
                              this.i = -1;
                           }
                           if(this.i < -1)
                           {
                              this.i = 9;
                           }
                           if(this.i == -1)
                           {
                              this.mens[this.MP_myid].curwea = -1;
                              this.ok = false;
                              this.ChangedGun(this.MP_myid);
                              this.UpdateCurGun();
                           }
                           else
                           {
                              this.i4 = 0;
                              while(this.i4 < this.gunstotal)
                              {
                                 if(this.guns[this.i4].io)
                                 {
                                    this.mc = this.guns[this.i4];
                                    if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                                    {
                                       if(this.mc.wep == this.i)
                                       {
                                          this.mens[this.MP_myid].curwea = this.i4;
                                          this.ok = false;
                                          this.ChangedGun(this.MP_myid);
                                          this.UpdateCurGun();
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function k_up(param1:KeyboardEvent) : void
      {
         if(param1.keyCode == Keyboard.CONTROL)
         {
            this.key_ctrl = false;
         }
         if(currentLabel == "gaming")
         {
            if(param1.keyCode == 65 || param1.keyCode == 37)
            {
               this.key_left = false;
            }
            if(param1.keyCode == 68 || param1.keyCode == 39)
            {
               this.key_right = false;
            }
            if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
            {
               this.key_up = false;
            }
            if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
            {
               this.key_down = false;
            }
            if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
            {
               this.key_grenade = false;
            }
            if(param1.keyCode == 69 || param1.keyCode == 45)
            {
               this.key_pick = false;
            }
            if(param1.keyCode == 88)
            {
               this.key_fall = false;
            }
            if(param1.keyCode == 90 || param1.keyCode == 34 || param1.keyCode == 33)
            {
               this.key_alt = false;
            }
            if(param1.keyCode == 9 || param1.keyCode == 35)
            {
               if(this.MP_mode)
               {
                  this.herolist.visible = false;
               }
            }
            if(param1.keyCode == 67)
            {
               this.key_kinetic = false;
            }
            if(param1.keyCode == 71)
            {
               key_nade = false;
            }
            if(param1.keyCode == 86 || param1.keyCode == 8)
            {
               this.key_grab = false;
            }
         }
      }
      
      public function m_press(param1:Event) : void
      {
         var event:Event = param1;
         if(!this.Disable_next_click)
         {
            this.fire = true;
         }
         else
         {
            this.Disable_next_click = false;
         }
         if(mouseY < 50)
         {
            if(this.pcg.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  this.fire = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  try
                  {
                     navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
                  }
                  catch(e:Error)
                  {
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
            if(this.qmenu.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  this.fire = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  if(!this.gamemenu.visible)
                  {
                     if(!this.MP_mode)
                     {
                        this.system_non_stop = false;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = true;
                        }
                        this.stoped_by_focus = false;
                     }
                     this.gamemenu.visible = true;
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
         }
         if(this.MP_mode)
         {
            if(this.herolist.visible)
            {
               this.i = 0;
               while(this.i < this.MP_playerstotal)
               {
                  if(this.hero[this.i].alpha > 0.1)
                  {
                     if(this.hero[this.i].f1.text != "Empty")
                     {
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x + 25 * this.hero[this.i].vbtn1.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y + 25 * this.hero[this.i].vbtn1.scaleY)
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    this.fire = false;
                                    this.DialogSay("Visiting profile page of \'\'" + this.mens[this.i].login_name + "\'\'...","#FFFF00");
                                    try
                                    {
                                       navigateToURL(new URLRequest("http://www.plazmaburst2.com/?s=7&ac=" + this.mens[this.i].login_name),"_blank");
                                    }
                                    catch(e:Error)
                                    {
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x + 25 * this.hero[this.i].vbtn2.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y + 25 * this.hero[this.i].vbtn2.scaleY)
                                 {
                                    this.fire = false;
                                    this.PlaySound_full(this.ss_info_act);
                                    if(getTimer() - this.LAST_VOTE > 3000)
                                    {
                                       this.MP_custom_events += ";votekick|" + this.i + "#" + this.MP_myid;
                                       this.LAST_VOTE = getTimer();
                                    }
                                    else
                                    {
                                       this.DialogSay("You will be allowed to vote again in " + Math.ceil((3000 - (getTimer() - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x + 25 * this.hero[this.i].vbtn3.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y + 25 * this.hero[this.i].vbtn3.scaleY)
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    this.fire = false;
                                    if(Boolean(this.mens[this.MP_myid].dead) || this.MP_spectator)
                                    {
                                       this.death_cam = this.i;
                                    }
                                    else
                                    {
                                       this.DialogSay("Death Camera can be changed to different players only when you are dead.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i;
               }
            }
            if(this.MP_type == 3)
            {
               if(this.team_blue.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(getTimer() - this.mc.whenlastshot > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 13;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "1";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
               if(this.team_red.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(getTimer() - this.mc.whenlastshot > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 12;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "2";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
            }
         }
      }
      
      public function m_release(param1:Event) : void
      {
         this.fire = false;
      }
      
      public function mov2(param1:MouseEvent) : void
      {
         if(!this.stoped_by_focus)
         {
            if(!param1.buttonDown)
            {
               this.fire = false;
            }
         }
      }
      
      public function mouseLeaveListener(param1:Event) : void
      {
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               this.system_non_stop = false;
               this.stoped_by_focus = true;
               if(!this.mens[this.MP_myid].dead)
               {
                  this.pauze.visible = true;
               }
            }
         }
      }
      
      public function mouseMoveListener(param1:Event) : void
      {
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               if(!this.gamemenu.visible)
               {
                  if(this.stoped_by_focus)
                  {
                     this.system_non_stop = true;
                  }
                  if(!this.mens[this.MP_myid].dead)
                  {
                     this.pauze.visible = false;
                  }
               }
            }
            this.key_left = false;
            this.key_right = false;
            this.key_up = false;
            this.key_down = false;
            this.key_grenade = false;
            this.key_pick = false;
            this.key_alt = false;
            this.key_grab = false;
            this.key_kinetic = false;
            this.key_fall = false;
            this.Disable_next_click = true;
         }
      }
      
      public function r2(param1:Number) : String
      {
         return String(Math.round(param1 * 100) / 100);
      }
      
      public function DoorLogic() : void
      {
         this.i = 0;
         while(this.i < this.doorstotal)
         {
            if(this.doors[this.i].moving)
            {
               this.xx2 = this.Dist2D(this.doors[this.i].tarx,this.doors[this.i].tary,this.doors[this.i].x,this.doors[this.i].y);
               this.yy2 = this.doors[this.i].maxspeed;
               if(this.doors[this.i].forcehyperjump)
               {
                  this.doors[this.i].forcehyperjump = false;
                  this.yy2 *= this.MP_ping2 / this.c_sim_rt2;
               }
               if(this.xx2 <= this.yy2 + 1)
               {
                  if(this.doors[this.i].playsounds)
                  {
                     if(this.doors[this.i].vis)
                     {
                        this.PlaySound(this.s_t_door1_stop,this.doors[this.i].x + this.doors[this.i].w / 2,this.doors[this.i].y + this.doors[this.i].h / 2);
                     }
                  }
                  this.doors[this.i].moving = false;
                  this.doors[this.i].tox = 0;
                  this.doors[this.i].toy = 0;
                  this.doors[this.i].x = this.doors[this.i].tarx;
                  this.doors[this.i].y = this.doors[this.i].tary;
                  this.i2 = 0;
                  while(this.i2 < this.regionstotal)
                  {
                     if(this.regions[this.i2].use_on == 5)
                     {
                        if(this.doors[this.i].x == this.regions[this.i2].x)
                        {
                           if(this.doors[this.i].y == this.regions[this.i2].y)
                           {
                              if(this.doors[this.i].w == this.regions[this.i2].w)
                              {
                                 if(this.doors[this.i].h == this.regions[this.i2].h)
                                 {
                                    if(this.regions[this.i2].use_target != -1)
                                    {
                                       this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                       this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
               }
               else
               {
                  this.doors[this.i].tox = (this.doors[this.i].tarx - this.doors[this.i].x) / this.xx2;
                  this.doors[this.i].toy = (this.doors[this.i].tary - this.doors[this.i].y) / this.xx2;
                  this.doors[this.i].x += this.doors[this.i].tox * this.yy2 * this.GSPEED;
                  this.doors[this.i].y += this.doors[this.i].toy * this.yy2 * this.GSPEED;
                  this.i2 = 0;
                  while(this.i2 < this.atotal)
                  {
                     if(this.aio[this.i2] == false)
                     {
                        if(this.ax[this.i2] > this.doors[this.i].x - this.Math_abs(this.doors[this.i].tox * this.yy2) - this.arad[this.i2] - 10)
                        {
                           if(this.ay[this.i2] > this.doors[this.i].y - this.Math_abs(this.doors[this.i].toy * this.yy2) - this.arad[this.i2] - 10)
                           {
                              if(this.ax[this.i2] < this.doors[this.i].x + this.doors[this.i].w + this.Math_abs(this.doors[this.i].tox * this.yy2) + this.arad[this.i2] + 10)
                              {
                                 if(this.ay[this.i2] < this.doors[this.i].y + this.doors[this.i].h + this.Math_abs(this.doors[this.i].toy * this.yy2) + this.arad[this.i2] + 10)
                                 {
                                    this.WakeUpAtom(this.i2);
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  this.doors[this.i].tox *= this.doors[this.i].maxspeed;
                  this.doors[this.i].toy *= this.doors[this.i].maxspeed;
               }
            }
            ++this.i;
         }
      }
      
      public function BulletLogic() : void
      {
         var _loc1_:int = 0;
         var _loc2_:Number = NaN;
         var _loc3_:Number = NaN;
         var _loc4_:Number = NaN;
         var _loc5_:Number = NaN;
         var _loc6_:Number = NaN;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:int = 0;
         var _loc12_:Number = NaN;
         this.i = 0;
         while(this.i <= this.pulsmax)
         {
            if(this.puls[this.i] != null)
            {
               if(this.puls[this.i].visible == true)
               {
                  if(this.puls[this.i].lag <= 0)
                  {
                     this.i7 = 0;
                     while((this.puls[this.i].cclass == 2 && (this.i7 == 0 || !this.puls[this.i].inwater) || this.puls[this.i].cclass == 3 || (this.i7 < -this.puls[this.i].lag || this.i7 == 0)) && this.puls[this.i].visible || this.puls[this.i].cclass != 2 && this.i7 == 0 || this.puls[this.i].power > 4 && this.puls[this.i].cclass == 0 && this.i7 <= 1 && this.puls[this.i].visible || this.puls[this.i].currentFrame == 15 && this.puls[this.i].visible)
                     {
                        this.puls[this.i].lag = 0;
                        if(this.puls[this.i].cclass == 2 || this.puls[this.i].cclass == 3)
                        {
                           this.thispulspeed = 1;
                        }
                        else if(this.puls[this.i].master == this.MP_myid)
                        {
                           this.thispulspeed = this.GSPEED2;
                        }
                        else
                        {
                           this.thispulspeed = this.GSPEED;
                        }
                        if(this.puls[this.i].cclass == 2)
                        {
                           this.i2 = 0;
                           while(this.i2 <= this.pulsmax)
                           {
                              if(this.i != this.i2)
                              {
                                 if(this.puls[this.i2] != null)
                                 {
                                    if(this.puls[this.i2].visible == true)
                                    {
                                       if(this.mens[this.puls[this.i2].master].team != this.mens[this.puls[this.i].master].team)
                                       {
                                          if(this.puls[this.i2].lastin != this.puls[this.i].master)
                                          {
                                             if(this.puls[this.i2].cclass == 5)
                                             {
                                                this.rx = this.puls[this.i].nx - this.puls[this.i].lx;
                                                this.ry = this.puls[this.i].ny - this.puls[this.i].ly;
                                                this.xx = this.VectorDist2D(this.rx,this.ry);
                                                this.rx /= this.xx;
                                                this.ry /= this.xx;
                                                this.x3 = this.puls[this.i2].nx + this.ry * 10;
                                                this.y3 = this.puls[this.i2].ny - this.rx * 10;
                                                this.x4 = this.puls[this.i2].nx - this.ry * 10;
                                                this.y4 = this.puls[this.i2].ny + this.rx * 10;
                                                this.xx = this.puls[this.i].nx;
                                                this.yy = this.puls[this.i].ny;
                                                this.xx2 = this.puls[this.i].lx;
                                                this.yy2 = this.puls[this.i].ly;
                                                this.rx = undefined;
                                                this.ry = undefined;
                                                this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                {
                                                   if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                   {
                                                      if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                      {
                                                         if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                         {
                                                            if((this.x3 < this.x4 ? this.x3 : this.x4) - 1 <= this.retux)
                                                            {
                                                               if((this.x3 > this.x4 ? this.x3 : this.x4) + 1 >= this.retux)
                                                               {
                                                                  if((this.y3 < this.y4 ? this.y3 : this.y4) - 1 <= this.retuy)
                                                                  {
                                                                     if((this.y3 > this.y4 ? this.y3 : this.y4) + 1 >= this.retuy)
                                                                     {
                                                                        if(this.i6 != -2)
                                                                        {
                                                                           if(undefined == this.rx || this.Dist2D(this.rx,this.ry,this.puls[this.i].lx,this.puls[this.i].ly) > this.Dist2D(this.retux,this.retuy,this.puls[this.i].lx,this.puls[this.i].ly))
                                                                           {
                                                                              this.rx = this.retux;
                                                                              this.ry = this.retuy;
                                                                              this.cx = this.puls[this.i2].power;
                                                                              if(this.puls[this.i].power > 0)
                                                                              {
                                                                                 this.puls[this.i2].power -= this.puls[this.i].power * 0.5;
                                                                              }
                                                                              if(this.cx > 0)
                                                                              {
                                                                                 this.puls[this.i].power -= this.cx * 3;
                                                                              }
                                                                              if(this.puls[this.i2].power < 0.5)
                                                                              {
                                                                                 this.puls[this.i2].life = this.puls[this.i2].maxbulletlife + 1;
                                                                                 this.puls[this.i2].power = 0;
                                                                              }
                                                                              if(this.puls[this.i].power < 0.5)
                                                                              {
                                                                                 this.puls[this.i].visible = false;
                                                                                 this.puls[this.i].power = 0;
                                                                              }
                                                                              this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                                              this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                                              this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.puls[this.i].cclass != 6 && this.puls[this.i].cclass != 4)
                        {
                           this.i2 = 0;
                           while(this.i2 <= this.pulsmax)
                           {
                              if(this.i != this.i2)
                              {
                                 if(this.puls[this.i2] != null)
                                 {
                                    if(this.puls[this.i2].visible == true)
                                    {
                                       if(this.puls[this.i2].cclass == 6 || this.puls[this.i2].cclass == 4)
                                       {
                                          this.i3 = this.puls[this.i2].attached;
                                          if(this.puls[this.i].nx > this.ax[this.i3] - 5 - Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                          {
                                             if(this.puls[this.i].nx < this.ax[this.i3] + 5 + Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                             {
                                                if(this.puls[this.i].ny > this.ay[this.i3] - 5 - Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                                {
                                                   if(this.puls[this.i].ny < this.ay[this.i3] + 5 + Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                                   {
                                                      if(this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.i3] - 5,this.ay[this.i3] - 5,this.ax[this.i3] + 5,this.ay[this.i3] + 5,this.i) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.i3] + 5,this.ay[this.i3] - 5,this.ax[this.i3] - 5,this.ay[this.i3] + 5,this.i))
                                                      {
                                                         this.atox[this.i3] += this.puls[this.i].spx * this.puls[this.i].power * 0.2 / this.arad[this.i3];
                                                         this.atoy[this.i3] += this.puls[this.i].spy * this.puls[this.i].power * 0.2 / this.arad[this.i3];
                                                         this.WakeUpAtom(this.i3);
                                                         this.Effect(this.puls[this.i].x,this.puls[this.i].y,1,0,0);
                                                         this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                         this.puls[this.i].power = Math.max(0,this.puls[this.i].power - 0.5);
                                                         if(this.puls[this.i].power < 0.4)
                                                         {
                                                            this.puls[this.i].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.puls[this.i].cclass == 3)
                        {
                           this.i2 = 0;
                           while(this.i2 <= this.pulsmax)
                           {
                              if(this.i != this.i2)
                              {
                                 if(this.puls[this.i2] != null)
                                 {
                                    if(this.puls[this.i2].visible == true)
                                    {
                                       if(this.mens[this.puls[this.i2].master].team != this.mens[this.puls[this.i].master].team)
                                       {
                                          if(this.puls[this.i2].lastin != this.puls[this.i].master)
                                          {
                                             if(this.puls[this.i2].cclass == 0 || this.puls[this.i2].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.puls[this.i].x,this.puls[this.i].y,this.puls[this.i2].x,this.puls[this.i2].y) < 30)
                                                {
                                                   if(this.puls[this.i2].currentFrame == 14)
                                                   {
                                                      this.puls[this.i2].dead = true;
                                                   }
                                                   else
                                                   {
                                                      this.u = this.VectorDist2D(this.puls[this.i].spx,this.puls[this.i].spy);
                                                      this.v = this.VectorDist2D(this.puls[this.i2].spx,this.puls[this.i2].spy);
                                                      this.puls[this.i2].spx = this.puls[this.i].spx / this.u * 2 + this.puls[this.i2].spx / this.v - 0.15 + Math.random() * 0.3;
                                                      this.puls[this.i2].spy = this.puls[this.i].spy / this.u * 2 + this.puls[this.i2].spy / this.v - 0.15 + Math.random() * 0.3;
                                                      this.xx = this.VectorDist2D(this.puls[this.i2].spx,this.puls[this.i2].spy);
                                                      this.puls[this.i2].spx /= this.xx;
                                                      this.puls[this.i2].spy /= this.xx;
                                                      this.puls[this.i2].spx *= this.v;
                                                      this.puls[this.i2].spy *= this.v;
                                                      this.puls[this.i2].master = this.puls[this.i].master;
                                                      this.puls[this.i2].lastin = this.puls[this.i].master;
                                                      this.puls[this.i2].rotation = 270 - Math.atan2(this.puls[this.i2].spx,this.puls[this.i2].spy) / Math.PI * 180;
                                                      this.rx = (this.puls[this.i].x + this.puls[this.i2].x) / 2;
                                                      this.ry = (this.puls[this.i].y + this.puls[this.i2].y) / 2;
                                                      this.Effect(this.rx,this.ry,1,0,0);
                                                      this.Effect(this.rx,this.ry,8,this.puls[this.i].spx * this.puls[this.i].power * 0.06,this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                      this.Effect(this.rx,this.ry,8,this.puls[this.i].spx * this.puls[this.i].power * 0.06,this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                      this.Effect(this.rx,this.ry,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                                      if(this.mens[this.puls[this.i].master].char == 12)
                                                      {
                                                         if(this.mens[this.puls[this.i].master].alpha < 0.3)
                                                         {
                                                            this.mens[this.puls[this.i].master].alpha = 0.3;
                                                         }
                                                      }
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         this.incBadge(9);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.puls[this.i].inwater)
                        {
                           if(this.puls[this.i].cclass == 0)
                           {
                              this.thispulspeed *= 0.3;
                           }
                           if(this.puls[this.i].cclass == 1)
                           {
                              this.thispulspeed *= 0.5;
                           }
                           if(this.puls[this.i].cclass == 4 || this.puls[this.i].cclass == 6)
                           {
                              this.puls[this.i].spy -= this.gravity * 0.5 * this.thispulspeed;
                              this.puls[this.i].spx *= 0.9 * this.thispulspeed;
                              this.puls[this.i].spy *= 0.9 * this.thispulspeed;
                           }
                        }
                        this.puls[this.i].lx = this.puls[this.i].nx - this.puls[this.i].spx * 0.5;
                        this.puls[this.i].ly = this.puls[this.i].ny - this.puls[this.i].spy * 0.5;
                        this.puls[this.i].x += this.puls[this.i].spx * this.thispulspeed;
                        this.puls[this.i].y += this.puls[this.i].spy * this.thispulspeed;
                        this.puls[this.i].nx = this.puls[this.i].x + this.puls[this.i].spx * 0.5;
                        this.puls[this.i].ny = this.puls[this.i].y + this.puls[this.i].spy * 0.5;
                        if(this.puls[this.i].life == 0)
                        {
                           this.puls[this.i].alpha = 1;
                        }
                        this.puls[this.i].life += this.thispulspeed;
                        if(this.puls[this.i].life > this.puls[this.i].maxbulletlife)
                        {
                           this.puls[this.i].visible = false;
                        }
                        if(this.puls[this.i].cclass == 4 || this.puls[this.i].cclass == 6)
                        {
                           this.puls[this.i].spx = this.atox[this.puls[this.i].attached];
                           this.puls[this.i].spy = this.atoy[this.puls[this.i].attached];
                           this.puls[this.i].x = this.ax[this.puls[this.i].attached];
                           this.puls[this.i].y = this.ay[this.puls[this.i].attached];
                           if(this.puls[this.i].currentFrame != 14)
                           {
                              if(this.puls[this.i].cclass == 6)
                              {
                                 if(this.puls[this.i].life > 50)
                                 {
                                    if(this.puls[this.i].notbliped)
                                    {
                                       this.puls[this.i].notbliped = false;
                                       if(this.puls[this.i].nadekind == 1)
                                       {
                                          this.puls[this.i].gotoAndStop(13);
                                          this.PlaySound(this.s_grenade_act,this.puls[this.i].x,this.puls[this.i].y);
                                       }
                                       if(this.puls[this.i].nadekind == 2)
                                       {
                                          this.puls[this.i].gotoAndStop(18);
                                          this.PlaySound(this.s_portnade_act2,this.puls[this.i].x,this.puls[this.i].y);
                                       }
                                       if(this.puls[this.i].nadekind == 3)
                                       {
                                          this.puls[this.i].gotoAndStop(20);
                                          this.PlaySound(this.s_shnade_act,this.puls[this.i].x,this.puls[this.i].y);
                                       }
                                    }
                                 }
                                 if(this.puls[this.i].nadekind == 3)
                                 {
                                    if(this.puls[this.i].life > 60)
                                    {
                                       if(this.puls[this.i].hasexploded)
                                       {
                                          if(this.puls[this.i].life > this.puls[this.i].maxbulletlife)
                                          {
                                             this.puls[this.i].hea = 0;
                                          }
                                          if(this.puls[this.i].hea > 0)
                                          {
                                             if(!this.shnades[this.puls[this.i].childsh].io)
                                             {
                                                this.puls[this.i].hea = 0;
                                             }
                                             this.puls[this.i].base.scaleX = this.puls[this.i].base.scaleY = this.puls[this.i].radius / 100;
                                             this.puls[this.i].radius = (150 + this.puls[this.i].radius * 4 / this.GSPEED) / (1 + 4 / this.GSPEED);
                                             this.puls[this.i].losthea -= 10 * this.GSPEED;
                                             if(this.puls[this.i].losthea < 0)
                                             {
                                                this.puls[this.i].losthea = 0;
                                             }
                                             if(this.puls[this.i].heapo > 0)
                                             {
                                                this.puls[this.i].hea += this.puls[this.i].heapo - Math.max(this.puls[this.i].heapo - this.GSPEED * 5,0);
                                                this.puls[this.i].heapo -= this.GSPEED * 5;
                                             }
                                             this.puls[this.i].base.ounr.alpha = (this.puls[this.i].radius / 150 * 0.1 + this.puls[this.i].losthea * 0.1) * (1 - (100 - this.puls[this.i].hea) / 100 * Math.random());
                                             this.puls[this.i].base.innr.alpha = this.puls[this.i].radius / 150 * this.puls[this.i].losthea * 10 * this.puls[this.i].base.ounr.alpha * (90 - this.puls[this.i].heapo) / 90 + this.puls[this.i].heapo / 90;
                                             this.atox[this.puls[this.i].attached] = 0;
                                             this.atoy[this.puls[this.i].attached] = 0;
                                             this.ax[this.puls[this.i].attached] = this.puls[this.i].stuckx;
                                             this.ay[this.puls[this.i].attached] = this.puls[this.i].stucky;
                                             this.shnades[this.puls[this.i].childsh].x = this.puls[this.i].stuckx;
                                             this.shnades[this.puls[this.i].childsh].y = this.puls[this.i].stucky;
                                             this.shnades[this.puls[this.i].childsh].radius = this.puls[this.i].radius;
                                          }
                                          else
                                          {
                                             this.ExplodeShield(this.puls[this.i].childsh);
                                             this.atoy[this.puls[this.i].attached] -= this.GSPEED * 2;
                                             this.atim[this.puls[this.i].attached] = 0;
                                             this.DisposeAtom(this.puls[this.i].attached);
                                             this.shnades[this.puls[this.i].childsh].io = false;
                                             this.puls[this.i].visible = false;
                                          }
                                       }
                                       else
                                       {
                                          this.puls[this.i].hasexploded = true;
                                          this.PlaySound(this.s_shnade_explode,this.puls[this.i].x,this.puls[this.i].y);
                                          this.puls[this.i].gotoAndStop(21);
                                          this.puls[this.i].base.ounr.alpha = 0;
                                          this.puls[this.i].base.innr.alpha = 0;
                                          this.puls[this.i].stuckx = this.puls[this.i].x;
                                          this.puls[this.i].stucky = this.puls[this.i].y;
                                          this.puls[this.i] = this.graphics_3d_front.addChildAt(this.puls[this.i],this.graphics_3d_front.numChildren);
                                          this.shnades[this.shnades_next] = new Object();
                                          this.shnades[this.shnades_next].io = true;
                                          this.shnades[this.shnades_next].x = this.puls[this.i].stuckx;
                                          this.shnades[this.shnades_next].y = this.puls[this.i].stucky;
                                          this.shnades[this.shnades_next].radius = 0;
                                          this.puls[this.i].childsh = this.shnades_next;
                                          this.shnades[this.shnades_next].parentish = this.i;
                                          this.nextsh();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        this.xx = this.puls[this.i].nx;
                        this.yy = this.puls[this.i].ny;
                        this.xx2 = this.puls[this.i].lx;
                        this.yy2 = this.puls[this.i].ly;
                        this.i2 = 0;
                        while(this.i2 < this.shnades_total)
                        {
                           if(this.shnades[this.i2].io)
                           {
                              if(this.xx > this.shnades[this.i2].x - this.shnades[this.i2].radius - 100)
                              {
                                 if(this.xx < this.shnades[this.i2].x + this.shnades[this.i2].radius + 100)
                                 {
                                    if(this.yy > this.shnades[this.i2].y - this.shnades[this.i2].radius - 100)
                                    {
                                       if(this.yy < this.shnades[this.i2].y + this.shnades[this.i2].radius + 100)
                                       {
                                          if(this.Dist2D(this.xx,this.yy,this.shnades[this.i2].x,this.shnades[this.i2].y) < this.shnades[this.i2].radius)
                                          {
                                             if(this.Dist2D(this.xx2,this.yy2,this.shnades[this.i2].x,this.shnades[this.i2].y) >= this.shnades[this.i2].radius)
                                             {
                                                this.i3 = this.shnades[this.i2].parentish;
                                                if(this.puls[this.i].cclass == 4 || this.puls[this.i].cclass == 6)
                                                {
                                                   _loc3_ = Math.atan2(this.puls[this.i].spy,this.puls[this.i].spx);
                                                   _loc4_ = this.VectorDist2D(this.puls[this.i].spy,this.puls[this.i].spx);
                                                   _loc5_ = Math.atan2(this.yy - this.puls[this.i3].y,this.xx - this.puls[this.i3].x);
                                                   _loc6_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   this.ax[this.puls[this.i].attached] = this.puls[this.i3].x + Math.cos(_loc5_) * (_loc6_ + 2);
                                                   this.ay[this.puls[this.i].attached] = this.puls[this.i3].y + Math.sin(_loc5_) * (_loc6_ + 2);
                                                   _loc7_ = Math.atan2(Math.sin(_loc5_ - _loc3_),Math.cos(_loc5_ - _loc3_));
                                                   this.atox[this.puls[this.i].attached] -= Math.cos(_loc5_) * _loc4_ * Math.cos(_loc7_) * 2;
                                                   this.atoy[this.puls[this.i].attached] -= Math.sin(_loc5_) * _loc4_ * Math.cos(_loc7_) * 2;
                                                   if(_loc4_ > 4)
                                                   {
                                                      this.PlaySound(this.s_shnade_hit_low,this.puls[this.i].x,this.puls[this.i].y);
                                                      this.puls[this.i3].losthea += 1 * 8;
                                                   }
                                                   if((_loc8_ = this.VectorDist2D(this.puls[this.i].spy,this.puls[this.i].spx)) > _loc4_ * 1.01)
                                                   {
                                                      this.atox[this.puls[this.i].attached] = this.atox[this.puls[this.i].attached] / _loc8_ * _loc4_;
                                                      this.atoy[this.puls[this.i].attached] = this.atoy[this.puls[this.i].attached] / _loc8_ * _loc4_;
                                                   }
                                                }
                                                else
                                                {
                                                   _loc9_ = Number(this.puls[this.i3].hea);
                                                   _loc10_ = Number(this.puls[this.i].power);
                                                   _loc5_ = Math.atan2(this.yy - this.puls[this.i3].y,this.xx - this.puls[this.i3].x);
                                                   _loc3_ = Math.atan2(this.puls[this.i].spy,this.puls[this.i].spx);
                                                   _loc7_ = Math.atan2(Math.sin(_loc5_ - _loc3_),Math.cos(_loc5_ - _loc3_));
                                                   _loc6_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   if(this.puls[this.i].cclass == 0 && -Math.cos(_loc7_) < 1 / 2 || this.puls[this.i].cclass == 2)
                                                   {
                                                      _loc4_ = this.VectorDist2D(this.puls[this.i].spy,this.puls[this.i].spx);
                                                      this.puls[this.i].spx -= Math.cos(_loc5_) * _loc4_ * Math.cos(_loc7_) * 2;
                                                      this.puls[this.i].spy -= Math.sin(_loc5_) * _loc4_ * Math.cos(_loc7_) * 2;
                                                      if((_loc8_ = this.VectorDist2D(this.puls[this.i].spy,this.puls[this.i].spx)) > 0)
                                                      {
                                                         this.puls[this.i].spx = this.puls[this.i].spx / _loc8_ * _loc4_;
                                                         this.puls[this.i].spy = this.puls[this.i].spy / _loc8_ * _loc4_;
                                                      }
                                                      _loc10_ *= 0.5;
                                                      if(this.puls[this.i].cclass == 2)
                                                      {
                                                         this.Effect(this.puls[this.i].x,this.puls[this.i].y,5,this.puls[this.i].rotation,0);
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc5_) * _loc6_,this.puls[this.i3].y + Math.sin(_loc5_) * _loc6_,6,0,0);
                                                      }
                                                   }
                                                   this.cx = _loc10_;
                                                   if(this.puls[this.i].cclass == 2)
                                                   {
                                                      _loc11_ = 0;
                                                      while(_loc11_ < Math.sqrt(this.cx) * 2 || _loc11_ < 3)
                                                      {
                                                         this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.cx * 0.03 * Math.random(),-this.puls[this.i].spy * this.cx * 0.03 * Math.random());
                                                         _loc11_++;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      _loc11_ = 0;
                                                      while(_loc11_ < Math.sqrt(this.cx) * 2 || _loc11_ < 3)
                                                      {
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc5_) * _loc6_,this.puls[this.i3].y + Math.sin(_loc5_) * _loc6_,8,-this.puls[this.i].spx * this.cx * 0.03 * Math.random(),-this.puls[this.i].spy * this.cx * 0.03 * Math.random());
                                                         _loc11_++;
                                                      }
                                                   }
                                                   this.puls[this.i3].hea -= _loc10_ * 8;
                                                   this.puls[this.i3].losthea += _loc10_ * 8;
                                                   this.i4 = -1;
                                                   this.i4 = 0;
                                                   while(this.i4 < this.MP_specials.length)
                                                   {
                                                      if(this.MP_specials[this.i4] != undefined && this.MP_specials[this.i4].pul == this.i3)
                                                      {
                                                         found = true;
                                                         break;
                                                      }
                                                      ++this.i4;
                                                   }
                                                   if(this.i4 == this.MP_specials.length)
                                                   {
                                                      this.i4 = 0;
                                                      while(this.i4 < this.MP_myspecials_total)
                                                      {
                                                         if(this.MP_specials[this.i4] != undefined && this.MP_myspecials[this.i4].pul == this.i3)
                                                         {
                                                            this.i4 = this.MP_myspecials[this.i4].id_in_full_list;
                                                            found = true;
                                                            break;
                                                         }
                                                         ++this.i4;
                                                      }
                                                   }
                                                   this.MP_custom_events += ";shgh|" + this.puls[this.i].master + "#" + this.i4 + "#" + this.puls[this.i3].hea + "#" + _loc10_ * 8;
                                                   if(this.puls[this.i3].hea <= 0)
                                                   {
                                                      this.shnades[this.i2].io = false;
                                                      this.ExplodeShield(this.i2);
                                                      _loc10_ = -this.puls[this.i3].hea / 8;
                                                   }
                                                   if(_loc10_ > 0)
                                                   {
                                                      if(this.shnades[this.i2].io)
                                                      {
                                                         if(_loc10_ > 1.2)
                                                         {
                                                            this.PlaySound(this.s_shnade_hit,this.puls[this.i].x,this.puls[this.i].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_shnade_hit_low,this.puls[this.i].x,this.puls[this.i].y);
                                                         }
                                                      }
                                                      this.puls[this.i].power -= _loc10_;
                                                   }
                                                   if(this.puls[this.i].power < 0.4)
                                                   {
                                                      this.puls[this.i].visible = false;
                                                   }
                                                   else
                                                   {
                                                      this.puls[this.i].rotation = 270 - Math.atan2(this.puls[this.i].spx,this.puls[this.i].spy) / Math.PI * 180;
                                                      this.puls[this.i].lastin = -1;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i2;
                        }
                        this.rx = undefined;
                        this.ry = undefined;
                        this.i6 = -1;
                        if(this.puls[this.i].cclass != 4)
                        {
                           for each(this.i2 in this.GetNearBoxBSP_at(this.puls[this.i].x,this.puls[this.i].y))
                           {
                              if(this.puls[this.i].lastinbox != this.i2)
                              {
                                 if(this.puls[this.i].x >= this.boxx[this.i2] - this.Math_abs(this.puls[this.i].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[this.i].x <= this.boxx[this.i2] + this.boxw[this.i2] + this.Math_abs(this.puls[this.i].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[this.i].y >= this.boxy[this.i2] - this.Math_abs(this.puls[this.i].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[this.i].y <= this.boxy[this.i2] + this.boxh[this.i2] + this.Math_abs(this.puls[this.i].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[this.i].spx > 0 && this.i3 == 2 || this.puls[this.i].spx < 0 && this.i3 == 1 || this.puls[this.i].spy > 0 && this.i3 == 0 || this.puls[this.i].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.boxx[this.i2];
                                                      this.y3 = this.boxy[this.i2];
                                                      this.x4 = this.boxx[this.i2] + this.boxw[this.i2];
                                                      this.y4 = this.boxy[this.i2];
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.boxx[this.i2] + this.boxw[this.i2];
                                                      this.y3 = this.boxy[this.i2];
                                                      this.x4 = this.boxx[this.i2] + this.boxw[this.i2];
                                                      this.y4 = this.boxy[this.i2] + this.boxh[this.i2];
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.boxx[this.i2];
                                                      this.y3 = this.boxy[this.i2];
                                                      this.x4 = this.boxx[this.i2];
                                                      this.y4 = this.boxy[this.i2] + this.boxh[this.i2];
                                                   }
                                                   else
                                                   {
                                                      this.x3 = this.boxx[this.i2];
                                                      this.y3 = this.boxy[this.i2] + this.boxh[this.i2];
                                                      this.x4 = this.boxx[this.i2] + this.boxw[this.i2];
                                                      this.y4 = this.boxy[this.i2] + this.boxh[this.i2];
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.boxx[this.i2] - 1 <= this.retux)
                                                               {
                                                                  if(this.boxx[this.i2] + 1 + this.boxw[this.i2] >= this.retux)
                                                                  {
                                                                     if(this.boxy[this.i2] - 1 <= this.retuy)
                                                                     {
                                                                        if(this.boxy[this.i2] + 1 + this.boxh[this.i2] >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[this.i].lx,this.puls[this.i].ly) > this.Dist2D(this.retux,this.retuy,this.puls[this.i].lx,this.puls[this.i].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[this.i].lastinbox = this.i2;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[this.i].x >= this.boxx[this.i2])
                                    {
                                       if(this.puls[this.i].x <= this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          if(this.puls[this.i].y >= this.boxy[this.i2])
                                          {
                                             if(this.puls[this.i].y <= this.boxy[this.i2] + this.boxh[this.i2])
                                             {
                                                this.rx = this.puls[this.i].x;
                                                this.ry = this.puls[this.i].y;
                                                this.i6 = -2;
                                                this.puls[this.i].lastinbox = this.i2;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           this.i2 = 0;
                           while(this.i2 < this.doorstotal)
                           {
                              if(this.puls[this.i].lastinbox != -1 - this.i2)
                              {
                                 if(this.puls[this.i].x >= this.doors[this.i2].x - this.Math_abs(this.puls[this.i].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[this.i].x <= this.doors[this.i2].x + this.doors[this.i2].w + this.Math_abs(this.puls[this.i].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[this.i].y >= this.doors[this.i2].y - this.Math_abs(this.puls[this.i].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[this.i].y <= this.doors[this.i2].y + this.doors[this.i2].h + this.Math_abs(this.puls[this.i].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[this.i].spx > 0 && this.i3 == 2 || this.puls[this.i].spx < 0 && this.i3 == 1 || this.puls[this.i].spy > 0 && this.i3 == 0 || this.puls[this.i].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.doors[this.i2].x;
                                                      this.y3 = this.doors[this.i2].y;
                                                      this.x4 = this.doors[this.i2].x + this.doors[this.i2].w;
                                                      this.y4 = this.doors[this.i2].y;
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.doors[this.i2].x + this.doors[this.i2].w;
                                                      this.y3 = this.doors[this.i2].y;
                                                      this.x4 = this.doors[this.i2].x + this.doors[this.i2].w;
                                                      this.y4 = this.doors[this.i2].y + this.doors[this.i2].h;
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.doors[this.i2].x;
                                                      this.y3 = this.doors[this.i2].y;
                                                      this.x4 = this.doors[this.i2].x;
                                                      this.y4 = this.doors[this.i2].y + this.doors[this.i2].h;
                                                   }
                                                   else if(this.i3 == 3)
                                                   {
                                                      this.x3 = this.doors[this.i2].x;
                                                      this.y3 = this.doors[this.i2].y + this.doors[this.i2].h;
                                                      this.x4 = this.doors[this.i2].x + this.doors[this.i2].w;
                                                      this.y4 = this.doors[this.i2].y + this.doors[this.i2].h;
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.doors[this.i2].x - 1 <= this.retux)
                                                               {
                                                                  if(this.doors[this.i2].x + 1 + this.doors[this.i2].w >= this.retux)
                                                                  {
                                                                     if(this.doors[this.i2].y - 1 <= this.retuy)
                                                                     {
                                                                        if(this.doors[this.i2].y + 1 + this.doors[this.i2].h >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[this.i].lx,this.puls[this.i].ly) > this.Dist2D(this.retux,this.retuy,this.puls[this.i].lx,this.puls[this.i].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[this.i].lastinbox = -1 - this.i2;
                                                                                 if(this.doors[this.i2].onshot != -1)
                                                                                 {
                                                                                    this.TRIGGER_PLAYER_INITIATOR = this.MP_myid;
                                                                                    if(this.EXEC_TRIGGER(this.doors[this.i2].onshot))
                                                                                    {
                                                                                       if(this.puls[this.i].master == this.MP_myid)
                                                                                       {
                                                                                          if(this.MP_mode)
                                                                                          {
                                                                                             this.MP_custom_events += ";exec|" + this.doors[this.i2].onshot + "#" + this.MP_myid + "#" + -1;
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[this.i].x >= this.boxx[this.i2])
                                    {
                                       if(this.puls[this.i].x <= this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          if(this.puls[this.i].y >= this.boxy[this.i2])
                                          {
                                             if(this.puls[this.i].y <= this.boxy[this.i2] + this.boxh[this.i2])
                                             {
                                                this.rx = this.puls[this.i].x;
                                                this.ry = this.puls[this.i].y;
                                                this.i6 = -2;
                                                this.puls[this.i].lastinbox = -1 - this.i2;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                           if(this.i6 != -1)
                           {
                              if(this.puls[this.i].cclass == 1 || this.puls[this.i].cclass == 3 || this.puls[this.i].cclass == 5)
                              {
                                 this.puls[this.i].visible = false;
                              }
                              if(this.puls[this.i].cclass == 3)
                              {
                                 this.Effect(this.rx,this.ry,1,0,0);
                                 this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                 this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                 this.Effect(this.rx - this.puls[this.i].spx * 0.1,this.ry - this.puls[this.i].spy * 0.1,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                              }
                              this.puls[this.i].nx = this.rx;
                              this.puls[this.i].ny = this.ry;
                              if(this.puls[this.i].cclass == 0)
                              {
                                 this.Effect(this.rx,this.ry,1,0,0);
                                 if(this.i6 == 0 || this.i6 == 3)
                                 {
                                    this.xx = this.Math_abs(this.puls[this.i].spx);
                                    this.yy = this.Math_abs(this.puls[this.i].spy);
                                 }
                                 else
                                 {
                                    this.xx = this.Math_abs(this.puls[this.i].spy);
                                    this.yy = this.Math_abs(this.puls[this.i].spx);
                                 }
                                 if(this.yy < this.xx / 2 && this.i6 != -2)
                                 {
                                    if(this.i6 == 0)
                                    {
                                       this.puls[this.i].spy = -this.Math_abs(this.puls[this.i].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[this.i].spy = this.Math_abs(this.puls[this.i].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[this.i].spx = this.Math_abs(this.puls[this.i].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[this.i].spx = -this.Math_abs(this.puls[this.i].spx);
                                    }
                                    this.puls[this.i].power *= 0.5;
                                    if(this.puls[this.i].power < 0.4)
                                    {
                                       this.puls[this.i].visible = false;
                                    }
                                    else
                                    {
                                       this.puls[this.i].x = this.rx + this.puls[this.i].spx / this.Math_abs(this.puls[this.i].spx);
                                       this.puls[this.i].y = this.ry + this.puls[this.i].spy / this.Math_abs(this.puls[this.i].spy);
                                       this.puls[this.i].rotation = -90 - Math.atan2(this.puls[this.i].spx,this.puls[this.i].spy) / Math.PI * 180;
                                    }
                                 }
                                 else
                                 {
                                    this.xx = this.puls[this.i].power * 0.57 * this.weapon_penetration_factor;
                                    if(this.xx > 0.816 * this.weapon_penetration_factor)
                                    {
                                       this.xx = 0.816 * this.weapon_penetration_factor;
                                    }
                                    if(this.TracePointNoRagdolls(this.rx + this.puls[this.i].spx * this.xx,this.ry + this.puls[this.i].spy * this.xx))
                                    {
                                       this.Effect(this.rx + this.puls[this.i].spx * this.puls[this.i].power * 0.5,this.ry + this.puls[this.i].spy * this.puls[this.i].power * 0.5,8,this.puls[this.i].spx * this.puls[this.i].power * 0.06,this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                       this.Effect(this.rx + this.puls[this.i].spx * this.puls[this.i].power * 0.5,this.ry + this.puls[this.i].spy * this.puls[this.i].power * 0.5,8,this.puls[this.i].spx * this.puls[this.i].power * 0.06,this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                       this.Effect(this.rx,this.ry,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                       this.Effect(this.rx,this.ry,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.06,-this.puls[this.i].spy * this.puls[this.i].power * 0.06);
                                       this.puls[this.i].power *= 0.7;
                                       if(this.puls[this.i].power < 0.4)
                                       {
                                          this.puls[this.i].visible = false;
                                       }
                                    }
                                    else
                                    {
                                       this.puls[this.i].visible = false;
                                    }
                                 }
                              }
                              if(this.puls[this.i].cclass == 2 && this.MP_mode && this.MP_type != 2)
                              {
                                 this.puls[this.i].power *= 0.35;
                                 if(this.puls[this.i].power < 0.4)
                                 {
                                    this.puls[this.i].visible = false;
                                 }
                                 else
                                 {
                                    this.puls[this.i].lastin = -1;
                                    if(this.i6 != -2)
                                    {
                                       this.Effect(this.puls[this.i].x,this.puls[this.i].y,5,this.puls[this.i].rotation,0);
                                       this.Effect(this.rx,this.ry,6,0,0);
                                    }
                                    if(this.i6 == 0)
                                    {
                                       this.puls[this.i].spy = -this.Math_abs(this.puls[this.i].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[this.i].spy = this.Math_abs(this.puls[this.i].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[this.i].spx = this.Math_abs(this.puls[this.i].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[this.i].spx = -this.Math_abs(this.puls[this.i].spx);
                                    }
                                    if(this.i6 == -2)
                                    {
                                       this.puls[this.i].visible = false;
                                    }
                                    this.puls[this.i].x = this.rx + this.puls[this.i].spx / this.Math_abs(this.puls[this.i].spx);
                                    this.puls[this.i].y = this.ry + this.puls[this.i].spy / this.Math_abs(this.puls[this.i].spy);
                                    this.puls[this.i].x += this.puls[this.i].spx * 0.5;
                                    this.puls[this.i].y += this.puls[this.i].spy * 0.5;
                                    this.puls[this.i].rotation = -90 - Math.atan2(this.puls[this.i].spx,this.puls[this.i].spy) / Math.PI * 180;
                                 }
                              }
                              else if(this.puls[this.i].cclass == 2)
                              {
                                 this.puls[this.i].visible = false;
                              }
                           }
                           this.ok = true;
                           this.i2 = 0;
                           while(this.i2 < this.watertotal)
                           {
                              if(this.puls[this.i].x > this.wax[this.i2])
                              {
                                 if(this.puls[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                                 {
                                    if(this.puls[this.i].y > this.way[this.i2])
                                    {
                                       if(this.puls[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                       {
                                          if(this.SUPER_COMPUTER && !this.c_sim_stress)
                                          {
                                             this.Effect(this.puls[this.i].x,this.puls[this.i].y,2,0,0);
                                          }
                                          this.ok = false;
                                          if(this.puls[this.i].inwater == false)
                                          {
                                             this.Effect(this.puls[this.i].x,this.way[this.i2],3,0,this.puls[this.i].spy);
                                             this.puls[this.i].inwater = true;
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                           if(this.ok)
                           {
                              if(this.puls[this.i].inwater)
                              {
                                 this.puls[this.i].inwater = false;
                                 this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,3,0,this.puls[this.i].spy);
                              }
                           }
                        }
                        if(this.puls[this.i].cclass != 6)
                        {
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if(this.puls[this.i].master == -1 || this.vehicles[this.i3].master == -1 || this.mens[this.puls[this.i].master].team != this.mens[this.vehicles[this.i3].master].team || this.vehicles[this.i3].typ == 7 && this.puls[this.i].master != this.vehicles[this.i3].master)
                                 {
                                    this.ok = false;
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          if(this.puls[this.i].x >= this.ax[this.i2] - this.arad[this.i2] * 0.8 - this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                          {
                                             if(this.puls[this.i].x <= this.ax[this.i2] + this.arad[this.i2] * 0.8 + this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                             {
                                                if(this.puls[this.i].y >= this.ay[this.i2] - this.arad[this.i2] * 0.8 - this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                {
                                                   if(this.puls[this.i].y <= this.ay[this.i2] + this.arad[this.i2] * 0.8 + this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[this.i2] = (this.atox[this.i2] * 40 + this.puls[this.i].spx * this.puls[this.i].power) / (39 + this.puls[this.i].power);
                                                      this.atoy[this.i2] = (this.atoy[this.i2] * 40 + this.puls[this.i].spy * this.puls[this.i].power) / (39 + this.puls[this.i].power);
                                                      this.WakeUpAtom(this.i2);
                                                      this.vehicles[this.i3].hea -= this.puls[this.i].power * 10;
                                                      this.puls[this.i].visible = false;
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,1,0,0);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p1;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          if(this.puls[this.i].x >= this.ax[this.i2] - this.arad[this.i2] * 0.8 - this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                          {
                                             if(this.puls[this.i].x <= this.ax[this.i2] + this.arad[this.i2] * 0.8 + this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                             {
                                                if(this.puls[this.i].y >= this.ay[this.i2] - this.arad[this.i2] * 0.8 - this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                {
                                                   if(this.puls[this.i].y <= this.ay[this.i2] + this.arad[this.i2] * 0.8 + this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[this.i2] = (this.atox[this.i2] * 40 + this.puls[this.i].spx * this.puls[this.i].power) / (39 + this.puls[this.i].power);
                                                      this.atoy[this.i2] = (this.atoy[this.i2] * 40 + this.puls[this.i].spy * this.puls[this.i].power) / (39 + this.puls[this.i].power);
                                                      this.WakeUpAtom(this.i2);
                                                      this.vehicles[this.i3].hea -= this.puls[this.i].power * 10;
                                                      this.puls[this.i].visible = false;
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,1,0,0);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                      this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       if(this.vehicles[this.i3].hea > 0)
                                       {
                                          this.i2 = this.vehicles[this.i3].b_c;
                                          if(this.puls[this.i].x >= this.ax[this.i2] - 30 - this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                          {
                                             if(this.puls[this.i].x <= this.ax[this.i2] + 30 + this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                             {
                                                if(this.puls[this.i].y >= this.ay[this.i2] - 30 - this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                {
                                                   if(this.puls[this.i].y <= this.ay[this.i2] + 30 + this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[this.i2] += this.puls[this.i].spx * this.puls[this.i].power * 0.03;
                                                      this.atoy[this.i2] += this.puls[this.i].spy * this.puls[this.i].power * 0.03;
                                                      this.atox[this.vehicles[this.i3].b_lt] += this.puls[this.i].spx * this.puls[this.i].power * 0.03;
                                                      this.atoy[this.vehicles[this.i3].b_lt] += this.puls[this.i].spy * this.puls[this.i].power * 0.03;
                                                      this.atox[this.vehicles[this.i3].b_rt] += this.puls[this.i].spx * this.puls[this.i].power * 0.03;
                                                      this.atoy[this.vehicles[this.i3].b_rt] += this.puls[this.i].spy * this.puls[this.i].power * 0.03;
                                                      this.atox[this.vehicles[this.i3].b_lb] += this.puls[this.i].spx * this.puls[this.i].power * 0.03;
                                                      this.atoy[this.vehicles[this.i3].b_lb] += this.puls[this.i].spy * this.puls[this.i].power * 0.03;
                                                      this.atox[this.vehicles[this.i3].b_rb] += this.puls[this.i].spx * this.puls[this.i].power * 0.03;
                                                      this.atoy[this.vehicles[this.i3].b_rb] += this.puls[this.i].spy * this.puls[this.i].power * 0.03;
                                                      this.WakeUpAtom(this.i2);
                                                      this.aio[this.vehicles[this.i3].b_lt] = true;
                                                      this.aio[this.vehicles[this.i3].b_rt] = true;
                                                      this.aio[this.vehicles[this.i3].b_lb] = true;
                                                      this.aio[this.vehicles[this.i3].b_rb] = true;
                                                      this.vehicles[this.i3].hea -= this.puls[this.i].power * 10;
                                                      this.atim[this.vehicles[this.i3].b_lt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_lb] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rb] = 0;
                                                      this.puls[this.i].visible = false;
                                                      this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,1,0,0);
                                                      this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                      this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                      this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                      this.PlaySound(this.s_box_hard,this.puls[this.i].x,this.puls[this.i].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       this.i2 = this.vehicles[this.i3].b_c;
                                       if(this.vehicles[this.i3].typ == 4)
                                       {
                                          this.u = 20;
                                          this.v = 20;
                                       }
                                       else
                                       {
                                          this.u = 75;
                                          this.v = 50;
                                       }
                                       if(this.puls[this.i].x >= this.ax[this.i2] - this.u - this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                       {
                                          if(this.puls[this.i].x <= this.ax[this.i2] + this.u + this.Math_abs(this.puls[this.i].spx) / 2 + this.puls[this.i].spx)
                                          {
                                             if(this.puls[this.i].y >= this.ay[this.i2] - this.v - this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                             {
                                                if(this.puls[this.i].y <= this.ay[this.i2] + this.v + this.Math_abs(this.puls[this.i].spy) / 2 + this.puls[this.i].spy)
                                                {
                                                   this.ok = true;
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      this.u = this.puls[this.i].spx * this.puls[this.i].power * 0.05;
                                                      this.v = this.puls[this.i].spy * this.puls[this.i].power * 0.05;
                                                   }
                                                   else
                                                   {
                                                      this.u = this.puls[this.i].spx * this.puls[this.i].power * 0.01;
                                                      this.v = this.puls[this.i].spy * this.puls[this.i].power * 0.01;
                                                   }
                                                   this.atox[this.i2] += this.u;
                                                   this.atoy[this.i2] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c1] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c1] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c2] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c2] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c3] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c3] += this.v;
                                                   this.aio[this.i2] = true;
                                                   this.aio[this.vehicles[this.i3].b_c1] = true;
                                                   this.aio[this.vehicles[this.i3].b_c2] = true;
                                                   this.aio[this.vehicles[this.i3].b_c3] = true;
                                                   this.vehicles[this.i3].hea -= this.puls[this.i].power * 10;
                                                   this.atim[this.i2] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c1] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c2] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c3] = 0;
                                                   this.puls[this.i].visible = false;
                                                   this.Effect(this.puls[this.i].x,this.puls[this.i].y,1,0,0);
                                                   this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                   this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                   this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      if(!this.vehicles[this.i3].dead)
                                                      {
                                                         this.Say(this.vehicles[this.i3],this.s_drone_hurt);
                                                      }
                                                      if(Math.random() > 0.5)
                                                      {
                                                         this.PlaySound(this.s_capsule_hit1,this.puls[this.i].x,this.puls[this.i].y);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_capsule_hit2,this.puls[this.i].x,this.puls[this.i].y);
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.PlaySound(this.s_metal_hit,this.puls[this.i].x,this.puls[this.i].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.ok)
                                    {
                                       if(this.vehicles[this.i3].master != -1)
                                       {
                                          if(!this.vehicles[this.i3].dead)
                                          {
                                             this.Alerted(this.mens[this.vehicles[this.i3].master]);
                                             this.mens[this.vehicles[this.i3].master].hunt = this.puls[this.i].master;
                                             if(this.puls[this.i].master == this.MP_myid)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   ++this.FUN_NICE_BULLETS;
                                                   this.FUN_DAMAGE_MADE += this.puls[this.i].power * 10;
                                                }
                                             }
                                             if(this.HQ && this.SCREEN_EFFECTS)
                                             {
                                                if(this.puls[this.i].master == this.MP_myid)
                                                {
                                                   this.whitness.alpha += this.puls[this.i].power * 10 / this.vehicles[this.i3].hmax;
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      this.whitness.alpha += 0.5;
                                                   }
                                                   this.whitness.visible = true;
                                                }
                                             }
                                             if(this.mens[this.vehicles[this.i3].master].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      if(this.puls[this.i].thisis == "swords")
                                                      {
                                                         this.incBadge(17);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                        }
                        if(this.puls[this.i].cclass != 6)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal)
                           {
                              if(this.puls[this.i].lastin != -this.i2 - 100)
                              {
                                 if(this.guns[this.i2].io)
                                 {
                                    if(this.guns[this.i2].picken_by != this.puls[this.i].master)
                                    {
                                       if(this.guns[this.i2].picken_by == -1)
                                       {
                                          this.mc2 = this.guns[this.i2];
                                          if(this.puls[this.i].x >= this.mc2.x - 100)
                                          {
                                             if(this.puls[this.i].x <= this.mc2.x + 100)
                                             {
                                                if(this.puls[this.i].y >= this.mc2.y - 100)
                                                {
                                                   if(this.puls[this.i].y <= this.mc2.y + 100)
                                                   {
                                                      if(this.CheckHit(this.i,this.mc2.b_p1) || this.CheckHit(this.i,this.mc2.b_p2) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1],this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2],this.i))
                                                      {
                                                         this.puls[this.i].lastin = -this.i2 - 100;
                                                         if(this.puls[this.i].power < 1)
                                                         {
                                                            this.PlaySound(this.s_wea1,this.puls[this.i].x,this.puls[this.i].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_wea2,this.puls[this.i].x,this.puls[this.i].y);
                                                         }
                                                         this.xx = this.Dist2D(this.puls[this.i].x,this.puls[this.i].y,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1]);
                                                         this.xx2 = this.Dist2D(this.puls[this.i].x,this.puls[this.i].y,this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                                         this.u = this.xx + this.xx2;
                                                         if(this.u > 1)
                                                         {
                                                            this.xx /= this.u;
                                                            this.xx2 /= this.u;
                                                         }
                                                         this.atox[this.mc2.b_p1] += this.puls[this.i].spx * this.puls[this.i].power * 0.1 * this.xx2;
                                                         this.atoy[this.mc2.b_p1] += this.puls[this.i].spy * this.puls[this.i].power * 0.1 * this.xx2;
                                                         this.atox[this.mc2.b_p2] += this.puls[this.i].spx * this.puls[this.i].power * 0.1 * this.xx;
                                                         this.atoy[this.mc2.b_p2] += this.puls[this.i].spy * this.puls[this.i].power * 0.1 * this.xx;
                                                         this.WakeUpAtom(this.mc2.b_p1);
                                                         this.WakeUpAtom(this.mc2.b_p2);
                                                         this.Effect(this.puls[this.i].x,this.puls[this.i].y,1,0,0);
                                                         this.Effect(this.puls[this.i].x,this.puls[this.i].y,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                         this.puls[this.i].power = Math.max(0,this.puls[this.i].power - 0.5);
                                                         if(this.puls[this.i].power < 0.4)
                                                         {
                                                            this.puls[this.i].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.puls[this.i].cclass != 6)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.lampstotal)
                           {
                              if(this.lamps_power2[this.i2] > 0)
                              {
                                 if(this.puls[this.i].nx > this.lamps_x[this.i2] - 20 - Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                 {
                                    if(this.puls[this.i].nx < this.lamps_x[this.i2] + 20 + Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                    {
                                       if(this.puls[this.i].ny > this.lamps_y[this.i2] - 20 - Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                       {
                                          if(this.puls[this.i].ny < this.lamps_y[this.i2] + 20 + Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                          {
                                             if(this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.lamps_x[this.i2] - 20,this.lamps_y[this.i2] - 20,this.lamps_x[this.i2] + 20,this.lamps_y[this.i2] + 20,this.i) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.lamps_x[this.i2] + 20,this.lamps_y[this.i2] - 20,this.lamps_x[this.i2] - 20,this.lamps_y[this.i2] + 20,this.i))
                                             {
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.04,this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.05,this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.1,this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.09,this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.1,this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,this.puls[this.i].spx * this.puls[this.i].power * 0.2,this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                this.puls[this.i].power = Math.max(0,this.puls[this.i].power - 1.5);
                                                if(this.puls[this.i].power < 0.4)
                                                {
                                                   this.puls[this.i].visible = false;
                                                }
                                                this.ShotLight(this.i2);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.puls[this.i].cclass != 6)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.barrelstotal)
                           {
                              if(this.puls[this.i].lastin != -this.i2 - 1)
                              {
                                 if(this.barrels[this.i2].hea > 0)
                                 {
                                    this.mc2 = this.barrels[this.i2];
                                    if(this.puls[this.i].nx > this.mc2.x - 30 - Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                    {
                                       if(this.puls[this.i].nx < this.mc2.x + 30 + Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                       {
                                          if(this.puls[this.i].ny > this.mc2.y - 30 - Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                          {
                                             if(this.puls[this.i].ny < this.mc2.y + 30 + Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                             {
                                                if(this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_left_bottom],this.ay[this.mc2.b_left_bottom],this.ax[this.mc2.b_right_top],this.ay[this.mc2.b_right_top],this.i) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_left_top],this.ay[this.mc2.b_left_top],this.ax[this.mc2.b_right_bottom],this.ay[this.mc2.b_right_bottom],this.i))
                                                {
                                                   this.puls[this.i].lastin = -this.i2 - 1;
                                                   this.atox[this.mc2.b_left_top] = (this.atox[this.mc2.b_left_top] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atoy[this.mc2.b_left_top] = (this.atoy[this.mc2.b_left_top] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atox[this.mc2.b_right_top] = (this.atox[this.mc2.b_right_top] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atoy[this.mc2.b_right_top] = (this.atoy[this.mc2.b_right_top] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atox[this.mc2.b_right_bottom] = (this.atox[this.mc2.b_right_bottom] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atoy[this.mc2.b_right_bottom] = (this.atoy[this.mc2.b_right_bottom] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atox[this.mc2.b_left_bottom] = (this.atox[this.mc2.b_left_bottom] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.atoy[this.mc2.b_left_bottom] = (this.atoy[this.mc2.b_left_bottom] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                   this.mc2.hea -= this.puls[this.i].power * 20;
                                                   this.mc2.master = this.puls[this.i].master;
                                                   this.HurtBarrel(this.i2);
                                                   this.aio[this.mc2.b_left_top] = true;
                                                   this.aio[this.mc2.b_right_top] = true;
                                                   this.aio[this.mc2.b_right_bottom] = true;
                                                   this.aio[this.mc2.b_left_bottom] = true;
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,1,0,0);
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      this.puls[this.i].power = Math.max(0,this.puls[this.i].power - 1.5);
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         ++this.FUN_NICE_BULLETS;
                                                      }
                                                   }
                                                   if(this.puls[this.i].power < 0.4)
                                                   {
                                                      this.puls[this.i].visible = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.mc2 = this.barrels[this.i2];
                                    this.i3 = 1;
                                    while(this.i3 <= 2)
                                    {
                                       if(this.puls[this.i].x - this.puls[this.i].spx / 2 >= this.mc2.x + this.mc2["b" + this.i3].x - this.Math_abs(this.puls[this.i].spx) * 0.8 - 10)
                                       {
                                          if(this.puls[this.i].x - this.puls[this.i].spx / 2 <= this.mc2.x + this.mc2["b" + this.i3].x + this.Math_abs(this.puls[this.i].spx) * 0.8 + 10)
                                          {
                                             if(this.puls[this.i].y - this.puls[this.i].spy / 2 >= this.mc2.y + this.mc2["b" + this.i3].y - this.Math_abs(this.puls[this.i].spy) * 0.8 - 10)
                                             {
                                                if(this.puls[this.i].y - this.puls[this.i].spy / 2 <= this.mc2.y + this.mc2["b" + this.i3].y + this.Math_abs(this.puls[this.i].spy) * 0.8 + 10)
                                                {
                                                   this.puls[this.i].lastin = -this.i2 - 1;
                                                   if(this.i3 == 1)
                                                   {
                                                      this.atox[this.mc2.b_left_top] = (this.atox[this.mc2.b_left_top] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_left_top] = (this.atoy[this.mc2.b_left_top] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_right_top] = (this.atox[this.mc2.b_right_top] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_right_top] = (this.atoy[this.mc2.b_right_top] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_right1] = (this.atox[this.mc2.b_right1] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_right1] = (this.atoy[this.mc2.b_right1] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_left1] = (this.atox[this.mc2.b_left1] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_left1] = (this.atoy[this.mc2.b_left1] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.aio[this.mc2.b_left_top] = true;
                                                      this.aio[this.mc2.b_right_top] = true;
                                                      this.aio[this.mc2.b_right1] = true;
                                                      this.aio[this.mc2.b_left1] = true;
                                                   }
                                                   else
                                                   {
                                                      this.atox[this.mc2.b_left2] = (this.atox[this.mc2.b_left2] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_left2] = (this.atoy[this.mc2.b_left2] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_right2] = (this.atox[this.mc2.b_right2] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_right2] = (this.atoy[this.mc2.b_right2] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_right_bottom] = (this.atox[this.mc2.b_right_bottom] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_right_bottom] = (this.atoy[this.mc2.b_right_bottom] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atox[this.mc2.b_left_bottom] = (this.atox[this.mc2.b_left_bottom] * 7 + this.puls[this.i].spx * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.atoy[this.mc2.b_left_bottom] = (this.atoy[this.mc2.b_left_bottom] * 7 + this.puls[this.i].spy * this.puls[this.i].power) / (7 + this.puls[this.i].power);
                                                      this.aio[this.mc2.b_right_bottom] = true;
                                                      this.aio[this.mc2.b_left_bottom] = true;
                                                      this.aio[this.mc2.b_right2] = true;
                                                      this.aio[this.mc2.b_left2] = true;
                                                   }
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,1,0,0);
                                                   this.puls[this.i].power = Math.max(0,this.puls[this.i].power - 0.3);
                                                   if(this.puls[this.i].power < 0.4)
                                                   {
                                                      this.puls[this.i].visible = false;
                                                   }
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.04,-this.puls[this.i].spy * this.puls[this.i].power * 0.04);
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.05,-this.puls[this.i].spy * this.puls[this.i].power * 0.05);
                                                   this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,8,-this.puls[this.i].spx * this.puls[this.i].power * 0.1,-this.puls[this.i].spy * this.puls[this.i].power * 0.1);
                                                }
                                             }
                                          }
                                       }
                                       ++this.i3;
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        _loc1_ = this.MP_custom_events.length;
                        _loc2_ = Number(this.mens[this.MP_myid].hea);
                        if(this.puls[this.i].cclass != 6)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.playerstotal)
                           {
                              if(this.mens[this.i2].io)
                              {
                                 if(this.i2 != this.puls[this.i].master || this.puls[this.i].cclass == 2)
                                 {
                                    if(this.puls[this.i].lastin != this.i2)
                                    {
                                       if(this.mens[this.i2].team != this.mens[this.puls[this.i].master].team || this.mens[this.i2].team != 0 && !this.PRO_BOTS && !this.MP_mode || (this.mens[this.i2].hea <= 0 || this.mens[this.i2].dying && !this.MP_mode) || this.MP_mode && this.MP_type == 1)
                                       {
                                          if(this.mens[this.i2].incar == -1)
                                          {
                                             this.mc2 = this.mens[this.i2];
                                             this.i3 = -1;
                                             if(this.mc2.hea > 0 && this.mc2.stability > 0.3)
                                             {
                                                if(!this.stable)
                                                {
                                                   if(this.MP_mode)
                                                   {
                                                      if(Math.random() > 0.95)
                                                      {
                                                         if(Math.random() > 0.5)
                                                         {
                                                            this.puls[this.i].nx = this.mens[this.MP_myid].x;
                                                            this.puls[this.i].ny = this.mens[this.MP_myid].y;
                                                         }
                                                         else
                                                         {
                                                            this.puls[this.i].lx = this.mens[this.MP_myid].x;
                                                            this.puls[this.i].ly = this.mens[this.MP_myid].y;
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.puls[this.i].nx > this.mc2.x - 15 - Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                                {
                                                   if(this.puls[this.i].nx < this.mc2.x + 15 + Math.abs(this.puls[this.i].lx - this.puls[this.i].nx))
                                                   {
                                                      if(this.puls[this.i].ny > this.mc2.y - 82 - Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                                      {
                                                         if(this.puls[this.i].ny < this.mc2.y - this.mc2.sit * this.sitmax * 0.5 + Math.abs(this.puls[this.i].ly - this.puls[this.i].ny))
                                                         {
                                                            if(this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.mc2.x + (this.puls[this.i].spx > 0 ? -15 : 15),this.mc2.y - 82,this.mc2.x + (this.puls[this.i].spx > 0 ? -15 : 15),this.mc2.y - this.mc2.sit * this.sitmax * 0.5,this.i) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.mc2.x - 15,this.mc2.y + (this.puls[this.i].spy > 0 ? -82 : -this.mc2.sit * this.sitmax * 0.5),this.mc2.x + 15,this.mc2.y + (this.puls[this.i].spy > 0 ? -82 : -this.mc2.sit * this.sitmax * 0.5),this.i))
                                                            {
                                                               this.u = this.retux;
                                                               this.v = this.retuy;
                                                               if(this.v - this.puls[this.i].spy < this.ay[this.mc2.b_head_start] + 5)
                                                               {
                                                                  this.str = "head";
                                                               }
                                                               else if(this.v - this.puls[this.i].spy < (this.ay[this.mc2.b_toe] + this.ay[this.mc2.b_head_start]) * 0.5 + 4 && (this.puls[this.i].spx > 0 && this.mc2.side < 0 || this.puls[this.i].spx < 0 && this.mc2.side > 0))
                                                               {
                                                                  this.str = "arms";
                                                               }
                                                               else if(this.v - this.puls[this.i].spy < this.ay[this.mc2.b_toe])
                                                               {
                                                                  this.str = "body";
                                                               }
                                                               else
                                                               {
                                                                  this.str = "legs";
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_head_end],this.ay[this.mc2.b_head_end]);
                                                               this.xx = this.yy;
                                                               this.i3 = this.mc2.b_head_end;
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_head_start],this.ay[this.mc2.b_head_start]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_head_start;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_body;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_toe;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_arm1;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_arm2],this.ay[this.mc2.b_arm2]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_arm2;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_leg1;
                                                               }
                                                               this.yy = this.Dist2D(this.u,this.v,this.ax[this.mc2.b_leg2],this.ay[this.mc2.b_leg2]);
                                                               if(this.yy < this.xx)
                                                               {
                                                                  this.xx = this.yy;
                                                                  this.i3 = this.mc2.b_leg2;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_head_end) || this.CheckHit(this.i,this.mc2.b_head_start))
                                             {
                                                this.i3 = this.mc2.b_head_end;
                                                this.str = "head";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_body) || !this.mc2.brk_body && this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body],this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.i))
                                             {
                                                this.i3 = this.mc2.b_body;
                                                this.str = "body";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_toe))
                                             {
                                                this.i3 = this.mc2.b_toe;
                                                this.str = "legs";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_arm1))
                                             {
                                                this.i3 = this.mc2.b_arm1;
                                                this.str = "arms";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_arm2))
                                             {
                                                this.i3 = this.mc2.b_arm2;
                                                this.str = "arms";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_leg1) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],this.i))
                                             {
                                                this.i3 = this.mc2.b_leg1;
                                                this.str = "legs";
                                             }
                                             else if(this.CheckHit(this.i,this.mc2.b_leg2) || this.CheckCross(this.puls[this.i].lx,this.puls[this.i].ly,this.puls[this.i].nx,this.puls[this.i].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg2],this.ay[this.mc2.b_leg2],this.i))
                                             {
                                                this.i3 = this.mc2.b_leg2;
                                                this.str = "legs";
                                             }
                                             else
                                             {
                                                this.i3 = -1;
                                             }
                                             if(this.i3 != -1)
                                             {
                                                if(this.MP_mode)
                                                {
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      if(Boolean(this.mc2.isplayer) && this.MP_myid != this.i2)
                                                      {
                                                         if(this.INTRUDER_DATABASE[this.mc2.login_name] == undefined || this.INTRUDER_DATABASE[this.mc2.login_name] == null)
                                                         {
                                                            this.INTRUDER_DATABASE[this.mc2.login_name] = new Object();
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots = 1;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].registered_shots = 0;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].activity_start = getTimer();
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = this.mc2.ping;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = this.mc2.ping;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].seen_deaths = 0;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = this.mc2.hea;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = this.mc2.hea;
                                                         }
                                                         else
                                                         {
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots += 1;
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].ping_min,this.mc2.ping);
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].ping_max,this.mc2.ping);
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].max_hea,this.mc2.hea);
                                                            this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].min_hea,this.mc2.hea);
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.MP_myid == this.i2 && !this.MP_spectator || !this.MP_mode || !this.mc2.isplayer)
                                                {
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      this.xx = this.puls[this.i].x - this.puls[this.i].spx / 2 * this.thispulspeed;
                                                      this.yy = this.puls[this.i].y - this.puls[this.i].spy / 2 * this.thispulspeed;
                                                      if(this.xx < this.mc2.x - 10)
                                                      {
                                                         this.xx = this.mc2.x - 10;
                                                      }
                                                      if(this.xx > this.mc2.x + 10)
                                                      {
                                                         this.xx = this.mc2.x + 10;
                                                      }
                                                      if(this.yy < this.mc2.y - 82)
                                                      {
                                                         this.yy = this.mc2.y - 82;
                                                      }
                                                      if(this.yy > this.mc2.y - this.mc2.sit * this.sitmax)
                                                      {
                                                         this.yy = this.mc2.y - this.mc2.sit * this.sitmax;
                                                      }
                                                      this.effcolor = this.i2;
                                                      if(this.str == "head")
                                                      {
                                                         this.FlowAt(this.xx,this.yy,0,this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2,this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2,Math.min(5 * this.puls[this.i].power,7));
                                                         if(this.MP_mode)
                                                         {
                                                            if(this.MP_myid == this.i2)
                                                            {
                                                               this.MP_custom_events += ";gshot|" + this.i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(5 * this.puls[this.i].power) + "#" + this.puls[this.i].master + "#" + (this.puls[this.i].cclass == 3 ? "1" : "0");
                                                            }
                                                         }
                                                      }
                                                      else
                                                      {
                                                         this.FlowAt(this.xx,this.yy,0,this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2,this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2,Math.min(2 * this.puls[this.i].power,7));
                                                         if(this.MP_mode)
                                                         {
                                                            if(this.MP_myid == this.i2)
                                                            {
                                                               this.MP_custom_events += ";gshot|" + this.i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(2 * this.puls[this.i].power) + "#" + this.puls[this.i].master + "#" + (this.puls[this.i].cclass == 3 ? "1" : "0");
                                                            }
                                                         }
                                                      }
                                                      this.mc2.tox += this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) * 0.05 * (this.mc2.mobility * this.mc2.mobility + 1) * 0.66;
                                                      this.mc2.toy += this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) * 0.05 * (this.mc2.mobility * this.mc2.mobility + 1) * 0.66;
                                                   }
                                                   else
                                                   {
                                                      this.effcolor = this.i2;
                                                      this.xx = this.ax[this.i3];
                                                      this.yy = this.ay[this.i3];
                                                      if(this.str == "head")
                                                      {
                                                         this.FlowAt(this.xx,this.yy,0,this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2,this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2,5 * this.puls[this.i].power);
                                                         if(this.MP_mode)
                                                         {
                                                            if(this.MP_myid == this.i2)
                                                            {
                                                               this.MP_custom_events += ";gshot|" + this.i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(5 * this.puls[this.i].power) + "#" + this.puls[this.i].master + "#" + (this.puls[this.i].cclass == 3 ? "1" : "0");
                                                            }
                                                         }
                                                      }
                                                      else
                                                      {
                                                         this.FlowAt(this.xx,this.yy,0,this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2,this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2,2 * this.puls[this.i].power);
                                                         if(this.MP_mode)
                                                         {
                                                            if(this.MP_myid == this.i2)
                                                            {
                                                               this.MP_custom_events += ";gshot|" + this.i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) / 2) + "#" + this.r2(2 * this.puls[this.i].power) + "#" + this.puls[this.i].master + "#" + (this.puls[this.i].cclass == 3 ? "1" : "0");
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.str == "arms")
                                                {
                                                   if(this.mc2.brk_arms)
                                                   {
                                                      this.str = "body";
                                                   }
                                                }
                                                if(this.str == "body")
                                                {
                                                   if(this.mc2.brk_body)
                                                   {
                                                      if(this.mc2.brk_arms)
                                                      {
                                                         this.str = "head";
                                                      }
                                                      else
                                                      {
                                                         this.str = "arms";
                                                      }
                                                   }
                                                }
                                                if(this.mc2.brk_legs)
                                                {
                                                   if(this.str == "legs")
                                                   {
                                                      this.str = "body";
                                                   }
                                                }
                                                if(this.mc2.brk_head)
                                                {
                                                   if(this.str == "head")
                                                   {
                                                      if(this.mc2.brk_body)
                                                      {
                                                         this.str = "arms";
                                                      }
                                                      else
                                                      {
                                                         this.str = "body";
                                                      }
                                                   }
                                                }
                                                if(this.MP_myid == this.i2 && !this.MP_spectator || !this.MP_mode || !this.mc2.isplayer)
                                                {
                                                   this.SimHitSound(this.mc2,this.puls[this.i].x,this.puls[this.i].y,this.puls[this.i].cclass == 3 ? 1 : 0);
                                                }
                                                this.v = this.puls[this.i].power;
                                                this.u = this.Dist2D(this.puls[this.i].spx * 0.3,this.puls[this.i].spy * 0.3,-this.atox[this.i3],-this.atoy[this.i3]);
                                                if(this.u > 25)
                                                {
                                                   this.v += this.u * 0.02;
                                                }
                                                if(this.mc2.curwea == -1 && this.i2 == this.MP_myid)
                                                {
                                                   this.v *= 1.5;
                                                }
                                                if(this.MP_mode)
                                                {
                                                   if(this.mens[this.puls[this.i].master].team == this.mens[this.MP_myid].team && this.puls[this.i].master != this.MP_myid)
                                                   {
                                                      this.v *= 0.1;
                                                   }
                                                }
                                                if(this.puls[this.i].master == this.MP_myid)
                                                {
                                                   if(this.mc2.hea > -50)
                                                   {
                                                      ++this.FUN_NICE_BULLETS;
                                                   }
                                                }
                                                if(this.mc2.hea > 0)
                                                {
                                                   this.mc2.lastshot = this.str;
                                                   if(this.puls[this.i].master == this.i2)
                                                   {
                                                      if(this.mc2.whenlastshot < getTimer() - 7000)
                                                      {
                                                         this.mc2.lastshotby = this.puls[this.i].master;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.mc2.lastshotby = this.puls[this.i].master;
                                                   }
                                                   this.mc2.whenlastshot = getTimer();
                                                   this.mc2.lastshotbygun = this.puls[this.i].thisis;
                                                }
                                                _loc12_ = 1;
                                                if(!this.MP_mode)
                                                {
                                                   if(this.LOW_HPS)
                                                   {
                                                      if(this.STRICT_MODE)
                                                      {
                                                         if(this.mc2.team == this.mens[this.MP_myid].team)
                                                         {
                                                            if(this.mc2.hea > -50)
                                                            {
                                                               if(this.mc2.hea > 0)
                                                               {
                                                                  _loc12_ *= 0.2;
                                                               }
                                                               else
                                                               {
                                                                  _loc12_ *= 0.4;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.v < 0.01)
                                                {
                                                   this.v = 0.01;
                                                }
                                                if(this.str == "body")
                                                {
                                                   if(!this.MP_mode || this.MP_myid == this.i2 && !this.MP_spectator || !this.mc2.isplayer)
                                                   {
                                                      if(this.PLAZMA_GAME)
                                                      {
                                                         this.mc2.hp_body -= this.v * 25 * _loc12_;
                                                      }
                                                      this.mc2.hea -= this.v * 25;
                                                      this.ablood[this.mc2.b_body] += this.v * 2;
                                                      this.mc2.stability -= this.v * 0.1 * this.mc2.mobility;
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         if(!this.mc2.dead)
                                                         {
                                                            this.FUN_DAMAGE_MADE += this.v * 25;
                                                         }
                                                      }
                                                      if(this.MP_myid == this.i2)
                                                      {
                                                         this.FUN_DAMAGE_TAKEN += this.v * 25;
                                                      }
                                                   }
                                                }
                                                else if(this.str == "head")
                                                {
                                                   if(!this.MP_mode || this.MP_myid == this.i2 && !this.MP_spectator || !this.mc2.isplayer)
                                                   {
                                                      if(this.PLAZMA_GAME)
                                                      {
                                                         this.mc2.hp_head -= this.v * 25 * _loc12_;
                                                      }
                                                      this.mc2.hea -= this.v * 55;
                                                      this.ablood[this.mc2.b_head_start] += this.v * 4;
                                                      this.mc2.stability -= this.v * 0.19 * this.mc2.mobility;
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         if(!this.mc2.dead)
                                                         {
                                                            ++this.FUN_HEADSHOTS_MADE;
                                                            this.FUN_DAMAGE_MADE += this.v * 55;
                                                         }
                                                      }
                                                      if(this.MP_myid == this.i2)
                                                      {
                                                         this.FUN_DAMAGE_TAKEN += this.v * 55;
                                                      }
                                                   }
                                                }
                                                else if(this.str == "legs")
                                                {
                                                   if(!this.MP_mode || this.MP_myid == this.i2 && !this.MP_spectator || !this.mc2.isplayer)
                                                   {
                                                      if(this.PLAZMA_GAME)
                                                      {
                                                         this.mc2.hp_legs -= this.v * 25 * _loc12_;
                                                      }
                                                      this.mc2.hea -= this.v * 30;
                                                      if(Math.random() > 0.5)
                                                      {
                                                         this.ablood[this.mc2.b_leg1] += this.v * 2;
                                                      }
                                                      else
                                                      {
                                                         this.ablood[this.mc2.b_leg2] += this.v * 2;
                                                      }
                                                      this.mc2.stability -= this.v * 0.15 * this.mc2.mobility;
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         if(!this.mc2.dead)
                                                         {
                                                            this.FUN_DAMAGE_MADE += this.v * 35;
                                                         }
                                                      }
                                                      if(this.MP_myid == this.i2)
                                                      {
                                                         this.FUN_DAMAGE_TAKEN += this.v * 35;
                                                      }
                                                   }
                                                }
                                                else if(this.str == "arms")
                                                {
                                                   if(!this.MP_mode || this.MP_myid == this.i2 && !this.MP_spectator || !this.mc2.isplayer)
                                                   {
                                                      if(this.PLAZMA_GAME)
                                                      {
                                                         this.mc2.hp_arms -= this.v * 25 * _loc12_;
                                                      }
                                                      this.mc2.hea -= this.v * 20;
                                                      if(Math.random() > 0.5)
                                                      {
                                                         this.ablood[this.mc2.b_arm1] += this.v * 2;
                                                      }
                                                      else
                                                      {
                                                         this.ablood[this.mc2.b_arm2] += this.v * 2;
                                                      }
                                                      this.mc2.stability -= this.v * 0.05 * this.mc2.mobility;
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         if(!this.mc2.dead)
                                                         {
                                                            this.FUN_DAMAGE_MADE += this.v * 20;
                                                         }
                                                      }
                                                      if(this.MP_myid == this.i2)
                                                      {
                                                         this.FUN_DAMAGE_TAKEN += this.v * 20;
                                                      }
                                                   }
                                                }
                                                if(!this.mc2.dead)
                                                {
                                                   if(this.mc2.hea <= 0)
                                                   {
                                                      if(this.puls[this.i].master != this.mc2.team)
                                                      {
                                                         this.i5 = 0;
                                                         while(this.i5 < this.playerstotal)
                                                         {
                                                            if(this.i5 != this.i2)
                                                            {
                                                               if(this.mens[this.i5].io)
                                                               {
                                                                  if(this.mens[this.i5].hea > 0)
                                                                  {
                                                                     if(this.mens[this.i5].team == this.mc2.team)
                                                                     {
                                                                        if(this.mens[this.i5].hunt == -1)
                                                                        {
                                                                           if(this.mens[this.i5].x > this.mc2.x - 500)
                                                                           {
                                                                              if(this.mens[this.i5].x < this.mc2.x + 500)
                                                                              {
                                                                                 if(this.mens[this.i5].y > this.mc2.y - 300)
                                                                                 {
                                                                                    if(this.mens[this.i5].y < this.mc2.y + 300)
                                                                                    {
                                                                                       if(this.TraceLine(this.mens[this.i5].x,this.mens[this.i5].y - 50,this.mc2.x,this.mc2.y - 50))
                                                                                       {
                                                                                          if(this.mens[this.i5].last_contact > this.HUNT_LOST)
                                                                                          {
                                                                                             this.Alerted(this.mens[this.i5]);
                                                                                          }
                                                                                          if(this.mens[this.i5].last_contact > this.mc2.last_contact + 10)
                                                                                          {
                                                                                             this.mens[this.i5].last_contact = this.mc2.last_contact + 10;
                                                                                             this.mens[this.i5].hunt = this.mc2.lastshotby;
                                                                                             this.mens[this.i5].tarx = this.puls[this.i].x - this.puls[this.i].spx * 6 - 100 + Math.random() * 200;
                                                                                             this.mens[this.i5].tary = this.puls[this.i].y - this.puls[this.i].spy * 6 - 50 + Math.random() * 100;
                                                                                             if(this.mens[this.i5].enemy_vis_tim > this.mc2.enemy_vis_tim)
                                                                                             {
                                                                                                this.mens[this.i5].enemy_vis_tim = this.mc2.enemy_vis_tim;
                                                                                             }
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                            ++this.i5;
                                                         }
                                                      }
                                                      if(this.mc2.team != this.mens[this.MP_myid].team)
                                                      {
                                                         if(this.puls[this.i].master == this.MP_myid)
                                                         {
                                                            if(this.puls[this.i].thisis == "swords")
                                                            {
                                                               if(this.mc2.dying)
                                                               {
                                                                  this.incBadge(7);
                                                               }
                                                            }
                                                            else if(this.str == "head")
                                                            {
                                                               this.incBadge(2);
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.i2 == this.MP_myid)
                                                {
                                                   this.HurtMyPlayer(-this.puls[this.i].spx,-this.puls[this.i].spy,this.v * 10);
                                                }
                                                if(!this.mens[this.puls[this.i].master].dead)
                                                {
                                                   if(!this.mc2.dead)
                                                   {
                                                      if(!this.mc2.isplayer || !this.MP_mode)
                                                      {
                                                         this.Alerted(this.mc2);
                                                         this.mc2.hunt = this.puls[this.i].master;
                                                         this.mc2.last_contact = 0;
                                                      }
                                                   }
                                                }
                                                this.i4 = 0;
                                                while(this.i4 < this.atotal)
                                                {
                                                   if(this.aof[this.i4] == this.aof[this.i3])
                                                   {
                                                      if(this.aio[this.i4] == true || this.aio[this.i4] == false)
                                                      {
                                                         if(this.i4 == this.i3 || this.Math_pow2(this.ax[this.i4] - this.ax[this.i3]) + this.Math_pow2(this.ay[this.i4] - this.ay[this.i3]) < 900)
                                                         {
                                                            this.atox[this.i4] += this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1);
                                                            this.atoy[this.i4] += this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1);
                                                            this.xx2 = this.ax[this.i4] + this.puls[this.i].spx * Math.sqrt(this.puls[this.i].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.GSPEED;
                                                            this.yy2 = this.ay[this.i4] + this.puls[this.i].spy * Math.sqrt(this.puls[this.i].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.GSPEED;
                                                            if(this.TraceLineF_nopushers(this.ax[this.i4],this.ay[this.i4],this.xx2,this.yy2))
                                                            {
                                                               this.ax[this.i4] = this.xx2;
                                                               this.ay[this.i4] = this.yy2;
                                                            }
                                                            this.WakeUpAtom(this.i4);
                                                         }
                                                      }
                                                   }
                                                   ++this.i4;
                                                }
                                                if(!this.MP_mode || !this.mc2.isplayer)
                                                {
                                                   if(this.HQ && this.SCREEN_EFFECTS)
                                                   {
                                                      if(this.puls[this.i].master == this.MP_myid)
                                                      {
                                                         if(!this.mc2.dead)
                                                         {
                                                            this.whitness.alpha += Math.max(this.puls[this.i].power * 50 / this.mc2.hmax,0.3);
                                                            if(this.mc2.hea <= 0)
                                                            {
                                                               this.whitness.alpha += 0.5;
                                                            }
                                                            this.whitness.visible = true;
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.puls[this.i].cclass == 1 || this.puls[this.i].cclass == 4 || this.puls[this.i].cclass == 5)
                                                {
                                                   this.puls[this.i].visible = false;
                                                }
                                                else
                                                {
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      this.puls[this.i].power = Math.max(0,this.puls[this.i].power * 0.3);
                                                   }
                                                   else
                                                   {
                                                      this.puls[this.i].power = Math.max(0,this.puls[this.i].power * 0.6);
                                                   }
                                                   this.puls[this.i].lastin = this.i2;
                                                   if(this.puls[this.i].power < 0.4)
                                                   {
                                                      this.puls[this.i].visible = false;
                                                   }
                                                }
                                                if(this.aio[this.i3] == false)
                                                {
                                                   this.WakeUpAtom(this.i3);
                                                }
                                                if(this.i2 == this.MP_myid || !this.mc2.isplayer || this.mc2.dead || !this.MP_mode)
                                                {
                                                   this.Hurt(this.i2);
                                                }
                                                if(this.MP_gamestate == 0)
                                                {
                                                   if(this.MP_mode && !this.mc2.isplayer && this.puls[this.i].master == this.MP_myid)
                                                   {
                                                      this.MP_custom_events += ";eh|" + this.i2 + "#" + this.mc2.hea + "#" + this.mc2.hp_head + "#" + this.mc2.hp_body + "#" + this.mc2.hp_arms + "#" + this.mc2.hp_legs;
                                                      _loc2_ = -1;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        if(this.MP_mode)
                        {
                           if(_loc1_ != this.MP_custom_events.length && this.MP_custom_events.indexOf(";gshot|") != -1)
                           {
                              if(_loc2_ == this.mens[this.MP_myid].hea)
                              {
                                 if(_loc2_ > 0)
                                 {
                                    if(this.MP_app || !this.MP_app && _loc2_ < 1000000)
                                    {
                                       this.stable = false;
                                       this.unstable = 3;
                                       this.unstable_m = _loc1_ + " != " + this.MP_custom_events.length + " :: " + _loc2_ + " == " + this.mens[this.MP_myid].hea + " :: " + this.MP_custom_events;
                                    }
                                 }
                              }
                           }
                        }
                        if(this.puls[this.i].cclass == 1)
                        {
                           this.puls[this.i].spx *= Math.pow(1.02,this.thispulspeed);
                           this.puls[this.i].spy *= Math.pow(1.02,this.thispulspeed);
                           if(this.puls[this.i].visible == false)
                           {
                              this.expl_hurt_full = true;
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosion(this.puls[this.i].x - this.puls[this.i].spx * 0.5,this.puls[this.i].y - this.puls[this.i].spy * 0.5,50 * this.puls[this.i].maxpower,5 * this.puls[this.i].maxpower,40 * this.puls[this.i].maxpower,this.puls[this.i].master);
                              }
                              else
                              {
                                 this.PhysicsExplosion(this.rx - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.ry - this.puls[this.i].spy * 0.5 * this.thispulspeed,50 * this.puls[this.i].maxpower,5 * this.puls[this.i].maxpower,40 * this.puls[this.i].maxpower,this.puls[this.i].master);
                              }
                              this.expl_hurt_full = false;
                              this.ExplosionSound(this.puls[this.i].x - this.puls[this.i].spx * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * this.thispulspeed);
                           }
                        }
                        if(this.puls[this.i].cclass == 5)
                        {
                           if(this.puls[this.i].visible == false)
                           {
                              if(this.puls[this.i].currentFrame == 10 || this.puls[this.i].currentFrame == 32 || this.puls[this.i].currentFrame == 22)
                              {
                                 this.expl_hurt_full = true;
                              }
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosionNoSprite(this.puls[this.i].x - this.puls[this.i].spx * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * this.thispulspeed,44 * this.puls[this.i].maxpower,3 * this.puls[this.i].maxpower,35 * this.puls[this.i].maxpower,this.puls[this.i].master);
                                 if(this.puls[this.i].currentFrame == 10)
                                 {
                                    this.Effect(this.puls[this.i].x - this.puls[this.i].spx * 0.5,this.puls[this.i].y - this.puls[this.i].spy * 0.5,11,1,0);
                                 }
                                 if(this.puls[this.i].currentFrame == 32 || this.puls[this.i].currentFrame == 22)
                                 {
                                    this.Effect(this.puls[this.i].x - this.puls[this.i].spx * 0.5,this.puls[this.i].y - this.puls[this.i].spy * 0.5,11,0.25,0);
                                 }
                                 if(this.puls[this.i].currentFrame == 12)
                                 {
                                    this.Effect(this.puls[this.i].x - this.puls[this.i].spx * 0.5,this.puls[this.i].y - this.puls[this.i].spy * 0.5,16,1,0);
                                 }
                              }
                              else
                              {
                                 this.PhysicsExplosionNoSprite(this.rx - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.ry - this.puls[this.i].spy * 0.5 * this.thispulspeed,44 * this.puls[this.i].maxpower,3 * this.puls[this.i].maxpower,35 * this.puls[this.i].maxpower,this.puls[this.i].master);
                                 if(this.puls[this.i].currentFrame == 10)
                                 {
                                    this.Effect(this.rx - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.ry - this.puls[this.i].spy * 0.5 * this.thispulspeed,11,1,0);
                                 }
                                 if(this.puls[this.i].currentFrame == 32 || this.puls[this.i].currentFrame == 22)
                                 {
                                    this.Effect(this.rx - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.ry - this.puls[this.i].spy * 0.5 * this.thispulspeed,11,0.25,0);
                                 }
                                 if(this.puls[this.i].currentFrame == 12)
                                 {
                                    this.Effect(this.rx - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.ry - this.puls[this.i].spy * 0.5 * this.thispulspeed,16,1,0);
                                 }
                              }
                              if(this.puls[this.i].currentFrame == 10 || this.puls[this.i].currentFrame == 32 || this.puls[this.i].currentFrame == 22)
                              {
                                 this.expl_hurt_full = false;
                              }
                              if(this.puls[this.i].currentFrame == 10 || this.puls[this.i].currentFrame == 32 || this.puls[this.i].currentFrame == 22)
                              {
                                 this.PlaySound(this.s_explode_bfg,this.puls[this.i].x,this.puls[this.i].y);
                              }
                              if(this.puls[this.i].currentFrame == 12)
                              {
                                 this.PlaySound(this.s_plasma_explosion,this.puls[this.i].x,this.puls[this.i].y);
                              }
                           }
                           else if(this.puls[this.i].currentFrame == 10)
                           {
                              if(this.puls[this.i].life > 3 / this.thispulspeed)
                              {
                                 this.expl_hurt_full = true;
                                 this.PhysicsExplosionNoSprite(this.puls[this.i].x,this.puls[this.i].y,80,0.5 * this.puls[this.i].maxpower * this.thispulspeed,15 * this.puls[this.i].maxpower * this.thispulspeed,this.puls[this.i].master);
                                 this.expl_hurt_full = false;
                              }
                           }
                        }
                        if(this.puls[this.i].cclass == 4 || this.puls[this.i].cclass == 6)
                        {
                           if(this.puls[this.i].currentFrame == 14)
                           {
                              if(this.puls[this.i].dead)
                              {
                                 this.puls[this.i].visible = false;
                              }
                              if(this.puls[this.i].visible == false)
                              {
                                 this.DisposeAtom(this.puls[this.i].attached);
                                 this.effcolor = -1;
                                 this.FlowAt(this.puls[this.i].x,this.puls[this.i].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
                                 this.FlowAt(this.puls[this.i].x,this.puls[this.i].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
                                 this.FlowAt(this.puls[this.i].x,this.puls[this.i].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
                                 if(Math.random() > 0.5)
                                 {
                                    this.PlaySound(this.s_blood_head,this.puls[this.i].x,this.puls[this.i].y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_blood_head2,this.puls[this.i].x,this.puls[this.i].y);
                                 }
                              }
                              else
                              {
                                 this.puls[this.i].rotation += this.puls[this.i].spx;
                                 this.WakeUpAtom(this.puls[this.i].attached);
                                 if(!this.TracePointNoRagdolls(this.puls[this.i].x,this.puls[this.i].y + 10))
                                 {
                                    if(Math.random() < 0.5 * this.GSPEED)
                                    {
                                       this.i3 = -1;
                                       this.xx = 0;
                                       this.i2 = 0;
                                       while(this.i2 < this.playerstotal)
                                       {
                                          if(this.mens[this.i2].io)
                                          {
                                             if(!this.mens[this.i2].dead)
                                             {
                                                if(this.mens[this.i2].team != this.mens[this.puls[this.i].master].team)
                                                {
                                                   if(this.TraceLine(this.puls[this.i].x,this.puls[this.i].y - 20,this.mens[this.i2].x,this.mens[this.i2].y - 40))
                                                   {
                                                      this.mc2 = this.mens[this.i2];
                                                      this.yy = this.Dist2D(this.puls[this.i].x,this.puls[this.i].y,this.mc2.x,this.mc2.y);
                                                      if(this.i3 == -1 || this.yy < this.xx)
                                                      {
                                                         this.i3 = this.i2;
                                                         this.xx = this.yy;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       if(this.i3 != -1)
                                       {
                                          if(this.xx > 1)
                                          {
                                             this.atox[this.puls[this.i].attached] = (this.mens[this.i3].x - this.puls[this.i].x) / this.xx * 15 * 0.8;
                                             this.atoy[this.puls[this.i].attached] = (this.mens[this.i3].y - this.puls[this.i].y) / this.xx * 15 * 1.3 - 4;
                                             this.PlaySound(this.s_robo_bug_jump,this.puls[this.i].x,this.puls[this.i].y);
                                          }
                                       }
                                       else
                                       {
                                          this.atox[this.puls[this.i].attached] *= 0.5;
                                          this.atoy[this.puls[this.i].attached] *= 0.5;
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.i2 = 0;
                                    while(this.i2 < this.playerstotal)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          if(!this.mens[this.i2].dead)
                                          {
                                             if(this.mens[this.i2].team != this.mens[this.puls[this.i].master].team)
                                             {
                                                if(this.Dist2D(this.puls[this.i].x,this.puls[this.i].y * 0.5,this.mens[this.i2].x,(this.mens[this.i2].y - 40) * 0.5) < 25)
                                                {
                                                   if(this.TraceLine(this.puls[this.i].x,this.puls[this.i].y - 20,this.mens[this.i2].x,this.mens[this.i2].y - 40))
                                                   {
                                                      this.atox[this.puls[this.i].attached] = (this.atox[this.puls[this.i].attached] + this.atox[this.mens[this.i2].b_body] * 3) / 4;
                                                      this.atoy[this.puls[this.i].attached] = (this.atoy[this.puls[this.i].attached] + this.atoy[this.mens[this.i2].b_body] * 3) / 4;
                                                      if(Math.random() < 0.2 * this.GSPEED)
                                                      {
                                                         this.mens[this.i2].hea -= 15 * this.puls[this.i].power;
                                                         this.PlaySound(this.s_blood_hit,this.puls[this.i].x,this.puls[this.i].y);
                                                         this.effcolor = this.i2;
                                                         this.FlowAt(this.puls[this.i].x,this.puls[this.i].y,0,-this.puls[this.i].spx,-this.puls[this.i].spy,2);
                                                         if(this.HQ && this.SCREEN_EFFECTS)
                                                         {
                                                            if(this.puls[this.i].master == this.MP_myid)
                                                            {
                                                               if(!this.mens[this.i2].dead)
                                                               {
                                                                  this.whitness.alpha += 15 * this.puls[this.i].power / this.mens[this.i2].hmax;
                                                                  if(this.mens[this.i2].hea <= 0)
                                                                  {
                                                                     this.whitness.alpha += 0.5;
                                                                  }
                                                                  this.whitness.visible = true;
                                                               }
                                                            }
                                                         }
                                                         this.Hurt(this.i2);
                                                         if(this.i2 == this.MP_myid)
                                                         {
                                                            this.HurtMyPlayer(this.puls[this.i].x - this.mens[this.i2].x,this.puls[this.i].y - this.mens[this.i2].y + 40,15 * this.puls[this.i].power);
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       ++this.i2;
                                    }
                                 }
                              }
                           }
                           else if(this.puls[this.i].visible == false)
                           {
                              this.DisposeAtom(this.puls[this.i].attached);
                              if(this.puls[this.i].cclass == 4)
                              {
                                 this.PhysicsExplosion(this.puls[this.i].x - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * 0.5 * this.thispulspeed,50 * this.puls[this.i].maxpower,5 * this.puls[this.i].maxpower,40 * this.puls[this.i].maxpower,this.puls[this.i].master);
                                 this.ExplosionSound(this.puls[this.i].x - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * 0.5 * this.thispulspeed);
                              }
                              else if(this.puls[this.i].cclass == 6)
                              {
                                 if(this.puls[this.i].nadekind == 1)
                                 {
                                    if(this.MP_mode)
                                    {
                                       this.PhysicsExplosion(this.puls[this.i].x - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * 0.5 * this.thispulspeed,50 * this.puls[this.i].maxpower,5 * this.puls[this.i].maxpower,50 * this.puls[this.i].maxpower,this.puls[this.i].master);
                                    }
                                    else
                                    {
                                       this.PhysicsExplosion(this.puls[this.i].x - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * 0.5 * this.thispulspeed,50 * this.puls[this.i].maxpower,5 * this.puls[this.i].maxpower,100 * this.puls[this.i].maxpower,this.puls[this.i].master);
                                    }
                                    this.ExplosionSound(this.puls[this.i].x - this.puls[this.i].spx * 0.5 * this.thispulspeed,this.puls[this.i].y - this.puls[this.i].spy * 0.5 * this.thispulspeed);
                                 }
                                 if(this.puls[this.i].nadekind == 2)
                                 {
                                    this.PlaySound(this.s_portnade_explode,this.puls[this.i].x,this.puls[this.i].y);
                                    this.mcc = this.mens[this.puls[this.i].master];
                                    if(this.mcc.hea > 0)
                                    {
                                       this.mcc.stability = -1;
                                       this.u = this.ax[this.mcc.b_toe] - this.puls[this.i].x;
                                       this.v = this.ay[this.mcc.b_toe] - this.puls[this.i].y;
                                       this.mcc.tox += this.puls[this.i].spx;
                                       this.mcc.toy += this.puls[this.i].spy;
                                       if(this.puls[this.i].master == this.MP_myid)
                                       {
                                          this.game.x += this.u;
                                          this.game.y += this.v;
                                       }
                                       this.i4 = 0;
                                       while(this.i4 < this.atotal)
                                       {
                                          if(this.aof[this.i4] == this.mcc.idd)
                                          {
                                             this.ax[this.i4] -= this.u;
                                             this.ay[this.i4] -= this.v;
                                             this.atox[this.i4] += this.puls[this.i].spx;
                                             this.atoy[this.i4] += this.puls[this.i].spy;
                                             if(this.GET_LITE_PHYS())
                                             {
                                                this.lax[this.i4] -= this.u;
                                                this.lay[this.i4] -= this.v;
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.mcc.x -= this.u;
                                       this.mcc.y -= this.v;
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.i4 = 0;
                                       while(this.i4 < this.vehiclestotal)
                                       {
                                          if(this.vehicles[this.i4].io)
                                          {
                                             if(this.vehicles[this.i4].master == this.mcc.idd)
                                             {
                                                if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                {
                                                   this.vehicles[this.i4].master = -1;
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       if(this.mcc.incar != -1)
                                       {
                                          PutOutCar(this.mcc.incar);
                                       }
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.puls[this.i].rotation += this.puls[this.i].spx;
                           }
                        }
                        if(this.puls[this.i].cclass == 2)
                        {
                           if(this.puls[this.i].currentFrame != 15)
                           {
                              this.PAlert(this.puls[this.i].x,this.puls[this.i].y);
                              if(this.puls[this.i].visible)
                              {
                                 if(this.puls[this.i].currentFrame == 29)
                                 {
                                    this.Effect(this.puls[this.i].x,this.puls[this.i].y,21,this.puls[this.i].rotation,0);
                                 }
                                 else if(this.puls[this.i].maxpower < 5)
                                 {
                                    this.Effect(this.puls[this.i].x,this.puls[this.i].y,5,this.puls[this.i].rotation,0);
                                 }
                                 else
                                 {
                                    this.Effect(this.puls[this.i].x,this.puls[this.i].y,17,this.puls[this.i].rotation,0);
                                 }
                              }
                              else
                              {
                                 this.Effect(this.puls[this.i].x - this.puls[this.i].spx / 2,this.puls[this.i].y - this.puls[this.i].spy / 2,6,0,0);
                                 this.cx = (this.puls[this.i].maxpower + this.puls[this.i].power) / 2;
                                 this.i2 = 0;
                                 while(this.i2 < Math.sqrt(this.cx) * 2 || this.i2 < 3)
                                 {
                                    this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.cx * 0.03 * Math.random(),-this.puls[this.i].spy * this.cx * 0.03 * Math.random());
                                    ++this.i2;
                                 }
                              }
                           }
                           else if(!this.puls[this.i].visible)
                           {
                              this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].maxpower * 0.03,-this.puls[this.i].spy * this.puls[this.i].maxpower * 0.03);
                              this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].maxpower * 0.03,-this.puls[this.i].spy * this.puls[this.i].maxpower * 0.03);
                              this.Effect(this.puls[this.i].x - this.puls[this.i].spx,this.puls[this.i].y - this.puls[this.i].spy,8,-this.puls[this.i].spx * this.puls[this.i].maxpower * 0.03,-this.puls[this.i].spy * this.puls[this.i].maxpower * 0.03);
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           this.debug_screen.graphics.lineStyle(4,0);
                           this.debug_screen.graphics.moveTo(this.puls[this.i].lx,this.puls[this.i].ly);
                           this.debug_screen.graphics.lineTo(this.puls[this.i].nx,this.puls[this.i].ny);
                           this.debug_screen.graphics.lineStyle(2,65280);
                           this.debug_screen.graphics.moveTo(this.puls[this.i].lx,this.puls[this.i].ly);
                           this.debug_screen.graphics.lineTo(this.puls[this.i].nx,this.puls[this.i].ny);
                        }
                        ++this.i7;
                     }
                  }
                  else
                  {
                     --this.puls[this.i].lag;
                     if(this.puls[this.i].lag <= 0)
                     {
                        this.puls[this.i].lag = 0;
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function Logic_eff_blood(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += param1.framespeed * this.GSPEED;
         if(param1.float_frame > 90)
         {
            param1.visible = false;
         }
         else
         {
            if(param1.float_frame < 6)
            {
               param1.inner_blood_cloud.alpha = 1 - param1.float_frame / 6;
            }
            else if(param1.inner_blood_cloud.visible)
            {
               param1.inner_blood_cloud.visible = false;
            }
            if(param1.float_frame < 20)
            {
               param1.inner_blood_detail1.alpha = 1 - param1.float_frame / 20;
               param1.inner_blood_detail1.x = param1.inner_blood_detail1.y = -6 * (1 - param1.float_frame / 20);
            }
            else if(param1.inner_blood_detail1.visible)
            {
               param1.inner_blood_detail1.visible = false;
            }
            if(param1.float_frame < 15)
            {
               param1.inner_blood_detail2.alpha = 1 - param1.float_frame / 15;
               param1.inner_blood_detail2.y = -8 * (1 - param1.float_frame / 15);
            }
            else if(param1.inner_blood_detail2.visible)
            {
               param1.inner_blood_detail2.visible = false;
            }
            if(param1.float_frame < 20)
            {
               _loc2_ = param1.float_frame / 20;
               param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 2 * (1 - _loc2_) + 1 * _loc2_;
            }
            else if(param1.float_frame < 85)
            {
               if(param1.inner_blood_detail3.scaleY != 1)
               {
                  param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 1;
               }
            }
            else
            {
               param1.inner_blood_detail3.alpha = 1 - (param1.float_frame - 85) / 5;
            }
         }
      }
      
      public function Logic_eff_blood_sprite(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += param1.framespeed * this.GSPEED;
         if(param1.float_frame > 35)
         {
            param1.visible = false;
         }
         else
         {
            _loc2_ = 1 - Math.pow(1 - param1.float_frame / 35,2);
            param1.inner_blood_splat1.scaleX = 0.179 * (1 - _loc2_) + 0.864 * _loc2_;
            param1.inner_blood_splat1.scaleY = 0.179 * (1 - _loc2_) + 1.163 * _loc2_;
            param1.inner_blood_splat1.alpha = 1 - _loc2_;
            if(param1.float_frame < 5)
            {
               _loc2_ = param1.float_frame / 5;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1 - _loc2_ + 1.88 * _loc2_;
               param1.inner_blood_splat2.alpha = 1 - _loc2_ + 0.59 * _loc2_;
            }
            else if(param1.float_frame < 15)
            {
               _loc2_ = (param1.float_frame - 5) / 10;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1.88 * (1 - _loc2_) + 3.11 * _loc2_;
               param1.inner_blood_splat2.alpha = 0.59 * (1 - _loc2_);
            }
            else if(param1.inner_blood_splat2.visible)
            {
               param1.inner_blood_splat2.visible = false;
            }
            if(param1.float_frame < 4)
            {
               _loc2_ = param1.float_frame / 4;
               param1.inner_blood_splat3.scaleX = 0.307 * (1 - _loc2_) + 0.554 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.307 * (1 - _loc2_) + 0.636 * _loc2_;
               param1.inner_blood_splat3.alpha = 1 - _loc2_ + 0.71 * _loc2_;
            }
            else if(param1.float_frame < 4)
            {
               _loc2_ = (param1.float_frame - 4) / 31;
               param1.inner_blood_splat3.scaleX = 0.554 * (1 - _loc2_) + 0.815 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.636 * (1 - _loc2_) + 1.096 * _loc2_;
               param1.inner_blood_splat3.alpha = 0.71 * (1 - _loc2_);
            }
         }
      }
      
      public function EffectsLogic() : void
      {
         var _loc1_:int = 0;
         this.i = 0;
         while(this.i < this.maxef)
         {
            if(this.ef[this.i] != null)
            {
               if(this.ef[this.i].visible)
               {
                  if(this.ef[this.i].typ == 0)
                  {
                     if(this.ef[this.i].framespeed == 2)
                     {
                        if(this.ef[this.i].expl != undefined)
                        {
                           if(this.ef[this.i].expl != null)
                           {
                              if(this.ef[this.i].contains(this.ef[this.i].expl))
                              {
                                 this.MeasureStart(9);
                                 this.ef[this.i].expl.gotoAndStop(Math.min(this.ef[this.i].expl.totalFrames,this.ef[this.i].expl.currentFrame + Math.ceil(this.ef[this.i].framespeed * this.GSPEED)));
                                 this.MeasureStop(9);
                              }
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 1 || this.ef[this.i].typ == 4)
                  {
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                        this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                        this.ef[this.i].toy += this.gravity * this.GSPEED;
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].rotation += this.ef[this.i].toang * this.GSPEED;
                        }
                        else
                        {
                           this.ef[this.i].rotation = -Math.atan2(this.ef[this.i].tox,this.ef[this.i].toy) / Math.PI * 180;
                        }
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].tox *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy -= this.gravity * 1.1 * this.GSPEED;
                           this.ef[this.i].toang = Math.pow(0.9,this.GSPEED);
                        }
                        else
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     if(this.ef[this.i].typ == 1)
                     {
                        this.MeasureStart(10);
                        if(this.ef[this.i].inner_blood_cloud == undefined)
                        {
                           _loc1_ = Math.ceil(this.ef[this.i].framespeed * this.GSPEED);
                           while(_loc1_ > 0)
                           {
                              this.ef[this.i].nextFrame();
                              _loc1_--;
                           }
                        }
                        else
                        {
                           this.Logic_eff_blood(this.ef[this.i]);
                        }
                        this.MeasureStop(10);
                     }
                  }
                  if(this.ef[this.i].typ == 2)
                  {
                     this.ef[this.i].x += -1 + Math.random() * 2;
                     this.ef[this.i].y -= this.gravity * 5;
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ok = true;
                                    break;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                        {
                           if(this.ef[this.i].x > this.boxx[this.i2])
                           {
                              if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                              {
                                 if(this.ef[this.i].y > this.boxy[this.i2])
                                 {
                                    if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                    {
                                       this.ok = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     if(!this.ok)
                     {
                        this.ef[this.i].visible = false;
                     }
                  }
                  if(this.ef[this.i].typ == 3)
                  {
                     this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                     this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     this.ok = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ef[this.i].visible = false;
                                    this.ok = false;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ef[this.i].tox = 0;
                                    this.ef[this.i].toy = 0;
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 5)
                  {
                     this.ok = false;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = true;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].tox *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].toy *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].alpha -= 50 * this.GSPEED;
                        if(this.ef[this.i].alpha < 0)
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                     this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     this.MeasureStart(11);
                     if(this.ef[this.i].inner_blood_splat1 == undefined)
                     {
                        _loc1_ = Math.ceil(this.ef[this.i].framespeed * this.GSPEED);
                        while(_loc1_ > 0)
                        {
                           this.ef[this.i].nextFrame();
                           _loc1_--;
                        }
                     }
                     else
                     {
                        this.Logic_eff_blood_sprite(this.ef[this.i]);
                     }
                     this.MeasureStop(11);
                  }
                  if(this.ef[this.i].typ == 6)
                  {
                     if(Math.abs(this.ef[this.i].x - this.ax[this.mens[this.ef[this.i].attached].b_head_start]) < 200)
                     {
                        if(Math.abs(this.ef[this.i].y - (this.ay[this.mens[this.ef[this.i].attached].b_head_start] - 30)) < 200)
                        {
                           this.ef[this.i].x = (this.ax[this.mens[this.ef[this.i].attached].b_head_start] * this.GSPEED + this.ef[this.i].x * 5) / (5 + this.GSPEED);
                           this.ef[this.i].y = ((this.ay[this.mens[this.ef[this.i].attached].b_head_start] - 30) * this.GSPEED + this.ef[this.i].y * 5) / (5 + this.GSPEED);
                        }
                     }
                     if(this.ef[this.i].totalFrames < 90)
                     {
                        if(this.ef[this.i].currentFrame > 20 + this.ef[this.i].msgtext.text.length * 2)
                        {
                           this.ef[this.i].alpha -= this.GSPEED * 0.1;
                           if(this.ef[this.i].alpha < 0)
                           {
                              this.ef[this.i].visible = false;
                           }
                        }
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function PlayerLogic() : void
      {
         var betterdist:Number = NaN;
         var betteri:int = 0;
         var newdis:Number = NaN;
         this.i = 0;
         while(this.i < this.playerstotal)
         {
            if(this.mens[this.i].io)
            {
               if(this.i == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.mens[this.i].team == this.mens[this.MP_myid].team || this.PRO_BOTS)
               {
                  if(!this.mens[this.i].dying)
                  {
                     if(!this.mens[this.i].dead)
                     {
                        if(this.mens[this.i].hea > 0)
                        {
                           if(this.mens[this.i].regentim * this.thispulspeed < 180 * this.GLOBAL_REGEN_DELAY)
                           {
                              ++this.mens[this.i].regentim;
                           }
                           if(this.mens[this.i].regentim * this.thispulspeed > 30 * this.GLOBAL_REGEN_DELAY)
                           {
                              if(this.mens[this.i].hea < this.mens[this.i].hmax)
                              {
                                 if(!this.ARCADE_GAME_MODE)
                                 {
                                    if(this.mens[this.i].regentim * this.thispulspeed > 60 * this.GLOBAL_REGEN_DELAY)
                                    {
                                       this.mens[this.i].hea = Math.min(this.mens[this.i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[this.i].hmax);
                                    }
                                 }
                                 else if(this.mens[this.i].regentim * this.thispulspeed < 60 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[this.i].hea = Math.min(this.mens[this.i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[this.i].hmax);
                                 }
                                 else if(this.mens[this.i].regentim * this.thispulspeed < 90 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[this.i].hea = Math.min(this.mens[this.i].hea + 2 * this.GLOBAL_REGEN_SPEED,this.mens[this.i].hmax);
                                 }
                                 else
                                 {
                                    this.mens[this.i].hea = Math.min(this.mens[this.i].hea + 4 * this.GLOBAL_REGEN_SPEED,this.mens[this.i].hmax);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(this.mens[this.i].brk_body && (this.ax[this.mens[this.i].b_body] > this.render_minX && this.ax[this.mens[this.i].b_body] < this.render_maxX && this.ay[this.mens[this.i].b_body] > this.render_minY && this.ay[this.mens[this.i].b_body] < this.render_maxY || this.ax[this.mens[this.i].b_toe] > this.render_minX && this.ax[this.mens[this.i].b_toe] < this.render_maxX && this.ay[this.mens[this.i].b_toe] > this.render_minY && this.ay[this.mens[this.i].b_toe] < this.render_maxY) || !this.mens[this.i].brk_body && this.ax[this.mens[this.i].b_body] > this.render_minX && this.ax[this.mens[this.i].b_body] < this.render_maxX && this.ay[this.mens[this.i].b_body] > this.render_minY && this.ay[this.mens[this.i].b_body] < this.render_maxY || this.mens[this.i].x > this.render_minX && this.mens[this.i].x < this.render_maxX && this.mens[this.i].y > this.render_minY && this.mens[this.i].y < this.render_maxY || this.mens[this.i].isplayer || this.mens[this.i].hunt != -1 || !this.mens[this.i].isplayer && this.mens[this.i].botaction == 1 || this.mens[this.i].incar != -1 && this.aactive[-200 - this.mens[this.i].incar])
               {
                  this.aactive[this.i] = true;
                  this.mc = this.mens[this.i];
                  if(this.mc.notspawned)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-7);
                     this.VeriftMP(this.mc.b_toe,-7);
                     this.VeriftMP(this.mc.b_leg1,-7);
                     this.VeriftMP(this.mc.b_leg2,-7);
                     this.VeriftMP(this.mc.b_arm1,-7);
                     this.VeriftMP(this.mc.b_arm2,-7);
                     this.VeriftMP(this.mc.b_head_start,-7);
                     this.VeriftMP(this.mc.b_head_end,-7);
                  }
                  if(this.MP_gamestate != 1 || !this.mc.dead)
                  {
                     if(!this.mc.dead || !this.mc.brk_body && !this.mc.brk_head)
                     {
                        if(this.mc.isplayer)
                        {
                           if(this.mc.mp_controlled)
                           {
                              this.u = this.mens[this.i].mp_x - this.ax[this.mens[this.i].b_toe];
                              this.v = this.mens[this.i].mp_y - this.ay[this.mens[this.i].b_toe];
                              this.u2 = this.mens[this.i].mp_x2 - this.ax[this.mens[this.i].b_body];
                              this.v2 = this.mens[this.i].mp_y2 - this.ay[this.mens[this.i].b_body];
                              this.u += this.mens[this.i].mp_tox * this.mc.mp_time;
                              this.v += this.mens[this.i].mp_toy * this.mc.mp_time;
                              this.u2 += this.mens[this.i].mp_tox2 * this.mc.mp_time;
                              this.v2 += this.mens[this.i].mp_toy2 * this.mc.mp_time;
                              this.xx2 = Math.cos(this.mc.mp_time) * 0.5 + 0.5;
                              this.mc.mp_time += this.GSPEED * 0.2;
                              if(this.mc.mp_time > Math.PI)
                              {
                                 this.mc.mp_controlled = false;
                              }
                              this.xx = this.VectorDist2D(this.u,this.v);
                              if(Boolean(isNaN(this.u)) || Boolean(isNaN(this.v)) || this.u == undefined || this.v == undefined)
                              {
                              }
                              if(this.xx < 200)
                              {
                                 this.xx2 = this.xx2 / 200 * this.xx;
                                 if(this.xx > 5)
                                 {
                                    this.TurnMPBone(this.mens[this.i].b_toe,this.mens[this.i].mp_tox,this.mens[this.i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[this.i].b_leg1,this.mens[this.i].mp_tox,this.mens[this.i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[this.i].b_leg2,this.mens[this.i].mp_tox,this.mens[this.i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[this.i].b_body,this.mens[this.i].mp_tox2,this.mens[this.i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[this.i].b_head_start,this.mens[this.i].mp_tox2,this.mens[this.i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[this.i].b_head_end,this.mens[this.i].mp_tox2,this.mens[this.i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[this.i].b_arm1,this.mens[this.i].mp_tox2,this.mens[this.i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[this.i].b_arm2,this.mens[this.i].mp_tox2,this.mens[this.i].mp_toy2,this.u2,this.v2);
                                 }
                              }
                              else
                              {
                                 this.ax[this.mens[this.i].b_toe] += this.u;
                                 this.ay[this.mens[this.i].b_toe] += this.v;
                                 this.ax[this.mens[this.i].b_body] += this.u;
                                 this.ay[this.mens[this.i].b_body] += this.v;
                                 this.ax[this.mens[this.i].b_head_start] += this.u;
                                 this.ay[this.mens[this.i].b_head_start] += this.v;
                                 this.ax[this.mens[this.i].b_head_end] += this.u;
                                 this.ay[this.mens[this.i].b_head_end] += this.v;
                                 this.ax[this.mens[this.i].b_arm1] += this.u;
                                 this.ay[this.mens[this.i].b_arm1] += this.v;
                                 this.ax[this.mens[this.i].b_arm2] += this.u;
                                 this.ay[this.mens[this.i].b_arm2] += this.v;
                                 this.ax[this.mens[this.i].b_leg1] += this.u;
                                 this.ay[this.mens[this.i].b_leg1] += this.v;
                                 this.ax[this.mens[this.i].b_leg2] += this.u;
                                 this.ay[this.mens[this.i].b_leg2] += this.v;
                                 if(this.mc.b_brk1 != this.mc.b_body)
                                 {
                                    this.ax[this.mens[this.i].b_brk1] += this.u;
                                    this.ay[this.mens[this.i].b_brk1] += this.v;
                                 }
                                 if(this.mc.b_brk2 != this.mc.b_body)
                                 {
                                    this.ax[this.mens[this.i].b_brk2] += this.u;
                                    this.ay[this.mens[this.i].b_brk2] += this.v;
                                 }
                                 if(this.GET_LITE_PHYS())
                                 {
                                    this.lax[this.mens[this.i].b_toe] += this.u;
                                    this.lay[this.mens[this.i].b_toe] += this.v;
                                    this.lax[this.mens[this.i].b_body] += this.u;
                                    this.lay[this.mens[this.i].b_body] += this.v;
                                    this.lax[this.mens[this.i].b_head_start] += this.u;
                                    this.lay[this.mens[this.i].b_head_start] += this.v;
                                    this.lax[this.mens[this.i].b_head_end] += this.u;
                                    this.lay[this.mens[this.i].b_head_end] += this.v;
                                    this.lax[this.mens[this.i].b_arm1] += this.u;
                                    this.lay[this.mens[this.i].b_arm1] += this.v;
                                    this.lax[this.mens[this.i].b_arm2] += this.u;
                                    this.lay[this.mens[this.i].b_arm2] += this.v;
                                    this.lax[this.mens[this.i].b_leg1] += this.u;
                                    this.lay[this.mens[this.i].b_leg1] += this.v;
                                    this.lax[this.mens[this.i].b_leg2] += this.u;
                                    this.lay[this.mens[this.i].b_leg2] += this.v;
                                    if(this.mc.b_brk1 != this.mc.b_body)
                                    {
                                       this.lax[this.mens[this.i].b_brk1] += this.u;
                                       this.lay[this.mens[this.i].b_brk1] += this.v;
                                    }
                                    if(this.mc.b_brk2 != this.mc.b_body)
                                    {
                                       this.lax[this.mens[this.i].b_brk2] += this.u;
                                       this.lay[this.mens[this.i].b_brk2] += this.v;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-6);
                     this.VeriftMP(this.mc.b_toe,-6);
                     this.VeriftMP(this.mc.b_leg1,-6);
                     this.VeriftMP(this.mc.b_leg2,-6);
                     this.VeriftMP(this.mc.b_arm1,-6);
                     this.VeriftMP(this.mc.b_arm2,-6);
                     this.VeriftMP(this.mc.b_head_start,-6);
                     this.VeriftMP(this.mc.b_head_end,-6);
                  }
                  if(this.mc.hea > 0)
                  {
                     this.i2 = 0;
                     while(this.i2 < this.regionstotal)
                     {
                        if(this.regions[this.i2].use_on != 0)
                        {
                           if(this.mc.x > this.regions[this.i2].x)
                           {
                              if(this.mc.x < this.regions[this.i2].x + this.regions[this.i2].w)
                              {
                                 if(this.mc.y - 41 > this.regions[this.i2].y)
                                 {
                                    if(this.mc.y - 41 < this.regions[this.i2].y + this.regions[this.i2].h)
                                    {
                                       if(this.regions[this.i2].use_on == 1 && (this.i == this.MP_myid && this.key_pick && this.mc.incar == -1) || this.regions[this.i2].use_on == 2 && this.mc.incar == -1 || this.regions[this.i2].use_on == 3 && this.mc.incar != -1 || this.regions[this.i2].use_on == 4 || (this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on == 7) && this.mc.isplayer && (!this.MP_mode || this.i == this.MP_myid) && this.mc.hea > 0 || this.regions[this.i2].use_on == 9 && (this.i == this.MP_myid && this.key_pick && this.mc.team == 12 && this.mc.incar == -1) || this.regions[this.i2].use_on == 10 && (this.i == this.MP_myid && this.key_pick && this.mc.team == 13 && this.mc.incar == -1) || this.regions[this.i2].use_on == 13 && (this.i == this.MP_myid && this.mc.team == 12 && this.mc.incar == -1 && this.mc.hea > 0) || this.regions[this.i2].use_on == 14 && (this.i == this.MP_myid && this.mc.team == 13 && this.mc.incar == -1 && this.mc.hea > 0))
                                       {
                                          if(this.regions[this.i2].use_on == 7)
                                          {
                                             this.ok2 = true;
                                             this.i4 = 0;
                                             this.i3 = 0;
                                             while(this.i3 < this.playerstotal)
                                             {
                                                if(this.mens[this.i3].team == this.mc.team)
                                                {
                                                   if(this.mens[this.i3].char == 1 || this.mens[this.i3].char == 3 || this.mens[this.i3].char == 13)
                                                   {
                                                      if(this.mens[this.i3].x > this.regions[this.i2].x && this.mens[this.i3].x < this.regions[this.i2].x + this.regions[this.i2].w && this.mens[this.i3].y - 41 > this.regions[this.i2].y && this.mens[this.i3].y - 41 < this.regions[this.i2].y + this.regions[this.i2].h && !this.mens[this.i3].dying)
                                                      {
                                                         ++this.i4;
                                                      }
                                                      else
                                                      {
                                                         this.ok2 = false;
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                          if(this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on < 6 || this.ok2 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10 || this.regions[this.i2].use_on == 13 || this.regions[this.i2].use_on == 14)
                                          {
                                             if(this.regions[this.i2].use_target != -1)
                                             {
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].play_sound)
                                                   {
                                                      if(Boolean(this.triggers[this.regions[this.i2].use_target].enabledd) && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.PlaySound(this.s_t_switch2,this.regions[this.i2].x + this.regions[this.i2].w / 2,this.regions[this.i2].y + this.regions[this.i2].h / 2);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_t_switch_denied,this.regions[this.i2].x + this.regions[this.i2].w / 2,this.regions[this.i2].y + this.regions[this.i2].h / 2);
                                                      }
                                                   }
                                                   this.key_pick = false;
                                                }
                                                if(this.MP_mode && this.i == this.MP_myid && this.triggers[this.regions[this.i2].use_target].enabledd && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                {
                                                   this.MP_custom_events += ";exec|" + this.regions[this.i2].use_target + "#" + this.i + "#" + this.i2;
                                                }
                                                if(!this.MP_mode || this.regions[this.i2].use_on != 1)
                                                {
                                                   this.TRIGGER_PLAYER_INITIATOR = this.i;
                                                   this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                                   this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                                }
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].mc != undefined)
                                                   {
                                                      if(Boolean(this.triggers[this.regions[this.i2].use_target].enabledd) && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(2);
                                                      }
                                                      else
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(3);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.i == this.MP_myid && !this.MP_half_bot)
                     {
                        if(!this.MP_spectator)
                        {
                           if(this.MP_gamestate != 2)
                           {
                              if(this.key_left)
                              {
                                 this.mc.act_movex = -1;
                              }
                              else if(this.key_right)
                              {
                                 this.mc.act_movex = 1;
                              }
                              else
                              {
                                 this.mc.act_movex = 0;
                              }
                              if(this.key_up)
                              {
                                 this.mc.act_movey = -1;
                              }
                              else if(this.key_down)
                              {
                                 this.mc.act_movey = 1;
                              }
                              else
                              {
                                 this.mc.act_movey = 0;
                              }
                           }
                           else
                           {
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                           }
                           this.mc.tarx = (this.mouse_x - this.game.x) / this.game_scale;
                           this.mc.tary = (this.mouse_y - this.game.y) / this.game_scale;
                           if(this.fire && this.MP_gamestate == 0)
                           {
                              if(this.mc.act_fire == false)
                              {
                                 this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary;
                              }
                              this.mc.act_fire = true;
                           }
                           else
                           {
                              this.mc.act_fire = false;
                           }
                           if(this.mc.act_fire || this.MP_mode || Math.random() > 0.97)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(this.mens[this.i2].io)
                                 {
                                    if(this.mens[this.i2].team != this.mc.team)
                                    {
                                       if(!this.mens[this.i2].dead)
                                       {
                                          if(this.aactive[this.i2])
                                          {
                                             if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.i2].x,this.mens[this.i2].y) < 150)
                                             {
                                                if(this.mc.hunt != this.i2)
                                                {
                                                   this.mc.hunt = -1;
                                                   this.Alerted(this.mc);
                                                   this.mc.hunt = this.i2;
                                                }
                                                this.i2 = this.playerstotal;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                           if(this.mc.hunt != -1)
                           {
                              if(this.mc.hunt >= 0 && this.mc.hunt < this.playerstotal)
                              {
                                 if(this.mens[this.mc.hunt].io)
                                 {
                                    if(this.mens[this.mc.hunt].dead)
                                    {
                                       this.MakeHappy(this.mc);
                                       this.mc.hunt = -1;
                                    }
                                    else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.mc.hunt].x,this.mens[this.mc.hunt].y) > 250)
                                    {
                                       this.mc.hunt = -1;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.botaction != 4)
                     {
                        if(this.MP_gamestate != 2)
                        {
                           if(!this.mc.isplayer || this.MP_myid == this.i && this.MP_half_bot)
                           {
                              if(this.DEBUG_MODE)
                              {
                              }
                              this.mc.act_fire = false;
                              this.bugs = false;
                              this.injured = false;
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                              if(this.mc.team == this.mens[this.MP_myid].team || !this.EASY_MODE)
                              {
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.mc.x,this.mc.y,this.puls[this.i2].x,this.puls[this.i2].y) < 100)
                                                {
                                                   this.bugs = true;
                                                   this.mc.tarx = (this.mc.tarx + this.puls[this.i2].x) / 2;
                                                   this.mc.tary = (this.mc.tary + this.puls[this.i2].y) / 2;
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(this.CASUAL_MODE && this.AUTO_REVIVE || this.mc.team != this.mens[this.MP_myid].team)
                                 {
                                    if(this.mc.hunt == -1 || this.PRO_BOTS && (this.mc.hunt != -1 && this.mens[this.mc.hunt] != this.i))
                                    {
                                       this.i2 = !!this.mc.dying ? this.i : 0;
                                       while(this.i2 < this.playerstotal && !this.injured)
                                       {
                                          if(this.mens[this.i2].io)
                                          {
                                             if(this.mens[this.i2].team == this.mc.team)
                                             {
                                                if(Boolean(this.mens[this.i2].dead) || Boolean(this.mens[this.i2].dying))
                                                {
                                                   if(!this.mens[this.i2].brk_head && !this.mens[this.i2].brk_arms && !this.mens[this.i2].brk_legs && !this.mens[this.i2].brk_body || this.i2 == this.i && (this.mens[this.i].hunt == -1 || this.mens[this.i].hea <= 15))
                                                   {
                                                      if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 400)
                                                      {
                                                         this.ok = true;
                                                         if(this.mc.curwea == -1 || this.guns[this.mc.curwea].stat_class != 7)
                                                         {
                                                            this.i3 = 0;
                                                            while(this.i3 < this.gunstotal && this.ok)
                                                            {
                                                               if(this.guns[this.i3].io)
                                                               {
                                                                  if(!this.guns[this.i3].forcars)
                                                                  {
                                                                     if(this.guns[this.i3].stat_class == 7)
                                                                     {
                                                                        if(this.guns[this.i3].picken_by == this.i)
                                                                        {
                                                                           this.ok = false;
                                                                           this.mc.curwea = this.i3;
                                                                           this.ChangedGun(this.i);
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                               ++this.i3;
                                                            }
                                                         }
                                                         if(this.mc.curwea != -1)
                                                         {
                                                            if(this.guns[this.mc.curwea].stat_class == 7)
                                                            {
                                                               if(this.mc.x < this.ax[this.mens[this.i2].b_body])
                                                               {
                                                                  this.mc.act_movex = 1;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.act_movex = -1;
                                                               }
                                                               this.mc.act_movey = 1;
                                                               if(this.i2 == this.i)
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_leg1]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_leg1] + 20) / 2;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_body]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_body]) / 2;
                                                               }
                                                               if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 100 || this.i2 == this.i)
                                                               {
                                                                  this.mc.act_fire = true;
                                                               }
                                                               this.mens[this.i2].deadtim = 0;
                                                               this.mens[this.i2].alpha = 1;
                                                               this.injured = true;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                    }
                                 }
                              }
                              if(this.bugs || this.injured)
                              {
                                 if(this.bugs)
                                 {
                                    if(this.mc.curwea != -1)
                                    {
                                       this.mc.curwea = -1;
                                       this.ChangedGun(this.i);
                                    }
                                    else if(this.mc.team != this.mens[this.MP_myid].team || Math.random() > 0.95 || this.PRO_BOTS)
                                    {
                                       if(this.injured && Boolean(this.mc.act_fire))
                                       {
                                          this.mc.act_movex = -this.mc.side;
                                       }
                                       else
                                       {
                                          this.mc.act_fire = true;
                                       }
                                    }
                                 }
                                 this.ok = false;
                              }
                              else
                              {
                                 if(this.mc.isplayer && Math.random() > 0.5 || !this.mc.isplayer && Math.random() > 0.92)
                                 {
                                    this.mc.rand = Math.random();
                                    this.mc.rand2 = Math.random();
                                    this.mc.rand3 = Math.random();
                                    if(!this.mc.dying)
                                    {
                                       if(this.mc.curwea != -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) < 100 && this.mc.hunt != -1)
                                       {
                                          this.mc.curwea = -1;
                                          this.ChangedGun(this.i);
                                       }
                                       else if(Math.random() > 0.8 || this.mc.curwea == -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) > 100)
                                       {
                                          this.i2 = 0;
                                          while(this.i2 < this.gunstotal)
                                          {
                                             if(this.guns[this.i2].io)
                                             {
                                                if(this.guns[this.i2].picken_by == this.i)
                                                {
                                                   if(!this.guns[this.i2].forcars)
                                                   {
                                                      if(this.i2 != this.mc.curwea)
                                                      {
                                                         if(this.guns[this.i2].wep > 0)
                                                         {
                                                            if(this.mc.curwea == -1 || this.CalcWepPriority(this.guns[this.mc.curwea]) < this.CalcWepPriority(this.guns[this.i2]))
                                                            {
                                                               this.mc.curwea = this.i2;
                                                               this.ChangedGun(this.i);
                                                               this.i2 = this.gunstotal;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i2;
                                          }
                                       }
                                    }
                                 }
                                 this.ok = true;
                                 if(this.mc.hunt != -1)
                                 {
                                    if(this.mens[this.mc.hunt].io)
                                    {
                                       this.mc2 = this.mens[this.mc.hunt];
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                       this.mc.last_contact += 1;
                                       this.xx = this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc2.b_body],this.ay[this.mc2.b_body]);
                                       if(this.mc.curwea != -1)
                                       {
                                          this.i3 = this.guns[this.mc.curwea].stat_class;
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                       }
                                       if(this.mc2.hea > 0 && this.mc2.stability > 0)
                                       {
                                          if(this.i3 != 2)
                                          {
                                             this.rx = this.mc2.x - 30 + this.mc.rand * 60;
                                             this.ry = this.mc2.y + 10 - this.mc.rand2 * 102;
                                          }
                                          else
                                          {
                                             this.rx = this.mc2.x - 20 + this.mc.rand * 40;
                                             this.ry = this.mc2.y - this.mc.rand2 * 82;
                                          }
                                          if(!this.EASY_MODE || this.i == this.MP_myid)
                                          {
                                             if(this.xx < 270)
                                             {
                                                if(this.mc.rand3 > 0.9)
                                                {
                                                   this.ry = this.mc2.y - 82;
                                                }
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.rx = this.ax[this.mc2.b_body] - 25 + this.mc.rand * 50;
                                          this.ry = this.ay[this.mc2.b_body] - 25 + this.mc.rand2 * 50;
                                       }
                                       if(this.mc2.incar == -1)
                                       {
                                          if(this.i3 == 0)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed;
                                             if(!this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.rx += (this.ax[this.mc.b_arm1] - this.ax[this.mc2.b_body]) / this.xx * 100;
                                                this.ry += (this.ay[this.mc.b_arm1] - this.ay[this.mc2.b_body]) / this.xx * 100;
                                             }
                                          }
                                          if(this.i3 == 1)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed;
                                          }
                                          if(this.i3 == 2)
                                          {
                                          }
                                          if(this.i3 == 4 || this.i3 == 6)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed + (this.ay[this.mc.b_arm1] - this.ay[this.mc2.b_body]) * 0.5 - this.Math_abs(this.ax[this.mc.b_arm1] - this.ax[this.mc2.b_body]) * 0.5;
                                          }
                                       }
                                       if(this.PRO_BOTS && (!this.LOW_HPS || this.FORCE_CUSTOM_MAP || this.MP_mode))
                                       {
                                          this.ok2 = true;
                                       }
                                       else
                                       {
                                          this.ok2 = (this.mc.side == 1 && this.mc.x < this.rx + 100 || this.mc.side == -1 && this.mc.x > this.rx - 100) && (this.mens[this.mc.hunt].alpha > 0.1 || this.mens[this.mc.hunt].incar != -1) && this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.xx < 100 || this.i == this.MP_myid;
                                       }
                                       if(this.mc.enemy_vis_tim > 0 || this.ok2)
                                       {
                                          --this.mc.enemy_vis_tim;
                                          if(this.ok2)
                                          {
                                             this.mc.enemy_vis_tim = 45 / this.thispulspeed;
                                          }
                                          if(this.EASY_MODE && this.i != this.MP_myid)
                                          {
                                             this.mc.tarx = (this.mc.tarx * 13 + this.rx) / 14;
                                             this.mc.tary = (this.mc.tary * 13 + this.ry) / 14;
                                          }
                                          else
                                          {
                                             this.mc.tarx = (this.mc.tarx * 1 + this.rx) / 2;
                                             this.mc.tary = (this.mc.tary * 1 + this.ry) / 2;
                                          }
                                          this.ok = false;
                                       }
                                       else
                                       {
                                          if(this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                          {
                                             this.mc.tarx = (this.mc.tarx * 5 + this.rx) / 6;
                                             this.mc.tary = (this.mc.tary * 5 + this.ry) / 6;
                                          }
                                          if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) > 500)
                                          {
                                             this.mc.tarx = (this.mc.tarx * 10 + this.rx) / 11;
                                             this.mc.tary = (this.mc.tary * 50 + this.ry) / 51;
                                          }
                                          this.mc.act_movey = 1;
                                       }
                                       if((this.mc.curwea != -1 && this.guns[this.mc.curwea].ready || this.mc.arm1.lower.psi.visible) && (!this.mc.dying || !this.EASY_MODE && Math.random() > 0.85 || this.mc.incar != -1) && (this.mc.stability >= -0.1 || !this.EASY_MODE))
                                       {
                                          this.cx = this.mc.rand3 * 200;
                                          if(!this.ok && ((this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.mens[this.mc.hunt].alpha <= 0.1) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1])))
                                          {
                                             this.mc.last_contact = 0;
                                             if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                             {
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 50)
                                                {
                                                   if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                }
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 200)
                                                {
                                                   if(this.Dist2D(this.rx,this.ry,this.mc.x,this.mc.y - 41) < 70)
                                                   {
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                             }
                                             else
                                             {
                                                if(this.xx > 570 / this.game_scale + this.cx && this.EASY_MODE || this.xx > 1400 / this.game_scale)
                                                {
                                                   this.mc.act_fire = false;
                                                }
                                                else if(this.i3 != 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 50 + this.cx * 0.1 || this.i3 == 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 30 || this.xx > 600 / this.game_scale && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 100 + this.cx || this.mens[this.mc.hunt].alpha <= 0.1)
                                                {
                                                   if(this.EASY_MODE && this.i != this.MP_myid)
                                                   {
                                                      if(Math.random() < Math.pow(0.2,this.GSPEED))
                                                      {
                                                         this.mc.act_fire = true;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.mc.tarx = this.rx;
                                                      this.mc.tary = this.ry;
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                                if(this.mc.hea > this.mc.hmax * 0.5)
                                                {
                                                   if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 250 + this.cx)
                                                   {
                                                      if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                      {
                                                         this.mc.act_movex = -1;
                                                      }
                                                      else
                                                      {
                                                         this.mc.act_movex = 1;
                                                      }
                                                   }
                                                }
                                                else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) < 350 + this.cx)
                                                {
                                                   if(this.ax[this.mc.b_arm1] < this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                   if(this.mens[this.mc.hunt].curwea == -1 && !this.mens[this.mc.hunt].dying)
                                                   {
                                                      this.mc.act_movex = -this.mc.act_movex;
                                                   }
                                                }
                                             }
                                          }
                                          else if(this.mc.hea > this.mc.hmax * 0.2 && this.mc.team != this.mens[this.MP_myid].team || this.mc.hea > this.mc.hmax * 0.5)
                                          {
                                             if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100) - this.cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100) + this.cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + 50 + this.cx,this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movex = -1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movex = 1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.mc.sit < 0.5 && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(this.TraceLine(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200) && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200) && this.TraceAllyLine(this.i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200))
                                             {
                                                if(this.mc.rand > 0.5)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                                if(this.mc.rand2 > 0.5)
                                                {
                                                   this.mc.act_movey = -1;
                                                }
                                             }
                                             else if(this.cx > 80)
                                             {
                                                if(this.mc.tarx > this.mc.x)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                             }
                                          }
                                       }
                                       else if(this.mc.curwea != -1)
                                       {
                                          if(this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                          {
                                             if(!this.TraceLine(this.ax[this.mc.b_body] + 30 + this.mc.rand3 * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] - 30 - this.mc.rand3 * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body] + 50,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] - 200,this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] + 200,this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = 1;
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                          this.xx = 0;
                                          if(this.mc2.incar == -1)
                                          {
                                             this.i2 = 0;
                                             while(this.i2 < this.gunstotal)
                                             {
                                                if(this.guns[this.i2].io)
                                                {
                                                   this.mc2 = this.guns[this.i2];
                                                   this.yy = this.Dist2D(this.mc.x,this.mc.y,this.mc2.x,this.mc2.y);
                                                   if(this.yy < 800)
                                                   {
                                                      if(this.mc2.forcars == false)
                                                      {
                                                         if((this.mc2.picken_by == -1 || this.mens[this.mc2.picken_by].hea < 50) && (this.i3 == -1 || this.yy < this.xx) && (this.mc2.command == -1 || this.mc2.command != -1 && this.mc2.command == this.mc.team && (this.mc.isplayer || this.mens[this.MP_myid].team != this.mc.team)))
                                                         {
                                                            if(this.mc.x < this.mc2.x - 20)
                                                            {
                                                               this.mc.act_movex = 1;
                                                            }
                                                            else if(this.mc.x > this.mc2.x + 20)
                                                            {
                                                               this.mc.act_movex = -1;
                                                            }
                                                            else if(this.mc.y > this.mc2.y)
                                                            {
                                                               this.mc.act_movey = -1;
                                                            }
                                                            else
                                                            {
                                                               this.mc.act_movey = 1;
                                                            }
                                                            this.xx = this.yy;
                                                            this.i3 = this.i2;
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i2;
                                             }
                                          }
                                       }
                                       if(Math.random() > 0.5)
                                       {
                                          this.i2 = 0;
                                          while(this.i2 < this.playerstotal)
                                          {
                                             if(this.i2 != this.i)
                                             {
                                                if(this.mens[this.i2].io)
                                                {
                                                   if(this.mens[this.i2].hea > 0)
                                                   {
                                                      if(this.mens[this.i2].team == this.mc.team)
                                                      {
                                                         if(this.mens[this.i2].hunt == -1)
                                                         {
                                                            if(this.mens[this.i2].x > this.mc.x - 500)
                                                            {
                                                               if(this.mens[this.i2].x < this.mc.x + 500)
                                                               {
                                                                  if(this.mens[this.i2].y > this.mc.y - 300)
                                                                  {
                                                                     if(this.mens[this.i2].y < this.mc.y + 300)
                                                                     {
                                                                        if(this.PRO_BOTS || this.TraceLine(this.mens[this.i2].x,this.mens[this.i2].y - 50,this.mc.x,this.mc.y - 50))
                                                                        {
                                                                           if(this.mens[this.i2].last_contact > this.HUNT_LOST)
                                                                           {
                                                                              this.Alerted(this.mens[this.i2]);
                                                                           }
                                                                           if(this.mens[this.i2].last_contact > this.mc.last_contact + 10)
                                                                           {
                                                                              this.mens[this.i2].last_contact = this.mc.last_contact + 10;
                                                                              this.mens[this.i2].hunt = this.mc.hunt;
                                                                              this.mens[this.i2].tarx = this.mc.tarx - 100 + Math.random() * 200;
                                                                              this.mens[this.i2].tary = this.mc.tary - 50 + Math.random() * 100;
                                                                              if(this.mens[this.i2].enemy_vis_tim > this.mc.enemy_vis_tim)
                                                                              {
                                                                                 this.mens[this.i2].enemy_vis_tim = this.mc.enemy_vis_tim;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i2;
                                          }
                                       }
                                       if(this.mc.incar != -1 && !this.vehicles[this.mc.incar].ecosystem)
                                       {
                                          if(this.mc.x < this.mens[this.mc.hunt].x)
                                          {
                                             this.mc.act_movex = 1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = -1;
                                          }
                                       }
                                       if(this.mens[this.mc.hunt].team == this.mc.team)
                                       {
                                          if(this.mc.team == 0 || this.PRO_BOTS)
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                       }
                                       if(this.mc2.dying && (Math.random() > 0.9 && this.mc.team != this.mens[this.MP_myid].team) || !this.mc2.io || this.mc2.hea < -30 || this.mc2.hea <= 0 && this.mc2.incar != -1)
                                       {
                                          if(!this.PRO_BOTS || Boolean(this.mc2.dead))
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             if(Math.random() > 0.5)
                                             {
                                                this.mc.botaction = 2;
                                             }
                                             else
                                             {
                                                this.mc.botaction = 3;
                                             }
                                          }
                                          this.MakeHappy(this.mc);
                                       }
                                       if(this.mc.hunt == this.i)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                       if(this.mc.last_contact > this.HUNT_LOST && !this.PRO_BOTS)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.DEBUG_MODE)
                              {
                              }
                              if(this.ok)
                              {
                                 if(this.mc.botaction == 1 && this.mc.team == this.mens[this.MP_myid].team && this.mens[this.MP_myid].hea > 0)
                                 {
                                    this.xx = this.mens[this.MP_myid].x + this.mc.side * 100;
                                    if(this.mens[this.MP_myid].act_movey == 1 && this.mens[this.MP_myid].side == this.mc.side)
                                    {
                                       this.xx = this.mens[this.MP_myid].x - this.mc.side * 100;
                                    }
                                    if(this.Math_abs(this.mc.x - this.xx) * (Math.sin(this.i) * 0.25 + 0.75) + this.Math_abs(this.mc.y - this.mens[this.MP_myid].y) > 100 || this.Math_abs(this.mc.x - this.mens[this.MP_myid].x) < 30)
                                    {
                                       if(this.mc.inwater)
                                       {
                                          if(this.mc.y > this.mens[this.MP_myid].y)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                       if(this.mc.x > this.xx)
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                    }
                                    else if(!this.mc.inwater)
                                    {
                                       if(this.mens[this.MP_myid].side == this.mc.side)
                                       {
                                          if(this.mens[this.MP_myid].act_movey != 1)
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                    }
                                    if(this.mens[this.MP_myid].hunt != -1 || Boolean(this.mens[this.MP_myid].act_fire))
                                    {
                                       this.mc.tarx = (this.mc.tarx * 3 + this.mens[this.MP_myid].tarx) / 4;
                                       this.mc.tary = (this.mc.tary * 3 + this.mens[this.MP_myid].tary) / 4;
                                    }
                                    else
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -this.mc.randtim;
                                          this.mc.rand3 = Math.random() * 0.95;
                                       }
                                       if(this.mc.randtim == 0)
                                       {
                                          this.mc.randtim = this.mc.side;
                                       }
                                       this.mc.tarx = (this.mc.tarx * 7 + this.mc.x + (this.mc.rand2 * 400 + 200) * this.mc.randtim) / 8;
                                       this.mc.tary = (this.mc.tary * 7 + this.mc.y - 50 + (this.mc.rand3 * 100 - 50)) / 8;
                                    }
                                 }
                                 else if(this.mc.hunt == -1)
                                 {
                                    if(this.mc.botaction == 2 || this.mc.botaction == 3)
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -this.mc.randtim;
                                       }
                                       else
                                       {
                                          if(this.mc.randtim == 0)
                                          {
                                             this.mc.randtim = this.mc.side;
                                          }
                                          this.mc.tarx = (this.mc.tarx * 10 + (this.mc.x + this.mc.randtim * 200)) / 11;
                                          this.mc.tary = (this.mc.tary * 10 + (this.mc.y - 41 + this.mc.rand2 * 100 - 50)) / 11;
                                       }
                                       if(this.mc.botaction == 3)
                                       {
                                          if(!this.TracePoint(this.mc.x + this.mc.side * 50,this.mc.y + 20) || !this.TracePoint(this.mc.x + this.mc.side * 50,this.mc.y + 150))
                                          {
                                             if(this.TracePoint(this.mc.x + this.mc.side * 100,this.mc.y - 40) || this.TracePoint(this.mc.x + this.mc.side * 100,this.mc.y - 100))
                                             {
                                                this.mc.act_movex = this.mc.side;
                                             }
                                          }
                                       }
                                    }
                                    else
                                    {
                                       this.mc.tarx = (this.mc.tarx * 10 + (this.mc.x + this.mc.side * 200)) / 11;
                                       this.mc.tary = (this.mc.tary * 10 + (this.mc.y - 41)) / 11;
                                    }
                                 }
                              }
                              if(this.mc.hunt == -1 || this.mc.act_movex == 0 && this.mc.act_movey == 0 && !this.mc.act_fire)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != this.i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.hea > 0 && !this.mc2.dying)
                                          {
                                             if(this.mc2.x > this.mc.x - this.hscreenX * 1.5 / this.game_scale)
                                             {
                                                if(this.mc2.x < this.mc.x + this.hscreenX * 1.5 / this.game_scale)
                                                {
                                                   if(this.mc2.y > this.mc.y - this.hscreenY * 1.5 / this.game_scale)
                                                   {
                                                      if(this.mc2.y < this.mc.y + this.hscreenY * 1.5 / this.game_scale)
                                                      {
                                                         if(this.mc2.x > this.mc.x - 100 && this.mc.side > 0 || this.mc2.x < this.mc.x + 100 && this.mc.side < 0 || this.PRO_BOTS)
                                                         {
                                                            if(this.mc2.team != this.mc.team)
                                                            {
                                                               if(this.PRO_BOTS || this.TraceLine(this.mc2.x - 25 + Math.random() * 50,this.mc2.y - Math.random() * 82,this.ax[this.mc.b_head_start] - 30 + Math.random() * 60,this.ay[this.mc.b_head_start] - 30 + Math.random() * 60))
                                                               {
                                                                  if(this.mc.hunt == -1)
                                                                  {
                                                                     this.Alerted(this.mc);
                                                                  }
                                                                  this.mc.hunt = this.i2;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                              if(!this.injured)
                              {
                                 this.i4 = 0;
                                 this.i3 = 0;
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != this.i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.io)
                                          {
                                             if(this.mc2.hea > 0 && !this.mc2.dying)
                                             {
                                                if(this.mc2.x > this.mc.x - this.screenX / this.game_scale)
                                                {
                                                   if(this.mc2.x < this.mc.x + this.screenX / this.game_scale)
                                                   {
                                                      if(this.mc2.y > this.mc.y - this.screenY / this.game_scale)
                                                      {
                                                         if(this.mc2.y < this.mc.y + this.screenY / this.game_scale)
                                                         {
                                                            if(this.mc2.team == this.mc.team || this.TraceLine(this.mc2.x - 25,this.mc2.y - 41,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                            {
                                                               if(this.mc2.team != this.mc.team)
                                                               {
                                                                  --this.i4;
                                                                  if(this.i2 != this.mc.hunt)
                                                                  {
                                                                     this.i3 = this.i2;
                                                                  }
                                                               }
                                                               else
                                                               {
                                                                  this.i4 += 1;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(this.i4 < -1)
                                 {
                                    if(this.mc.x > this.mens[this.i3].x)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    else
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    if(this.mc.act_movey == 1)
                                    {
                                       this.mc.act_movey = 0;
                                    }
                                 }
                              }
                              if(this.mc.incar == -1)
                              {
                                 this.ok = true;
                                 this.i4 = -1;
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].master >= 0)
                                             {
                                                if(this.puls[this.i2].cclass == 0 || this.puls[this.i2].cclass == 1 || this.puls[this.i2].cclass == 2)
                                                {
                                                   if((this.puls[this.i2].x > this.mc.x && this.mc.side > 0 || this.puls[this.i2].x < this.mc.x && this.mc.side < 0) && this.TraceLine(this.puls[this.i2].x,this.puls[this.i2].y,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                   {
                                                      if(this.CheckCross(this.puls[this.i2].x,this.puls[this.i2].y,this.puls[this.i2].x + this.puls[this.i2].spx * 10,this.puls[this.i2].y + this.puls[this.i2].spy * 10,this.mc.x,this.mc.y,this.mc.x,this.mc.y - 60,this.i2))
                                                      {
                                                         this.mc.act_movey = -1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                      if(this.CheckCross(this.puls[this.i2].x - this.puls[this.i2].spx * 5,this.puls[this.i2].y - this.puls[this.i2].spy * 5,this.puls[this.i2].x + this.puls[this.i2].spx * 20,this.puls[this.i2].y + this.puls[this.i2].spy * 20,this.mc.x,this.mc.y - 60,this.mc.x,this.mc.y - 102,this.i2))
                                                      {
                                                         this.mc.act_movey = 1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                   }
                                                }
                                                if(this.puls[this.i2].cclass == 4 || this.puls[this.i2].cclass == 6)
                                                {
                                                   if(this.mc.x > this.puls[this.i2].x - 150)
                                                   {
                                                      if(this.mc.x < this.puls[this.i2].x + 150)
                                                      {
                                                         if(this.mc.y > this.puls[this.i2].y - 150)
                                                         {
                                                            if(this.mc.y < this.puls[this.i2].y + 150)
                                                            {
                                                               if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                               {
                                                                  if(this.mc.x > this.puls[this.i2].x)
                                                                  {
                                                                     this.mc.act_movex = 1;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc.act_movex = -1;
                                                                  }
                                                                  if(Math.random() > 0.9)
                                                                  {
                                                                     this.mc.act_movey = -1;
                                                                  }
                                                                  if(!this.mens[this.puls[this.i2].master].dead)
                                                                  {
                                                                     if(this.mc.hunt == -1)
                                                                     {
                                                                        this.Alerted(this.mc);
                                                                        this.mc.hunt = this.puls[this.i2].master;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.mc.hunt == -1)
                                                {
                                                   if(this.Dist2D(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y) < 350)
                                                   {
                                                      if(this.puls[this.i2].x > this.mc.x && this.mc.side == 1 || this.puls[this.i2].x < this.mc.x && this.mc.side == -1)
                                                      {
                                                         if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                         {
                                                            if(!this.mens[this.puls[this.i2].master].dead)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(!this.ok)
                                 {
                                    if(this.i4 >= 0 && this.i4 <= this.pulsmax)
                                    {
                                       if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                       {
                                          if(Math.random() < Math.pow(0.3,this.GSPEED))
                                          {
                                             if(this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.puls[this.i4].x,this.puls[this.i4].y) < 150)
                                             {
                                                this.mc.act_fire = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.TraceLineF(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.act_movex * 100 + this.mc.tox * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(this.TraceLineF(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] + 25,this.ax[this.mc.b_toe] + this.mc.act_movex * 150,this.ay[this.mc.b_toe] + 25))
                                       {
                                          this.mc.act_movey = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = -this.mc.act_movex;
                                          if(this.mc.act_movey == -1)
                                          {
                                             this.mc.act_movey = 0;
                                          }
                                       }
                                    }
                                    if(this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10 + 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10 - 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                    }
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] + 5) || this.Math_abs(this.mc.tox) < 4 && Math.random() > 0.9)
                                       {
                                          if(this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 70) || this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 170))
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = 0;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mc.botaction == 1)
                              {
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(this.mc.x == this.mc.walk_x)
                                       {
                                          if(this.mc.walk_bug == undefined)
                                          {
                                             this.mc.walk_bug = 0;
                                          }
                                          this.mc.walk_bug += this.GSPEED;
                                          if(this.mc.walk_bug > 5)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                       }
                                       else
                                       {
                                          this.mc.walk_bug = 0;
                                          this.mc.walk_x = this.mc.x;
                                       }
                                    }
                                 }
                              }
                              if(this.MP_half_bot)
                              {
                                 if(this.i == this.MP_myid)
                                 {
                                    if(this.fire)
                                    {
                                       this.mc.tarx = (this.mouse_x - this.game.x) / this.game_scale;
                                       this.mc.tary = (this.mouse_y - this.game.y) / this.game_scale;
                                    }
                                    if(this.key_up)
                                    {
                                       this.mc.act_movey = -1;
                                    }
                                    else if(this.key_down)
                                    {
                                       this.mc.act_movey = 1;
                                    }
                                    if(this.key_left)
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    else if(this.key_right)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    if(this.MP_gamestate == 2)
                                    {
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-5);
                     this.VeriftMP(this.mc.b_toe,-5);
                     this.VeriftMP(this.mc.b_leg1,-5);
                     this.VeriftMP(this.mc.b_leg2,-5);
                     this.VeriftMP(this.mc.b_arm1,-5);
                     this.VeriftMP(this.mc.b_arm2,-5);
                     this.VeriftMP(this.mc.b_head_start,-5);
                     this.VeriftMP(this.mc.b_head_end,-5);
                  }
                  if(this.mc.hea <= 0)
                  {
                     if(!this.mc.dead)
                     {
                        if(this.mc.hmax > 0 && (!this.MP_mode || !this.spawn))
                        {
                           this.Say(this.mc,this.dectalk_deaths[Math.floor(Math.random() * this.dectalk_deaths.length)]);
                        }
                        if(this.i == this.MP_myid)
                        {
                           if(this.CASUAL_MODE)
                           {
                              this.ok = true;
                              betterdist = 0;
                              betteri = -1;
                              this.i4 = 0;
                              while(this.i4 < this.playerstotal && this.ok)
                              {
                                 if(this.mens[this.i4].io)
                                 {
                                    if(this.mens[this.i4].team == this.mc.team)
                                    {
                                       if(this.mens[this.i4].hea > 0)
                                       {
                                          if(!this.mens[this.i4].dying)
                                          {
                                             newdis = this.Dist2D(this.mens[this.i4].x,this.mens[this.i4].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y);
                                             if(betteri == -1 || betterdist > newdis)
                                             {
                                                betteri = this.i4;
                                                betterdist = newdis;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(betteri != -1)
                              {
                                 this.ok = false;
                                 this.MP_myid = betteri;
                                 this.GSPEED = 0.01;
                                 this.new_active.visible = true;
                                 this.new_active.gotoAndPlay(1);
                                 this.PlaySound_full(this.s_team_switch);
                                 this.mens[betteri].isplayer = true;
                                 this.mens[this.i].isplayer = false;
                                 this.UpdateWeps();
                              }
                              if(this.ok)
                              {
                                 this.darkness.visible = true;
                                 if(!this.MP_spectator)
                                 {
                                    this.xx = Math.random() * Math.PI * 2;
                                    if(this.MP_mode)
                                    {
                                       this.xx *= 0.1;
                                    }
                                    this.game.x += Math.sin(this.xx) * 200;
                                    this.game.y += Math.cos(this.xx) * 200;
                                 }
                                 if(!this.MP_mode)
                                 {
                                    this.LEVEL_END_FORCE = "failed";
                                    this.LAST_ERROR = "YOUR TEAM IS DEAD.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("Your team is dead.");
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.darkness.visible = true;
                              if(!this.MP_spectator)
                              {
                                 this.xx = Math.random() * Math.PI * 2;
                                 if(this.MP_mode)
                                 {
                                    this.xx *= 0.1;
                                 }
                                 this.game.x += Math.sin(this.xx) * 200;
                                 this.game.y += Math.cos(this.xx) * 200;
                              }
                              if(!this.MP_mode)
                              {
                                 this.LEVEL_END_FORCE = "failed";
                                 if(this.mens[this.MP_myid].lastshotby == this.MP_myid || this.mens[this.MP_myid].lastshotby == -1)
                                 {
                                    this.LAST_ERROR = "BAD LUCK, YOU DIED.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("Try not to kill yourself.");
                                    }
                                 }
                                 else
                                 {
                                    this.LAST_ERROR = "YOU ARE DEAD.";
                                    if(this.HINTS)
                                    {
                                       this.SetHint("You are dead.");
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.hp_legs > 100)
                        {
                           this.mc.hp_legs = 100;
                        }
                        if(this.mc.hp_arms > 100)
                        {
                           this.mc.hp_arms = 100;
                        }
                        if(this.mc.hp_body > 100)
                        {
                           this.mc.hp_body = 100;
                        }
                        if(this.mc.hp_head > 100)
                        {
                           this.mc.hp_head = 100;
                        }
                        if(this.MP_mode && this.MP_myid == this.i)
                        {
                           if(!this.spawn)
                           {
                              if(this.MP_enc_deaths >= 0)
                              {
                                 ++this.MP_enc_deaths;
                              }
                              this.MP_gbd = this.mc.curwea;
                              try
                              {
                                 if(getTimer() - this.mc.whenlastshot > 7000)
                                 {
                                    this.mc.lastshotby = -1;
                                 }
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (1):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              try
                              {
                                 this.MP_custom_events += ";frag|" + this.i + "#" + this.mc.lastshotby + "#" + this.mc.lastshotbygun + "#" + this.mc.lastshot;
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (2):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              if(this.MP_real_deaths == this.MP_enc_deaths - 1)
                              {
                                 this.MP_custom_events += ";dd|" + this.i + "#" + this.r2(this.ax[this.mc.b_leg1]) + "#" + this.r2(this.ay[this.mc.b_leg1]) + "#" + this.r2(this.atox[this.mc.b_leg1]) + "#" + this.r2(this.atoy[this.mc.b_leg1]) + "#" + this.r2(this.ax[this.mc.b_leg2]) + "#" + this.r2(this.ay[this.mc.b_leg2]) + "#" + this.r2(this.atox[this.mc.b_leg2]) + "#" + this.r2(this.atoy[this.mc.b_leg2]) + "#" + this.r2(this.ax[this.mc.b_arm1]) + "#" + this.r2(this.ay[this.mc.b_arm1]) + "#" + this.r2(this.atox[this.mc.b_arm1]) + "#" + this.r2(this.atoy[this.mc.b_arm1]) + "#" + this.r2(this.ax[this.mc.b_arm2]) + "#" + this.r2(this.ay[this.mc.b_arm2]) + "#" + this.r2(this.atox[this.mc.b_arm2]) + "#" + this.r2(this.atoy[this.mc.b_arm2]) + "#" + this.r2(this.ax[this.mc.b_body]) + "#" + this.r2(this.ay[this.mc.b_body]) + "#" + this.r2(this.atox[this.mc.b_body]) + "#" + this.r2(this.atoy[this.mc.b_body]) + "#" + this.r2(this.ax[this.mc.b_toe]) + "#" + this.r2(this.ay[this.mc.b_toe]) + "#" + this.r2(this.atox[this.mc.b_toe]) + "#" + this.r2(this.atoy[this.mc.b_toe]) + "#" + this.r2(this.ax[this.mc.b_head_start]) + "#" + this.r2(this.ay[this.mc.b_head_start]) + "#" + this.r2(this.atox[this.mc.b_head_start]) + "#" + this.r2(this.atoy[this.mc.b_head_start]) + "#" + this.r2(this.ax[this.mc.b_head_end]) + "#" + this.r2(this.ay[this.mc.b_head_end]) + "#" + this.r2(this.atox[this.mc.b_head_end]) + "#" + this.r2(this.atoy[this.mc.b_head_end]) + "#" + this.r2(this.ax[this.mc.b_brk1]) + "#" + this.r2(this.ay[this.mc.b_brk1]) + "#" + this.r2(this.atox[this.mc.b_brk1]) + "#" + this.r2(this.atoy[this.mc.b_brk1]) + "#" + this.r2(this.ax[this.mc.b_brk2]) + "#" + this.r2(this.ay[this.mc.b_brk2]) + "#" + this.r2(this.atox[this.mc.b_brk2]) + "#" + this.r2(this.atoy[this.mc.b_brk2]);
                              }
                              else
                              {
                                 this.MP_enc_deaths = -1;
                              }
                              this.darkness.alpha = 0;
                              this.GCTime();
                           }
                           else
                           {
                              this.mc.alpha = 0;
                              this.spawn = false;
                           }
                        }
                        this.mc.dead = true;
                        if(this.mc.char == 12)
                        {
                           this.mc.alpha = 1;
                        }
                        if(this.mc.hmax > 0)
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team)
                           {
                              ++this.FUN_ELEMINATED;
                              if(this.mc.lastshotby == this.MP_myid)
                              {
                                 this.incBadge(0);
                                 if(this.PRO_BOTS)
                                 {
                                    this.incBadge(19);
                                 }
                                 if(this.mc.lastshotbygun == "swords")
                                 {
                                    this.incBadge(1);
                                    if(this.mc.char == 12)
                                    {
                                       this.incBadge(18);
                                    }
                                 }
                                 if(this.mens[this.MP_myid].dead)
                                 {
                                    this.incBadge(3);
                                 }
                                 else if(this.mens[this.MP_myid].dying)
                                 {
                                    this.incBadge(4);
                                 }
                                 if(!this.mens[this.MP_myid].dead)
                                 {
                                    if(this.mens[this.MP_myid].stability <= 0)
                                    {
                                       this.incBadge(5);
                                    }
                                 }
                              }
                           }
                        }
                        this.mc.dying = true;
                        this.mc.stability = -2;
                        this.mc.arm1.lower.psi.visible = false;
                        this.mc.arm2.lower.psi.visible = false;
                        if(this.mc.ondeath != -1)
                        {
                           this.TRIGGER_PLAYER_INITIATOR = this.i;
                           this.TRIGGER_PLAYER_KILLER = this.mc.lastshotby;
                           this.triggers[this.mc.ondeath].forcehyperjump = false;
                           this.EXEC_TRIGGER(this.mc.ondeath);
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-4);
                     this.VeriftMP(this.mc.b_toe,-4);
                     this.VeriftMP(this.mc.b_leg1,-4);
                     this.VeriftMP(this.mc.b_leg2,-4);
                     this.VeriftMP(this.mc.b_arm1,-4);
                     this.VeriftMP(this.mc.b_arm2,-4);
                     this.VeriftMP(this.mc.b_head_start,-4);
                     this.VeriftMP(this.mc.b_head_end,-4);
                  }
                  if(this.mc.hea > 0 && this.mc.stability > -1)
                  {
                     if(this.i == this.MP_myid && this.key_grab || Boolean(this.mc.brk_arms))
                     {
                        if(this.mc.incar == -1)
                        {
                           if(this.mc.curwea != -1)
                           {
                              this.mc2 = this.guns[this.mc.curwea];
                              this.mc2.picken_by = -1;
                              if(!this.mc.brk_arms)
                              {
                                 this.atox[this.mc2.b_p1] += Math.sin(this.mc.ang) * 7;
                                 this.atoy[this.mc2.b_p1] += Math.cos(this.mc.ang) * 7 - 2;
                                 this.atox[this.mc2.b_p2] += Math.sin(this.mc.ang) * 1;
                                 this.atoy[this.mc2.b_p2] += Math.cos(this.mc.ang) * 1 + 2;
                                 this.ax[this.mc2.b_p1] += this.mc.side * 20;
                                 this.ax[this.mc2.b_p2] += this.mc.side * 20;
                              }
                              this.WakeUpAtom(this.mc2.b_p1);
                              this.WakeUpAtom(this.mc2.b_p2);
                              this.mc.curwea = -1;
                              this.ChangedGun(this.i);
                           }
                        }
                     }
                     if(!this.mc.brk_arms)
                     {
                        if(Boolean(this.mc.act_fire) && this.mc.wep_pause <= 0)
                        {
                           if(this.mc.curwea != -1)
                           {
                              this.mc2 = this.guns[this.mc.curwea];
                              if(this.mc2.ready)
                              {
                                 if(this.mc2.CanShoot == undefined || Boolean(this.mc2.CanShoot()))
                                 {
                                    if(this.mc2.forcars && this.mc.incar != -1 || !this.mc2.forcars && this.mc.incar == -1)
                                    {
                                       this.PAlert(this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                       if(this.mc2.onshot != -1)
                                       {
                                          this.TRIGGER_PLAYER_INITIATOR = this.i;
                                          if(this.i == this.MP_myid)
                                          {
                                             if(this.EXEC_TRIGGER(this.mc2.onshot))
                                             {
                                                if(this.i == this.MP_myid && this.MP_mode)
                                                {
                                                   this.MP_custom_events += ";exec|" + this.mc2.onshot + "#" + this.i + "#" + -1;
                                                }
                                             }
                                          }
                                       }
                                       this.u = (Math.random() * 2 - 1) * this.mc2.av * this.mc2.av * 2;
                                       this.mc2.av += this.mc2.stat_averange_add;
                                       this.i3 = 0;
                                       while(this.i3 < this.mc2.stat_count)
                                       {
                                          if(this.puls[this.pulscur] != null)
                                          {
                                             if(this.game.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.game.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                             else if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                          }
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 5 || this.mc2.stat_class == 2 || this.mc2.stat_bullets == 9)
                                          {
                                             this.puls[this.pulscur] = this.graphics_3d_front.addChildAt(new lazer(),this.graphics_3d_front.numChildren);
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                                          }
                                          if(this.MP_mode && this.mc.isplayer && this.mc2.stat_class != 4)
                                          {
                                             if(this.i == this.MP_myid)
                                             {
                                                this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].lag = -this.MP_ping2 / this.c_sim_rt2;
                                             }
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur].lag = 0;
                                          }
                                          if(this.i == this.MP_myid)
                                          {
                                             ++this.FUN_SPENT_BULLETS;
                                          }
                                          this.NoMouse(this.puls[this.pulscur]);
                                          if(this.mc.stability < 0.5)
                                          {
                                             this.xx = this.u - Math.PI / 2 - this.mc2.rotation / 180 * Math.PI;
                                          }
                                          else
                                          {
                                             this.xx = this.u + this.mc.ang + Math.PI;
                                          }
                                          this.xx += this.mc2.stat_averange / this.mc2.stat_count * this.i3 + Math.random() * this.mc2.stat_averange / this.mc2.stat_count - this.mc2.stat_averange / 2;
                                          this.puls[this.pulscur].attached = -1;
                                          this.puls[this.pulscur].alpha = 0;
                                          this.puls[this.pulscur].thisis = this.mc2.model;
                                          this.puls[this.pulscur].cclass = this.mc2.stat_class;
                                          this.puls[this.pulscur].x = this.ax[this.mc2.b_p2] - this.mc.mp_offset_x;
                                          this.puls[this.pulscur].y = this.ay[this.mc2.b_p2] - this.mc.mp_offset_y;
                                          this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                          this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                          this.puls[this.pulscur].power = this.mc2.stat_power;
                                          this.puls[this.pulscur].maxpower = this.mc2.stat_power;
                                          this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm1];
                                          this.puls[this.pulscur].lastin = this.i;
                                          this.puls[this.pulscur].lastinbox = this.boxestotal;
                                          this.puls[this.pulscur].master = this.i;
                                          this.puls[this.pulscur].gotoAndStop(this.mc2.stat_bullets);
                                          this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                                          this.yy = Math.cos(this.xx);
                                          this.xx = Math.sin(this.xx);
                                          this.x4 = this.mc2.stat_power;
                                          if(this.x4 > 3 / this.mc2.stat_count)
                                          {
                                             this.x4 = 3 / this.mc2.stat_count;
                                          }
                                          this.x4 *= this.mc2.recoil_multiplier;
                                          this.atox[this.mc.b_arm1] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm1] += this.yy * 5 * this.x4 - 3 * this.x4;
                                          this.atox[this.mc.b_arm2] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm2] += this.yy * 5 * this.x4;
                                          this.atox[this.mc.b_body] += this.xx * 2 * this.x4;
                                          this.atoy[this.mc.b_body] += this.yy * 2 * this.x4;
                                          this.atox[this.mc.b_toe] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_toe] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_start] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_start] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_end] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_end] += this.yy * 1 * this.x4;
                                          this.puls[this.pulscur].life = 0;
                                          this.puls[this.pulscur].maxbulletlife = this.maxbulletlife;
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 2)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * this.pspeed;
                                             this.puls[this.pulscur].spy = -this.yy * this.pspeed;
                                             this.puls[this.pulscur].x += this.xx * 25;
                                             this.puls[this.pulscur].y += this.yy * 25;
                                          }
                                          else if(this.mc2.stat_class == 5)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 30;
                                             this.puls[this.pulscur].spy = -this.yy * 30;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.5;
                                          }
                                          else if(this.mc2.stat_class == 1)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 25;
                                             this.puls[this.pulscur].spy = -this.yy * 25;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.4;
                                             if(this.mc2.stat_bullets == 9)
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 35;
                                                this.puls[this.pulscur].spy = -this.yy * 35;
                                                this.puls[this.pulscur].maxbulletlife = 180;
                                             }
                                          }
                                          else if(this.mc2.stat_class == 4 || this.mc2.stat_class == 6)
                                          {
                                             if(this.mc2.stat_bullets == 14)
                                             {
                                                this.puls[this.pulscur].maxbulletlife = 300 + Math.random() * 60;
                                                this.puls[this.pulscur].spx = -this.xx * 19 * (Math.random() * 0.3 + 0.7);
                                                this.puls[this.pulscur].spy = -this.yy * 19 * (Math.random() * 0.3 + 0.7) - 2;
                                                this.puls[this.pulscur].dead = false;
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6,true,10,-1);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 19;
                                                this.puls[this.pulscur].spy = -this.yy * 19;
                                                this.puls[this.pulscur].maxbulletlife = 90;
                                                if(this.mc2.stat_bullets == 19)
                                                {
                                                   this.puls[this.pulscur].nadekind = 3;
                                                   this.puls[this.pulscur].gotoAndStop(19);
                                                   this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                                                   this.puls[this.pulscur].hasexploded = false;
                                                   this.puls[this.pulscur].radius = 0;
                                                   this.puls[this.pulscur].hea = 10;
                                                   this.puls[this.pulscur].heapo = 90;
                                                   this.puls[this.pulscur].losthea = 0;
                                                   this.puls[this.pulscur].spx = this.mc.side * 0.5;
                                                   this.puls[this.pulscur].spy = 4;
                                                }
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6,true,8,-1);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                             }
                                          }
                                          this.nextpul();
                                          ++this.i3;
                                       }
                                       if(this.mc.stability > 0 && (!this.mc.stand || this.mc2.stat_power * this.mc2.stat_count > 5 / this.mc.mobility))
                                       {
                                          this.xx *= this.mc2.recoil_multiplier;
                                          this.yy *= this.mc2.recoil_multiplier;
                                          if(this.mc.sit > 0.5 && Boolean(this.mc.stand))
                                          {
                                             this.mc.tox += this.xx * 0.2 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                             this.mc.toy += this.yy * 0.2 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                          }
                                          else
                                          {
                                             this.mc.tox += this.xx * 0.5 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                             this.mc.toy += this.yy * 0.5 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                          }
                                          if(this.mc2.recoil_multiplier > 0)
                                          {
                                             if(this.mc.stand)
                                             {
                                                if(this.mc.sit > 0.5)
                                                {
                                                   this.mc.stability = Math.max(0.5,this.mc.stability - this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1);
                                                }
                                                else
                                                {
                                                   this.mc.stability = Math.max(0.2,this.mc.stability - this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1);
                                                }
                                             }
                                             else
                                             {
                                                this.mc.stability -= this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1;
                                                if(this.mc.stability <= 0)
                                                {
                                                   this.mc.stability = -1;
                                                }
                                             }
                                          }
                                       }
                                       if(this.mc2.stat_class == 7)
                                       {
                                          this.i3 = 0;
                                          while(this.i3 < this.playerstotal)
                                          {
                                             if(this.mens[this.i3].io)
                                             {
                                                if(this.ax[this.mc.b_arm1] > this.ax[this.mens[this.i3].b_body] - 60)
                                                {
                                                   if(this.ax[this.mc.b_arm1] < this.ax[this.mens[this.i3].b_body] + 60)
                                                   {
                                                      if(this.ay[this.mc.b_arm1] > this.ay[this.mens[this.i3].b_body] - 40)
                                                      {
                                                         if(this.ay[this.mc.b_arm1] < this.ay[this.mens[this.i3].b_body] + 80)
                                                         {
                                                            if(!this.MP_mode || this.i3 == this.MP_myid || !this.mens[this.i3].isplayer)
                                                            {
                                                               if(this.mens[this.i3].team == this.mc.team)
                                                               {
                                                                  if(this.mens[this.i3].hea <= 0 || this.mens[this.i3].dying && this.mens[this.i3].hea > 0)
                                                                  {
                                                                     if(!this.mens[this.i3].dead || !this.MP_app || this.mens[this.i3].defih < 7 || Math.random() * (this.mens[this.i3].defih - 7) < 0.1)
                                                                     {
                                                                        if(this.mens[this.i3].dead)
                                                                        {
                                                                           if(this.MP_mode)
                                                                           {
                                                                              this.mens[this.i3].defih += 1;
                                                                           }
                                                                        }
                                                                        if(!this.mens[this.i3].brk_head)
                                                                        {
                                                                           if(!this.mens[this.i3].brk_body)
                                                                           {
                                                                              if(this.mens[this.i3].brk_legs)
                                                                              {
                                                                                 if(this.mens[this.i3].hea < 5)
                                                                                 {
                                                                                    this.mens[this.i3].hea = 10;
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                    this.mens[this.i3].hea = Math.min(this.mens[this.i3].hea + 15,this.mens[this.i3].hmax / 2);
                                                                                 }
                                                                                 if(this.mens[this.i3].hea > 0)
                                                                                 {
                                                                                    this.mens[this.i3].dead = false;
                                                                                    this.MakeDying(this.mens[this.i3]);
                                                                                    this.ChangedGun(this.i3);
                                                                                 }
                                                                              }
                                                                              else if(this.mens[this.i3].brk_arms)
                                                                              {
                                                                                 if(this.mens[this.i3].hea < 5)
                                                                                 {
                                                                                    this.mens[this.i3].hea = 10;
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                    this.mens[this.i3].hea = Math.min(this.mens[this.i3].hea + 15,this.mens[this.i3].hmax / 2);
                                                                                 }
                                                                                 if(this.mens[this.i3].hea > 0)
                                                                                 {
                                                                                    this.mens[this.i3].dead = false;
                                                                                    this.MakeDying(this.mens[this.i3]);
                                                                                    this.ChangedGun(this.i3);
                                                                                 }
                                                                              }
                                                                              else
                                                                              {
                                                                                 this.mc2 = this.mens[this.i3];
                                                                                 if(this.mc2.dead)
                                                                                 {
                                                                                    this.mc2.stability = 0.01;
                                                                                    this.mc2.sit = 1;
                                                                                    this.mc2.tox = this.atox[this.mc2.b_toe];
                                                                                    this.mc2.toy = this.atoy[this.mc2.b_toe];
                                                                                 }
                                                                                 if(this.mens[this.i3].hea < 5)
                                                                                 {
                                                                                    this.mens[this.i3].hea = 10;
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                    this.mens[this.i3].hea = Math.max(Math.min(this.mens[this.i3].hea + 15,this.mens[this.i3].hmax / 2),this.mens[this.i3].hea);
                                                                                 }
                                                                                 if(this.mens[this.i3].hea > 0)
                                                                                 {
                                                                                    this.mens[this.i3].dead = false;
                                                                                    this.mens[this.i3].dying = false;
                                                                                    this.ChangedGun(this.i3);
                                                                                 }
                                                                                 this.u = this.mc.x - this.ax[this.mc2.b_toe];
                                                                                 this.v = this.mc.y - this.ay[this.mc2.b_toe];
                                                                                 this.u = -this.u;
                                                                                 this.v = -this.v;
                                                                                 this.mc2.x = this.ax[this.mc2.b_toe];
                                                                                 this.mc2.y = this.ay[this.mc2.b_toe];
                                                                              }
                                                                           }
                                                                        }
                                                                        if(Boolean(this.mens[this.i3].isplayer) || this.mens[this.i3].team == this.mens[this.MP_myid].team)
                                                                        {
                                                                           if(this.mens[this.i3].hea > 0)
                                                                           {
                                                                              if(this.ANONYMOUS_MODE)
                                                                              {
                                                                                 if(this.i3 == this.MP_myid)
                                                                                 {
                                                                                    this.mens[this.i3].gui.alpha = 1;
                                                                                    this.mens[this.i3].gui.visible = true;
                                                                                 }
                                                                              }
                                                                              else
                                                                              {
                                                                                 this.mens[this.i3].gui.alpha = 1;
                                                                                 this.mens[this.i3].gui.visible = true;
                                                                              }
                                                                              this.mens[this.i3].hunt = -1;
                                                                           }
                                                                        }
                                                                     }
                                                                     this.atoy[this.mens[this.i3].b_body] -= 8;
                                                                     this.atoy[this.mens[this.i3].b_body] -= 4;
                                                                     this.WakeUpAtom(this.mens[this.i3].b_body);
                                                                  }
                                                               }
                                                               else if(!this.mens[this.i3].dead)
                                                               {
                                                                  this.mens[this.i3].hea -= 30;
                                                                  this.Hurt(this.i3);
                                                                  if(this.mens[this.i3].hea < 200)
                                                                  {
                                                                     this.MakeDying(this.mens[this.i3]);
                                                                  }
                                                                  this.mens[this.i3].lastshot = "body";
                                                                  this.mens[this.i3].lastshotby = this.i;
                                                                  this.mens[this.i3].whenlastshot = getTimer();
                                                                  this.mens[this.i3].lastshotbygun = this.mc2.model;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i3;
                                          }
                                       }
                                       this.mc2.ready = false;
                                       this.mc2.floatframe = 2;
                                       this.mc2.gotoAndStop(2);
                                       if(this.mc2.sou != null)
                                       {
                                          this.PlaySound(this.mc2.sou,this.mc2.x,this.mc2.y);
                                       }
                                    }
                                 }
                              }
                           }
                           if(this.mc.curwea == -1 && this.mc.incar == -1)
                           {
                              if(this.mc.arm1.lower.psi.visible)
                              {
                                 this.xx = this.mc.ang + Math.PI;
                                 this.yy = Math.cos(this.xx);
                                 this.xx = Math.sin(this.xx);
                                 if(!this.mc.stand && this.atoy[this.mc.b_body] < 0 && !this.mc.dying && this.mc.boost > 0)
                                 {
                                    this.xx2 = 0.33;
                                    this.xx2 *= this.mc.boost;
                                    this.mc.boost = Math.max(0,this.mc.boost - 0.45 * this.thispulspeed * this.xx2);
                                    this.xx2 *= 2;
                                    this.xx2 *= Math.min(1,this.mc.mobility);
                                    this.xx *= this.BOOST_MULT;
                                    this.mc.tox -= this.xx * this.xx2 * this.thispulspeed;
                                    this.mc.toy -= this.yy * this.xx2 * this.thispulspeed;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.xx2 *= this.BOOST_LOW_PHYSICS;
                                    }
                                    else
                                    {
                                       this.xx2 *= this.BOOST_HIGH_PHYSICS;
                                    }
                                    this.atox[this.mc.b_body] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_body] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_start] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_start] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_end] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_end] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_arm1] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm1] -= this.yy * this.xx2 * this.thispulspeed;
                                    this.atox[this.mc.b_arm2] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm2] -= this.yy * this.xx2 * this.thispulspeed;
                                 }
                                 this.mc.melee_ani += 0.4 * this.thispulspeed;
                                 this.mc.melee_tim += 0.4 * this.thispulspeed;
                                 if(this.mc.melee_ani > Math.PI * 2)
                                 {
                                    this.mc.melee_ani -= Math.PI * 2;
                                 }
                                 if(this.mc.melee_tim > Math.PI)
                                 {
                                    this.mc.melee_tim = 0;
                                    if(this.last_psi == 1)
                                    {
                                       this.PlaySound(this.s_psi1,this.mc.x,this.mc.y - 50);
                                       if(Math.random() > 0.5)
                                       {
                                          this.last_psi = 2;
                                       }
                                       else
                                       {
                                          this.last_psi = 3;
                                       }
                                    }
                                    else if(this.last_psi == 2)
                                    {
                                       this.PlaySound(this.s_psi2,this.mc.x,this.mc.y - 50);
                                       if(Math.random() > 0.5)
                                       {
                                          this.last_psi = 1;
                                       }
                                       else
                                       {
                                          this.last_psi = 3;
                                       }
                                    }
                                    else
                                    {
                                       this.PlaySound(this.s_psi3,this.mc.x,this.mc.y - 50);
                                       if(Math.random() > 0.5)
                                       {
                                          this.last_psi = 1;
                                       }
                                       else
                                       {
                                          this.last_psi = 2;
                                       }
                                    }
                                    if(this.puls[this.pulscur] != null)
                                    {
                                       if(this.game.contains(this.puls[this.pulscur]))
                                       {
                                          this.game.removeChild(this.puls[this.pulscur]);
                                          this.puls[this.pulscur] = null;
                                       }
                                    }
                                    this.puls[this.pulscur] = this.game.addChildAt(new lazer(),0);
                                    this.NoMouse(this.puls[this.pulscur]);
                                    if(this.MP_mode && this.i == this.MP_myid)
                                    {
                                       this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2 * 2;
                                    }
                                    else
                                    {
                                       this.puls[this.pulscur].lag = 0;
                                    }
                                    this.puls[this.pulscur].life = 0;
                                    this.puls[this.pulscur].thisis = "swords";
                                    this.puls[this.pulscur].maxbulletlife = 6;
                                    this.puls[this.pulscur].cclass = 3;
                                    this.puls[this.pulscur].x = this.ax[this.mc.b_body];
                                    this.puls[this.pulscur].y = this.ay[this.mc.b_body];
                                    this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                    this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                    this.puls[this.pulscur].power = 3.5;
                                    this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2];
                                    this.puls[this.pulscur].alpha = 0;
                                    this.puls[this.pulscur].master = this.i;
                                    this.puls[this.pulscur].gotoAndStop(1);
                                    this.puls[this.pulscur].lastin = this.i;
                                    this.puls[this.pulscur].lastinbox = this.boxestotal;
                                    this.puls[this.pulscur].spx = -this.xx * 10;
                                    this.puls[this.pulscur].spy = -this.yy * 10;
                                    this.nextpul();
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.mc.melee_ani += Math.PI / 2;
                           this.mc.melee_tim = Math.PI * 2 + 1;
                           if(this.mc.wep_pause > 0)
                           {
                              this.mc.wep_pause -= 0.4 * this.thispulspeed;
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-3);
                     this.VeriftMP(this.mc.b_toe,-3);
                     this.VeriftMP(this.mc.b_leg1,-3);
                     this.VeriftMP(this.mc.b_leg2,-3);
                     this.VeriftMP(this.mc.b_arm1,-3);
                     this.VeriftMP(this.mc.b_arm2,-3);
                     this.VeriftMP(this.mc.b_head_start,-3);
                     this.VeriftMP(this.mc.b_head_end,-3);
                  }
                  if(this.mc.y > this.g_maxy)
                  {
                     this.mc.hea = 0;
                     this.mc.lastshot = "body";
                     this.mc.lastshotbygun = "nothing";
                  }
                  if(!this.OpenTop)
                  {
                     if(this.mc.y < this.g_miny || this.mc.x < this.g_minx || this.mc.x > this.g_maxx)
                     {
                        this.mc.hea = 0;
                        this.mc.lastshot = "body";
                        this.mc.lastshotbygun = "nothing";
                     }
                  }
                  this.i2 = 0;
                  while(this.i2 < this.pushstotal)
                  {
                     if(this.mc.x > this.pushx[this.i2] - 150)
                     {
                        if(this.mc.x < this.pushw[this.i2] + 150)
                        {
                           if(this.mc.y > this.pushy[this.i2] - 150)
                           {
                              if(this.mc.y < this.pushh[this.i2] + 240)
                              {
                                 this.cx = Math.min(this.ax[this.mc.b_leg1],Math.min(this.ax[this.mc.b_leg2],Math.min(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.min(this.ax[this.mc.b_toe]))))) - 10;
                                 this.xx = Math.max(this.ax[this.mc.b_leg1],Math.max(this.ax[this.mc.b_leg2],Math.max(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.max(this.ax[this.mc.b_toe]))))) + 10;
                                 this.cy = Math.min(this.ay[this.mc.b_leg1],Math.min(this.ay[this.mc.b_leg2],Math.min(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.min(this.ay[this.mc.b_toe]))))) - 10;
                                 this.yy = Math.max(this.ay[this.mc.b_leg1],Math.max(this.ay[this.mc.b_leg2],Math.max(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.max(this.ay[this.mc.b_toe]))))) + 10;
                                 if(!(this.xx < this.pushx[this.i2] || this.cx > this.pushw[this.i2] || (this.yy < this.pushy[this.i2] || this.cy > this.pushh[this.i2])))
                                 {
                                    this.mc.tox += this.pushtox[this.i2] * this.thispulspeed;
                                    this.mc.toy += this.pushtoy[this.i2] * this.thispulspeed;
                                    this.mc.stability -= this.pushstab[this.i2] * 0.01 * this.thispulspeed;
                                    if(this.pushdamage[this.i2] != 0 && !this.mc.dead)
                                    {
                                       if(!this.MP_mode || this.MP_myid == this.i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= Math.abs(this.pushdamage[this.i2] * this.thispulspeed);
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "nothing";
                                       }
                                       if(this.pushdamage[this.i2] < 0)
                                       {
                                          this.u = this.mc.x - 20 + Math.random() * 40;
                                          this.v = this.mc.y - Math.random() * 80;
                                          if(this.u < this.pushx[this.i2])
                                          {
                                             this.u = this.pushx[this.i2];
                                          }
                                          if(this.u > this.pushw[this.i2])
                                          {
                                             this.u = this.pushw[this.i2];
                                          }
                                          if(this.v < this.pushy[this.i2])
                                          {
                                             this.v = this.pushy[this.i2];
                                          }
                                          if(this.v > this.pushh[this.i2])
                                          {
                                             this.v = this.pushh[this.i2];
                                          }
                                          if(this.mc.hea <= 0)
                                          {
                                             if(this.MP_myid == this.i && !this.CASUAL_MODE || this.mc.team != this.mens[this.MP_myid].team)
                                             {
                                                if(this.mc.hp_body > 0)
                                                {
                                                   this.mc.hp_body = 0;
                                                }
                                             }
                                          }
                                          this.effcolor = this.i;
                                          this.FlowAt(this.u,this.v,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                                       }
                                       if(Math.random() > 0.95 || this.pushdamage[this.i2] < 0)
                                       {
                                          this.Hurt(this.i);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  if(this.mc.hea > 0)
                  {
                     this.mc.x += this.mc.tox * this.thispulspeed;
                     this.mc.y += this.mc.toy * this.thispulspeed;
                     this.mc.toy += this.gravity * this.thispulspeed;
                     this.mc.stand = false;
                     this.hup = false;
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-2);
                        this.VeriftMP(this.mc.b_toe,-2);
                        this.VeriftMP(this.mc.b_leg1,-2);
                        this.VeriftMP(this.mc.b_leg2,-2);
                        this.VeriftMP(this.mc.b_arm1,-2);
                        this.VeriftMP(this.mc.b_arm2,-2);
                        this.VeriftMP(this.mc.b_head_start,-2);
                        this.VeriftMP(this.mc.b_head_end,-2);
                     }
                     if(this.mc.incar == -1)
                     {
                        if(this.mc.stability >= 0)
                        {
                           this.x4 = 0;
                           this.y4 = 0;
                           this.retux = 0;
                           this.retuy = 0;
                           this.rx = 0;
                           this.ry = 0;
                           this.ok3 = true;
                           for each(this.i2 in this.GetNearBoxBSP_at(this.mc.x,this.mc.y - 40))
                           {
                              this.cx = this.boxx[this.i2] - this.PLAYER_WIDTH;
                              this.xx = this.boxx[this.i2] + this.boxw[this.i2] + this.PLAYER_WIDTH;
                              this.cy = this.boxy[this.i2] + this.mc.sit * this.sitmax;
                              this.yy = this.boxy[this.i2] + this.boxh[this.i2] + 82;
                              this.xx2 = this.boxw[this.i2];
                              this.yy2 = this.boxh[this.i2];
                              this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                           }
                           this.ok2 = false;
                           this.i2 = 0;
                           while(this.i2 < this.doorstotal)
                           {
                              this.x4 = this.doors[this.i2].tox;
                              this.y4 = this.doors[this.i2].toy;
                              this.cx = this.doors[this.i2].x - this.PLAYER_WIDTH;
                              this.xx = this.doors[this.i2].x + this.doors[this.i2].w + this.PLAYER_WIDTH;
                              this.cy = this.doors[this.i2].y + this.mc.sit * this.sitmax;
                              this.yy = this.doors[this.i2].y + this.doors[this.i2].h + 82;
                              this.xx2 = this.doors[this.i2].w;
                              this.yy2 = this.doors[this.i2].h;
                              this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              ++this.i2;
                           }
                           if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                           {
                              if(this.retuy == 1 && this.ry == 1 && this.mc.sit < 0.8)
                              {
                                 this.mc.sit = 1;
                              }
                              else
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                           if(this.mc.pressure > 0)
                           {
                              --this.mc.pressure;
                           }
                           this.i2 = 0;
                           while(this.i2 < this.barrelstotal)
                           {
                              this.mc2 = this.barrels[this.i2];
                              if(this.barrels[this.i2].hea > 0)
                              {
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right_bottom]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right_bottom]) / 2;
                                 this.cx = this.mc2.x - 7 - this.PLAYER_WIDTH - this.Math_abs(this.x4) / 2;
                                 this.xx = this.mc2.x + 7 + this.PLAYER_WIDTH + this.Math_abs(this.x4) / 2;
                                 this.cy = this.mc2.y - 15 + this.mc.sit * this.sitmax - this.Math_abs(this.y4) / 2;
                                 this.yy = this.mc2.y + 15 + 82 + this.Math_abs(this.y4) / 2;
                                 this.xx2 = 20;
                                 this.yy2 = 30;
                                 this.ok3 = true;
                                 this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              }
                              else
                              {
                                 this.ok3 = false;
                                 this.xx2 = 20;
                                 this.yy2 = 20;
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right1]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right1]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    this.cx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    this.cy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 - 10 + this.mc.sit * this.sitmax - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 + 10 + 82 - this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                                 this.x4 = (this.atox[this.mc2.b_left_bottom] + this.atox[this.mc2.b_right2]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_bottom] + this.atoy[this.mc2.b_right2]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    this.cx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    this.cy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 - 10 + this.mc.sit * this.sitmax - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 + 10 + 82 + this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                              }
                              ++this.i2;
                           }
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if((this.vehicles[this.i3].typ != 3 || this.vehicles[this.i3].typ == 3 && !this.vehicles[this.i3].dead) && this.vehicles[this.i3].typ != 2)
                                 {
                                    this.ok3 = true;
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 2)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c1;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH + this.Math_abs(this.x4);
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 + this.Math_abs(this.y4);
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       this.i2 = this.vehicles[this.i3].b_c;
                                       this.x4 = this.atox[this.i2];
                                       this.y4 = this.atoy[this.i2];
                                       this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH - this.Math_abs(this.x4);
                                       this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH + this.Math_abs(this.x4);
                                       this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax - this.Math_abs(this.y4);
                                       this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 + this.Math_abs(this.y4);
                                       this.xx2 = this.arad[this.i2] * 2;
                                       this.yy2 = this.arad[this.i2] * 2;
                                       this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                    }
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH + this.Math_abs(this.x4);
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 + this.Math_abs(this.y4);
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p1;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH - this.Math_abs(this.x4) / 2;
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH + this.Math_abs(this.x4) / 2;
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax - this.Math_abs(this.y4) / 2;
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 + this.Math_abs(this.y4) / 2;
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                           if(this.ok2)
                           {
                              if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                        }
                     }
                     this.mc.inwater = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.mc.inwater)
                     {
                        if(this.ax[this.mc.b_toe] > this.wax[this.i2] - 10)
                        {
                           if(this.ax[this.mc.b_toe] < this.wax[this.i2] + this.waw[this.i2] + 10)
                           {
                              if(this.ay[this.mc.b_toe] > this.way[this.i2] - 10)
                              {
                                 if(this.ay[this.mc.b_toe] < this.way[this.i2] + this.wah[this.i2] + 40)
                                 {
                                    this.mc.inwater = true;
                                    if(this.ay[this.mc.b_toe] < this.way[this.i2] + this.mc.sit * this.sitmax + 50 && this.TracePointNoRagdolls(this.ax[this.mc.b_toe],this.way[this.i2] - 10))
                                    {
                                       this.mc.stand = true;
                                    }
                                    else
                                    {
                                       this.mc.stand = false;
                                    }
                                    if(!this.MP_mode || !this.mc.isplayer || this.MP_myid == this.i)
                                    {
                                       if(this.mc.stability > -0.1)
                                       {
                                          this.mc.stability = -0.1;
                                       }
                                    }
                                    if(this.wadamage[this.i2] > 0)
                                    {
                                       if(!this.MP_mode || this.MP_myid == this.i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= this.wadamage[this.i2] * this.thispulspeed;
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "acid";
                                       }
                                       this.mc.regentim = 0;
                                       if(Math.random() > 0.95)
                                       {
                                          this.Hurt(this.i);
                                       }
                                       if(this.i == this.MP_myid)
                                       {
                                          this.HurtMyPlayer(-1,0,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(1,0,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,-1,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,1,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-1);
                        this.VeriftMP(this.mc.b_toe,-1);
                        this.VeriftMP(this.mc.b_leg1,-1);
                        this.VeriftMP(this.mc.b_leg2,-1);
                        this.VeriftMP(this.mc.b_arm1,-1);
                        this.VeriftMP(this.mc.b_arm2,-1);
                        this.VeriftMP(this.mc.b_head_start,-1);
                        this.VeriftMP(this.mc.b_head_end,-1);
                     }
                     if(this.mc.stability > -0.1 && this.mc.isplayer || this.mc.stability >= 0.3 || Boolean(this.mc.inwater))
                     {
                        if(!this.mc.dying)
                        {
                           if(this.mc.tarx > this.mc.x)
                           {
                              this.mc.side = 1;
                           }
                           else
                           {
                              this.mc.side = -1;
                           }
                        }
                     }
                     if(Boolean(this.mc.isplayer) && this.i != this.MP_myid)
                     {
                        if(!this.TraceLineF_nopushers(this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.ax[this.mc.b_p2] - this.mc.mp_offset_x,this.ay[this.mc.b_p2] - this.mc.mp_offset_y))
                        {
                           this.mc.mp_offset_x = 0;
                           this.mc.mp_offset_y = 0;
                        }
                        this.mc.ang = Math.atan2(this.mc.tarx - this.ax[this.mc.b_body] + this.mc.mp_offset_x,this.mc.tary - this.ay[this.mc.b_body] + this.mc.mp_offset_y);
                     }
                     else
                     {
                        this.mc.ang = Math.atan2(this.mc.tarx - this.ax[this.mc.b_body],this.mc.tary - this.ay[this.mc.b_body]);
                     }
                     if(this.mc.stability > 0)
                     {
                        if(this.mc.stability < 0.2)
                        {
                           this.mc.sit = 1;
                           this.mc.x = this.ax[this.mc.b_toe] * (1 - this.mc.stability) + this.mc.x * this.mc.stability;
                           this.mc.y = (this.ay[this.mc.b_toe] + this.mc.sit * this.sitmax + 10) * (1 - this.mc.stability) + this.mc.y * this.mc.stability;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,100);
                           this.VeriftMP(this.mc.b_toe,100);
                           this.VeriftMP(this.mc.b_leg1,100);
                           this.VeriftMP(this.mc.b_leg2,100);
                           this.VeriftMP(this.mc.b_arm1,100);
                           this.VeriftMP(this.mc.b_arm2,100);
                           this.VeriftMP(this.mc.b_head_start,100);
                           this.VeriftMP(this.mc.b_head_end,100);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.playerstotal)
                        {
                           if(this.i2 != this.i)
                           {
                              if(this.mens[this.i2].io)
                              {
                                 this.mc2 = this.mens[this.i2];
                                 if(this.mc2.team != this.mc.team || this.mc.team > 0 || this.mc2.team > 0)
                                 {
                                    if(this.mc2.stability > 0)
                                    {
                                       if(this.mc2.hea > 0)
                                       {
                                          if(this.mc.x > this.mc2.x - 20 - 10)
                                          {
                                             if(this.mc.x < this.mc2.x + 20 + 10)
                                             {
                                                if(this.mc.y > this.mc2.y - 82 + this.mc.sit * this.sitmax)
                                                {
                                                   if(this.mc.y < this.mc2.y - this.mc2.sit * this.sitmax + 82)
                                                   {
                                                      this.cx = this.Math_abs(this.mc2.x - this.mc.x) * 2.5;
                                                      this.cy = this.Math_abs(this.mc2.y - this.mc.y);
                                                      if(this.mc.y < this.mc2.y - 82 + this.mc.sit * this.sitmax + 32)
                                                      {
                                                         this.cx = 0;
                                                         this.cy = 1;
                                                      }
                                                      if(this.cx > this.cy)
                                                      {
                                                         this.u = (this.mc.x + this.mc2.x) / 2;
                                                         this.v = (this.mc.tox * this.mc.mobility + this.mc2.tox * this.mc2.mobility) / (this.mc.mobility + this.mc2.mobility);
                                                         if(this.mc.x < this.mc2.x)
                                                         {
                                                            this.mc.x = this.u - 15;
                                                            this.mc2.x = this.u + 15;
                                                            this.mc.tox = this.v - 0.1;
                                                            this.mc2.tox = this.v + 0.1;
                                                         }
                                                         else
                                                         {
                                                            this.mc2.x = this.u - 15;
                                                            this.mc.x = this.u + 15;
                                                            this.mc2.tox = this.v - 0.1;
                                                            this.mc.tox = this.v + 0.1;
                                                         }
                                                      }
                                                      else
                                                      {
                                                         this.u = (this.mc.y - (82 - this.mc.sit * this.sitmax) / 2 + this.mc2.y - (82 - this.mc2.sit * this.sitmax) / 2) / 2;
                                                         this.v = (this.mc.toy * this.mc.mobility + this.mc2.toy * this.mc2.mobility) / (this.mc.mobility + this.mc2.mobility);
                                                         if(this.mc.y < this.mc2.y)
                                                         {
                                                            if(this.mc.toy >= this.mc2.toy)
                                                            {
                                                               this.mc.y = this.u + this.mc.sit * this.sitmax / 2;
                                                               if(!this.mc2.stand)
                                                               {
                                                                  this.mc2.y = this.u + 82 - this.mc.sit * this.sitmax / 2;
                                                               }
                                                               this.mc.toy = this.v;
                                                               this.mc2.toy = this.v;
                                                               if(!this.mc.stand)
                                                               {
                                                                  this.mc.stand = true;
                                                                  this.x4 = this.mc2.tox;
                                                                  this.mc.tox += (this.x4 / 6 - this.mc.tox * 1 / 6) * this.thispulspeed;
                                                                  if(this.mc.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc.tox -= 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else if(this.mc.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc.tox += 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc.tox = this.x4;
                                                                  }
                                                               }
                                                            }
                                                         }
                                                         else if(this.mc.toy <= this.mc2.toy)
                                                         {
                                                            this.mc2.y = this.u + this.mc2.sit * this.sitmax / 2;
                                                            if(!this.mc.stand)
                                                            {
                                                               this.mc.y = this.u + 82 - this.mc2.sit * this.sitmax / 2;
                                                            }
                                                            this.mc2.toy = this.v;
                                                            this.mc.toy = this.v;
                                                            if(!this.mc2.stand)
                                                            {
                                                               this.mc2.stand = true;
                                                               this.x4 = this.mc.tox;
                                                               this.mc2.tox += (this.x4 / 6 - this.mc2.tox * 1 / 6) * this.thispulspeed;
                                                               if(this.mc2.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                               {
                                                                  this.mc2.tox -= 0.5 * 3 * this.thispulspeed;
                                                               }
                                                               else if(this.mc2.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                               {
                                                                  this.mc2.tox += 0.5 * 3 * this.thispulspeed;
                                                               }
                                                               else
                                                               {
                                                                  this.mc2.tox = this.x4;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,110);
                           this.VeriftMP(this.mc.b_toe,110);
                           this.VeriftMP(this.mc.b_leg1,110);
                           this.VeriftMP(this.mc.b_leg2,110);
                           this.VeriftMP(this.mc.b_arm1,110);
                           this.VeriftMP(this.mc.b_arm2,110);
                           this.VeriftMP(this.mc.b_head_start,110);
                           this.VeriftMP(this.mc.b_head_end,110);
                        }
                        if(this.mc.tox * this.mc.tox + this.mc.toy * this.mc.toy > 400)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= Math.pow(0.9,this.thispulspeed);
                           }
                           this.mc.stability -= 0.05 * this.thispulspeed;
                        }
                        if(this.mc.act_movey == 1 || !this.mc.stand && (!this.MP_mode || (this.MP_myid != this.i || !this.mc.isplayer)) || this.hup)
                        {
                           if(this.mc.sit < 1)
                           {
                              this.mc.sit += this.gravity / this.sitmax * this.thispulspeed * 5;
                              if(this.mc.stand)
                              {
                                 if(this.mc.stability >= 0)
                                 {
                                    this.mc.y += this.gravity * this.thispulspeed * 5;
                                 }
                              }
                           }
                           if(this.mc.sit > 1)
                           {
                              this.mc.sit = 1;
                           }
                        }
                        else
                        {
                           if(this.mc.sit > 0)
                           {
                              this.mc.sit -= 0.3 * this.thispulspeed;
                           }
                           if(this.mc.sit < 0)
                           {
                              this.mc.sit = 0;
                           }
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,120);
                           this.VeriftMP(this.mc.b_toe,120);
                           this.VeriftMP(this.mc.b_leg1,120);
                           this.VeriftMP(this.mc.b_leg2,120);
                           this.VeriftMP(this.mc.b_arm1,120);
                           this.VeriftMP(this.mc.b_arm2,120);
                           this.VeriftMP(this.mc.b_head_start,120);
                           this.VeriftMP(this.mc.b_head_end,120);
                        }
                        this.mc.waiting += 0.1;
                        if(this.mc.waiting > Math.PI * 2)
                        {
                           this.mc.waiting -= Math.PI * 2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,121);
                           this.VeriftMP(this.mc.b_toe,121);
                           this.VeriftMP(this.mc.b_leg1,121);
                           this.VeriftMP(this.mc.b_leg2,121);
                           this.VeriftMP(this.mc.b_arm1,121);
                           this.VeriftMP(this.mc.b_arm2,121);
                           this.VeriftMP(this.mc.b_head_start,121);
                           this.VeriftMP(this.mc.b_head_end,121);
                        }
                        this.TurnBone(this.mc.b_toe,this.mc.x,this.mc.y - 31 - 3,this.mc,0.2 + 0.6 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,122);
                           this.VeriftMP(this.mc.b_toe,122);
                           this.VeriftMP(this.mc.b_leg1,122);
                           this.VeriftMP(this.mc.b_leg2,122);
                           this.VeriftMP(this.mc.b_arm1,122);
                           this.VeriftMP(this.mc.b_arm2,122);
                           this.VeriftMP(this.mc.b_head_start,122);
                           this.VeriftMP(this.mc.b_head_end,122);
                        }
                        this.TurnBone(this.mc.b_body,this.ax[this.mc.b_toe] + this.mc.tox * 1 + Math.sin(this.mc.waiting),this.mc.y - 31 - 3 - this.normal_spine_length + this.normal_shoulder_length + this.mc.sit * 7,this.mc,0.1 + 0.6 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,123);
                           this.VeriftMP(this.mc.b_toe,123);
                           this.VeriftMP(this.mc.b_leg1,123);
                           this.VeriftMP(this.mc.b_leg2,123);
                           this.VeriftMP(this.mc.b_arm1,123);
                           this.VeriftMP(this.mc.b_arm2,123);
                           this.VeriftMP(this.mc.b_head_start,123);
                           this.VeriftMP(this.mc.b_head_end,123);
                        }
                        if(this.mc.act_fire)
                        {
                           this.xx = 2;
                        }
                        else
                        {
                           this.xx = 0;
                        }
                        this.TurnBone(this.mc.b_head_start,this.ax[this.mc.b_body] + this.mc.tox * 0.3 + this.mc.side * this.xx,this.ay[this.mc.b_body] - this.normal_shoulder_length,this.mc,0.1 + 0.8 * this.mc.stability);
                        this.TurnBone(this.mc.b_head_end,this.ax[this.mc.b_body] + this.mc.tox * 0.3 - Math.sin(this.mc.ang - Math.PI / 2) * this.mc.side * 5 + this.mc.side * this.xx,this.ay[this.mc.b_body] - this.normal_shoulder_length - 9 - Math.cos(this.mc.ang - Math.PI / 2) * 5 * this.mc.side,this.mc,0.1 + 0.8 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,1);
                           this.VeriftMP(this.mc.b_toe,1);
                           this.VeriftMP(this.mc.b_leg1,1);
                           this.VeriftMP(this.mc.b_leg2,1);
                           this.VeriftMP(this.mc.b_arm1,1);
                           this.VeriftMP(this.mc.b_arm2,1);
                           this.VeriftMP(this.mc.b_head_start,1);
                           this.VeriftMP(this.mc.b_head_end,1);
                        }
                        if(this.mc.act_movex == 1)
                        {
                           this.mc.moving_speed = 1 * Math.min((this.mc.mobility + 1) / 2,2);
                        }
                        else if(this.mc.act_movex == -1)
                        {
                           this.mc.moving_speed = -1 * Math.min((this.mc.mobility + 1) / 2,2);
                        }
                        else
                        {
                           this.mc.moving_speed = 0;
                        }
                        if(this.mc.curwea == -1 && Boolean(this.mc.isplayer))
                        {
                           this.mc.moving_speed *= 1.1;
                        }
                        if(this.mc.stability < 0.5)
                        {
                           this.mc.moving_speed *= 0.4;
                        }
                        if(this.mc.stand)
                        {
                           if(this.mc.moving_speed == 0)
                           {
                              this.mc.idle_phase += Math.sin(this.mc.idle_phase - 0.3) * 0.5;
                           }
                           if(this.mc.sit == 0)
                           {
                              this.xx = (1 - this.mc.stability) * 10;
                              this.TurnBone(this.mc.b_leg1,this.mc.x + this.xx + Math.sin(this.mc.idle_phase) * 13,this.mc.y - 3 + Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(this.mc.moving_speed) * 2 - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                              this.TurnBone(this.mc.b_leg2,this.mc.x - this.xx - Math.sin(this.mc.idle_phase) * 13,this.mc.y - 3 - Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(this.mc.moving_speed) * 2 - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                           }
                           else
                           {
                              this.i3 = this.mc.b_leg2;
                              this.i2 = this.mc.b_leg1;
                              if(this.ax[this.mc.b_leg1] * this.mc.side > this.ax[this.mc.b_leg2] * this.mc.side)
                              {
                                 this.i3 = this.mc.b_leg1;
                                 this.i2 = this.mc.b_leg2;
                              }
                              if(this.mc.act_movex == 0)
                              {
                                 this.TurnBone(this.i3,this.mc.x + this.mc.side * 15,this.mc.y - 3 - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                                 this.TurnBone(this.i2,this.mc.x - this.mc.side * 15,this.mc.y - 3 - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                              }
                              else
                              {
                                 this.TurnBone(this.i3,this.mc.x + Math.sin(this.mc.idle_phase) * 10 + this.mc.side * 10,this.mc.y - 3 + Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(this.mc.moving_speed) - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                                 this.TurnBone(this.i2,this.mc.x - Math.sin(this.mc.idle_phase) * 10 - this.mc.side * 5,this.mc.y - 3 - Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(this.mc.moving_speed) - this.mc.sit * this.sitmax,this.mc,0.4 + 0.2 * this.mc.stability);
                              }
                           }
                           if(this.mc.act_movey == -1 && !this.hup)
                           {
                              this.mc.toy = -8 * this.mc.stability * Math.min((this.mc.mobility + 1) / 2,2);
                              --this.mc.y;
                              if(this.mc.curwea == -1 && this.i == this.MP_myid)
                              {
                                 this.mc.toy -= 2;
                              }
                              if(this.mc.moving_speed > 0 && this.mc.tox > 0.3 || this.mc.moving_speed < 0 && this.mc.tox < -0.3)
                              {
                                 this.mc.tox += this.mc.moving_speed;
                              }
                              this.TurnBone(this.mc.b_leg1,this.mc.x - this.mc.tox - 5,this.mc.y,this.mc,this.mc.stability);
                              this.TurnBone(this.mc.b_leg2,this.mc.x - this.mc.tox + 5,this.mc.y,this.mc,this.mc.stability);
                           }
                           if(this.mc.moving_speed != 0)
                           {
                              this.mc.idle_phase -= 0.2 * (2 - this.mc.sit * 0.75) * this.mc.moving_speed * this.thispulspeed;
                              this.mc.tox += this.mc.moving_speed * (2 - this.mc.sit * 0.75) / 2 * 3 * this.thispulspeed;
                              this.mc.step_sound_phase -= 0.2 * (2 - this.mc.sit * 0.75) * this.mc.moving_speed * this.thispulspeed;
                              if(this.mc.step_sound_phase > Math.PI || this.mc.step_sound_phase < -Math.PI)
                              {
                                 if(this.mc.step_sound_phase > 0)
                                 {
                                    this.mc.step_sound_phase -= Math.PI;
                                 }
                                 else
                                 {
                                    this.mc.step_sound_phase += Math.PI;
                                 }
                                 if(this.mc.sit == 0)
                                 {
                                    this.i3 = int(Math.random() * 4);
                                    if(this.mc.armored == 2)
                                    {
                                       if(this.i3 == 0)
                                       {
                                          this.PlaySound(this.s_robo_step1,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 1)
                                       {
                                          this.PlaySound(this.s_robo_step2,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 2)
                                       {
                                          this.PlaySound(this.s_robo_step3,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 3)
                                       {
                                          this.PlaySound(this.s_robo_step4,this.mc.x,this.mc.y);
                                       }
                                    }
                                    else if(this.i3 == 0)
                                    {
                                       this.PlaySound(this.s_step1,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 1)
                                    {
                                       this.PlaySound(this.s_step2,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 2)
                                    {
                                       this.PlaySound(this.s_step3,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 3)
                                    {
                                       this.PlaySound(this.s_step4,this.mc.x,this.mc.y);
                                    }
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.u = (Number(this.mc.tox) * 2 + this.mc.tox * 3) * (this.mc.toy + 5) * 0.1;
                           this.v = -15 + (this.mc.toy + 5) * 2 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg1,this.mc.x + this.u,this.mc.y - 31 + this.v,this.mc,0.8 * this.mc.stability);
                           this.u = (-this.mc.tox * 1 + this.mc.tox * 3) * this.mc.toy * 0.1;
                           this.v = -10 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg2,this.mc.x + this.u,this.mc.y - 31 + this.v,this.mc,0.8 * this.mc.stability);
                           if(this.mc.tox * this.mc.moving_speed < 3)
                           {
                              this.mc.tox += this.mc.moving_speed * 0.4 * this.thispulspeed;
                           }
                        }
                     }
                     else
                     {
                        this.mc.x = this.ax[this.mc.b_toe];
                        this.mc.y = (this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2;
                        this.mc.sit = 1;
                        this.mc.tox = this.atox[this.mc.b_toe];
                        this.mc.toy = this.atoy[this.mc.b_toe];
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,2);
                        this.VeriftMP(this.mc.b_toe,2);
                        this.VeriftMP(this.mc.b_leg1,2);
                        this.VeriftMP(this.mc.b_leg2,2);
                        this.VeriftMP(this.mc.b_arm1,2);
                        this.VeriftMP(this.mc.b_arm2,2);
                        this.VeriftMP(this.mc.b_head_start,2);
                        this.VeriftMP(this.mc.b_head_end,2);
                     }
                     if(this.mc.hea > 0)
                     {
                        if(this.mc.dying)
                        {
                           if(this.mc.inwater)
                           {
                              if(Math.random() > 0.8)
                              {
                                 this.Effect(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],2,0,0);
                              }
                           }
                           if(this.mc.isplayer)
                           {
                              this.mc.hea -= 0.1 * this.thispulspeed;
                              if(this.MP_gamestate != 0)
                              {
                                 if(this.MP_type == 3)
                                 {
                                    if(this.mc.hea < 1)
                                    {
                                       this.mc.hea = 1;
                                    }
                                 }
                              }
                           }
                           else if(this.mc.team == this.mens[this.MP_myid].team)
                           {
                              if(this.mc.x < this.mens[this.MP_myid].x - 600 || this.mc.x > this.mens[this.MP_myid].x + 600 || this.mc.y < this.mens[this.MP_myid].y - 600 || this.mc.y > this.mens[this.MP_myid].y + 600)
                              {
                                 this.mc.hea -= 0.01 * this.thispulspeed;
                              }
                           }
                           else
                           {
                              this.mc.hea -= 0.05 * this.thispulspeed;
                           }
                           if(this.mc.stability > -0.2)
                           {
                              this.mc.stability = -0.2;
                           }
                           this.atox[this.mc.b_toe] -= this.mc.side * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] += this.mc.side * 0.1 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] += this.mc.side * 0.1 * this.thispulspeed;
                           this.atoy[this.mc.b_body] -= 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] -= (0.7 - 0.5 - Math.sin(this.mc.hea * 0.3)) * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += (0.7 - 0.5 - Math.sin(this.mc.hea * 0.3)) * this.thispulspeed;
                           this.atox[this.mc.b_body] += this.mc.side * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_arm1] += Math.sin(this.mc.hea * 0.9) * 0.7 * this.mc.side * this.thispulspeed;
                           this.atoy[this.mc.b_arm1] += Math.cos(this.mc.hea * 0.9) * 0.4 * this.thispulspeed;
                           this.atox[this.mc.b_arm2] -= Math.sin(this.mc.hea * 0.9) * 0.7 * this.mc.side * this.thispulspeed;
                           this.atoy[this.mc.b_arm2] -= Math.cos(this.mc.hea * 0.9) * 0.4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += Math.cos(this.mc.hea * 0.9) * 0.8 * this.thispulspeed;
                           if(this.ay[this.mc.b_body] > this.ay[this.mc.b_leg1] - 20)
                           {
                              if(this.ay[this.mc.b_body] > this.ay[this.mc.b_leg2] - 20)
                              {
                                 if(this.ax[this.mc.b_body] > this.ax[this.mc.b_toe])
                                 {
                                    this.mc.side = 1;
                                 }
                                 else
                                 {
                                    this.mc.side = -1;
                                 }
                              }
                           }
                        }
                        else if(this.mc.team == this.mens[this.MP_myid].team)
                        {
                           this.mc.hp_head = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_head);
                           this.mc.hp_body = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_body);
                           this.mc.hp_legs = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_legs);
                           this.mc.hp_arms = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_arms);
                        }
                        else if(this.PRO_BOTS)
                        {
                           this.mc.hp_head = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_head) + this.mc.hp_head * 20) / 21;
                           this.mc.hp_body = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_body) + this.mc.hp_body * 20) / 21;
                           this.mc.hp_legs = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_legs) + this.mc.hp_legs * 20) / 21;
                           this.mc.hp_arms = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_arms) + this.mc.hp_arms * 20) / 21;
                        }
                        this.WakeUpAtom(this.mc.b_body);
                        this.WakeUpAtom(this.mc.b_toe);
                        this.WakeUpAtom(this.mc.b_leg1);
                        this.WakeUpAtom(this.mc.b_leg2);
                        this.WakeUpAtom(this.mc.b_arm1);
                        this.WakeUpAtom(this.mc.b_arm2);
                        this.WakeUpAtom(this.mc.b_head_start);
                        this.WakeUpAtom(this.mc.b_head_end);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,3);
                           this.VeriftMP(this.mc.b_toe,3);
                           this.VeriftMP(this.mc.b_leg1,3);
                           this.VeriftMP(this.mc.b_leg2,3);
                           this.VeriftMP(this.mc.b_arm1,3);
                           this.VeriftMP(this.mc.b_arm2,3);
                           this.VeriftMP(this.mc.b_head_start,3);
                           this.VeriftMP(this.mc.b_head_end,3);
                        }
                     }
                     if(this.mc.stability > -1)
                     {
                        this.xx = 0.8;
                        if(this.mc.stability > 0 || Boolean(this.mc.inwater))
                        {
                           this.xx = 1;
                        }
                        if(this.mc.dying)
                        {
                           if(this.mc.isplayer)
                           {
                              this.xx *= 0.9;
                           }
                           else
                           {
                              this.xx *= 0.7;
                           }
                        }
                        if(this.key_kinetic && this.i == this.MP_myid)
                        {
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + this.mc.side * 0.2) * 30,this.ay[this.mc.b_body] + Math.cos(this.mc.ang + this.mc.side * 0.2) * 30,this.mc,1);
                           if(this.mc.wep_pause < 1)
                           {
                              this.mc.wep_pause = 1;
                           }
                           this.u = this.Dist2D(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.mc.tarx,this.mc.tary);
                           if(this.u < 70)
                           {
                           }
                           if(this.u > 300)
                           {
                              this.u = 300;
                           }
                           if(!this.mc.stand)
                           {
                              this.cinetic_target = -1;
                           }
                           if(this.cinetic_target != -1)
                           {
                              if(this.aio[this.cinetic_target] == true || this.aio[this.cinetic_target] == false)
                              {
                                 if(this.TraceLine(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.ax[this.cinetic_target],this.ay[this.cinetic_target]))
                                 {
                                    if(this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) < 8 || this.VectorDist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body]) < 8)
                                    {
                                       if(this.u < 350)
                                       {
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          this.cx = this.ax[this.mc.b_arm2] + Math.sin(this.mc.ang) * this.u;
                                          this.cy = this.ay[this.mc.b_arm2] + Math.cos(this.mc.ang) * this.u;
                                          this.cx = (this.cx - this.ax[this.cinetic_target]) / this.u * 4;
                                          this.cy = (this.cy - this.ay[this.cinetic_target]) / this.u * 4;
                                          this.u = this.Dist2D(this.cx,this.cy,0,0);
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          this.cx /= this.u / 1 / this.u;
                                          this.cy /= this.u / 1 / this.u;
                                          if(this.u < 50)
                                          {
                                             this.atoy[this.cinetic_target] -= this.gravity * this.thispulspeed;
                                             this.atox[this.cinetic_target] *= 0.7;
                                             this.atoy[this.cinetic_target] *= 0.7;
                                          }
                                          else
                                          {
                                             this.cx = 0;
                                             this.cy = 0;
                                          }
                                          if(this.aof[this.cinetic_target] < 0 && this.aof[this.cinetic_target] > -100)
                                          {
                                             if(this.guns[-this.aof[this.cinetic_target] - 1].picken_by != -1)
                                             {
                                                if(!this.guns[-this.aof[this.cinetic_target] - 1].forcars)
                                                {
                                                   if(this.guns[-this.aof[this.cinetic_target] - 1].picken_by != this.MP_myid)
                                                   {
                                                      if(this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].team == this.mens[this.MP_myid].team)
                                                      {
                                                         if(this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].curwea == -this.aof[this.cinetic_target] - 1)
                                                         {
                                                            this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].curwea = -1;
                                                         }
                                                         this.guns[-this.aof[this.cinetic_target] - 1].picken_by = -1;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          this.atox[this.cinetic_target] += this.cx / this.arad[this.cinetic_target] * this.arad[this.mc.b_body] * this.thispulspeed;
                                          this.atoy[this.cinetic_target] += this.cy / this.arad[this.cinetic_target] * this.arad[this.mc.b_body] * this.thispulspeed;
                                          if(Math.random() > 0.7)
                                          {
                                             this.Effect(this.ax[this.cinetic_target],this.ay[this.cinetic_target],13,0,0);
                                             this.Effect(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],13,0,0);
                                          }
                                          this.aio[this.cinetic_target] = true;
                                          this.atim[this.cinetic_target] = 0;
                                          if(!this.key_kinetic)
                                          {
                                             this.cinetic_target = -1;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.curwea != -1)
                        {
                           if(this.mc.act_fire)
                           {
                              this.xx *= 0.7;
                           }
                           if(this.i != this.MP_myid || this.mc.act_fire || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos1,this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos1,this.mc,this.xx * 1.5);
                              if(this.i != this.MP_myid || !this.key_kinetic)
                              {
                                 this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos2,this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos2,this.mc,this.xx * 1.5);
                              }
                           }
                           else if(this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 15 * this.guns[this.mc.curwea].xpos1,this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 15 * this.guns[this.mc.curwea].xpos1 + 15,this.mc,this.xx * 1.5);
                           }
                        }
                        else if(Boolean(this.mc.act_fire) && (this.i != this.MP_myid || !this.key_kinetic))
                        {
                           this.xx = 0.6;
                           if(this.NO_PSI)
                           {
                              this.xx *= 0.9;
                              this.u = 30 + Math.sin(this.mc.melee_ani) * 15;
                              this.v = 30 - Math.sin(this.mc.melee_ani) * 15;
                           }
                           else
                           {
                              this.u = 25 + Math.sin(this.mc.melee_ani) * 20;
                              this.v = 25 - Math.sin(this.mc.melee_ani) * 20;
                           }
                           if(this.u > 30)
                           {
                              this.u = 30;
                           }
                           if(this.v > 30)
                           {
                              this.v = 30;
                           }
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u,this.ay[this.mc.b_body] + Math.cos(this.mc.ang - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u,this.mc,this.xx);
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + 0.1 + Math.cos(this.mc.melee_ani) * 0.3) * this.v,this.ay[this.mc.b_body] + Math.cos(this.mc.ang + 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.v,this.mc,this.xx);
                        }
                        else
                        {
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + 5 + this.mc.tox * 2 * Math.sin(this.mc.idle_phase * 0.5),this.ay[this.mc.b_body] + 25 + this.mc.toy * 1,this.mc,this.xx * 0.3);
                           if(this.i != this.MP_myid || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] - 5 - this.mc.tox * 2 * Math.sin(this.mc.idle_phase * 0.5),this.ay[this.mc.b_body] + 25 - this.mc.toy * 1,this.mc,this.xx * 0.3);
                           }
                        }
                        if(this.mc.stability <= 0)
                        {
                           this.atoy[this.mc.b_head_end] += Math.cos(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] -= Math.cos(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atox[this.mc.b_head_start] -= Math.sin(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                        }
                        if(this.mc.inwater)
                        {
                           this.u = 0.75;
                           if(this.MP_mode)
                           {
                              if(this.MP_type != 2)
                              {
                                 this.u = 1;
                              }
                           }
                           this.u *= this.thispulspeed;
                           if(this.mc.act_movex != 0 && this.mc.act_movey != 0)
                           {
                              this.u *= 0.7071;
                           }
                           if(this.mc.act_movex == 1)
                           {
                              this.atox[this.mc.b_body] += 3 * this.u;
                              this.atox[this.mc.b_toe] += 1 * this.u;
                              this.atox[this.mc.b_head_start] += 1 * this.u;
                              this.atox[this.mc.b_head_end] += 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movex == -1)
                           {
                              this.atox[this.mc.b_body] -= 3 * this.u;
                              this.atox[this.mc.b_toe] -= 1 * this.u;
                              this.atox[this.mc.b_head_start] -= 1 * this.u;
                              this.atox[this.mc.b_head_end] -= 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movey == -1)
                           {
                              this.atoy[this.mc.b_body] -= 3 * this.u;
                              this.atoy[this.mc.b_toe] -= 2 * this.u;
                              this.atoy[this.mc.b_head_start] -= 1 * this.u;
                              this.atoy[this.mc.b_head_end] -= 1 * this.u;
                           }
                           if(this.mc.act_movey == 1)
                           {
                              this.atoy[this.mc.b_body] += 3 * this.u;
                              this.atoy[this.mc.b_toe] += 2 * this.u;
                              this.atoy[this.mc.b_head_start] += 1 * this.u;
                              this.atoy[this.mc.b_head_end] += 1 * this.u;
                           }
                           this.atoy[this.mc.b_leg1] += Math.sin(this.mc.idle_phase * 2) * 0.3 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.sin(this.mc.idle_phase * 2) * 0.3 * this.thispulspeed;
                           if(this.mc.stand)
                           {
                              if(this.mc.act_movey == -1)
                              {
                                 this.atoy[this.mc.b_body] = -8;
                                 this.mc.toy = -8;
                                 this.mc.stability = 0.7;
                              }
                           }
                        }
                     }
                     if(this.i == this.MP_myid && this.key_fall || this.i != this.MP_myid && this.mc.isplayer && this.mc.stability == -0.1)
                     {
                        if(!this.MP_mode || this.MP_type != 2 || this.MP_gamestate != 2)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= 0.7;
                              this.mc.stability -= 0.1;
                           }
                           if(this.mc.stability > -0.1)
                           {
                              this.mc.stability = -0.1;
                           }
                           this.xx = Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]) + Math.PI / 2;
                           this.atox[this.mc.b_head_start] += Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_body] += (Math.sin(this.xx) * this.mc.act_movex / 4 + this.mc.act_movex / 2) * this.thispulspeed;
                           this.atoy[this.mc.b_body] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_toe] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg1] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                        }
                     }
                     if(this.mc.stand)
                     {
                        this.mc.boost = Math.min(this.mc.boost + 0.4 * this.thispulspeed,this.mc.stability);
                     }
                     if(this.mc.stability < 0)
                     {
                        this.xx = 1;
                        if((this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2 > this.ay[this.mc.b_body] - 70)
                        {
                           this.xx = 2;
                        }
                        if(!this.mc.dying)
                        {
                           if(this.i != this.MP_myid || this.i == this.MP_myid && !this.key_fall)
                           {
                              if(Math.sqrt(this.atox[this.mc.b_toe] * this.atox[this.mc.b_toe] + this.atoy[this.mc.b_toe] * this.atoy[this.mc.b_toe]) < 4 * this.xx)
                              {
                                 this.mc.stability += 0.02 * this.thispulspeed;
                                 if(!this.MP_mode || this.MP_myid == this.i || !this.mc.isplayer)
                                 {
                                    if(this.TraceLine(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 20))
                                    {
                                       if(!this.TraceLine(this.ax[this.mc.b_toe] + 30,this.ay[this.mc.b_toe],this.ax[this.mc.b_toe] - 30,this.ay[this.mc.b_toe] + 60) || !this.TraceLine(this.ax[this.mc.b_toe] - 30,this.ay[this.mc.b_toe],this.ax[this.mc.b_toe] + 60,this.ay[this.mc.b_toe] + 60))
                                       {
                                          this.mc.stability += this.xx * 0.04 * Math.min(1,this.mc.mobility) * this.thispulspeed;
                                          this.mc.sit = 1;
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.stability != -0.1)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1] + this.arad[this.mc.b_leg1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2] + this.arad[this.mc.b_leg2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + this.arad[this.mc.b_arm1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2] + this.arad[this.mc.b_arm2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] + this.arad[this.mc.b_toe] + 5))
                                       {
                                          this.atoy[this.mc.b_toe] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_body] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm1] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm2] += 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_start] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_end] -= 1 * this.thispulspeed;
                                          this.atox[this.mc.b_leg1] -= 0.3 * this.thispulspeed;
                                          this.atox[this.mc.b_leg2] += 0.3 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg1] += 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg2] += 0.5 * this.thispulspeed;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.stability < 1)
                     {
                        this.mc.stability += Math.max(0.1,this.mc.stability) * 0.1 * this.thispulspeed;
                     }
                     if(this.mc.stability > 1)
                     {
                        this.mc.stability = 1;
                     }
                     if(this.mc.stability < -0.5)
                     {
                        this.mc.stability = -0.5;
                     }
                  }
                  if(this.mc.notseen)
                  {
                     this.mc.notseen = false;
                     this.WakeUpAtom(this.mc.b_toe);
                     this.WakeUpAtom(this.mc.b_body);
                  }
                  if(Boolean(this.aio[this.mc.b_toe]) || Boolean(this.aio[this.mc.b_body]))
                  {
                     this.mc.leg1.scaleX = this.mc.side;
                     this.mc.leg1.x = this.ax[this.mc.b_toe] - this.mc.x;
                     this.mc.leg1.y = this.ay[this.mc.b_toe] - this.mc.y;
                     this.mc.leg1.rotation = 180 - Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_leg1],this.ay[this.mc.b_toe] - this.ay[this.mc.b_leg1]) / Math.PI * 180;
                     this.mc.leg2.scaleX = this.mc.side;
                     this.mc.leg2.x = this.ax[this.mc.b_toe] - this.mc.x + 2;
                     this.mc.leg2.y = this.ay[this.mc.b_toe] - this.mc.y;
                     this.mc.leg2.rotation = 180 - Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_leg2],this.ay[this.mc.b_toe] - this.ay[this.mc.b_leg2]) / Math.PI * 180;
                     if(this.mc.brk_legs)
                     {
                        this.LegBone(this.mc.leg1,120);
                        this.LegBone(this.mc.leg2,120);
                     }
                     else
                     {
                        this.LegBone(this.mc.leg1,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1]) / 31 * 120)));
                        this.LegBone(this.mc.leg2,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2]) / 31 * 120)));
                     }
                     this.mc.arm1.scaleX = this.mc.side;
                     this.mc.arm1.x = this.ax[this.mc.b_body] - this.mc.x;
                     this.mc.arm1.y = this.ay[this.mc.b_body] - this.mc.y;
                     this.mc.arm1.rotation = 180 - Math.atan2(this.ax[this.mc.b_body] - this.ax[this.mc.b_arm1],this.ay[this.mc.b_body] - this.ay[this.mc.b_arm1]) / Math.PI * 180;
                     this.mc.arm2.scaleX = this.mc.side;
                     this.mc.arm2.x = this.ax[this.mc.b_body] - this.mc.x + 2;
                     this.mc.arm2.y = this.ay[this.mc.b_body] - this.mc.y;
                     this.mc.arm2.rotation = 180 - Math.atan2(this.ax[this.mc.b_body] - this.ax[this.mc.b_arm2],this.ay[this.mc.b_body] - this.ay[this.mc.b_arm2]) / Math.PI * 180;
                     if(this.mc.brk_arms)
                     {
                        this.ArmBone(this.mc.arm1,60);
                        this.ArmBone(this.mc.arm2,60);
                     }
                     else
                     {
                        this.ArmBone(this.mc.arm1,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) / 30 * 60)));
                        this.ArmBone(this.mc.arm2,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]) / 30 * 60)));
                     }
                     this.mc.toe.scaleX = this.mc.side;
                     this.mc.toe.x = this.ax[this.mc.b_toe] - this.mc.x;
                     this.mc.toe.y = this.ay[this.mc.b_toe] - this.mc.y;
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.mc.toe.rotation = -Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_brk2],this.ay[this.mc.b_toe] - this.ay[this.mc.b_brk2]) / Math.PI * 180;
                     }
                     else
                     {
                        this.mc.toe.rotation = -Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]) / Math.PI * 180;
                     }
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_brk1] - this.ax[this.mc.b_body],this.ay[this.mc.b_brk1] - this.ay[this.mc.b_body]);
                     }
                     else
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]);
                     }
                     this.mc.body.scaleX = this.mc.side;
                     this.mc.body.x = this.ax[this.mc.b_body] - this.mc.x + Math.sin(this.xx) * 24;
                     this.mc.body.y = this.ay[this.mc.b_body] - this.mc.y + Math.cos(this.xx) * 24;
                     this.mc.body.rotation = -this.xx / Math.PI * 180;
                     this.mc.head.scaleX = this.mc.side * this.COMIC_SCALE;
                     this.mc.head.scaleY = this.COMIC_SCALE;
                     this.mc.head.x = this.ax[this.mc.b_head_start] - this.mc.x;
                     this.mc.head.y = this.ay[this.mc.b_head_start] - this.mc.y;
                     this.mc.head.rotation = -Math.atan2(this.ax[this.mc.b_head_start] - this.ax[this.mc.b_head_end],this.ay[this.mc.b_head_start] - this.ay[this.mc.b_head_end]) / Math.PI * 180;
                  }
                  if(this.mc.io)
                  {
                     if(this.mc.gui.visible)
                     {
                        this.mc.gui.x = this.ax[this.mc.b_head_start] - this.mc.x;
                        this.mc.gui.y = this.ay[this.mc.b_head_start] - this.mc.y - 50;
                        if(this.mc.hea > 0)
                        {
                           if(this.mc.hea > this.mc.hmax)
                           {
                              this.mc.gui.h.scaleX = 1;
                           }
                           else
                           {
                              this.mc.gui.h.scaleX = this.mc.hea / this.mc.hmax;
                           }
                        }
                        else if(this.mc.gui.alpha > 0)
                        {
                           this.mc.gui.h.scaleX = 0;
                           this.mc.gui.alpha -= 0.1 * this.GSPEED;
                        }
                        else
                        {
                           this.mc.gui.visible = false;
                        }
                     }
                     if(!this.mens[this.i].visible)
                     {
                        this.mens[this.i].visible = true;
                     }
                     if(this.mc.char == 12)
                     {
                        if(!this.mc.dead)
                        {
                           if(!this.MP_mode || !this.MP_app)
                           {
                              if(this.mc.alpha > 0)
                              {
                                 this.mc.alpha -= 0.02;
                              }
                              if(this.mc.dying)
                              {
                                 this.mc.alpha = 0.05 + Math.random() * 0.1;
                              }
                           }
                        }
                     }
                     if(this.mc.dead)
                     {
                        if(!this.mc.isplayer || this.MP_mode && (this.MP_type == 1 || this.MP_type == 3))
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team || this.MP_mode || this.mc.team != 0)
                           {
                              if(!this.SUPER_COMPUTER && !this.HQ || this.MEAT_MODE || this.MP_mode)
                              {
                                 this.mc.deadtim += this.GSPEED;
                              }
                              if(this.c_sim_stress && !this.MP_mode)
                              {
                                 if(this.mc.deadtim > 100)
                                 {
                                    this.mc.alpha -= 0.4;
                                 }
                              }
                              else if(this.mc.alpha >= 0)
                              {
                                 if(this.mc.deadtim > 200)
                                 {
                                    this.mc.alpha -= 0.1;
                                 }
                              }
                              if(this.mc.alpha < 0)
                              {
                                 this.mc.io = false;
                                 this.mc.visible = false;
                                 this.aactive[this.i] = false;
                                 if(!this.MP_mode)
                                 {
                                    if(this.i != this.MP_myid)
                                    {
                                       this.aactive[this.i] = false;
                                       this.aio[this.mc.b_toe] = -1;
                                       this.aio[this.mc.b_body] = -1;
                                       this.aio[this.mc.b_arm1] = -1;
                                       this.aio[this.mc.b_arm2] = -1;
                                       this.aio[this.mc.b_leg1] = -1;
                                       this.aio[this.mc.b_leg2] = -1;
                                       this.aio[this.mc.b_head_start] = -1;
                                       this.aio[this.mc.b_head_end] = -1;
                                       this.aio[this.mc.b_brk1] = -1;
                                       this.aio[this.mc.b_brk2] = -1;
                                       this.mc.x = -10000;
                                       this.mc.y = -10000;
                                       this.mc.scaleX = 0;
                                       this.mc.scaleY = 0;
                                       this.game.removeChild(this.mc);
                                       this.mens[this.i] = new Object();
                                       this.mens[this.i].io = false;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               else
               {
                  this.aactive[this.i] = false;
                  if(this.mens[this.i].visible)
                  {
                     this.mens[this.i].visible = false;
                     this.mens[this.i].notseen = true;
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function DebugBugCaches() : void
      {
         var _loc1_:int = 0;
         _loc1_ = 0;
         while(_loc1_ < this.atotal)
         {
            if(this.aio[_loc1_] == true || this.aio[_loc1_] == false)
            {
               if(this.amat[_loc1_] == 1 || this.amat[_loc1_] == 0)
               {
                  if(this.mens[this.aof[_loc1_]].io)
                  {
                     if(this.mens[this.aof[_loc1_]].b_leg1 != _loc1_)
                     {
                        if(this.mens[this.aof[_loc1_]].b_leg2 != _loc1_)
                        {
                           if(this.mens[this.aof[_loc1_]].b_body != _loc1_)
                           {
                              if(this.mens[this.aof[_loc1_]].b_toe != _loc1_)
                              {
                                 if(this.mens[this.aof[_loc1_]].b_head_end != _loc1_)
                                 {
                                    if(this.mens[this.aof[_loc1_]].b_head_start != _loc1_)
                                    {
                                       if(this.mens[this.aof[_loc1_]].b_arm1 != _loc1_)
                                       {
                                          if(this.mens[this.aof[_loc1_]].b_arm2 != _loc1_)
                                          {
                                             if(this.mens[this.aof[_loc1_]].b_brk1 != _loc1_)
                                             {
                                                if(this.mens[this.aof[_loc1_]].b_brk2 != _loc1_)
                                                {
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            _loc1_++;
         }
      }
      
      public function onEnterFrame(param1:Event) : void
      {
         var _loc2_:Number = NaN;
         var _loc3_:Number = NaN;
         var _loc4_:Number = NaN;
         var _loc5_:Number = NaN;
         var _loc6_:int = 0;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:* = undefined;
         var _loc12_:int = 0;
         var _loc13_:Number = NaN;
         this.allow_unlag_fps = true;
         this.DebugBugCaches();
         if(this.MP_get_done_HAP)
         {
            this.MP_get_done(this.MP_get_done_STR);
         }
         else if(this.MP_mode)
         {
            if(!this.MP_force_disconnect)
            {
               if(getTimer() - this.MP_ping1 > 3500)
               {
                  this.MP_get();
               }
            }
         }
         if(mouseX != 0 || mouseY != 0)
         {
            this.mouse_x = mouseX;
            this.mouse_y = mouseY;
         }
         this.c_sim_rt = getTimer();
         this.c_sim_rt2 = getTimer() - this.c_sim_rt2;
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.clear();
         }
         if(this.firstframe)
         {
            this.system_non_stop = true;
         }
         if(this.MP_mode)
         {
            if(this.MP_app && getTimer() - this.MP_ping1 > 500 || getTimer() - this.MP_ping1 > 2500)
            {
               this.INLAG = true;
               if(!this.lags.visible)
               {
                  if(getTimer() - this.MP_ping_last > 500)
                  {
                     this.lags.visible = true;
                  }
               }
               this.lags.val.text = "Your ping: " + this._mp_ping_rl;
            }
            else
            {
               this.INLAG = false;
               if(this.lags.visible)
               {
                  this.lags.visible = false;
               }
            }
         }
         if(this.system_non_stop)
         {
            this.render_minX = (-this.game.x - 300) / this.game_scale;
            this.render_minY = (-this.game.y - 200) / this.game_scale;
            this.render_maxX = (-this.game.x + this.screenX + 300) / this.game_scale;
            this.render_maxY = (-this.game.y + this.screenY + 200) / this.game_scale;
            this.FUN_TIME_SPEND += this.GSPEED;
            if(this.PLAZMA_GAME)
            {
               if(this.energy <= 0 || Boolean(this.mens[this.MP_myid].dead))
               {
                  if(this.timeshift != 0)
                  {
                     this.timeshift = 0;
                     this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                     if(this.HQ && this.SCREEN_EFFECTS)
                     {
                        this.whitness.alpha += 1;
                        this.whitness.visible = true;
                     }
                  }
               }
               if(this.timeshift == 0)
               {
                  if(this.energy < this.energy_max)
                  {
                     this.energy += 0.2 * this.GSPEED2;
                  }
                  if(this.energy >= this.energy_max)
                  {
                     this.energy = this.energy_max;
                  }
               }
               else
               {
                  this.energy -= 0.4 * this.GSPEED2;
               }
            }
            if(this.GET_LITE_PHYS())
            {
               this.Physics();
               this.LITE_PHYS_tim = !this.LITE_PHYS_tim;
            }
            else
            {
               this.Physics();
            }
            this.ThinkOfFlakes();
            this.DoorLogic();
            this.BulletLogic();
            this.EffectsLogic();
            this.PlayerLogic();
            if(this.MP_mode && this.mens[this.MP_myid].dead || this.MP_spectator)
            {
               if(this.death_cam >= 0 && this.death_cam < this.playerstotal)
               {
                  _loc4_ = this.game.x;
                  _loc5_ = this.game.y;
                  if(this.MP_spectator)
                  {
                     if(this.MP_myid != this.death_cam)
                     {
                        this.MP_myid = this.death_cam;
                        _loc6_ = 0;
                        while(_loc6_ < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[_loc6_]);
                           _loc6_++;
                        }
                     }
                     _loc2_ = this.mens[this.death_cam].tarx + this.game.x;
                     _loc3_ = this.mens[this.death_cam].tary + this.game.y;
                  }
                  else
                  {
                     _loc2_ = this.min_max(0,this.mouse_x,this.screenX);
                     _loc3_ = this.min_max(0,this.mouse_y,this.screenY);
                  }
                  if(this.SOFT_SCREEN)
                  {
                     this.game.x = Math.round((-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX - _loc2_ + this.hscreenX + this.game.x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2));
                     this.game.y = Math.round((-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY - _loc3_ + this.hscreenY + this.game.y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  else
                  {
                     this.game.x = Math.round((-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX - _loc2_ + this.hscreenX + this.game.x) / 2);
                     this.game.y = Math.round((-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY - _loc3_ + this.hscreenY + this.game.y) / 2 + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  if(this.MP_spectator)
                  {
                     this.myCursor.x = (this.myCursor.x + _loc2_) / 2 - this.game.x + _loc4_;
                     this.myCursor.y = (this.myCursor.y + _loc3_) / 2 - this.game.y + _loc5_;
                  }
               }
               else
               {
                  if(this.key_left)
                  {
                     this.game.x += 15;
                  }
                  if(this.key_right)
                  {
                     this.game.x -= 15;
                  }
                  if(this.key_up)
                  {
                     this.game.y += 15;
                  }
                  if(this.key_down)
                  {
                     this.game.y -= 15;
                  }
               }
               if(this.darkness.alpha >= 0.25 || this.MP_spectator || this.death_cam == -1 || this.death_cam != this.MP_myid)
               {
                  if(this.fire)
                  {
                     this.fire = false;
                     ++this.death_cam;
                     while(this.death_cam < this.playerstotal && this.death_cam >= 0 && this.death_cam != this.MP_myid && Boolean(this.mens[this.death_cam].dead))
                     {
                        ++this.death_cam;
                     }
                     if(this.death_cam >= this.playerstotal)
                     {
                        this.death_cam = -1;
                     }
                  }
               }
            }
            else
            {
               if(this.SOFT_SCREEN)
               {
                  this.game.x = Math.round((-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game.x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2));
                  this.game.y = Math.round((-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game.y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
               }
               else
               {
                  this.game.x = Math.round((-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game.x) / 2);
                  this.game.y = Math.round((-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game.y) / 2 + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
               }
               this.death_cam = this.MP_myid;
            }
            if(this.SHAKEAMMOUT > 0.05)
            {
               this.SHAKEAMMOUT -= 0.05;
               this.SHAKEAMMOUT *= 0.93;
               if(this.SHAKEAMMOUT > 30)
               {
                  this.SHAKEAMMOUT = 30;
               }
            }
            else
            {
               this.SHAKEAMMOUT = 0;
            }
            if(this.new_active.visible)
            {
               this.new_active.x = this.mens[this.MP_myid].x + this.game.x;
               this.new_active.y = this.mens[this.MP_myid].y - 90 + this.game.y;
            }
            if(!this.MP_spectator)
            {
               this.mc = this.mens[this.MP_myid];
               this.ok = false;
               if(!this.mc.dead)
               {
                  if(this.mc.hunt == -1 || this.mc.curwea != -1 && this.guns[this.mc.curwea].stat_class == 7)
                  {
                     this.i2 = 0;
                     while(this.i2 < this.playerstotal && !this.ok)
                     {
                        if(this.i2 != this.MP_myid)
                        {
                           if(this.mens[this.i2].io)
                           {
                              if(this.mens[this.i2].team == this.mc.team)
                              {
                                 if(Boolean(this.mens[this.i2].dead) || Boolean(this.mens[this.i2].dying))
                                 {
                                    if(!this.mens[this.i2].brk_head && !this.mens[this.i2].brk_arms && !this.mens[this.i2].brk_legs && !this.mens[this.i2].brk_body)
                                    {
                                       if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 350)
                                       {
                                          this.i3 = 0;
                                          while(this.i3 < this.gunstotal && !this.ok)
                                          {
                                             if(this.guns[this.i3].io)
                                             {
                                                if(!this.guns[this.i3].forcars)
                                                {
                                                   if(this.guns[this.i3].stat_class == 7)
                                                   {
                                                      if(this.guns[this.i3].picken_by == this.MP_myid)
                                                      {
                                                         this.ok = true;
                                                         this.need_heal.visible = true;
                                                         this.need_heal.x = this.ax[this.mens[this.i2].b_body] * this.game_scale + this.game.x;
                                                         this.need_heal.y = (this.ay[this.mens[this.i2].b_body] - 41) * this.game_scale + this.game.y;
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i3;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                  }
               }
               if(!this.ok)
               {
                  this.need_heal.visible = false;
               }
            }
            if(this.game_scale != this.lgame_scale)
            {
               this.game.scaleX = this.game_scale;
               this.game.scaleY = this.game_scale;
               this.graphics_3d_front.scaleX = this.graphics_3d.scaleX = this.game_scale;
               this.graphics_3d_front.scaleY = this.graphics_3d.scaleY = this.game_scale;
               this.lgame_scale = this.game_scale;
               this.game.x = Math.round(-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.mouse_x + this.hscreenX);
               this.game.y = Math.round(-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.mouse_y + this.hscreenY);
            }
            this.graphics_3d_front.x = this.graphics_3d.x = this.game.x;
            this.graphics_3d_front.y = this.graphics_3d.y = this.game.y;
            _loc6_ = 0;
            while(_loc6_ < this.surf_lnk.length)
            {
               this.surf_lnk[_loc6_].x = this.doors[this.surf_lnk_to[_loc6_]].x;
               this.surf_lnk[_loc6_].y = this.doors[this.surf_lnk_to[_loc6_]].y;
               _loc6_++;
            }
            _loc6_ = 0;
            while(_loc6_ < this.vehiclestotal)
            {
               if(this.vehicles[_loc6_].io)
               {
                  if(this.vehicles[_loc6_].x > this.render_minX - 400 && this.vehicles[_loc6_].x < this.render_maxX + 400 && this.vehicles[_loc6_].y > this.render_minY - 400 && this.vehicles[_loc6_].y < this.render_maxY + 400 || this.vehicles[_loc6_].master != -1 && this.aactive[this.vehicles[_loc6_].master] || this.vehicles[_loc6_].typ == 6 && this.MP_mode)
                  {
                     this.mc = this.vehicles[_loc6_];
                     this.aactive[-200 - _loc6_] = true;
                     if(this.MP_mode)
                     {
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.hea = 1;
                           }
                        }
                     }
                     if(this.mc.typ == 0)
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_w1] - this.ax[this.mc.b_w2],this.ay[this.mc.b_w1] - this.ay[this.mc.b_w2]);
                        if(this.mc.wep0 == -1)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal)
                           {
                              if(this.guns[this.i2].io)
                              {
                                 if(this.guns[this.i2].forcars)
                                 {
                                    if(this.guns[this.i2].picken_by == -1)
                                    {
                                       if(this.guns[this.i2].x > this.mc.x - 100 && this.guns[this.i2].x < this.mc.x + 100 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 100)
                                       {
                                          this.guns[this.i2].picken_by = _loc6_;
                                          this.mc.wep0 = this.i2;
                                          this.ChangedGun(this.mc.master);
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        else
                        {
                           this.mc2 = this.guns[this.mc.wep0];
                           if(this.mc.master != -1)
                           {
                              this.yy = this.mens[this.mc.master].ang;
                              this.mens[this.mc.master].curwea = this.mc.wep0;
                              if(Math.sin(this.yy) > 0)
                              {
                                 this.mc2.scaleY = 1;
                              }
                              else
                              {
                                 this.mc2.scaleY = -1;
                              }
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_c] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                              if(this.mens[this.mc.master].dead)
                              {
                                 this.PutoutCar(_loc6_);
                              }
                           }
                           else
                           {
                              this.mc2.scaleY = this.mc.side;
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c] - Math.sin(this.xx) * this.mc2.len2,this.ay[this.mc.b_c] - Math.cos(this.xx) * this.mc2.len2,this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                           }
                        }
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.dead = true;
                              this.mc.gotoAndStop(3);
                              this.PlaySound(this.s_steel_hard,this.mc.x,this.mc.y);
                              this.mc.carbody.scaleY = this.mc.side;
                              if(this.mc.master != -1)
                              {
                                 this.PutoutCar(_loc6_);
                              }
                              this.ExplosionSound(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30);
                              this.PhysicsExplosion(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30,300,20,100,-1);
                              this.atoy[this.mc.b_c] -= 10;
                              this.atoy[this.mc.b_c2] -= 15;
                              this.atoy[this.mc.b_c3] -= 5;
                              this.atoy[this.mc.b_w1] -= 8;
                              this.atoy[this.mc.b_w2] -= 6;
                              this.mc.b_w1b = this.CreatePoint(this.ax[this.mc.b_w1],this.ay[this.mc.b_w1],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w1],true,4,-_loc6_ - 200);
                              this.mc.b_w2b = this.CreatePoint(this.ax[this.mc.b_w2],this.ay[this.mc.b_w2],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w2],true,4,-_loc6_ - 200);
                              this.arad[this.mc.b_w1] = 8;
                              this.arad[this.mc.b_w2] = 8;
                              this.amat[this.mc.b_w1] = 5;
                              this.amat[this.mc.b_w2] = 5;
                              this.around[this.mc.b_w1] = false;
                              this.around[this.mc.b_w2] = false;
                           }
                        }
                        else if(this.mc.master != -1)
                        {
                           this.mc2 = this.mens[this.mc.master];
                           this.mc2.stability = -0.1;
                           this.mc2.side = this.mc.side;
                           this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                           this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                           this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_c],this.ay[this.mc.b_c] - this.chdef[this.mc2.ch_body],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                           if(this.mc2.act_movex != 0)
                           {
                              if(this.acollided[this.mc.b_w1] > 0 || this.aio[this.mc.b_w1] == false)
                              {
                                 this.atox[this.mc.b_w1] -= Math.sin(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                 this.atoy[this.mc.b_w1] -= Math.cos(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                 this.WakeUpAtom(this.mc.b_w1);
                              }
                              if(this.acollided[this.mc.b_w2] > 0 || this.aio[this.mc.b_w2] == false)
                              {
                                 this.atox[this.mc.b_w2] -= Math.sin(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                 this.atoy[this.mc.b_w2] -= Math.cos(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                 this.WakeUpAtom(this.mc.b_w2);
                              }
                           }
                           if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                           {
                              this.PutoutCar(_loc6_);
                           }
                        }
                        else if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                        {
                           if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 100)
                           {
                              if(this.mens[this.MP_myid].stability >= 1)
                              {
                                 this.key_pick = false;
                                 this.PutinCar(0,_loc6_);
                              }
                           }
                        }
                        this.mc.x = this.ax[this.mc.b_c];
                        this.mc.y = this.ay[this.mc.b_c];
                        if(this.mc.dead)
                        {
                           this.mc.w1.x = this.ax[this.mc.b_w1b] - this.ax[this.mc.b_c];
                           this.mc.w1.y = this.ay[this.mc.b_w1b] - this.ay[this.mc.b_c];
                           this.mc.w2.x = this.ax[this.mc.b_w2b] - this.ax[this.mc.b_c];
                           this.mc.w2.y = this.ay[this.mc.b_w2b] - this.ay[this.mc.b_c];
                           this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                           this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                        }
                        else
                        {
                           this.mc.w1.x = this.ax[this.mc.b_w1] - this.ax[this.mc.b_c];
                           this.mc.w1.y = this.ay[this.mc.b_w1] - this.ay[this.mc.b_c];
                           this.mc.w2.x = this.ax[this.mc.b_w2] - this.ax[this.mc.b_c];
                           this.mc.w2.y = this.ay[this.mc.b_w2] - this.ay[this.mc.b_c];
                           this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                           this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                        }
                        this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                     }
                     if(this.mc.typ == 1)
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_p2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_p2]);
                        if(this.mc.wep0 == -1)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal)
                           {
                              if(this.guns[this.i2].io)
                              {
                                 if(this.guns[this.i2].forcars)
                                 {
                                    if(this.guns[this.i2].picken_by == -1)
                                    {
                                       if(this.guns[this.i2].x > this.mc.x - 200 && this.guns[this.i2].x < this.mc.x + 200 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 300)
                                       {
                                          this.guns[this.i2].picken_by = _loc6_;
                                          this.mc.wep0 = this.i2;
                                          this.ChangedGun(this.mc.master);
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        else
                        {
                           this.mc2 = this.guns[this.mc.wep0];
                           if(this.mc.master != -1)
                           {
                              if(this.mc.side == 1)
                              {
                                 if(this.mens[this.mc.master].tarx < this.mc.x + 300)
                                 {
                                    this.mens[this.mc.master].tarx = this.mc.x + 300;
                                 }
                              }
                              else if(this.mens[this.mc.master].tarx > this.mc.x - 300)
                              {
                                 this.mens[this.mc.master].tarx = this.mc.x - 300;
                              }
                              this.yy = this.mens[this.mc.master].ang;
                              this.mens[this.mc.master].curwea = this.mc.wep0;
                              if(Math.sin(this.yy) > 0)
                              {
                                 this.mc2.scaleY = 1;
                              }
                              else
                              {
                                 this.mc2.scaleY = -1;
                              }
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_p2] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_p2] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              if(this.mens[this.mc.master].dead)
                              {
                                 this.PutoutCar(_loc6_);
                              }
                           }
                           else
                           {
                              this.mc2.scaleY = this.mc.side;
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_p2] - Math.sin(this.xx) * this.mc2.len2,this.ay[this.mc.b_p2] - Math.cos(this.xx) * this.mc2.len2,this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                           }
                        }
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.dead = true;
                              this.mc.deadtim = 0;
                              this.mc.leg1.x = 0;
                              this.mc.leg1.y = 0;
                              this.mc.leg2.x = 0;
                              this.mc.leg2.y = 0;
                              this.mc.leg1.scaleX = this.mc.side;
                              this.mc.leg2.scaleX = this.mc.side;
                              this.mc.leg1b.scaleX = this.mc.side;
                              this.mc.leg2b.scaleX = this.mc.side;
                              this.mc.carbody.scaleY = this.mc.side;
                              this.PlaySound(this.s_walker_die,this.mc.x,this.mc.y);
                              this.chdef[this.mc.ch_cross2] = 70;
                              if(this.mc.master != -1)
                              {
                                 this.PutoutCar(_loc6_);
                              }
                              if(this.mc.hea < -100)
                              {
                                 this.ExplosionSound(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30);
                                 this.PhysicsExplosion(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30,300,20,100,-1);
                                 this.atoy[this.mc.b_p2] -= 10;
                                 this.atox[this.mc.b_p1] += 5 * this.mc.side;
                                 this.atox[this.mc.b_p3] += 5 * this.mc.side;
                                 this.atox[this.mc.b_w1] -= 10 * this.mc.side;
                                 this.atox[this.mc.b_w2] -= 5 * this.mc.side;
                              }
                           }
                           else if(this.mc.io)
                           {
                              if(this.mc.deadtim > 1000)
                              {
                                 if(this.mc.alpha > 0.7)
                                 {
                                    this.mc.alpha = 0.7;
                                 }
                                 else
                                 {
                                    this.mc.alpha -= 0.05 * this.GSPEED;
                                 }
                                 if(this.mc.alpha < 0.3)
                                 {
                                    this.aio[this.mc.b_p1] = -1;
                                    this.aio[this.mc.b_p2] = -1;
                                    this.aio[this.mc.b_p3] = -1;
                                    this.aio[this.mc.b_w1] = -1;
                                    this.aio[this.mc.b_w2] = -1;
                                    this.aio[this.mc.b_w1b] = -1;
                                    this.aio[this.mc.b_w2b] = -1;
                                    this.mc.io = false;
                                 }
                              }
                              this.mc.deadtim += 10 * this.GSPEED;
                           }
                        }
                        else if(this.mc.master != -1)
                        {
                           this.mc2 = this.mens[this.mc.master];
                           this.mc2.stability = -0.1;
                           this.mc2.side = this.mc.side;
                           this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                           this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                           this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_p3],this.ay[this.mc.b_p3],this.atox[this.mc.b_p3],this.atoy[this.mc.b_p3],1);
                           this.TurnBone3(this.mc2.b_toe,this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.atox[this.mc.b_p1],this.atoy[this.mc.b_p1],1);
                           this.x3 = Math.sin(this.mc.move_state) * 30;
                           this.y3 = Math.cos(this.mc.move_state) * 10 * this.mc.move_height;
                           if(this.mc.move_height > 1)
                           {
                              this.y3 = Math.cos(this.mc.move_state) * 40 * (this.mc.move_height - 0.75);
                           }
                           this.x4 = 1;
                           if(this.mc2.act_movex == 0)
                           {
                              if(this.mc.move_height > 0.05)
                              {
                                 this.mc.move_height -= 0.05 * this.GSPEED;
                              }
                              else
                              {
                                 this.mc.move_height = 0;
                              }
                           }
                           if(this.mc2.act_movey == 1)
                           {
                              if(this.mc.corpse_h > 60)
                              {
                                 this.mc.corpse_h -= 5 * this.GSPEED;
                                 if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                 {
                                    this.atoy[this.mc.b_p1] += 1 * this.GSPEED;
                                    this.atoy[this.mc.b_p2] += 1 * this.GSPEED;
                                    this.atoy[this.mc.b_p3] += 1 * this.GSPEED;
                                    this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                    this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                 }
                              }
                           }
                           else if(this.mc2.act_movey == -1)
                           {
                              if(this.mc.corpse_h < 100)
                              {
                                 this.mc.corpse_h += 5;
                                 if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                 {
                                    this.atoy[this.mc.b_p1] -= 2 * this.GSPEED;
                                    this.atoy[this.mc.b_p2] -= 2 * this.GSPEED;
                                    this.atoy[this.mc.b_p3] -= 2 * this.GSPEED;
                                    this.atox[this.mc.b_p1] += this.mc2.act_movex * 3 * this.GSPEED;
                                    this.atox[this.mc.b_p2] += this.mc2.act_movex * 1 * this.GSPEED;
                                    this.atox[this.mc.b_p3] += this.mc2.act_movex * 2 * this.GSPEED;
                                    this.atox[this.mc.b_w1] += this.mc2.act_movex * 1 * this.GSPEED;
                                    this.atox[this.mc.b_w2] += this.mc2.act_movex * 2 * this.GSPEED;
                                 }
                              }
                           }
                           else if(this.mc.corpse_h < 90)
                           {
                              this.mc.corpse_h += 1 * this.GSPEED;
                           }
                           else if(this.mc.corpse_h > 90)
                           {
                              this.mc.corpse_h -= 1 * this.GSPEED;
                           }
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - this.mc.corpse_h + this.y3,this.x4);
                           this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + this.mc.corpse_h - this.y3,this.x4);
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 - this.x3,this.yy2 - this.mc.corpse_h - this.y3,this.x4);
                           this.TurnBone4(this.mc.b_w2,this.xx2 + this.x3,this.yy2 + this.mc.corpse_h + this.y3,this.x4);
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 - 25 * this.mc.side,this.yy2,this.x4);
                           this.TurnBone4(this.mc.b_p2,this.xx2 + 25 * this.mc.side,this.yy2,this.x4);
                           this.aio[this.mc.b_p1] = true;
                           this.atim[this.mc.b_p1] = 0;
                           this.aio[this.mc.b_w1] = true;
                           this.atim[this.mc.b_w1] = 0;
                           this.aio[this.mc.b_w2] = true;
                           this.atim[this.mc.b_w2] = 0;
                           if(this.mc2.act_movex != 0)
                           {
                              if(this.mc.move_height < 1)
                              {
                                 this.xx2 = -this.mc2.act_movex * 0.08 * this.mc.move_height;
                              }
                              else
                              {
                                 this.xx2 = -this.mc2.act_movex * 0.08 * (2 - this.mc.move_height);
                              }
                              this.mc.move_state += this.xx2 * this.GSPEED;
                              this.mc.jump_state += this.xx2 * this.GSPEED;
                              if(this.mc.jump_state > Math.PI)
                              {
                                 this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                 this.mc.jump_state -= Math.PI;
                              }
                              if(this.mc.jump_state < -Math.PI)
                              {
                                 this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                 this.mc.jump_state += Math.PI;
                              }
                              this.mc.jump_state2 += this.xx2 * this.GSPEED;
                              if(this.mc.jump_state2 > Math.PI)
                              {
                                 this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                 this.mc.jump_state2 -= Math.PI;
                              }
                              if(this.mc.jump_state2 < -Math.PI)
                              {
                                 this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                 this.mc.jump_state2 += Math.PI;
                              }
                              if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                              {
                                 this.atox[this.mc.b_p1] += this.mc2.act_movex * 1.5 * this.GSPEED;
                              }
                              if(this.mc.move_height < 0.95)
                              {
                                 this.mc.move_height += 0.05 * this.GSPEED;
                              }
                              if(!this.TracePoint((this.ax[this.mc.b_w1] + this.ax[this.mc.b_w1]) / 2 + this.mc2.act_movex * 150,(this.ay[this.mc.b_w1] + this.ay[this.mc.b_w1]) / 2))
                              {
                                 if(this.mc.move_height < 1.45)
                                 {
                                    this.mc.move_height += 0.05 * this.GSPEED;
                                 }
                                 else
                                 {
                                    this.mc.move_height = 1.5 * this.GSPEED;
                                 }
                              }
                              else if(this.mc.move_height > 1.05)
                              {
                                 this.mc.move_height -= 0.05 * this.GSPEED;
                              }
                           }
                           if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                           {
                              this.PutoutCar(_loc6_);
                           }
                        }
                        else
                        {
                           this.x4 = 1;
                           this.x3 = Math.sin(this.mc.move_state) * 25;
                           this.y3 = Math.cos(this.mc.move_state) * 10 * this.mc.move_height;
                           if(this.mc.move_height > 0.05)
                           {
                              this.mc.move_height -= 0.05;
                           }
                           else
                           {
                              this.mc.move_height = 0;
                           }
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - 90 + this.y3,this.x4);
                           this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + 90 - this.y3,this.x4);
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 - 10 - this.x3,this.yy2 - 90 - this.y3,this.x4);
                           this.TurnBone4(this.mc.b_w2,this.xx2 + 10 + this.x3,this.yy2 + 90 + this.y3,this.x4);
                           this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                           this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                           this.TurnBone4(this.mc.b_p1,this.xx2 - 23 * this.mc.side,this.yy2 - 10,this.x4);
                           this.TurnBone4(this.mc.b_p2,this.xx2 + 23 * this.mc.side,this.yy2 + 10,this.x4);
                           if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                           {
                              if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 300)
                              {
                                 if(this.mens[this.MP_myid].stability >= 1)
                                 {
                                    this.PutinCar(0,_loc6_);
                                 }
                              }
                           }
                        }
                        this.chdef[this.mc.ch_leg1upper] = this.chdef[this.mc.ch_leg1lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 3;
                        this.chdef[this.mc.ch_leg2upper] = this.chdef[this.mc.ch_leg2lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 3;
                        this.mc.x = this.ax[this.mc.b_p1];
                        this.mc.y = this.ay[this.mc.b_p1];
                        this.MeasureStart(12);
                        this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                        this.mc.leg1.rotation = 180 - Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_w1],this.ay[this.mc.b_p1] - this.ay[this.mc.b_w1]) / Math.PI * 180;
                        this.mc.leg1.gotoAndStop(Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 210 * 100))));
                        this.mc.leg2.rotation = 180 - Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_w2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_w2]) / Math.PI * 180;
                        this.mc.leg2.gotoAndStop(Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 210 * 100))));
                        this.mc.leg1b.x = this.ax[this.mc.b_w1] - this.ax[this.mc.b_p1];
                        this.mc.leg1b.y = this.ay[this.mc.b_w1] - this.ay[this.mc.b_p1];
                        this.mc.leg2b.x = this.ax[this.mc.b_w2] - this.ax[this.mc.b_p1];
                        this.mc.leg2b.y = this.ay[this.mc.b_w2] - this.ay[this.mc.b_p1];
                        if(Boolean(this.acollided[this.mc.b_w1]) && !this.mc.dead)
                        {
                           this.mc.leg1b.rotation /= 2;
                        }
                        else
                        {
                           this.mc.leg1b.rotation = (this.mc.leg1.rotation + this.mc.leg1b.rotation * 5) / 6;
                        }
                        if(Boolean(this.acollided[this.mc.b_w2]) && !this.mc.dead)
                        {
                           this.mc.leg2b.rotation /= 2;
                        }
                        else
                        {
                           this.mc.leg2b.rotation = (this.mc.leg2.rotation + this.mc.leg2b.rotation * 5) / 6;
                        }
                        this.MeasureStop(12);
                     }
                     if(this.mc.typ == 2)
                     {
                        this.xx = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rb]) / 2;
                        this.yy = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rb]) / 2;
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.dead = true;
                              this.mc.gotoAndStop(3);
                              this.chio[this.mc.ch_t0] = -1;
                              this.chio[this.mc.ch_t1] = -1;
                              this.chio[this.mc.ch_t2] = -1;
                              this.chio[this.mc.ch_t3] = -1;
                              this.chio[this.mc.ch_t4] = -1;
                              this.chio[this.mc.ch_t5] = -1;
                              this.chio[this.mc.ch_t6] = -1;
                              this.chio[this.mc.ch_t7] = -1;
                              this.atox[this.mc.b_lt] = 0;
                              this.atoy[this.mc.b_lt] = 0;
                              this.atox[this.mc.b_lt2] = 0;
                              this.atoy[this.mc.b_lt2] = 0;
                              this.atox[this.mc.b_rt] = 0;
                              this.atoy[this.mc.b_rt] = 0;
                              this.atox[this.mc.b_rt2] = 0;
                              this.atoy[this.mc.b_rt2] = 0;
                              this.atox[this.mc.b_lb] = 0;
                              this.atoy[this.mc.b_lb] = 0;
                              this.atox[this.mc.b_lb2] = 0;
                              this.atoy[this.mc.b_lb2] = 0;
                              this.atox[this.mc.b_rb] = 0;
                              this.atoy[this.mc.b_rb] = 0;
                              this.atox[this.mc.b_rb2] = 0;
                              this.atoy[this.mc.b_rb2] = 0;
                              this.atox[this.mc.b_lb2] -= 5;
                              this.atox[this.mc.b_lt2] -= 10;
                              this.atox[this.mc.b_rb2] += 5;
                              this.atox[this.mc.b_rt2] += 10;
                              this.atoy[this.mc.b_rt] -= 2 + Math.random() * 10;
                              this.atoy[this.mc.b_lt] -= 2 + Math.random() * 10;
                              this.xx2 = 3 + Math.random() * 4;
                              this.atox[this.mc.b_rt] += this.xx2;
                              this.atox[this.mc.b_lt] += this.xx2;
                              if(this.mc.master != -1)
                              {
                                 this.i2 = this.mc.master;
                                 this.PutoutCar(_loc6_);
                                 this.mens[this.i2].stability = -1;
                                 this.mens[this.i2].x = this.xx;
                                 this.mens[this.i2].y = this.yy;
                                 this.mens[this.i2].tox = 0;
                                 this.mens[this.i2].toy = 0;
                              }
                           }
                        }
                        else if(this.mc.master != -1)
                        {
                           this.mc2 = this.mens[this.mc.master];
                           this.mc2.stability = -0.1;
                           this.mc2.side = this.mc.side;
                           this.mc2.x = this.mc.x;
                           this.mc2.y = this.mc.y;
                           this.mc2.tox = 0;
                           this.mc2.toy = 0;
                           this.xx2 = 0;
                           this.yy2 = 0;
                           this.TurnBone3(this.mc2.b_leg1,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                           this.TurnBone3(this.mc2.b_leg2,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                           this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,this.xx2,this.yy2,1);
                           this.TurnBone3(this.mc2.b_head_end,this.xx,this.yy - 30,this.xx2,this.yy2,1);
                        }
                        this.mc.x = this.xx;
                        this.mc.y = this.yy;
                        this.xx2 = Math.atan2(this.ax[this.mc.b_lb] - this.ax[this.mc.b_rb],this.ay[this.mc.b_lb] - this.ay[this.mc.b_rb]);
                        this.mc.cap_b.rotation = 270 - this.xx2 / Math.PI * 180;
                        this.mc.cap_b.x = (this.ax[this.mc.b_lb] + this.ax[this.mc.b_rb]) / 2 - this.xx;
                        this.mc.cap_b.y = (this.ay[this.mc.b_lb] + this.ay[this.mc.b_rb]) / 2 - this.yy;
                        this.xx2 = Math.atan2(this.ax[this.mc.b_lt] - this.ax[this.mc.b_rt],this.ay[this.mc.b_lt] - this.ay[this.mc.b_rt]);
                        this.mc.cap_t.rotation = 90 - this.xx2 / Math.PI * 180;
                        this.mc.cap_t.x = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rt]) / 2 - this.xx;
                        this.mc.cap_t.y = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rt]) / 2 - this.yy;
                        this.xx2 = Math.atan2(this.ax[this.mc.b_lt2] - this.ax[this.mc.b_lb2],this.ay[this.mc.b_lt2] - this.ay[this.mc.b_lb2]);
                        this.mc.cap_l.rotation = 180 - this.xx2 / Math.PI * 180;
                        this.mc.cap_l.x = (this.ax[this.mc.b_lt2] + this.ax[this.mc.b_lb2]) / 2 - this.xx;
                        this.mc.cap_l.y = (this.ay[this.mc.b_lt2] + this.ay[this.mc.b_lb2]) / 2 - this.yy;
                        this.xx2 = Math.atan2(this.ax[this.mc.b_rt2] - this.ax[this.mc.b_rb2],this.ay[this.mc.b_rt2] - this.ay[this.mc.b_rb2]);
                        this.mc.cap_r.rotation = -this.xx2 / Math.PI * 180;
                        this.mc.cap_r.x = (this.ax[this.mc.b_rt2] + this.ax[this.mc.b_rb2]) / 2 - this.xx;
                        this.mc.cap_r.y = (this.ay[this.mc.b_rt2] + this.ay[this.mc.b_rb2]) / 2 - this.yy;
                     }
                     else if(this.mc.typ == 3)
                     {
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.dead = true;
                              this.PlaySound(this.s_box_die,this.mc.x,this.mc.y);
                              this.mc.rotation = 0;
                              this.mc.gotoAndStop(2);
                              this.n2 = 0;
                              while(this.n2 < 10)
                              {
                                 this.mc["b_g" + this.n2] = this.CreatePoint(this.mc.x + this.mc["g" + this.n2].x,this.mc.y + this.mc["g" + this.n2].y,(Math.random() - 0.5) * 10,(Math.random() - 0.5) * 10,0,false,9,-_loc6_ - 200);
                                 if(Math.random() < 0.33)
                                 {
                                    this.mc["g" + this.n2].gotoAndStop(1);
                                 }
                                 else if(Math.random() > 0.5)
                                 {
                                    this.mc["g" + this.n2].gotoAndStop(2);
                                 }
                                 else
                                 {
                                    this.mc["g" + this.n2].gotoAndStop(3);
                                 }
                                 ++this.n2;
                              }
                              this.aio[this.mc.b_c] = -1;
                              this.aio[this.mc.b_lt] = -1;
                              this.aio[this.mc.b_rt] = -1;
                              this.aio[this.mc.b_lb] = -1;
                              this.aio[this.mc.b_rb] = -1;
                              if(this.mc.wep0 != -1)
                              {
                                 this.i2 = this.mc.wep0;
                                 this.guns[this.i2].picken_by = -1;
                                 this.guns[this.i2].forcars = false;
                                 this.aio[this.guns[this.i2].b_p1] = true;
                                 this.atim[this.guns[this.i2].b_p1] = 0;
                                 this.aio[this.guns[this.i2].b_p2] = true;
                                 this.atim[this.guns[this.i2].b_p2] = 0;
                                 this.atox[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atox[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.guns[this.i2].alpha = 1;
                              }
                              if(this.mc.wep1 != -1)
                              {
                                 this.i2 = this.mc.wep1;
                                 this.guns[this.i2].picken_by = -1;
                                 this.guns[this.i2].forcars = false;
                                 this.aio[this.guns[this.i2].b_p1] = true;
                                 this.atim[this.guns[this.i2].b_p1] = 0;
                                 this.aio[this.guns[this.i2].b_p2] = true;
                                 this.atim[this.guns[this.i2].b_p2] = 0;
                                 this.atox[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atox[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.guns[this.i2].alpha = 1;
                              }
                              if(this.mc.wep2 != -1)
                              {
                                 this.i2 = this.mc.wep2;
                                 this.guns[this.i2].picken_by = -1;
                                 this.guns[this.i2].forcars = false;
                                 this.aio[this.guns[this.i2].b_p1] = true;
                                 this.atim[this.guns[this.i2].b_p1] = 0;
                                 this.aio[this.guns[this.i2].b_p2] = true;
                                 this.atim[this.guns[this.i2].b_p2] = 0;
                                 this.atox[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p1] = -3 + Math.random() * 6;
                                 this.atox[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.atoy[this.guns[this.i2].b_p2] = -3 + Math.random() * 6;
                                 this.guns[this.i2].alpha = 1;
                              }
                           }
                        }
                        else
                        {
                           if(this.mc.grabtim > 0)
                           {
                              --this.mc.grabtim;
                              if(this.mc.wep0 == -1)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.gunstotal && this.mc.wep0 == -1)
                                 {
                                    if(this.guns[this.i2].io)
                                    {
                                       if(!this.guns[this.i2].forcars)
                                       {
                                          if(this.guns[this.i2].picken_by == -1)
                                          {
                                             if(this.guns[this.i2].x > this.mc.x - 100 && this.guns[this.i2].x < this.mc.x + 100 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 100)
                                             {
                                                this.guns[this.i2].picken_by = _loc6_;
                                                this.guns[this.i2].forcars = true;
                                                this.guns[this.i2].alpha = 0;
                                                this.mc.wep0 = this.i2;
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                              else if(this.mc.wep1 == -1)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.gunstotal && this.mc.wep1 == -1)
                                 {
                                    if(this.guns[this.i2].io)
                                    {
                                       if(!this.guns[this.i2].forcars)
                                       {
                                          if(this.guns[this.i2].picken_by == -1)
                                          {
                                             if(this.guns[this.i2].x > this.mc.x - 100 && this.guns[this.i2].x < this.mc.x + 100 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 100)
                                             {
                                                this.guns[this.i2].picken_by = _loc6_;
                                                this.guns[this.i2].forcars = true;
                                                this.guns[this.i2].alpha = 0;
                                                this.mc.wep1 = this.i2;
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                              else if(this.mc.wep2 == -1)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.gunstotal && this.mc.wep2 == -1)
                                 {
                                    if(this.guns[this.i2].io)
                                    {
                                       if(!this.guns[this.i2].forcars)
                                       {
                                          if(this.guns[this.i2].picken_by == -1)
                                          {
                                             if(this.guns[this.i2].x > this.mc.x - 100 && this.guns[this.i2].x < this.mc.x + 100 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 100)
                                             {
                                                this.guns[this.i2].picken_by = _loc6_;
                                                this.guns[this.i2].forcars = true;
                                                this.guns[this.i2].alpha = 0;
                                                this.mc.wep2 = this.i2;
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                           }
                           if(this.mc.wep0 != -1)
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                           }
                           if(this.mc.wep1 != -1)
                           {
                              this.mc2 = this.guns[this.mc.wep1];
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                           }
                           if(this.mc.wep2 != -1)
                           {
                              this.mc2 = this.guns[this.mc.wep2];
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                           }
                        }
                        if(this.mc.currentFrame == 1)
                        {
                           this.mc.x = this.ax[this.mc.b_c];
                           this.mc.y = this.ay[this.mc.b_c];
                           this.xx2 = Math.atan2(this.ax[this.mc.b_lb] - this.ax[this.mc.b_rb],this.ay[this.mc.b_lb] - this.ay[this.mc.b_rb]);
                           this.mc.rotation = 180 - this.xx2 / Math.PI * 180;
                        }
                        else
                        {
                           this.n2 = 0;
                           while(this.n2 < 10)
                           {
                              if(this.mc["g" + this.n2].visible == true)
                              {
                                 this.mc["g" + this.n2].x = this.ax[this.mc["b_g" + this.n2]] - this.mc.x;
                                 this.mc["g" + this.n2].y = this.ay[this.mc["b_g" + this.n2]] - this.mc.y;
                                 this.mc["g" + this.n2].rotation = this.mc["g" + this.n2].x * 3 + this.n2 * 60;
                                 if(this.aio[this.mc["b_g" + this.n2]] == false)
                                 {
                                    if(this.mc["g" + this.n2].alpha > 0)
                                    {
                                       this.mc["g" + this.n2].alpha -= 0.1;
                                    }
                                    else
                                    {
                                       this.mc["g" + this.n2].visible = false;
                                       this.aio[this.mc["b_g" + this.n2]] = -1;
                                    }
                                 }
                                 else if(this.mc["g" + this.n2].alpha < 1)
                                 {
                                    this.mc["g" + this.n2].alpha += 0.1;
                                 }
                              }
                              ++this.n2;
                           }
                        }
                     }
                     else if(this.mc.typ == 4 || this.mc.typ == 7)
                     {
                        this.xx2 = Math.atan2(this.ax[this.mc.b_c] - this.ax[this.mc.b_c1],this.ay[this.mc.b_c] - this.ay[this.mc.b_c1]);
                        if(this.mc.wep0 == -1)
                        {
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal)
                           {
                              if(this.guns[this.i2].io)
                              {
                                 if(this.guns[this.i2].forcars)
                                 {
                                    if(this.guns[this.i2].picken_by == -1)
                                    {
                                       if(this.guns[this.i2].x > this.mc.x - 100 && this.guns[this.i2].x < this.mc.x + 100 && this.guns[this.i2].y > this.mc.y - 100 && this.guns[this.i2].y < this.mc.y + 100)
                                       {
                                          this.guns[this.i2].picken_by = _loc6_;
                                          this.mc.wep0 = this.i2;
                                          this.ChangedGun(this.mc.master);
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                        }
                        else
                        {
                           this.mc2 = this.guns[this.mc.wep0];
                           this.mc2.scaleY = this.mc.side;
                           if(this.mc.master != -1 && this.mc.hea > 0)
                           {
                              this.yy = this.mens[this.mc.master].ang;
                              this.mens[this.mc.master].curwea = this.mc.wep0;
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c2] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_c2] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                           }
                           else
                           {
                              this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c2] - Math.sin(this.xx2) * this.mc2.len2,this.ay[this.mc.b_c2] - Math.cos(this.xx2) * this.mc2.len2,this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                           }
                        }
                        if(this.mc.master != -1)
                        {
                           if(this.mens[this.mc.master].io)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              if(this.mc2.dead)
                              {
                                 this.mc.hea = 0;
                              }
                              if(this.mc.hea > 0)
                              {
                                 if(!this.mc2.isplayer)
                                 {
                                    if(this.mc.typ == 4)
                                    {
                                       if(this.TraceLine(this.mc.x,this.mc.y,this.mc.x,this.mc.y + 400))
                                       {
                                          this.mc2.act_movey = 1;
                                       }
                                    }
                                    if(this.mc.typ == 7)
                                    {
                                       if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + this.mc2.act_movex * 200,this.mc.y - 100))
                                       {
                                          this.mc2.act_movey = 1;
                                       }
                                    }
                                    if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + this.mc2.act_movex * 200,this.mc.y + 100))
                                    {
                                       this.mc2.act_movey = -1;
                                    }
                                 }
                                 this.u = 1;
                                 this.v = 1;
                                 if(this.mc.typ == 7)
                                 {
                                    this.u = 2;
                                    this.v = 1.5;
                                 }
                                 this.atoy[this.mc.b_c] -= 0.8 * this.GSPEED;
                                 this.atoy[this.mc.b_c1] -= 0.8 * this.GSPEED;
                                 this.atoy[this.mc.b_c2] += 0.8 * this.GSPEED;
                                 this.atoy[this.mc.b_c3] += 0.8 * this.GSPEED;
                                 this.atox[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                 this.atoy[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                 this.atox[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                 this.atoy[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                 this.atox[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                 this.atoy[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                 this.atox[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                 this.atoy[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                 this.atoy[this.mc.b_c] += this.mc2.act_movey * 2 * this.GSPEED * this.v;
                                 this.atoy[this.mc.b_c1] += this.mc2.act_movey * 2 * this.GSPEED * this.v;
                                 this.atox[this.mc.b_c] += this.mc2.act_movex * 1 * this.GSPEED * this.u;
                                 this.atox[this.mc.b_c1] += this.mc2.act_movex * 1 * this.GSPEED * this.u;
                                 this.atox[this.mc.b_c2] += this.mc2.act_movex * 0.5 * this.GSPEED * this.u;
                                 this.atox[this.mc.b_c3] += this.mc2.act_movex * 0.5 * this.GSPEED * this.u;
                                 this.aio[this.mc.b_c] = true;
                                 this.aio[this.mc.b_c1] = true;
                                 this.aio[this.mc.b_c2] = true;
                                 this.aio[this.mc.b_c3] = true;
                                 this.atim[this.mc.b_c] = 0;
                                 this.atim[this.mc.b_c1] = 0;
                                 this.atim[this.mc.b_c2] = 0;
                                 this.atim[this.mc.b_c3] = 0;
                                 if(this.mc2.tarx > this.mc.x + 50 && this.mc.side == -1 || this.mc2.tarx < this.mc.x - 50 && this.mc.side == 1)
                                 {
                                    this.i2 = this.mc.b_c;
                                    this.mc.b_c = this.mc.b_c1;
                                    this.mc.b_c1 = this.i2;
                                    this.i2 = this.mc.b_c2;
                                    this.mc.b_c2 = this.mc.b_c3;
                                    this.mc.b_c3 = this.i2;
                                    if(this.mc2.tarx > this.mc.x)
                                    {
                                       this.mc.side = 1;
                                    }
                                    else
                                    {
                                       this.mc.side = -1;
                                    }
                                    this.mc.carbody.scaleY = this.mc.side;
                                    this.xx2 = Math.atan2(this.ax[this.mc.b_c] - this.ax[this.mc.b_c1],this.ay[this.mc.b_c] - this.ay[this.mc.b_c1]);
                                 }
                              }
                              else
                              {
                                 this.mc.hea = 0;
                              }
                              this.mc2.stability = -0.1;
                              this.xx = this.ax[this.mc.b_c];
                              this.yy = this.ay[this.mc.b_c];
                              this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,0,0,1);
                              this.mc2.x = this.xx;
                              this.mc2.y = this.yy;
                              this.mc2.tox = 0;
                              this.mc2.toy = 0;
                           }
                        }
                        if(this.mc.hea <= 0)
                        {
                           if(!this.mc.dead)
                           {
                              this.mc.dead = true;
                              if(this.mc.master != -1)
                              {
                                 this.mc2.hea = 0;
                                 this.mc2.visible = false;
                                 this.mc2.alpha = 0;
                              }
                              this.mc.gotoAndStop(3);
                              this.mc.carbody.scaleY = this.mc.side;
                              if(this.mc.typ == 4)
                              {
                                 this.PlaySound(this.s_drone_die,this.mc.x,this.mc.y);
                              }
                              else
                              {
                                 this.PlaySound(this.s_corvett_die,this.mc.x,this.mc.y);
                              }
                              if(this.mc.typ == 4)
                              {
                                 this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],200,8,30,-1);
                              }
                              else
                              {
                                 this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],400,11,80,-1);
                              }
                           }
                        }
                        this.mc.x = this.ax[this.mc.b_c];
                        this.mc.y = this.ay[this.mc.b_c] + 100;
                        this.mc.carbody.y = -100;
                        this.mc.carbody.rotation = 270 - this.xx2 / Math.PI * 180;
                     }
                     else if(this.mc.typ == 5)
                     {
                        this.ax[this.mc.b_c0] = this.mc.x;
                        this.ay[this.mc.b_c0] = this.mc.y;
                        this.atox[this.mc.b_c0] = 0;
                        this.atoy[this.mc.b_c0] = 0;
                        if(this.mc.resttim > 0)
                        {
                           --this.mc.resttim;
                        }
                        this.i2 = 0;
                        while(this.i2 < 9)
                        {
                           this.mc["ch" + this.i2].x = this.ax[this.mc["b_c" + this.i2]] - this.mc.x;
                           this.mc["ch" + this.i2].y = this.ay[this.mc["b_c" + this.i2]] - this.mc.y;
                           this.aio[this.mc["b_c" + this.i2]] = true;
                           this.atim[this.mc["b_c" + this.i2]] = 0;
                           this.mc["ch" + this.i2].rotation = 180 - Math.atan2(this.ax[this.mc["b_c" + this.i2]] - this.ax[this.mc["b_c" + (this.i2 + 1)]],this.ay[this.mc["b_c" + this.i2]] - this.ay[this.mc["b_c" + (this.i2 + 1)]]) * 180 / Math.PI;
                           this.mc["ch" + this.i2].scaleY = this.Dist2D(this.ax[this.mc["b_c" + this.i2]],this.ay[this.mc["b_c" + this.i2]],this.ax[this.mc["b_c" + (this.i2 + 1)]],this.ay[this.mc["b_c" + (this.i2 + 1)]]) * 0.01;
                           if(this.mc.resttim <= 0)
                           {
                              if(this.mc.master == -1)
                              {
                                 if(!this.key_pick)
                                 {
                                    if(this.mens[this.MP_myid].incar == -1)
                                    {
                                       if(this.Dist2D(this.ax[this.mc["b_c" + this.i2]],this.ay[this.mc["b_c" + this.i2]],this.ax[this.mens[this.MP_myid].b_arm2],this.ay[this.mens[this.MP_myid].b_arm2]) < 40)
                                       {
                                          this.mc.master = this.MP_myid;
                                          this.mc.holdat = this.i2;
                                       }
                                    }
                                 }
                              }
                           }
                           if(this.mc.master != -1)
                           {
                              if(this.aactive[this.mc.master])
                              {
                                 if(Math.round(this.mc.holdat) == this.i2)
                                 {
                                    this.mc2 = this.mens[this.mc.master];
                                    this.mc2.stability = -0.1;
                                    this.xx = (this.ax[this.mc2.b_body] + this.ax[this.mc["b_c" + this.i2]] * 3) * 0.25;
                                    this.yy = (this.ay[this.mc2.b_body] + this.ay[this.mc["b_c" + this.i2]] * 3) * 0.25;
                                    this.xx2 = (this.atox[this.mc2.b_body] + this.atox[this.mc["b_c" + this.i2]] * 3) * 0.25;
                                    this.yy2 = (this.atoy[this.mc2.b_body] + this.atoy[this.mc["b_c" + this.i2]] * 3) * 0.25;
                                    this.xx2 -= Math.cos(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * this.mc2.act_movex * 1;
                                    this.yy2 -= Math.sin(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * this.mc2.act_movex * 1;
                                    this.lax[this.mc["b_c" + this.i2]] = this.ax[this.mc["b_c" + this.i2]] = this.xx;
                                    this.lay[this.mc["b_c" + this.i2]] = this.ay[this.mc["b_c" + this.i2]] = this.yy;
                                    this.atox[this.mc["b_c" + this.i2]] = this.xx2;
                                    this.atoy[this.mc["b_c" + this.i2]] = this.yy2;
                                    this.u = this.xx2 - this.atox[this.mc2.b_body];
                                    this.v = this.yy2 - this.atoy[this.mc2.b_body];
                                    this.atox[this.mc2.b_body] += this.u;
                                    this.atoy[this.mc2.b_body] += this.v;
                                    this.atox[this.mc2.b_toe] += this.u * 0.8;
                                    this.atoy[this.mc2.b_toe] += this.v * 0.8;
                                    this.atox[this.mc2.b_head_start] += this.u;
                                    this.atoy[this.mc2.b_head_start] += this.v;
                                    this.atox[this.mc2.b_head_end] += this.u * 0.9;
                                    this.atoy[this.mc2.b_head_end] += this.v * 0.9;
                                    this.atox[this.mc2.b_arm1] += this.u;
                                    this.atoy[this.mc2.b_arm1] += this.v;
                                    this.atox[this.mc2.b_arm2] += this.u;
                                    this.atoy[this.mc2.b_arm2] += this.v;
                                    this.aio[this.mc["b_c" + this.i2]] = true;
                                    this.atim[this.mc["b_c" + this.i2]] = true;
                                    if(this.key_pick)
                                    {
                                       this.key_pick = false;
                                       this.mc.master = -1;
                                       this.mc.resttim = 10;
                                    }
                                    else if(this.key_fall || Boolean(this.mens[this.mc.master].dead))
                                    {
                                       this.key_fall = false;
                                       this.mc.master = -1;
                                       this.mc.resttim = 40;
                                    }
                                 }
                              }
                           }
                           ++this.i2;
                        }
                     }
                     else if(this.mc.typ == 6)
                     {
                        _loc7_ = 0;
                        _loc8_ = 0;
                        if(this.mc.attached != -1)
                        {
                           _loc9_ = this.mc.x;
                           _loc10_ = this.mc.y;
                           if(this.mc.side == 1)
                           {
                              this.mc.x = this.doors[this.mc.attached].x;
                           }
                           else
                           {
                              this.mc.x = this.doors[this.mc.attached].x + this.doors[this.mc.attached].w;
                           }
                           this.mc.y = this.doors[this.mc.attached].y;
                           _loc7_ = Number(this.doors[this.mc.attached].tox);
                           _loc8_ = Number(this.doors[this.mc.attached].toy);
                           if(this.mc.master != -1)
                           {
                              _loc9_ -= this.mc.x;
                              _loc10_ -= this.mc.y;
                              if((_loc11_ = this.Dist2D(_loc9_,_loc10_,0,0) / this.GSPEED) > 50)
                              {
                                 this.mc.master = -1;
                                 this.mc.resttim = 30;
                              }
                           }
                        }
                        if(this.mc.resttim > 0)
                        {
                           this.mc.resttim -= 1 * this.GSPEED2;
                        }
                        if(this.mc.resttim <= 0)
                        {
                           if(this.mc.master == -1 || this.mens[this.mc.master] != undefined && this.mens[this.mc.master].team == this.mens[this.MP_myid].team)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(!this.key_pick || this.i2 != this.MP_myid)
                                 {
                                    if(this.i2 == this.MP_myid || !this.mens[this.i2].isplayer)
                                    {
                                       if(this.aactive[this.i2])
                                       {
                                          if(!this.mens[this.i2].dead)
                                          {
                                             if(this.mens[this.i2].incar == -1)
                                             {
                                                if(this.mens[this.i2].side == this.mc.side)
                                                {
                                                   if(this.mens[this.i2].x < this.mc.x && this.mc.side == 1 || this.mens[this.i2].x > this.mc.x && this.mc.side == -1)
                                                   {
                                                      if(this.Dist2D(this.mc.x,this.mc.y,this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body]) < 50)
                                                      {
                                                         if(this.mens[this.i2].act_movey == -1 || this.mens[this.i2].act_movex == this.mc.side)
                                                         {
                                                            if(this.mens[this.i2].act_movey != 1)
                                                            {
                                                               if(this.Dist2D(this.atox[this.mens[this.i2].b_body],this.atoy[this.mens[this.i2].b_body],_loc7_,_loc8_) < 14)
                                                               {
                                                                  if(this.ay[this.mens[this.i2].b_body] > this.mc.y)
                                                                  {
                                                                     if(this.atoy[this.mens[this.i2].b_body] > 0.2 + _loc8_)
                                                                     {
                                                                        if(!this.mens[this.i2].stand)
                                                                        {
                                                                           if(this.mc.attached == -1 || this.TracePointOnlyBoxes(this.mc.x + this.mc.side * 5,this.mc.y - 5) && this.TracePointOnlyBoxes(this.mc.x - this.mc.side * 5,this.mc.y + 5))
                                                                           {
                                                                              this.mc.master = this.i2;
                                                                              if(this.MP_mode)
                                                                              {
                                                                                 if(this.i2 == this.MP_myid)
                                                                                 {
                                                                                    this.MP_last_linked = _loc6_;
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                        if(this.mc.master != -1)
                        {
                           if(this.aactive[this.mc.master])
                           {
                              this.mc2 = this.mens[this.mc.master];
                              if(this.mc2.stability > -0.1)
                              {
                                 this.mc2.stability = -0.1;
                              }
                              this.ax[this.mc2.b_arm2] = this.mc.x;
                              this.ay[this.mc2.b_arm2] = this.mc.y;
                              if(this.GET_LITE_PHYS())
                              {
                                 this.lax[this.mc2.b_arm2] = this.mc.x;
                                 this.lay[this.mc2.b_arm2] = this.mc.y;
                              }
                              this.atox[this.mc2.b_arm2] = _loc7_;
                              this.atoy[this.mc2.b_arm2] = _loc8_;
                              if(this.mc2.idd == this.MP_myid)
                              {
                                 this.xx2 = Math.sqrt(this.GSPEED2);
                              }
                              else
                              {
                                 this.xx2 = Math.sqrt(this.GSPEED);
                              }
                              this.yy2 = this.xx2;
                              this.u = this.xx2 * 2;
                              this.xx2 *= 1.5;
                              if(this.mc2.isplayer && (this.mc2.act_movey == 1 || this.mc2.act_movex == -this.mc2.side || this.key_fall && this.mc.master == this.MP_myid) || Boolean(this.mc2.dead) || this.mc2.stability < -0.3)
                              {
                                 this.atoy[this.mc2.b_toe] += 0.5;
                                 if(this.mc.master == this.MP_myid)
                                 {
                                    this.key_fall = false;
                                 }
                                 this.mc.master = -1;
                                 this.mc.resttim = 60;
                              }
                              else
                              {
                                 if(!this.mc2.isplayer || this.mc2.act_movey == -1 || this.mc2.act_movex == this.mc2.side || this.key_pick && this.mc.master == this.MP_myid)
                                 {
                                    if(this.ax[this.mc2.b_toe] < this.mc.x + 5 && this.mc2.side == 1 || this.ax[this.mc2.b_toe] > this.mc.x - 5 && this.mc2.side == -1)
                                    {
                                       this.atoy[this.mc2.b_toe] -= 0.5 * this.xx2;
                                       this.atoy[this.mc2.b_body] -= 0.5 * this.xx2;
                                       this.ay[this.mc2.b_toe] -= 2 * this.u;
                                       this.ay[this.mc2.b_body] -= 3 * this.u;
                                       if(this.GET_LITE_PHYS())
                                       {
                                          this.lay[this.mc2.b_toe] -= 2 * this.u;
                                          this.lay[this.mc2.b_body] -= 3 * this.u;
                                       }
                                       if(this.Math_abs(this.atox[this.mc2.b_leg1]) < 2 || this.Math_abs(this.atox[this.mc2.b_leg2]) < 2)
                                       {
                                          this.atoy[this.mc2.b_body] *= Math.pow(0.7,this.yy2);
                                          this.atoy[this.mc2.b_toe] *= Math.pow(0.7,this.yy2);
                                          this.atoy[this.mc2.b_head_start] *= Math.pow(0.7,this.yy2);
                                          this.atoy[this.mc2.b_head_end] *= Math.pow(0.7,this.yy2);
                                          this.atoy[this.mc2.b_body] -= 1 * this.xx2;
                                          this.ay[this.mc2.b_body] -= 1 * this.u;
                                          this.atoy[this.mc2.b_head_start] -= 0.6 * this.xx2;
                                          this.ay[this.mc2.b_head_start] -= 0.6 * this.u;
                                          this.atox[this.mc2.b_head_start] += this.mc.side * 0.8 * this.xx2;
                                          this.atoy[this.mc2.b_head_end] -= 0.6 * this.xx2;
                                          this.ay[this.mc2.b_head_end] -= 0.6 * this.u;
                                          this.atox[this.mc2.b_head_end] += this.mc.side * 1 * this.xx2;
                                          this.atoy[this.mc2.b_toe] -= 1 * this.xx2;
                                          this.ay[this.mc2.b_toe] -= 1 * this.u;
                                          if(!this.GET_LITE_PHYS())
                                          {
                                             this.atox[this.mc2.b_body] += this.mc.side * 0.7 * this.xx2;
                                             this.atox[this.mc2.b_toe] += this.mc.side * 0.5 * this.xx2;
                                          }
                                          if(this.GET_LITE_PHYS())
                                          {
                                             this.lay[this.mc2.b_body] -= 1 * this.u;
                                             this.lay[this.mc2.b_toe] -= 1 * this.u;
                                             this.lay[this.mc2.b_head_start] -= 0.6 * this.u;
                                             this.lay[this.mc2.b_head_end] -= 0.6 * this.u;
                                          }
                                          if(this.ay[this.mc2.b_toe] < this.mc.y - 5 || (this.ay[this.mc2.b_leg1] < this.mc.y || this.ay[this.mc2.b_leg2] < this.mc.y))
                                          {
                                             this.mc.master = -1;
                                             this.mc.resttim = 30;
                                             this.mc2.stability = 0.5;
                                             this.mc2.sit = 1;
                                             this.mc2.tox = _loc7_;
                                             this.mc2.toy = _loc8_;
                                             this.u = this.mc.x + this.mc2.side * 5 - this.mc2.x;
                                             this.v = this.mc.y + this.sitmax - this.mc2.y;
                                             this.u = -this.u;
                                             this.v = -this.v;
                                             this.mc2.x = this.mc.x + this.mc2.side * 5;
                                             this.mc2.y = this.mc.y + this.sitmax;
                                             this.mc2.gui.x += this.u;
                                             this.mc2.gui.y += this.v;
                                             this.mc2.body.x += this.u;
                                             this.mc2.body.y += this.v;
                                             this.mc2.head.x += this.u;
                                             this.mc2.head.y += this.v;
                                             this.mc2.toe.x += this.u;
                                             this.mc2.toe.y += this.v;
                                             this.mc2.arm1.x += this.u;
                                             this.mc2.arm1.y += this.v;
                                             this.mc2.arm2.x += this.u;
                                             this.mc2.arm2.y += this.v;
                                             this.mc2.leg1.x += this.u;
                                             this.mc2.leg1.y += this.v;
                                             this.mc2.leg2.x += this.u;
                                             this.mc2.leg2.y += this.v;
                                          }
                                       }
                                    }
                                    else if(this.mc2.side == 1)
                                    {
                                       this.atox[this.mc2.b_toe] -= 0.3 * this.xx2;
                                    }
                                    else
                                    {
                                       this.atox[this.mc2.b_toe] += 0.3 * this.xx2;
                                    }
                                 }
                                 this.atoy[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.1 * this.xx2;
                                 this.atoy[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.1 * this.xx2;
                                 this.ay[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.2 * this.xx2;
                                 this.ay[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.2 * this.xx2;
                                 if(this.GET_LITE_PHYS())
                                 {
                                    this.lay[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.2 * this.xx2;
                                    this.lay[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.2 * this.xx2;
                                 }
                              }
                              this.atox[this.mc2.b_body] += (this.mc.x - this.ax[this.mc2.b_body]) * 0.1 * this.xx2;
                              this.atox[this.mc2.b_toe] -= this.mc2.side * 0.5 * this.xx2;
                              this.atox[this.mc2.b_leg1] += this.mc2.side * 0.6 * this.xx2;
                              this.atox[this.mc2.b_leg2] += this.mc2.side * 0.6 * this.xx2;
                              this.atoy[this.mc2.b_leg1] -= 0.05 * this.xx2;
                              this.atoy[this.mc2.b_leg2] += 0.05 * this.xx2;
                              if(this.mc2.side == 1)
                              {
                                 if(this.ax[this.mc2.b_toe] > this.mc.x)
                                 {
                                    this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                    this.atox[this.mc2.b_toe] = Math.min(_loc7_,this.atox[this.mc2.b_toe]);
                                 }
                                 if(this.ax[this.mc2.b_body] > this.mc.x)
                                 {
                                    this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                    this.atox[this.mc2.b_body] = Math.min(_loc7_,this.atox[this.mc2.b_body]);
                                 }
                                 if(this.ax[this.mc2.b_leg2] > this.mc.x)
                                 {
                                    this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                    this.atox[this.mc2.b_leg2] = Math.min(_loc7_,this.atox[this.mc2.b_leg2]);
                                 }
                                 if(this.ax[this.mc2.b_leg1] > this.mc.x)
                                 {
                                    this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                    this.atox[this.mc2.b_leg1] = Math.min(_loc7_,this.atox[this.mc2.b_leg1]);
                                 }
                              }
                              else
                              {
                                 if(this.ax[this.mc2.b_toe] < this.mc.x)
                                 {
                                    this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                    this.atox[this.mc2.b_toe] = Math.max(_loc7_,this.atox[this.mc2.b_toe]);
                                 }
                                 if(this.ax[this.mc2.b_body] < this.mc.x)
                                 {
                                    this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                    this.atox[this.mc2.b_body] = Math.max(_loc7_,this.atox[this.mc2.b_body]);
                                 }
                                 if(this.ax[this.mc2.b_leg2] < this.mc.x)
                                 {
                                    this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                    this.atox[this.mc2.b_leg2] = Math.max(_loc7_,this.atox[this.mc2.b_leg2]);
                                 }
                                 if(this.ax[this.mc2.b_leg1] < this.mc.x)
                                 {
                                    this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                    this.atox[this.mc2.b_leg1] = Math.max(_loc7_,this.atox[this.mc2.b_leg1]);
                                 }
                              }
                           }
                        }
                     }
                     if(this.mc.gui.visible)
                     {
                        this.mc.gui.x = 0;
                        this.mc.gui.y = -150;
                        if(this.mc.hea > 0)
                        {
                           this.mc.gui.h.scaleX = this.mc.hea / this.mc.hmax;
                        }
                        else if(this.mc.gui.alpha > 0)
                        {
                           this.mc.gui.h.scaleX = 0;
                           this.mc.gui.alpha -= 0.1 * this.GSPEED;
                        }
                        else
                        {
                           this.mc.gui.visible = false;
                        }
                     }
                     if(!this.vehicles[_loc6_].visible)
                     {
                        this.vehicles[_loc6_].visible = true;
                     }
                  }
                  else
                  {
                     this.aactive[-200 - _loc6_] = false;
                     if(this.vehicles[_loc6_].visible)
                     {
                        this.vehicles[_loc6_].visible = false;
                     }
                  }
               }
               _loc6_++;
            }
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].io)
               {
                  if(this.guns[_loc6_].picken_by == this.MP_myid)
                  {
                     if(this.guns[_loc6_].ThinkNow != undefined)
                     {
                        this.guns[_loc6_].ThinkNow(this.GSPEED2 * this.guns[_loc6_].speed_multiplier);
                     }
                  }
                  else if(this.guns[_loc6_].ThinkNow != undefined)
                  {
                     this.guns[_loc6_].ThinkNow(this.GSPEED * this.guns[_loc6_].speed_multiplier);
                  }
                  if(!this.guns[_loc6_].ready)
                  {
                     if(this.guns[_loc6_].picken_by == this.MP_myid)
                     {
                        this.guns[_loc6_].floatframe += this.GSPEED2 * this.guns[_loc6_].speed_multiplier;
                     }
                     else
                     {
                        this.guns[_loc6_].floatframe += this.GSPEED * this.guns[_loc6_].speed_multiplier;
                     }
                     this.MeasureStart(13);
                     if(this.guns[_loc6_].floatframe >= this.guns[_loc6_].totalFrames)
                     {
                        this.guns[_loc6_].floatframe = 2;
                        this.guns[_loc6_].ready = true;
                        this.guns[_loc6_].gotoAndStop(2);
                     }
                     else if(this.guns[_loc6_].currentFrame < Math.floor(this.guns[_loc6_].floatframe))
                     {
                        _loc12_ = 0;
                        while(_loc12_ < Math.floor(this.guns[_loc6_].floatframe) - this.guns[_loc6_].currentFrame)
                        {
                           this.guns[_loc6_].nextFrame();
                           _loc12_++;
                        }
                     }
                     else
                     {
                        this.guns[_loc6_].gotoAndStop(Math.floor(this.guns[_loc6_].floatframe));
                     }
                     this.MeasureStop(13);
                  }
                  if(this.guns[_loc6_].ready)
                  {
                     if(this.guns[_loc6_].currentFrame != 2)
                     {
                        this.guns[_loc6_].gotoAndStop(2);
                        this.guns[_loc6_].floatframe = 2;
                     }
                  }
                  if(this.guns[_loc6_].ray != undefined)
                  {
                     this.ok = false;
                     this.ok2 = false;
                     if(this.guns[_loc6_].picken_by != -1)
                     {
                        if(!this.mens[this.guns[_loc6_].picken_by].dead)
                        {
                           if(this.mens[this.guns[_loc6_].picken_by].curwea == _loc6_)
                           {
                              this.ok2 = true;
                              this.xx = this.guns[_loc6_].x;
                              this.yy = this.guns[_loc6_].y;
                              this.xx2 = this.xx + Math.sin(this.mens[this.guns[_loc6_].picken_by].ang) * 3000;
                              this.yy2 = this.yy + Math.cos(this.mens[this.guns[_loc6_].picken_by].ang) * 3000;
                              this.u = 3000;
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(!this.mens[this.i2].dying)
                                 {
                                    if(!this.mens[this.i2].dead)
                                    {
                                       if(this.mens[this.guns[_loc6_].picken_by].team != this.mens[this.i2].team)
                                       {
                                          if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.mens[this.i2].x - this.PLAYER_WIDTH,this.mens[this.i2].y - 81,this.mens[this.i2].x + this.PLAYER_WIDTH,this.mens[this.i2].y) || this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.mens[this.i2].x + this.PLAYER_WIDTH,this.mens[this.i2].y - 81,this.mens[this.i2].x - this.PLAYER_WIDTH,this.mens[this.i2].y))
                                          {
                                             if(this.TraceLine(this.retux,this.retuy,this.xx,this.yy))
                                             {
                                                this.ok = true;
                                                this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                                if(this.v < this.u)
                                                {
                                                   this.xx2 = this.retux;
                                                   this.yy2 = this.retuy;
                                                   this.u = this.v;
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              this.i2 = 0;
                              while(this.i2 < this.boxestotal)
                              {
                                 if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2]))
                                 {
                                    this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                    if(this.v < this.u)
                                    {
                                       this.xx2 = this.retux;
                                       this.yy2 = this.retuy;
                                       this.u = this.v;
                                    }
                                 }
                                 if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                                 {
                                    this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                    if(this.v < this.u)
                                    {
                                       this.xx2 = this.retux;
                                       this.yy2 = this.retuy;
                                       this.u = this.v;
                                    }
                                 }
                                 if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                                 {
                                    this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                    if(this.v < this.u)
                                    {
                                       this.xx2 = this.retux;
                                       this.yy2 = this.retuy;
                                       this.u = this.v;
                                    }
                                 }
                                 if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                                 {
                                    this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                    if(this.v < this.u)
                                    {
                                       this.xx2 = this.retux;
                                       this.yy2 = this.retuy;
                                       this.u = this.v;
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                     this.MeasureStart(14);
                     if(this.guns[_loc6_].ready)
                     {
                        if(this.guns[_loc6_].riflestatus != undefined)
                        {
                           if(this.ok)
                           {
                              this.guns[_loc6_].riflestatus.gotoAndStop(2);
                           }
                           else
                           {
                              this.guns[_loc6_].riflestatus.gotoAndStop(1);
                           }
                        }
                     }
                     this.MeasureStop(14);
                     if(this.ok2 && Boolean(this.guns[_loc6_].ready))
                     {
                        this.guns[_loc6_].ray.scaleX = this.u / 100 / this.COMIC_SCALE_GUNS;
                        this.guns[_loc6_].ray.visible = true;
                        this.guns[_loc6_].ray.rotation = (90 - this.guns[_loc6_].rotation - this.mens[this.guns[_loc6_].picken_by].ang / Math.PI * 180) * (this.guns[_loc6_].scaleY / this.COMIC_SCALE_GUNS);
                     }
                     else
                     {
                        this.guns[_loc6_].ray.visible = false;
                     }
                  }
                  if(this.ax[this.guns[_loc6_].b_p1] > this.render_minX && this.ax[this.guns[_loc6_].b_p1] < this.render_maxX && this.ay[this.guns[_loc6_].b_p1] > this.render_minY && this.ay[this.guns[_loc6_].b_p1] < this.render_maxY || this.firstframe || this.guns[_loc6_].picken_by != -1 && this.aactive[this.guns[_loc6_].picken_by])
                  {
                     this.mc = this.guns[_loc6_];
                     if(this.mc.av > this.mc.stat_averange_max)
                     {
                        this.mc.av = this.mc.stat_averange_max - this.mc.stat_averange_substract;
                     }
                     else if(this.mc.picken_by == this.MP_myid)
                     {
                        this.mc.av -= this.mc.stat_averange_substract * this.GSPEED2;
                     }
                     else
                     {
                        this.mc.av -= this.mc.stat_averange_substract * this.GSPEED;
                     }
                     if(this.mc.av < this.mc.stat_averange_min)
                     {
                        this.mc.av = this.mc.stat_averange_min;
                     }
                     this.aactive[-1 - _loc6_] = true;
                     if(this.mc.forcars == false)
                     {
                        if(this.mc.picken_by != -1)
                        {
                           if(!this.mens[this.mc.picken_by].io)
                           {
                              this.mc.picken_by = -1;
                           }
                        }
                        if(this.mc.picken_by != -1)
                        {
                           this.mc2 = this.mens[this.mc.picken_by];
                           this.mc.scaleY = this.mc2.side * this.COMIC_SCALE_GUNS;
                           this.mc.scaleX = this.COMIC_SCALE_GUNS;
                           if(this.mc.alpha != this.mc2.alpha)
                           {
                              this.mc.alpha = this.mc2.alpha;
                           }
                           if(this.mc2.curwea == _loc6_)
                           {
                              if(!this.mc2.brk_arms)
                              {
                                 this.xx = Math.atan2(this.ax[this.mc2.b_body] - this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_body] - this.ay[this.mc2.b_arm1]);
                                 this.yy = this.chdef[this.mc.ch_ch1];
                                 this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_arm1] + Math.sin(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.ay[this.mc2.b_arm1] + Math.cos(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.mc2,1);
                                 if(!this.mc2.dying || this.mc2.isplayer || !this.EASY_MODE)
                                 {
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_arm1] - Math.sin(this.xx) * this.yy + Math.sin(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.ay[this.mc2.b_arm1] - Math.cos(this.xx) * this.yy + Math.cos(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.mc2,1);
                                 }
                              }
                           }
                           else
                           {
                              if(this.mc.attachment == 0)
                              {
                                 this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.mc2,1);
                                 this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],this.mc2,1);
                              }
                              if(this.mc.attachment == 1)
                              {
                                 this.xx = Math.atan2(this.ax[this.mc2.b_body] - this.ax[this.mc2.b_toe],this.ay[this.mc2.b_body] - this.ay[this.mc2.b_toe]) - Math.PI / 2;
                                 this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_toe] - Math.sin(this.xx) * 15 * this.mc2.side,this.ay[this.mc2.b_toe] - Math.cos(this.xx) * 15 * this.mc2.side,this.mc2,1);
                                 this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_body] - Math.sin(this.xx) * 15 * this.mc2.side,this.ay[this.mc2.b_body] - Math.cos(this.xx) * 15 * this.mc2.side,this.mc2,1);
                              }
                           }
                           if(Boolean(this.mc2.dead) || !this.mc2.isplayer && (this.mc2.dying || this.mc2.stability < -0.2) && Math.random() < 0.01 * this.GSPEED && this.mc2.team != this.mens[this.MP_myid].team)
                           {
                              if(!this.CASUAL_MODE || !this.STRICT_MODE || this.mc2.team != this.mens[this.MP_myid].team || this.mc2.brk_arms || Boolean(this.mc2.brk_head) || Boolean(this.mc2.brk_legs) || Boolean(this.mc2.brk_body))
                              {
                                 if(this.mc2.curwea == _loc6_)
                                 {
                                    this.mc2.curwea = -1;
                                 }
                                 this.ChangedGun(this.mc.picken_by);
                                 if(this.mc2.dead)
                                 {
                                    this.xx = 1 + Math.random() * Math.PI * 2;
                                    this.atox[this.mc.b_p1] += Math.sin(this.xx) * 2;
                                    this.atoy[this.mc.b_p1] += Math.cos(this.xx) * 2;
                                    this.atox[this.mc.b_p2] -= Math.sin(this.xx) * 2;
                                    this.atoy[this.mc.b_p2] -= Math.cos(this.xx) * 2;
                                 }
                                 if(this.mc.picken_by == this.MP_myid)
                                 {
                                    if(this.mc.wep == -2)
                                    {
                                       if(this.mc.nadekind == 1)
                                       {
                                          if(this.grenades_total > 0)
                                          {
                                             --this.grenades_total;
                                          }
                                       }
                                       if(this.mc.nadekind == 2)
                                       {
                                          if(this.grenades_port_total > 0)
                                          {
                                             --this.grenades_port_total;
                                          }
                                       }
                                       if(this.mc.nadekind == 3)
                                       {
                                          if(this.grenades_sh_total > 0)
                                          {
                                             --this.grenades_sh_total;
                                          }
                                       }
                                    }
                                 }
                                 this.mc.picken_by = -1;
                              }
                           }
                           this.WakeUpAtom(this.mc.b_p1);
                           this.WakeUpAtom(this.mc.b_p2);
                           this.amat[this.mc.b_p1] = -1;
                           this.amat[this.mc.b_p2] = -1;
                        }
                        else
                        {
                           this.ok = true;
                           this.i2 = 0;
                           while(this.i2 < this.gunstotal && this.ok)
                           {
                              if(this.guns[this.i2].io)
                              {
                                 if(!this.guns[this.i2].forcars)
                                 {
                                    if(this.guns[this.i2].wep > 0)
                                    {
                                       if(this.guns[this.i2].picken_by == this.MP_myid)
                                       {
                                          if(this.guns[this.i2].model == this.mc.model)
                                          {
                                             if(this.guns[this.i2].upg >= this.mc.upg)
                                             {
                                                this.ok = false;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i2;
                           }
                           if((this.mc.command != -1 || !this.ok) && this.mc.command != this.mens[this.MP_myid].team && !this.MP_mode)
                           {
                              if(!this.SUPER_COMPUTER && (!this.HQ || this.c_sim_stress) || this.MEAT_MODE)
                              {
                                 ++this.mc.deadtim;
                              }
                              if(this.c_sim_stress)
                              {
                                 if(this.mc.deadtim > 200)
                                 {
                                    this.mc.alpha -= 0.4;
                                 }
                              }
                              else if(this.mc.deadtim > 400)
                              {
                                 this.mc.alpha -= 0.1;
                              }
                              if(this.mc.alpha < 0)
                              {
                                 this.mc.io = false;
                                 this.mc.visible = false;
                                 this.aactive[-1 - _loc6_] = false;
                                 this.aio[this.mc.b_p1] = -1;
                                 this.aio[this.mc.b_p2] = -1;
                                 this.mc.x = -10000;
                                 this.mc.y = -10000;
                                 this.mc.scaleX = 0;
                                 this.mc.scaleY = 0;
                                 this.game.removeChild(this.mc);
                                 this.guns[_loc6_] = new Object();
                                 this.guns[_loc6_].io = false;
                              }
                           }
                           else if(this.mc.alpha != 1)
                           {
                              this.mc.alpha = 1;
                           }
                        }
                     }
                     else if(this.mc.picken_by != -1)
                     {
                        this.mc2 = this.vehicles[this.mc.picken_by];
                        this.amat[this.mc.b_p1] = -1;
                        this.amat[this.mc.b_p2] = -1;
                     }
                     if(this.mc.io)
                     {
                        this.mc.x = this.ax[this.mc.b_p1];
                        this.mc.y = this.ay[this.mc.b_p1];
                        this.mc.rotation = -Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_p2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_p2]) / Math.PI * 180 - 90;
                        if(this.mc.picken_by == -1)
                        {
                           if(this.mc.forcars == false)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal && this.mc.picken_by == -1)
                              {
                                 if(!this.mens[this.i2].dead)
                                 {
                                    if(!this.mens[this.i2].isplayer || this.MP_myid == this.i2 && !this.MP_spectator)
                                    {
                                       if(this.mc.command == -1 || this.MP_mode && this.MP_type == 1 || this.mc.command != -1 && this.mc.command == this.mens[this.i2].team && (this.mens[this.i2].isplayer || this.mens[this.MP_myid].team != this.mens[this.i2].team))
                                       {
                                          if(this.mens[this.i2].stability >= -0.5)
                                          {
                                             this.mc2 = this.mens[this.i2];
                                             if(!this.mc2.brk_arms)
                                             {
                                                if(this.mc.x > this.mc2.x - 40)
                                                {
                                                   if(this.mc.x < this.mc2.x + 40)
                                                   {
                                                      if(this.mc.y > this.mc2.y - 90)
                                                      {
                                                         if(this.mc.y < this.mc2.y + 30)
                                                         {
                                                            this.ok = true;
                                                            if(this.MP_mode)
                                                            {
                                                               if(this.MP_gamestate != 0)
                                                               {
                                                                  this.ok = false;
                                                               }
                                                            }
                                                            if(this.mc.wep != -2)
                                                            {
                                                               this.i3 = 0;
                                                               while(this.i3 < this.gunstotal && this.ok)
                                                               {
                                                                  if(this.guns[this.i3].io)
                                                                  {
                                                                     if(_loc6_ != this.i3)
                                                                     {
                                                                        if(!this.guns[this.i3].forcars)
                                                                        {
                                                                           if(this.guns[this.i3].picken_by == this.i2 && this.guns[this.i3].wep == this.mc.wep)
                                                                           {
                                                                              this.ok = false;
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                                  ++this.i3;
                                                               }
                                                            }
                                                            if(this.i2 == this.MP_myid && this.key_grab)
                                                            {
                                                               this.ok = false;
                                                            }
                                                            if(this.i2 == this.MP_myid)
                                                            {
                                                               if(this.mc.wep == -2)
                                                               {
                                                                  if(this.mc.nadekind == 1)
                                                                  {
                                                                     if(this.grenades_total >= 6)
                                                                     {
                                                                        this.ok = false;
                                                                     }
                                                                  }
                                                                  if(this.mc.nadekind == 2)
                                                                  {
                                                                     if(this.grenades_port_total >= 6)
                                                                     {
                                                                        this.ok = false;
                                                                     }
                                                                  }
                                                                  if(this.mc.nadekind == 3)
                                                                  {
                                                                     if(this.grenades_sh_total >= 6)
                                                                     {
                                                                        this.ok = false;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                            if(this.ok)
                                                            {
                                                               if(this.mc.wep == -2)
                                                               {
                                                                  if(this.i2 == this.MP_myid)
                                                                  {
                                                                     if(this.mc.nadekind == 1)
                                                                     {
                                                                        ++this.grenades_total;
                                                                        this.UpdateWeps();
                                                                     }
                                                                     if(this.mc.nadekind == 2)
                                                                     {
                                                                        ++this.grenades_port_total;
                                                                        this.UpdateWeps();
                                                                     }
                                                                     if(this.mc.nadekind == 3)
                                                                     {
                                                                        ++this.grenades_sh_total;
                                                                        this.UpdateWeps();
                                                                     }
                                                                  }
                                                               }
                                                               if(this.i2 == this.MP_myid)
                                                               {
                                                                  if(!this.firstframe)
                                                                  {
                                                                     this.PlaySound(this.s_wea_pickup,this.mc.x,this.mc.y);
                                                                  }
                                                               }
                                                               this.mc.picken_by = this.i2;
                                                               if(this.i2 != this.MP_myid)
                                                               {
                                                                  if(this.mc2.curwea == -1 || this.CalcWepPriority(this.guns[_loc6_]) > this.CalcWepPriority(this.guns[this.mc2.curwea]))
                                                                  {
                                                                     if(this.mc.wep >= 0)
                                                                     {
                                                                        this.mc2.curwea = _loc6_;
                                                                        this.mc.deadtim = 0;
                                                                        this.ChangedGun(this.i2);
                                                                     }
                                                                  }
                                                               }
                                                               if(this.i2 == this.MP_myid)
                                                               {
                                                                  if(this.AUTO_PICK_NEW_WEPS && !this.firstframe || this.mc2.char == 1 && this.firstframe && this.curA == this.mc.model || this.mc2.char == 3 && this.firstframe && this.curB == this.mc.model)
                                                                  {
                                                                     if(this.mc.wep >= 0)
                                                                     {
                                                                        this.mc2.curwea = _loc6_;
                                                                        this.ChangedGun(this.i2);
                                                                     }
                                                                  }
                                                                  else if(!this.firstframe)
                                                                  {
                                                                     if(this.mc.wep >= 0)
                                                                     {
                                                                        if(this.mc.wep <= 9)
                                                                        {
                                                                           this.weps["gi" + this.mc.wep].gotoAndStop(2);
                                                                        }
                                                                     }
                                                                  }
                                                                  this.UpdateWeps();
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                           this.amat[this.mc.b_p1] = 2;
                           this.amat[this.mc.b_p2] = 2;
                        }
                        if(!this.guns[_loc6_].visible)
                        {
                           this.guns[_loc6_].visible = true;
                        }
                     }
                  }
                  else
                  {
                     this.aactive[-1 - _loc6_] = false;
                     if(this.guns[_loc6_].visible)
                     {
                        this.guns[_loc6_].visible = false;
                     }
                  }
               }
               _loc6_++;
            }
            if(this.DEBUG_MODE)
            {
            }
            _loc6_ = 0;
            while(_loc6_ < this.timerstotal)
            {
               if(this.DEBUG_MODE)
               {
               }
               if(this.timers[_loc6_].enabledd)
               {
                  if(this.timers[_loc6_].maxcalls > 0 || this.timers[_loc6_].maxcalls == -1)
                  {
                     this.yy2 = 1;
                     if(this.timers[_loc6_].forcehyperjump)
                     {
                        this.timers[_loc6_].forcehyperjump = false;
                        this.yy2 = this.MP_ping2 / this.c_sim_rt2;
                     }
                     this.timers[_loc6_].ticknew += this.GSPEED * this.yy2;
                     if(this.timers[_loc6_].ticknew >= this.timers[_loc6_].ddelay)
                     {
                        this.timers[_loc6_].ticknew = 0;
                        if(this.timers[_loc6_].maxcalls != -1)
                        {
                           --this.timers[_loc6_].maxcalls;
                           if(this.timers[_loc6_].maxcalls <= 0)
                           {
                              this.timers[_loc6_].enabledd = false;
                           }
                        }
                        this.triggers[this.timers[_loc6_].actions_target].forcehyperjump = false;
                        this.EXEC_TRIGGER(this.timers[_loc6_].actions_target);
                     }
                  }
               }
               _loc6_++;
            }
            _loc6_ = 0;
            while(_loc6_ < this.barrelstotal)
            {
               if(this.barrels[_loc6_].x > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.barrels[_loc6_].x < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this.barrels[_loc6_].y > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.barrels[_loc6_].y < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[_loc6_].b_left_top] > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[_loc6_].b_left_top] < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this.ay[this.barrels[_loc6_].b_left_top] > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[_loc6_].b_left_top] < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[_loc6_].b_left_bottom] > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[_loc6_].b_left_bottom] < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this.ay[this.barrels[_loc6_].b_left_bottom] > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[_loc6_].b_left_bottom] < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale)
               {
                  this.aactive[-100 - _loc6_] = true;
                  this.mc = this.barrels[_loc6_];
                  if(this.mc.hea > 0)
                  {
                     this.mc.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_left_bottom]) / 4;
                     this.mc.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_left_bottom]) / 4;
                     this.mc.rotation = 180 - Math.atan2(this.ax[this.mc.b_left_top] - this.ax[this.mc.b_left_bottom],this.ay[this.mc.b_left_top] - this.ay[this.mc.b_left_bottom]) / Math.PI * 180;
                     if(this.aio[this.barrels[_loc6_].b_left_top] == true || this.aio[this.barrels[_loc6_].b_left_bottom] == true || this.aio[this.barrels[_loc6_].b_right_top] == true || this.aio[this.barrels[_loc6_].b_right_bottom] == true)
                     {
                        this.u = this.Dist2D(this.ax[this.barrels[_loc6_].b_left_top],this.ay[this.barrels[_loc6_].b_left_top],this.ax[this.barrels[_loc6_].b_right_top],this.ay[this.barrels[_loc6_].b_right_top]);
                        this.v = this.Dist2D(this.ax[this.barrels[_loc6_].b_left_top],this.ay[this.barrels[_loc6_].b_left_top],this.ax[this.barrels[_loc6_].b_left_bottom],this.ay[this.barrels[_loc6_].b_left_bottom]);
                        this.yy = this.Dist2D(this.ax[this.barrels[_loc6_].b_left_bottom],this.ay[this.barrels[_loc6_].b_left_bottom],this.ax[this.barrels[_loc6_].b_right_top],this.ay[this.barrels[_loc6_].b_right_top]);
                        this.xx = (this.u + this.v + this.yy) * 0.5;
                        this.xx = this.xx * (this.xx - this.u) * (this.xx - this.v) * (this.xx - this.yy);
                        if(this.xx < 1)
                        {
                           this.mc.hea = 0;
                           this.HurtBarrel(_loc6_);
                        }
                     }
                  }
                  else
                  {
                     this.mc.b1.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_left1] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_right1]) / 4 - this.mc.x;
                     this.mc.b1.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_left1] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_right1]) / 4 - this.mc.y;
                     this.mc.b1.rotation = -Math.atan2(this.ax[this.mc.b_left_top] - this.ax[this.mc.b_left1],this.ay[this.mc.b_left_top] - this.ay[this.mc.b_left1]) / Math.PI * 180;
                     this.mc.b2.x = (this.ax[this.mc.b_left_bottom] + this.ax[this.mc.b_left2] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right2]) / 4 - this.mc.x;
                     this.mc.b2.y = (this.ay[this.mc.b_left_bottom] + this.ay[this.mc.b_left2] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right2]) / 4 - this.mc.y;
                     this.mc.b2.rotation = -Math.atan2(this.ax[this.mc.b_left_bottom] - this.ax[this.mc.b_left2],this.ay[this.mc.b_left_bottom] - this.ay[this.mc.b_left2]) / Math.PI * 180;
                     this.n2 = 0;
                     while(this.n2 < 10)
                     {
                        if(this.mc["g" + this.n2].visible == true)
                        {
                           this.mc["g" + this.n2].x = this.ax[this.mc["b_g" + this.n2]] - this.mc.x;
                           this.mc["g" + this.n2].y = this.ay[this.mc["b_g" + this.n2]] - this.mc.y;
                           this.mc["g" + this.n2].rotation = this.mc["g" + this.n2].x * 3 + this.n2 * 60;
                           if(this.aio[this.mc["b_g" + this.n2]] == false)
                           {
                              if(this.mc["g" + this.n2].alpha > 0)
                              {
                                 this.mc["g" + this.n2].alpha -= 0.1;
                              }
                              else
                              {
                                 this.mc["g" + this.n2].visible = false;
                                 this.aio[this.mc["b_g" + this.n2]] = -1;
                              }
                           }
                           else if(this.mc["g" + this.n2].alpha < 1)
                           {
                              this.mc["g" + this.n2].alpha += 0.1;
                           }
                        }
                        ++this.n2;
                     }
                  }
                  if(!this.barrels[_loc6_].visible)
                  {
                     this.barrels[_loc6_].visible = true;
                  }
               }
               else
               {
                  this.aactive[-100 - _loc6_] = false;
                  if(this.barrels[_loc6_].visible)
                  {
                     this.barrels[_loc6_].visible = false;
                  }
               }
               _loc6_++;
            }
            _loc6_ = 0;
            while(_loc6_ < this.flarestotal)
            {
               this.mc = this.flare[_loc6_];
               if(this.mc.x > -this.game.x / this.game_scale && this.mc.x < (-this.game.x + this.screenX) / this.game_scale && this.mc.y > -this.game.y / this.game_scale && this.mc.y < (-this.game.y + this.screenY) / this.game_scale)
               {
                  this.mc.alpha = (this.mc.alpha + this.flare_power[_loc6_]) / 2;
                  if(!this.mc.visible)
                  {
                     this.mc.visible = true;
                  }
               }
               else
               {
                  this.mc.alpha /= 2;
                  if(this.mc.visible && this.mc.alpha < 0.05)
                  {
                     this.mc.visible = false;
                  }
               }
               if(this.mc.visible)
               {
                  if(this.HQ || this.SUPER_COMPUTER)
                  {
                     this.mc.f2.x = (-this.game.x + this.hscreenX - this.mc.x) * 0.4;
                     this.mc.f2.y = (-this.game.y + this.hscreenY - this.mc.y) * 0.4;
                     this.mc.f3.x = (-this.game.x + this.hscreenX - this.mc.x) * 0.8;
                     this.mc.f3.y = (-this.game.y + this.hscreenY - this.mc.y) * 0.8;
                     this.mc.f4.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.4;
                     this.mc.f4.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.4;
                     this.mc.f5.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.8;
                     this.mc.f5.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.8;
                     this.mc.f6.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.5;
                     this.mc.f6.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.5;
                  }
                  else if(this.mc.f2.visible)
                  {
                     this.mc.f2.visible = false;
                     this.mc.f3.visible = false;
                     this.mc.f4.visible = false;
                     this.mc.f5.visible = false;
                     this.mc.f6.visible = false;
                  }
               }
               _loc6_++;
            }
            this.xx = Math.max(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax,0);
            this.hp.scaleX = this.xx;
            if(this.hp_over.scaleX < this.xx)
            {
               this.hp_over.scaleX = this.xx;
            }
            else if(this.hp_over.scaleX > this.xx)
            {
               this.hp_over.scaleX -= 0.01;
            }
            this.hp_over.x = this.hp.x;
            this.hp_txt.text = Math.ceil(Math.ceil(this.xx * this.mens[this.MP_myid].hmax)).toString();
            if(this.mens[this.MP_myid].incar != -1)
            {
               this.vehhp.hp.scaleX = Math.max(this.vehicles[this.mens[this.MP_myid].incar].hea / this.vehicles[this.mens[this.MP_myid].incar].hmax,0);
               this.vehhp.hp_txt.text = Math.ceil(Math.max(this.vehicles[this.mens[this.MP_myid].incar].hea,0)).toString();
            }
            if(this.nrg.visible)
            {
               this.xx = Math.max(this.energy / this.energy_max,0);
               this.nrg.en_txt.text = Math.ceil(Math.ceil(this.xx * this.energy_max)).toString();
               this.nrg.en.scaleX = this.xx;
            }
            if(this.mini_scenario_cur != -1)
            {
               if(this.mini_scenario_cur == 0)
               {
                  this.mc = this.mens[this.MP_myid];
                  if(this.mini_scenario_phase == 0)
                  {
                     this.i3 = 1;
                     if(this.MP_mode)
                     {
                        this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                     }
                     this.ok = true;
                     this.i2 = 0;
                     while(this.i2 < this.gunstotal)
                     {
                        if(this.guns[this.i2].io)
                        {
                           if(!this.guns[this.i2].forcars)
                           {
                              if(this.guns[this.i2].picken_by == this.MP_myid)
                              {
                                 if(this.guns[this.i2].wep == -2)
                                 {
                                    if(this.guns[this.i2].nadekind == this.i3)
                                    {
                                       if(!this.MP_mode)
                                       {
                                          this.guns[this.i2].x = -10000;
                                          this.guns[this.i2].y = -10000;
                                          this.guns[this.i2].scaleX = 0;
                                          this.guns[this.i2].scaleY = 0;
                                          this.game.removeChild(this.guns[this.i2]);
                                          this.guns[this.i2] = new Object();
                                          this.guns[this.i2].io = false;
                                       }
                                       else
                                       {
                                          this.guns[this.i2].alpha = 0;
                                          this.guns[this.i2].io = false;
                                       }
                                       this.i2 = this.gunstotal;
                                       this.ok = false;
                                       this.UpdateWeps();
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.MP_mode)
                     {
                        if(this.i3 == 1)
                        {
                           if(this.grenades_total > 0)
                           {
                              --this.grenades_total;
                              this.ok = false;
                              this.UpdateWeps();
                           }
                        }
                        else if(this.i3 == 2)
                        {
                           if(this.grenades_port_total > 0)
                           {
                              --this.grenades_port_total;
                              this.ok = false;
                              this.UpdateWeps();
                           }
                        }
                        else if(this.i3 == 3)
                        {
                           if(this.grenades_sh_total > 0)
                           {
                              --this.grenades_sh_total;
                              this.ok = false;
                              this.UpdateWeps();
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.mini_scenario_cur = -1;
                        this.mini_scenario_phase = 0;
                     }
                  }
                  if(this.mini_scenario_phase == 1)
                  {
                     if(this.puls[this.pulscur] != null)
                     {
                        if(this.game.contains(this.puls[this.pulscur]))
                        {
                           this.game.removeChild(this.puls[this.pulscur]);
                           this.puls[this.pulscur] = null;
                        }
                     }
                     this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                     this.NoMouse(this.puls[this.pulscur]);
                     this.xx = this.mc.ang + Math.PI;
                     this.puls[this.pulscur].lag = 0;
                     this.PlaySound(this.s_nade_throw,this.mc.x,this.mc.y - 50);
                     this.puls[this.pulscur].thisis = "grenade";
                     this.puls[this.pulscur].cclass = 6;
                     this.puls[this.pulscur].nadekind = 1;
                     this.puls[this.pulscur].notbliped = true;
                     this.puls[this.pulscur].x = this.ax[this.mc.b_arm2];
                     this.puls[this.pulscur].y = this.ay[this.mc.b_arm2];
                     this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                     this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                     this.puls[this.pulscur].power = 3;
                     this.puls[this.pulscur].maxpower = 3;
                     this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2];
                     this.puls[this.pulscur].lastin = 0;
                     this.puls[this.pulscur].lastinbox = this.boxestotal;
                     this.puls[this.pulscur].master = this.MP_myid;
                     this.i3 = 1;
                     if(this.MP_mode)
                     {
                        this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                     }
                     this.puls[this.pulscur].nadekind = this.i3;
                     this.puls[this.pulscur].maxbulletlife = 60;
                     if(this.i3 == 1)
                     {
                        this.puls[this.pulscur].gotoAndStop(11);
                     }
                     if(this.i3 == 2)
                     {
                        this.puls[this.pulscur].gotoAndStop(17);
                     }
                     if(this.i3 == 3)
                     {
                        this.puls[this.pulscur].gotoAndStop(19);
                        this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                        this.puls[this.pulscur].hasexploded = false;
                        this.puls[this.pulscur].radius = 0;
                        this.puls[this.pulscur].hea = 10;
                        this.puls[this.pulscur].heapo = 90;
                        this.puls[this.pulscur].losthea = 0;
                     }
                     this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                     this.puls[this.pulscur].life = 0;
                     this.yy = Math.cos(this.xx);
                     this.xx = Math.sin(this.xx);
                     this.puls[this.pulscur].spx = 0;
                     this.puls[this.pulscur].spy = 0;
                     this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,3,true,8,-1);
                     this.aactive[this.puls[this.pulscur].attached] = 1000;
                     this.mc.arm_nade = this.puls[this.pulscur].attached;
                     if(this.MP_mode)
                     {
                        this.MP_myspecials[this.MP_assigning_special].pul = this.pulscur;
                        this.MP_myspecials[this.MP_assigning_special].atom = this.puls[this.pulscur].attached;
                        this.MP_myspecials[this.MP_assigning_special].stat = 3;
                     }
                     this.nextpul();
                  }
                  if(this.mini_scenario_phase >= 1)
                  {
                     if(!this.mc.dead)
                     {
                        if(this.mini_scenario_phase < 5)
                        {
                           this.TurnBone(this.mens[this.MP_myid].b_arm2,this.ax[this.mens[this.MP_myid].b_head_end] + this.mens[this.MP_myid].side * 10,this.ay[this.mens[this.MP_myid].b_head_end] + 30,this.mens[this.MP_myid],1);
                        }
                        else if(this.mini_scenario_phase < 7)
                        {
                           this.xx = this.mc.ang + Math.PI;
                           this.yy = Math.cos(this.xx);
                           this.xx = Math.sin(this.xx);
                           this.TurnBone(this.mens[this.MP_myid].b_arm2,this.ax[this.mens[this.MP_myid].b_body] - this.xx * 25,this.ay[this.mens[this.MP_myid].b_body] - this.yy * 25,this.mens[this.MP_myid],1);
                        }
                        this.xx = this.mc.ang + Math.PI;
                        this.yy = Math.cos(this.xx);
                        this.xx = Math.sin(this.xx);
                        if(this.mini_scenario_phase < 7)
                        {
                           this.TurnBone(this.mens[this.MP_myid].b_arm1,this.ax[this.mens[this.MP_myid].b_head_end] + this.mens[this.MP_myid].side * 10,this.ay[this.mens[this.MP_myid].b_body] + 40,this.mens[this.MP_myid],1);
                           if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]))
                           {
                              this.ax[this.mc.arm_nade] = this.ax[this.mc.b_arm2];
                              this.ay[this.mc.arm_nade] = this.ay[this.mc.b_arm2];
                           }
                           else
                           {
                              this.ax[this.mc.arm_nade] = this.ax[this.mc.b_toe];
                              this.ay[this.mc.arm_nade] = this.ay[this.mc.b_toe];
                           }
                           this.atox[this.mc.arm_nade] = -this.xx * 10 * (this.mini_scenario_phase / 7) + this.atox[this.mc.b_body];
                           this.atoy[this.mc.arm_nade] = -this.yy * 10 * (this.mini_scenario_phase / 7) + this.atoy[this.mc.b_body];
                        }
                        if(this.mini_scenario_phase == 7)
                        {
                           this.atox[this.mc.arm_nade] = -this.xx * 15 + this.atox[this.mc.b_body];
                           this.atoy[this.mc.arm_nade] = -this.yy * 15 + this.atoy[this.mc.b_body];
                           this.WakeUpAtom(this.mc.arm_nade);
                        }
                     }
                  }
                  if(this.mini_scenario_phase > 15)
                  {
                     this.mini_scenario_cur = -1;
                  }
               }
               ++this.mini_scenario_phase;
            }
            if(this.playerstotal > 0)
            {
               if(this.PSYCHOBLOOD_MODE == 1)
               {
                  this.i4 = 0;
                  while(this.i4 < 4)
                  {
                     if(this._root["pb" + this.i4].visible)
                     {
                        if(this._root["pb" + this.i4].alpha > 0)
                        {
                           if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax > 0.5 || this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10)
                           {
                              this._root["pb" + this.i4].alpha -= 0.05 * this.GSPEED2;
                           }
                           if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                           {
                              this._root["pb" + this.i4].alpha = 0;
                           }
                           if(this._root["pb" + this.i4].alpha > 0.6)
                           {
                              this._root["pb" + this.i4].alpha = 0.6;
                           }
                        }
                        else
                        {
                           this._root["pb" + this.i4].visible = false;
                        }
                     }
                     ++this.i4;
                  }
               }
               else if(this.PSYCHOBLOOD_MODE == 2)
               {
                  this.i4 = 0;
                  while(this.i4 < 5)
                  {
                     if(this._root["pb" + this.i4].visible)
                     {
                        if(this._root["pb" + this.i4].alpha > 0)
                        {
                           if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax > 0.5 || (this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10) && this.mens[this.MP_myid].hea >= 0)
                           {
                              this._root["pb" + this.i4].alpha -= 0.02 * this.GSPEED2;
                           }
                           else if(this.mens[this.MP_myid].hea >= 0)
                           {
                              this._root["pb" + this.i4].alpha -= 0.01 * this.GSPEED2;
                           }
                           else
                           {
                              this._root["pb" + this.i4].alpha -= 0.005 * this.GSPEED2;
                           }
                           if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                           {
                              this._root["pb" + this.i4].alpha = 0;
                           }
                           if(this._root["pb" + this.i4].alpha > 0.6)
                           {
                              this._root["pb" + this.i4].alpha = 0.6;
                           }
                        }
                        else
                        {
                           this._root["pb" + this.i4].visible = false;
                        }
                     }
                     ++this.i4;
                  }
               }
            }
            if(this.MP_mode && this.spawn)
            {
               this.mens[this.MP_myid].hea = 0;
            }
            this.firstframe = false;
            this.get_fps();
         }
         if(this.MP_mode)
         {
            this.mens[this.MP_myid].io = true;
            this.mens[this.MP_myid].visible = true;
            this.mens[this.MP_myid].alpha = 1;
            this.mens[this.MP_myid].deadtim = 0;
            this.ENTER_TICKED = true;
         }
         this.c_sim_rt = getTimer() - this.c_sim_rt;
         if(this.c_sim_rt + this.c_sim_rt2 > 40)
         {
            this.c_sim_stress = true;
         }
         else
         {
            this.c_sim_stress = false;
         }
         this.c_sim_rt2 = getTimer();
         if(this.whitness.visible)
         {
            if(this.whitness.alpha > 2)
            {
               this.whitness.alpha = 1;
            }
            if(this.whitness.alpha > 0)
            {
               this.whitness.alpha -= 0.05;
            }
            else
            {
               this.whitness.alpha = 0;
               this.whitness.visible = false;
            }
         }
         this.xx = 0;
         if(this.myCursor.currentFrame == 7)
         {
            if(this.mens[this.MP_myid].curwea != -1)
            {
               this.mc2 = this.guns[this.mens[this.MP_myid].curwea];
               if(this.mc2.stat_averange_min != this.mc2.stat_averange_max)
               {
                  this.xx = (this.mc2.av - this.mc2.stat_averange_min) * 4;
               }
               if(this.mc2.stat_cursor == 0)
               {
                  this.myCursor.ch1.visible = this.myCursor.ch2.visible = true;
                  this.myCursor.ch3.visible = this.myCursor.ch4.visible = false;
               }
               if(this.mc2.stat_cursor == 1)
               {
                  this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch4.visible = false;
                  this.myCursor.ch3.visible = true;
               }
               if(this.mc2.stat_cursor == 2)
               {
                  this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                  this.myCursor.ch4.visible = true;
               }
            }
            else
            {
               this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
               this.myCursor.ch4.visible = true;
            }
            if(this.xx > 0)
            {
               this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 0.5 / (this.xx + 1);
            }
            else
            {
               this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 1;
            }
            if(this.xx > 1)
            {
               this.xx = 1;
            }
            this.myCursor.ch1.scaleX = this.myCursor.ch2.scaleX = this.myCursor.ch3.scaleX = this.myCursor.ch4.scaleX = this.myCursor.ch3.scaleY = this.myCursor.ch4.scaleY = this.xx * this.xx + 0.5;
            if(this.TOOLTIPS && !this.ANONYMOUS_MODE)
            {
               if(this.Math_abs(this.lastcurx - this.myCursor.x - this.game.x) + this.Math_abs(this.lastcury - this.myCursor.y - this.game.y) < 10)
               {
                  if(!this.tooltip_updated)
                  {
                     this.tooltip_updated = true;
                     this.str = "";
                     this.ok = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal)
                     {
                        if(this.myCursor.x > this.wax[this.i2] * this.game_scale + this.game.x)
                        {
                           if(this.myCursor.x < (this.wax[this.i2] + this.waw[this.i2]) * this.game_scale + this.game.x)
                           {
                              if(this.myCursor.y > this.way[this.i2] * this.game_scale + this.game.y)
                              {
                                 if(this.myCursor.y < (this.way[this.i2] + this.wah[this.i2]) * this.game_scale + this.game.y)
                                 {
                                    if(this.wadamage[this.i2] > 0)
                                    {
                                       this.str = "<font color=\'#FF0000\'>" + this.ACID_NAME + "</font>\n";
                                       this.str += this.wadamage[this.i2] * 30 + " damage per second\n";
                                       this.str += "<font color=\'#FFFF00\'>" + Math.floor(this.mens[this.MP_myid].hmax / this.wadamage[this.i2] / 30 * 10) / 10 + " seconds to die</font>\n";
                                    }
                                    else
                                    {
                                       this.str = this.WATER_NAME;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     this.i2 = 0;
                     while(this.i2 < this.vehiclestotal)
                     {
                        if(this.vehicles[this.i2].nick != "")
                        {
                           if(this.Dist2D(this.vehicles[this.i2].x * this.game_scale + this.game.x,this.vehicles[this.i2].y * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 150)
                           {
                              if(this.vehicles[this.i2].dead)
                              {
                                 this.str = "Destroyed ";
                              }
                              else
                              {
                                 this.str = "";
                                 this.ok = false;
                              }
                              this.str += this.vehicles[this.i2].nick + "\n";
                              if((_loc6_ = int(this.vehicles[this.i2].master)) != -1)
                              {
                                 if(this.mens[_loc6_].team == this.mens[this.MP_myid].team)
                                 {
                                    if(_loc6_ == this.MP_myid)
                                    {
                                       this.str += "<font color=\'#00FF00\'>";
                                    }
                                    else
                                    {
                                       this.str += "<font color=\'#FFFF00\'>";
                                    }
                                 }
                                 else if(this.mens[_loc6_].dead)
                                 {
                                    this.str += "<font color=\'#AA3333\'>";
                                 }
                                 else
                                 {
                                    this.str += "<font color=\'#FF0000\'>";
                                 }
                                 if(this.mens[_loc6_].team == this.mens[this.MP_myid].team)
                                 {
                                    if(_loc6_ == this.MP_myid)
                                    {
                                       this.str += "You";
                                    }
                                    else
                                    {
                                       this.str += "Ally";
                                    }
                                 }
                                 else
                                 {
                                    this.str += "Enemy";
                                 }
                                 this.str += "</font>";
                              }
                              else if(!this.vehicles[this.i2].dead)
                              {
                                 this.str += "Neutral";
                              }
                           }
                        }
                        ++this.i2;
                     }
                     _loc6_ = 0;
                     while(_loc6_ < this.playerstotal)
                     {
                        if(this.mens[_loc6_].io)
                        {
                           if(this.mens[_loc6_].incar == -1)
                           {
                              if(this.mens[_loc6_].alpha > 0.5)
                              {
                                 if(this.Dist2D(this.ax[this.mens[_loc6_].b_body] * this.game_scale + this.game.x,this.ay[this.mens[_loc6_].b_body] * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 50)
                                 {
                                    this.str = this.mens[_loc6_].nick + "\n";
                                    if(this.mens[_loc6_].team == this.mens[this.MP_myid].team)
                                    {
                                       if(_loc6_ == this.MP_myid)
                                       {
                                          this.str += "<font color=\'#00FF00\'>";
                                       }
                                       else
                                       {
                                          this.str += "<font color=\'#FFFF00\'>";
                                       }
                                    }
                                    else if(this.mens[_loc6_].dead)
                                    {
                                       this.str += "<font color=\'#AA3333\'>";
                                    }
                                    else
                                    {
                                       this.str += "<font color=\'#FF0000\'>";
                                    }
                                    if(this.mens[_loc6_].dead)
                                    {
                                       this.str += "Dead ";
                                    }
                                    else if(this.mens[_loc6_].dying)
                                    {
                                       this.str += "Dying ";
                                    }
                                    else if(this.mens[_loc6_].hunt == -1 && this.mens[_loc6_].team != this.mens[this.MP_myid].team && !this.mens[_loc6_].isplayer)
                                    {
                                       this.str += "Inactive ";
                                    }
                                    if(this.mens[_loc6_].team == this.mens[this.MP_myid].team)
                                    {
                                       if(_loc6_ == this.MP_myid)
                                       {
                                          this.str += "You";
                                       }
                                       else
                                       {
                                          this.str += "Ally";
                                       }
                                    }
                                    else
                                    {
                                       this.str += "Enemy";
                                    }
                                    if(Boolean(this.mens[_loc6_].isplayer) && _loc6_ != this.MP_myid)
                                    {
                                       this.str += " Player";
                                    }
                                    this.str += "</font>";
                                    if(!this.mens[_loc6_].dead)
                                    {
                                       this.ok = false;
                                    }
                                 }
                              }
                           }
                        }
                        _loc6_++;
                     }
                     if(this.ok)
                     {
                        _loc6_ = 0;
                        while(_loc6_ < this.gunstotal)
                        {
                           if(this.guns[_loc6_].io)
                           {
                              if(this.guns[_loc6_].alpha > 0.5)
                              {
                                 if(this.guns[_loc6_].visible)
                                 {
                                    if(!this.guns[_loc6_].forcars)
                                    {
                                       if(this.Dist2D(this.guns[_loc6_].x * this.game_scale + this.game.x,this.guns[_loc6_].y * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 40)
                                       {
                                          this.str = this.GunModelToGunName(this.guns[_loc6_].model) + "\n";
                                          if(this.guns[_loc6_].upg != undefined)
                                          {
                                             if(this.guns[_loc6_].wep > 0)
                                             {
                                                if(this.guns[_loc6_].upg == 0)
                                                {
                                                   this.str += "<font color=\'#AAAAAA\'>No upgrades</font>";
                                                }
                                                else
                                                {
                                                   this.str += "<font color=\'#AAAAAA\'>Upgrade Level: " + this.guns[_loc6_].upg + "</font>";
                                                }
                                             }
                                          }
                                          this.str += "\n";
                                          if(this.guns[_loc6_].wep > 0)
                                          {
                                             if(this.guns[_loc6_].command == -1 || this.guns[_loc6_].command == this.mens[this.MP_myid].team)
                                             {
                                                this.str += "<font color=\'#FFFF00\'>Slot: " + this.guns[_loc6_].wep + "</font>";
                                             }
                                             else
                                             {
                                                this.str += "<font color=\'#FF0000\'>Unknown technology</font>";
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc6_++;
                        }
                     }
                     this.myCursor.txt.htmlText = this.str;
                  }
               }
               else
               {
                  this.lastcurmove = 0;
                  this.lastcurx = this.myCursor.x + this.game.x;
                  this.lastcury = this.myCursor.y + this.game.y;
                  this.tooltip_updated = false;
               }
            }
         }
         if(this.gamechatbox2["item" + this.chat_i3].y > 0)
         {
            this.ok = true;
         }
         else
         {
            this.ok = false;
         }
         this.chat_i = 0;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].visible)
            {
               _loc13_ = this.gamechatbox2["item" + this.chat_i].timer > 0 ? (this.gamechatbox2["item" + this.chat_i].y < -18 * 1.5 ? 0.5 : 1) : 0;
               this.gamechatbox2["item" + this.chat_i].timer -= this.GSPEED2;
               if(this.gamechatbox2["item" + this.chat_i].alpha > _loc13_)
               {
                  this.gamechatbox2["item" + this.chat_i].alpha = Math.max(_loc13_,this.gamechatbox2["item" + this.chat_i].alpha - Math.max(0.01,0.05 * this.GSPEED2));
                  if(this.gamechatbox2["item" + this.chat_i].alpha <= _loc13_)
                  {
                     if(_loc13_ == 0)
                     {
                        this.gamechatbox2["item" + this.chat_i].visible = false;
                     }
                  }
               }
               else
               {
                  this.gamechatbox2["item" + this.chat_i].alpha = Math.min(_loc13_,this.gamechatbox2["item" + this.chat_i].alpha + Math.max(0.01,0.05 * this.GSPEED2));
               }
            }
            if(this.ok)
            {
               --this.gamechatbox2["item" + this.chat_i].y;
            }
            ++this.chat_i;
         }
         if(this.herolist.visible)
         {
            _loc6_ = 0;
            while(_loc6_ < this.MP_playerstotal)
            {
               if(_loc6_ != this.MP_myid && (this.hero[_loc6_].f1.text == "Empty" || this.hero[_loc6_].f5.text == ""))
               {
                  if(this.hero[_loc6_].f1.text != "Empty")
                  {
                     this.hero[_loc6_].f1.text = "Empty";
                  }
                  this.hero[_loc6_].prior = -1;
                  this.hero[_loc6_].alpha = Math.max(0.2,this.hero[_loc6_].alpha - 0.1);
               }
               else
               {
                  this.hero[_loc6_].prior = int(this.hero[_loc6_].f3.text) / (int(this.hero[_loc6_].f4.text) + 1);
                  this.hero[_loc6_].alpha = Math.min(1,this.hero[_loc6_].alpha + 0.1);
               }
               _loc6_++;
            }
            this.ok = true;
            if(this.ok)
            {
               this.ok = false;
               _loc6_ = 0;
               while(_loc6_ < this.MP_playerstotal)
               {
                  this.i2 = 0;
                  while(this.i2 < this.MP_playerstotal)
                  {
                     if(_loc6_ != this.i2)
                     {
                        if(this.hero[_loc6_].prior < this.hero[this.i2].prior && this.hero[_loc6_].y < this.hero[this.i2].y)
                        {
                           this.yy = this.hero[_loc6_].y;
                           this.hero[_loc6_].y = this.hero[this.i2].y;
                           this.hero[this.i2].y = this.yy;
                           this.ok = true;
                        }
                     }
                     ++this.i2;
                  }
                  _loc6_++;
               }
               _loc6_ = 0;
               while(_loc6_ < this.MP_playerstotal)
               {
                  if(this.hero[_loc6_].y > 17 + 20 * 8)
                  {
                     this.hero[_loc6_].alpha = 0;
                  }
                  _loc6_++;
               }
            }
         }
         if(this.THIS_HINT == this.CURRENT_HINT)
         {
            if(this.CURRENT_HINT != "")
            {
               if(this.hintf.visible)
               {
                  if(this.hintf.alpha < 1)
                  {
                     this.hintf.alpha += 0.1;
                  }
               }
               else
               {
                  this.hintf.visible = true;
                  this.hintf.alpha = 0;
                  this.PlaySound_full(this.s_hint_appear);
               }
            }
         }
         else if(this.hintf.visible)
         {
            if(this.hintf.alpha >= 1)
            {
               this.PlaySound_full(this.s_hint_disappear);
            }
            if(this.hintf.alpha > 0)
            {
               this.hintf.alpha -= 0.1;
            }
            else
            {
               this.hintf.visible = false;
            }
         }
         else
         {
            this.THIS_HINT = this.CURRENT_HINT;
            this.hintf.txt.htmlText = this.CURRENT_HINT;
         }
         if(this.hintf.visible)
         {
            this.hintf.txt.alpha = 0.8 + Math.sin(this.PITIMER) * 0.2;
            this.PITIMER += 0.1;
            if(this.PITIMER > Math.PI * 2)
            {
               this.PITIMER -= Math.PI * 2;
            }
         }
         this.UpdateGravitatorVol();
         if(!this.gamemenu.visible)
         {
            if(this.darkness.visible)
            {
               if(this.mens[this.MP_myid].dead && !this.MP_spectator || this.LEVEL_END_FORCE != "")
               {
                  if(!this.MP_mode)
                  {
                     if(this.mens[this.MP_myid].dead)
                     {
                        if(this.MP_fps > 5)
                        {
                           this.MP_fps = 5;
                        }
                     }
                  }
                  if(this.darkness.alpha < 1)
                  {
                     if(this.LEVEL_END_FORCE == "credits")
                     {
                        this.whitesimple.visible = true;
                        this.whitesimple.alpha += 0.02;
                        if(this.whitesimple.alpha > 1.5)
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     else
                     {
                        if(this.LEVEL_END_FORCE == "complete" && (getTimer() - this.LAST_BADGE > 8000 || this.darkness.alpha < 0.5))
                        {
                           this.darkness.alpha += 0.1;
                        }
                        if(this.MP_mode)
                        {
                           if(!this.spawn)
                           {
                              if(this.multiplayer_repsawn_timer_speed != 0)
                              {
                                 if(this.MP_type == 1 || this.MP_type == 2 || this.players_online <= 4)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.01 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                                 else if(this.MP_type == 3)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.005 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     this.whitness.alpha = Math.min(1 - this.darkness.alpha,this.whitness.alpha);
                  }
                  else
                  {
                     this.system_non_stop = false;
                  }
                  if(!this.spawn)
                  {
                     if(this.MP_mode && this.MP_type == 2)
                     {
                        if(this.death_cam != -1 && Boolean(this.mens[this.death_cam].dead))
                        {
                           if(this.darkness.alpha > 0.5)
                           {
                              this.darkness.alpha = 0.5;
                           }
                        }
                        else
                        {
                           this.darkness.alpha = 0;
                        }
                     }
                  }
                  if(!this.system_non_stop)
                  {
                     if(this.darkness.alpha >= 1)
                     {
                        if(this.MP_mode && this.LEVEL_END_FORCE != "exit")
                        {
                           if(!this.MP_spectator)
                           {
                              this.GCTime();
                              this.ok = this.stable;
                              this.i4 = 0;
                              if(this.MP_type == 1 || this.MP_type == 3)
                              {
                                 while(this.ok && this.i4 < 3000)
                                 {
                                    ++this.i4;
                                    this.ok = true;
                                    this.MP_start_x = this.g_minx + 100 + (this.g_maxx - this.g_minx - 200) * Math.random();
                                    this.MP_start_y = this.g_miny + 100 + (this.g_maxy - this.g_miny - 200) * Math.random();
                                    if(this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y - 50))
                                    {
                                       if(this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y - 50))
                                       {
                                          if(this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y - 50))
                                          {
                                             if(!this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y + 50))
                                             {
                                                if(!this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y + 50))
                                                {
                                                   if(!this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y + 50))
                                                   {
                                                      this.ok = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(!this.ok)
                                    {
                                       if(this.MP_type == 3)
                                       {
                                          if(this.i4 < 1500)
                                          {
                                             this.ok2 = true;
                                             this.i5 = 0;
                                             while(this.i5 < this.playerstotal)
                                             {
                                                if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                                {
                                                   if(!this.mens[this.i5].dead)
                                                   {
                                                      if(!this.mens[this.i5].dying)
                                                      {
                                                         if(this.mens[this.i5].hunt == -1 || this.i4 > 1500 / 2)
                                                         {
                                                            if(this.Math_abs(this.mens[this.i5].x - this.MP_start_x) + this.Math_abs(this.mens[this.i5].y - this.MP_start_y) < 500 * 500)
                                                            {
                                                               this.ok2 = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i5;
                                             }
                                             this.ok = this.ok2;
                                          }
                                       }
                                       else if(this.i4 < 1500)
                                       {
                                          this.ok2 = true;
                                          this.i5 = 0;
                                          while(this.i5 < this.gunstotal)
                                          {
                                             if(this.guns[this.i5].picken_by == -1)
                                             {
                                                if(this.guns[this.i5].stat_power > 0)
                                                {
                                                   if(this.Math_abs(this.guns[this.i5].x - this.MP_start_x) + this.Math_abs(this.guns[this.i5].y - this.MP_start_y) < 300 * 300)
                                                   {
                                                      this.ok2 = false;
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                          this.ok = this.ok2;
                                       }
                                       this.GiveStarterGunsDM(this.MP_start_x,this.MP_start_y);
                                    }
                                    if(!this.ok)
                                    {
                                       this.i2 = 0;
                                       while(this.i2 < this.watertotal)
                                       {
                                          if(this.MP_start_x > this.wax[this.i2] - 100)
                                          {
                                             if(this.MP_start_x < this.wax[this.i2] + this.waw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > this.way[this.i2] - 100)
                                                {
                                                   if(this.MP_start_y < this.way[this.i2] + this.wah[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       this.i2 = 0;
                                       while(this.i2 < this.pushstotal)
                                       {
                                          if(this.MP_start_x > this.pushx[this.i2] - 100)
                                          {
                                             if(this.MP_start_x < this.pushw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > this.pushy[this.i2] - 100)
                                                {
                                                   if(this.MP_start_y < this.pushh[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       if(!this.ok)
                                       {
                                          this.i5 = 0;
                                          while(this.i5 < this.playerstotal)
                                          {
                                             if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.mens[this.i5].dead)
                                                {
                                                   if(this.Math_abs(this.mens[this.i5].x - this.MP_start_x) + this.Math_abs(this.mens[this.i5].y - this.MP_start_y) < 1500 * 1500)
                                                   {
                                                      if(this.TraceLine(this.mens[this.i5].x,this.mens[this.i5].y - 50,this.MP_start_x,this.MP_start_y - 50) || this.TraceLine(this.mens[this.i5].tarx,this.mens[this.i5].tary,this.MP_start_x,this.MP_start_y - 50))
                                                      {
                                                         this.ok = true;
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                       }
                                    }
                                 }
                              }
                              this.mens[this.MP_myid].lastshotby = -1;
                              this.mens[this.MP_myid].whenlastshot = getTimer();
                              this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                              this.mens[this.MP_myid].stability = 1;
                              this.mens[this.MP_myid].sit = 0;
                              this.mens[this.MP_myid].tox = 0;
                              this.mens[this.MP_myid].toy = 0;
                              this.mens[this.MP_myid].inwater = false;
                              this.mens[this.MP_myid].x = this.MP_start_x;
                              this.mens[this.MP_myid].y = this.MP_start_y;
                              this.grenades_total = this.MP_start_grenades_count;
                              this.grenades_port_total = this.MP_start_grenades_port_count;
                              this.grenades_sh_total = this.MP_start_grenades_sh_count;
                              this.UpdateWeps();
                              this.mens[this.MP_myid].hp_head = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_arms = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_legs = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_body = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].curwea = -1;
                              this.mens[this.MP_myid].dead = false;
                              this.mens[this.MP_myid].dying = false;
                              this.mens[this.MP_myid].defih = 0;
                              this.ResetPsychoBlood();
                              this.MP_custom_events += ";spawnef|" + this.MP_start_x + "#" + (this.MP_start_y - 41);
                              this.Hurt_nopain(this.MP_myid);
                              this.SpawnPlayerImmediately(this.mens[this.MP_myid]);
                              this.u = this.ax[this.mens[this.MP_myid].b_toe] - this.MP_start_x;
                              this.v = this.ay[this.mens[this.MP_myid].b_toe] - this.MP_start_y;
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.MP_myid)
                                 {
                                    this.ax[this.i4] -= this.u;
                                    this.ay[this.i4] -= this.v;
                                    this.lax[this.i4] -= this.u;
                                    this.lay[this.i4] -= this.v;
                                    this.ablood[this.i4] = 0;
                                    this.atox[this.i4] = 0;
                                    this.atoy[this.i4] = 0;
                                    if(this.ax[this.i4] < this.mens[this.MP_myid].x - this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = this.mens[this.MP_myid].x - this.PLAYER_WIDTH;
                                    }
                                    if(this.ax[this.i4] > this.mens[this.MP_myid].x + this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = this.mens[this.MP_myid].x + this.PLAYER_WIDTH;
                                    }
                                    if(this.ay[this.i4] < this.mens[this.MP_myid].y - 82)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = this.mens[this.MP_myid].y - 82;
                                    }
                                    if(this.ay[this.i4] > this.mens[this.MP_myid].y)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = this.mens[this.MP_myid].y;
                                    }
                                 }
                                 ++this.i4;
                              }
                              this.tnds = 10;
                              this.game.x = Math.round(-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX);
                              this.game.y = Math.round(-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY);
                              this.system_non_stop = true;
                           }
                        }
                        else
                        {
                           if(this.talkerch != null)
                           {
                              this.talkerch.stop();
                           }
                           this.DropGameTimer();
                           if(this.LEVEL_END_FORCE == "exit")
                           {
                              this.LAST_ERROR = "";
                              this.FUN_TIME_SPEND = 0;
                              if(this.MP_mode)
                              {
                                 this.SEND_INTRUDER_LIST();
                                 this.MP_mode = false;
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                                 gotoAndStop("channel");
                              }
                              else
                              {
                                 gotoAndStop("campaign");
                              }
                           }
                           if(this.LEVEL_END_FORCE == "restart")
                           {
                              this.LAST_ERROR = "";
                              gotoAndStop("loading");
                           }
                           if(this.LEVEL_END_FORCE == "failed")
                           {
                              this.FUN_TIME_SPEND = 0;
                              gotoAndStop("main");
                           }
                           if(this.LEVEL_END_FORCE == "complete")
                           {
                              if(this.MP_mode)
                              {
                                 gotoAndStop("channel");
                              }
                              else
                              {
                                 gotoAndStop("campaign");
                              }
                           }
                           if(this.LEVEL_END_FORCE == "credits")
                           {
                              if(this.MUSIC_VOLUME <= 0)
                              {
                                 this.MUSIC_VOLUME = this.FX_VOLUME;
                              }
                              gotoAndStop("credits");
                           }
                        }
                     }
                  }
               }
               else if(this.darkness.alpha > 0)
               {
                  this.darkness.alpha -= 0.1;
               }
               else
               {
                  this.darkness.visible = false;
               }
            }
         }
         if(this.DEBUG_MODE)
         {
            try
            {
               this.debug_screen.x = this.game.x;
               this.debug_screen.y = this.game.y;
            }
            catch(e:*)
            {
            }
         }
         if(this.MP_mode)
         {
            this.ManageGameTimer();
         }
      }
      
      public function GravitatorPlayAgain(param1:*) : void
      {
         this.gravitatorch.removeEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
         this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
         if(this.gravitatorch == null)
         {
            this.grav_working = false;
         }
         if(this.grav_working)
         {
            this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
         }
      }
      
      public function SongPlayAgain(param1:*) : void
      {
         this.musch.removeEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
         this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
         if(this.musch == null)
         {
            this.mus_working = false;
         }
         if(this.mus_working)
         {
            this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
         }
      }
      
      public function main_song_PlayAgain(param1:*) : void
      {
         this.main_song_ch.removeEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
         this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
         if(this.main_song_ch == null)
         {
            this.main_song_working = false;
         }
         if(this.main_song_working)
         {
            this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
         }
      }
      
      public function am_base_PlayAgain(param1:*) : void
      {
         this.am_base_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
         this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
         if(this.am_base_ch == null)
         {
            this.am_base_working = false;
         }
         if(this.am_base_working)
         {
            this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
         }
      }
      
      public function am_wind_PlayAgain(param1:*) : void
      {
         this.am_wind_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
         this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
         if(this.am_wind_ch == null)
         {
            this.am_wind_working = false;
         }
         if(this.am_wind_working)
         {
            this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
         }
      }
      
      public function UpdateGravitatorVol() : void
      {
         if(this.NONMUTE)
         {
            if(this.grav_working)
            {
               this.xx = 0;
               this.yy = 0;
               this.xx2 = 0;
               this.yy2 = 0;
               if(currentFrameLabel == "gaming")
               {
                  this.i = 0;
                  while(this.i < this.decorstotal)
                  {
                     if(this.decors[this.i].currentFrameLabel == "antigravity")
                     {
                        this.smod = this.dist_to_face / this.Dist3Dm((this.decors[this.i].x + this.game.x - 400) * this.game_scale - 300,(this.decors[this.i].y + this.game.y - 200) * this.game_scale,this.dist_to_face);
                        this.smod2 = this.dist_to_face / this.Dist3Dm((this.decors[this.i].x + this.game.x - 400) * this.game_scale + 300,(this.decors[this.i].y + this.game.y - 200) * this.game_scale,this.dist_to_face);
                        this.xx += this.smod2 * 0.5;
                        this.yy += 0;
                        this.xx2 += this.smod * 0.5;
                        this.yy2 += 0;
                     }
                     ++this.i;
                  }
               }
               if(this.xx < 0.1)
               {
                  if(this.xx2 < 0.1)
                  {
                     if(this.yy < 0.1)
                     {
                        if(this.yy2 < 0.1)
                        {
                           this.xx = 0;
                           this.xx2 = 0;
                           this.yy = 0;
                           this.yy2 = 0;
                        }
                     }
                  }
               }
               this.xx *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.xx2 *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.yy *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.yy2 *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               if(this.xx > 1)
               {
                  this.xx = 1;
               }
               if(this.xx2 > 1)
               {
                  this.xx2 = 1;
               }
               if(this.yy > 1)
               {
                  this.yy = 1;
               }
               if(this.yy2 > 1)
               {
                  this.yy2 = 1;
               }
               this.gravitatorTransform.leftToLeft = this.xx;
               this.gravitatorTransform.leftToRight = this.yy;
               this.gravitatorTransform.rightToRight = this.xx2;
               this.gravitatorTransform.rightToLeft = this.yy2;
               this.gravitatorch.soundTransform = this.gravitatorTransform;
            }
            else
            {
               this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
               if(this.gravitatorch != null)
               {
                  this.grav_working = true;
                  this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
               }
            }
            if(this.mus_working && this.am_wind_working && this.am_base_working && this.main_song_working)
            {
               if(currentFrameLabel == "gaming")
               {
                  this.ok2 = false;
                  this.ok = false;
                  if(this.mens[this.MP_myid].hunt != -1)
                  {
                     this.ok2 = true;
                  }
                  this.i = 0;
                  while(this.i < this.playerstotal && !this.ok)
                  {
                     if(this.mens[this.i].io)
                     {
                        if(!this.mens[this.i].dead)
                        {
                           if(!this.mens[this.i].dying)
                           {
                              if(this.mens[this.i].team != this.mens[this.MP_myid].team)
                              {
                                 if(this.mens[this.i].hunt == this.MP_myid)
                                 {
                                    this.ok = true;
                                 }
                                 if(this.Dist2D(this.mens[this.i].x,this.mens[this.i].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                 {
                                    this.ok2 = true;
                                 }
                              }
                           }
                        }
                     }
                     ++this.i;
                  }
                  if(this.ok || this.ok2)
                  {
                     this.MUSIC_COLDDOWN = 0;
                  }
                  else if(this.MUSIC_COLDDOWN < 100)
                  {
                     ++this.MUSIC_COLDDOWN;
                  }
                  else
                  {
                     this.CUR_MUSIC_VOLUME -= this.CUR_MUSIC_VOLUME * 0.01;
                  }
                  if(this.MUSIC_COLDDOWN < 100)
                  {
                     if(this.ok)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.04;
                     }
                     else if(this.CUR_MUSIC_VOLUME < this.MUSIC_VOLUME * 0.4)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.02;
                     }
                  }
                  if(this.CUR_MUSIC_VOLUME > this.MUSIC_VOLUME)
                  {
                     this.CUR_MUSIC_VOLUME = this.MUSIC_VOLUME;
                  }
                  if(this.CUR_MUSIC_VOLUME < 0)
                  {
                     this.CUR_MUSIC_VOLUME = 0;
                  }
                  this.musTransform.leftToLeft = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.rightToLeft = 0;
                  if(!this.NOBASE && this.graphics_3d.hitTestPoint(this.mens[this.MP_myid].x * this.game_scale + this.game.x,(this.mens[this.MP_myid].y - 41) * this.game_scale + this.game.y,true))
                  {
                     this.wind_base += 0.1;
                  }
                  else
                  {
                     this.wind_base -= 0.1;
                  }
                  if(this.wind_base > 1)
                  {
                     this.wind_base = 1;
                  }
                  if(this.wind_base < 0)
                  {
                     this.wind_base = 0;
                  }
                  if(this.MUSIC_VOLUME > 0)
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  else
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  this.main_song_Transform.leftToLeft = 0;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = 0;
                  this.main_song_Transform.rightToLeft = 0;
               }
               else
               {
                  this.musTransform.leftToLeft = 0;
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = 0;
                  this.musTransform.rightToLeft = 0;
                  this.am_base_Transform.leftToLeft = 0;
                  this.am_base_Transform.leftToRight = 0;
                  this.am_base_Transform.rightToRight = 0;
                  this.am_base_Transform.rightToLeft = 0;
                  this.am_wind_Transform.leftToLeft = 0;
                  this.am_wind_Transform.leftToRight = 0;
                  this.am_wind_Transform.rightToRight = 0;
                  this.am_wind_Transform.rightToLeft = 0;
                  if(this.main_song_Transform.leftToLeft == 0)
                  {
                     if(this.MUSIC_VOLUME > 0)
                     {
                        this.main_song_ch.stop();
                        this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                     }
                  }
                  this.main_song_Transform.leftToLeft = this.MUSIC_VOLUME;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = this.MUSIC_VOLUME;
                  this.main_song_Transform.rightToLeft = 0;
               }
               this.musch.soundTransform = this.musTransform;
               this.am_base_ch.soundTransform = this.am_base_Transform;
               this.am_wind_ch.soundTransform = this.am_wind_Transform;
               this.main_song_ch.soundTransform = this.main_song_Transform;
            }
            else
            {
               if(!this.mus_working)
               {
                  this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
                  if(this.musch != null)
                  {
                     this.mus_working = true;
                     this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
                  }
               }
               if(!this.am_wind_working)
               {
                  this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
                  if(this.am_wind_ch != null)
                  {
                     this.am_wind_working = true;
                     this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
                  }
               }
               if(!this.am_base_working)
               {
                  this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
                  if(this.am_base_ch != null)
                  {
                     this.am_base_working = true;
                     this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
                  }
               }
               if(!this.main_song_working)
               {
                  this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                  if(this.main_song_ch != null)
                  {
                     this.main_song_working = true;
                     this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
                  }
               }
            }
            this.gravitatorTransform.volume = 1;
            this.am_base_Transform.volume = 1;
            this.am_wind_Transform.volume = 1;
            this.main_song_Transform.volume = 1;
            this.musTransform.volume = 1;
         }
      }
      
      public function CreateRestoreLoopSounds() : void
      {
         try
         {
            this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
            this.musch.soundTransform.volume = 0;
            this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
            this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
            this.am_base_ch.soundTransform.volume = 0;
            this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
            this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
            this.am_wind_ch.soundTransform.volume = 0;
            this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
            this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
            this.gravitatorch.soundTransform.volume = 0;
            this.UpdateGravitatorVol();
            this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
            this.talkerch = new SoundChannel();
         }
         catch(e:Error)
         {
         }
      }
      
      public function SetHint(param1:String) : void
      {
         this.CURRENT_HINT = this.ReplaceWithVariables(param1);
      }
      
      public function ReplaceWithVariables(param1:String) : String
      {
         var _loc2_:String = null;
         for(_loc2_ in this.level_variables)
         {
            param1 = param1.split(_loc2_).join(this.level_variables[_loc2_]);
         }
         return param1;
      }
      
      public function DialogTalk(param1:String, param2:int) : void
      {
         var SoundClass:Class = null;
         var newSound:Sound = null;
         var targetA:String = param1;
         var targetB:int = param2;
         if(this.NONMUTE)
         {
            try
            {
               this.talkerch.stop();
               SoundClass = getDefinitionByName(targetA) as Class;
               newSound = new SoundClass();
               this.talkerch = newSound.play(0,0,this.vol);
            }
            catch(error:Error)
            {
               talkerch = s_t_switch_denied.play(0,0,vol);
            }
         }
      }
      
      public function DialogSay(param1:String, param2:String) : void
      {
         this.str = "";
         if(param2 == "0")
         {
            param2 = "#AADDFF";
            this.str = this.EXOS_NAME;
         }
         if(param2 == "1")
         {
            param2 = "#AAFFAA";
            this.str = this.MP_mode ? "Marine" : this.CMPG_name;
         }
         if(param2 == "2")
         {
            param2 = "#DDFFAA";
            this.str = this.NOIR_NAME;
         }
         if(param2 == "3")
         {
            param2 = "#FFAAFF";
            this.str = this.PROXY_NAME;
         }
         if(param2 == "4")
         {
            param2 = "#FFAAAA";
            this.str = "Civil Security";
         }
         param1 = this.ReplaceWithVariables(param1);
         if(this.str != "")
         {
            this.str = "<font color=\'#FFFFFF\'>" + this.str + "</font>: <font color=\'" + param2 + "\'>" + param1 + "</font>";
         }
         else
         {
            this.str = "<font color=\'" + param2 + "\'>" + param1 + "</font>";
         }
         if(this.NONMUTE)
         {
            this.ChatNewMsg(this.str);
            this.PlaySound_full(this.s_chat);
         }
      }
      
      public function ResetVol() : void
      {
         if(this.NONMUTE)
         {
            this.vol.volume = this.FX_VOLUME;
            this.vol2.volume = this.MUSIC_VOLUME;
         }
      }
      
      public function UnloadMenuItems() : void
      {
         removeChild(this.menu_buttons);
         removeChild(this.menu_buttons2);
         removeChild(this.earth);
         removeChild(this.flike);
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
      }
      
      public function LocateMeToMp() : void
      {
         var curURL:String = null;
         curURL = "iframe";
         try
         {
            curURL = String(ExternalInterface.call(" function(){ return (window!=window.top)?\'iframe\':\'normal\'; }"));
         }
         catch(e:Error)
         {
            curURL = "iframe";
         }
         if(curURL == "normal" || curURL == "null")
         {
            if(MovieClip(root).loaderInfo.url.toLowerCase().indexOf("plazmaburst2.com") == -1 && MovieClip(root).loaderInfo.url.indexOf("file:///D|/WebServers/home/") == -1 && MovieClip(root).loaderInfo.url.indexOf("file:///D:/WebServers/home/") == -1 && (MovieClip(root).loaderInfo.url.indexOf("file:////Volumes/Macintosh%20HD/Users/") == -1 && MovieClip(root).loaderInfo.url.indexOf("/Desktop/Projects%20Flash/pb/") == -1) && MovieClip(root).loaderInfo.url.indexOf("file:///Users/admin/Desktop/Projects Flash/pb/") == -1 && MovieClip(root).loaderInfo.url.indexOf("file:///C|/Projects%20Fl") == -1 && MovieClip(root).loaderInfo.url.indexOf("file:///C|/%5FHomeData") == -1)
            {
               gotoAndStop("nologinform");
            }
            else
            {
               gotoAndStop("loginform");
            }
         }
         else
         {
            gotoAndStop("nologinform");
         }
      }
      
      public function mov(param1:MouseEvent) : void
      {
         if(!param1.buttonDown)
         {
            this.m_hold = -1;
         }
         this.m = 0;
         while(this.m < 7)
         {
            if(this.menu_buttons2.mouseX > this.menu_buttons["btn" + this.m].x && this.menu_buttons2.mouseX < this.menu_buttons["btn" + this.m].x + 200 && this.menu_buttons2.mouseY > this.menu_buttons["btn" + this.m].y && this.menu_buttons2.mouseY < this.menu_buttons["btn" + this.m].y + 20)
            {
               this.m_active = this.m;
               this.menu_buttons["btn" + this.m].btn_over.alpha = Math.min(this.menu_buttons["btn" + this.m].btn_over.alpha + 0.5,1);
            }
            ++this.m;
         }
      }
      
      public function onEnterFrame2(param1:Event) : void
      {
         this.i = 0;
         while(this.i < 30)
         {
            if(!this.earth["sh" + this.i].started)
            {
               if(getTimer() > this.MUSIC_START + 19020 + this.i * 300 / 30 * 30)
               {
                  this.earth["sh" + this.i].started = true;
                  this.earth["sh" + this.i].gotoAndPlay(1 + Math.floor(Math.random() * 60));
                  this.xx = Math.random() * Math.PI * 2;
                  this.yy = Math.random() * 200;
                  this.earth["sh" + this.i].x = Math.sin(this.xx) * this.yy - 100;
                  this.earth["sh" + this.i].y = Math.cos(this.xx) * this.yy + Math.sin(this.xx) * this.yy + 20;
                  this.earth["sh" + this.i].scaleX = 2.5 + Math.cos(this.xx) * 1;
                  this.earth["sh" + this.i].scaleY = this.earth["sh" + this.i].scaleX;
               }
            }
            ++this.i;
         }
         if(this.blink_main == 20)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick + "█";
         }
         ++this.blink_main;
         if(this.blink_main > 40)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick;
            this.blink_main = 0;
         }
         this.earth.x = 400 + Math.sin(this.earth_pos1 * 0.25) * Math.cos(this.earth_pos1 * 0.7) * 100;
         this.earth.y = 200 + Math.cos(this.earth_pos1) * Math.sin(this.earth_pos1 * 0.6) * 50;
         this.earth.scaleX = this.earth.scaleY = 1 + Math.sin(this.earth_pos1 * 0.15) * Math.cos(this.earth_pos1 * 0.2) * 0.1;
         this.earth_pos1 += 0.01 * 30 / stage.frameRate;
         if(this.darkness.alpha > 0)
         {
            this.darkness.alpha -= 0.1 * 30 / stage.frameRate;
         }
         else
         {
            this.darkness.visible = false;
         }
         this.m_time += 0.01 * 30 / stage.frameRate;
         if(this.m_time > Math.PI * 4)
         {
            this.m_time -= Math.PI * 4;
         }
         if(this.m_active == -1)
         {
            if(this.menu_buttons.alpha > 0.5)
            {
               this.menu_buttons.alpha -= 0.1 * 30 / stage.frameRate;
            }
         }
         else if(this.menu_buttons.alpha < 1)
         {
            this.menu_buttons.alpha += 0.4 * 30 / stage.frameRate;
         }
         if(this.m_active != this.lm_active)
         {
            this.PlaySound_full(this.ss_info);
         }
         this.lm_active = this.m_active;
         this.m = 0;
         while(this.m < 7)
         {
            if(this.m_active == this.m && this.m_hold == -1 || this.m_hold == this.m)
            {
               this.menu_buttons["btn" + this.m].alpha = 1;
               this.menu_buttons["btn" + this.m].btn_over.alpha = Math.min(this.menu_buttons["btn" + this.m].btn_over.alpha + 0.5,1);
            }
            else
            {
               if(this.menu_buttons["btn" + this.m].btn_over.alpha > 0)
               {
                  this.menu_buttons["btn" + this.m].btn_over.alpha -= 0.1 * 30 / stage.frameRate;
               }
               this.menu_buttons["btn" + this.m].alpha = 0.5;
            }
            this.menu_buttons["btn" + this.m].ghost.alpha = this.menu_buttons["btn" + this.m].btn_over.alpha * (0.3 + Math.sin(this.m_time * 4) * 0.1);
            this.menu_buttons["btn" + this.m].ghost.z = (this.menu_buttons["btn" + this.m].ghost.z - this.menu_buttons["btn" + this.m].btn_over.alpha * 100) / 2;
            this.menu_buttons["btn" + this.m].ghost.x = 106 + Math.sin(this.m_time) * 20;
            this.menu_buttons["btn" + this.m].ghost.y = 12 + Math.cos(this.m_time * 2) * 10;
            ++this.m;
         }
      }
      
      public function k_down_space(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space);
            this.myCursor.gotoAndPlay("loading");
            gotoAndStop("loading");
         }
      }
      
      public function NextLevel() : void
      {
         this.PlaySound_full(this.ss_info_act);
         if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
         {
            this.AWARD = true;
            this.CMPG_THIS_LEVEL = this.LEVELS_PASSED;
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("difch");
         }
         else
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("credits");
         }
      }
      
      public function UpdateSkinC(param1:int) : void
      {
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         if(param1 == 0)
         {
            _loc2_ = this.skin0;
         }
         if(param1 == 1)
         {
            _loc2_ = this.skin1;
         }
         if(param1 == 0)
         {
            if(this.skin_model[param1] > 49)
            {
               this.skin_model[param1] = 40;
            }
            if(this.skin_model[param1] < 40)
            {
               this.skin_model[param1] = 49;
            }
         }
         if(param1 == 1)
         {
            if(this.skin_model[param1] > 61)
            {
               this.skin_model[param1] = 60;
            }
            if(this.skin_model[param1] < 60)
            {
               this.skin_model[param1] = 61;
            }
         }
         _loc2_.gotoAndStop(1);
         _loc3_ = this.skin_model[param1];
         _loc2_.head.gotoAndStop(_loc3_);
         _loc2_.head.scaleX = this.COMIC_SCALE;
         _loc2_.head.scaleY = this.COMIC_SCALE;
         _loc2_.scaleX = 1.5 / (this.COMIC_SCALE * 0.5 + 0.5);
         _loc2_.scaleY = 1.5 / (this.COMIC_SCALE * 0.5 + 0.5);
         if(param1 == 1)
         {
            _loc3_ = 3;
         }
         if(param1 == 0 && this.skin_model[param1] < 49)
         {
            _loc3_ = 1;
         }
         _loc2_.body.gotoAndStop(_loc3_);
         _loc2_.toe.gotoAndStop(_loc3_);
         _loc2_.leg1_upper.gotoAndStop(_loc3_);
         _loc2_.leg1_middle.gotoAndStop(_loc3_);
         _loc2_.leg1_lower.gotoAndStop(_loc3_);
         _loc2_.leg2_upper.gotoAndStop(_loc3_);
         _loc2_.leg2_middle.gotoAndStop(_loc3_);
         _loc2_.leg2_lower.gotoAndStop(_loc3_);
         _loc2_.arm1_upper.gotoAndStop(_loc3_);
         _loc2_.arm1_lower.gotoAndStop(_loc3_);
         _loc2_.arm2_upper.gotoAndStop(_loc3_);
         _loc2_.arm2_lower.gotoAndStop(_loc3_);
         if(this.skin_color_head[param1] >= this.clrs.length)
         {
            this.skin_color_head[param1] = 0;
         }
         if(this.skin_color_head[param1] < 0)
         {
            this.skin_color_head[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_body[param1] >= this.clrs.length)
         {
            this.skin_color_body[param1] = 0;
         }
         if(this.skin_color_body[param1] < 0)
         {
            this.skin_color_body[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_arms[param1] >= this.clrs.length)
         {
            this.skin_color_arms[param1] = 0;
         }
         if(this.skin_color_arms[param1] < 0)
         {
            this.skin_color_arms[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_legs[param1] >= this.clrs.length)
         {
            this.skin_color_legs[param1] = 0;
         }
         if(this.skin_color_legs[param1] < 0)
         {
            this.skin_color_legs[param1] = this.clrs.length - 1;
         }
         _loc2_.head.filters = new Array(this.clrs[this.skin_color_head[param1]]);
         _loc2_.body.filters = new Array(this.clrs[this.skin_color_body[param1]]);
         _loc2_.arm1_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.arm2_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.leg1_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg1_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg1_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.toe.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.arm1_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.arm2_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
      }
      
      public function RefrSkin(param1:int) : void
      {
         this.skin_color_head[param1] = 0;
         this.skin_color_body[param1] = 0;
         this.skin_color_arms[param1] = 0;
         this.skin_color_legs[param1] = 0;
      }
      
      public function k_down_space2(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            if(this.camp_score.visible)
            {
               this.PlaySound_full(this.ss_info_act);
               this.camp_score.visible = false;
            }
            else
            {
               this.NextLevel();
            }
         }
      }
      
      public function ColourBuy(param1:int) : String
      {
         if(this.CMPG_money >= param1)
         {
            return "#83EC7D";
         }
         return "#E63D40";
      }
      
      public function UpdateTbl() : void
      {
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryC.length)
         {
            if(this.gunsA[this.i] == undefined || this.gunsA[this.i] == null)
            {
               this.gunsA[this.i] = this.MakeGunByClass(this.inventoryC[this.i].mdl);
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryA.length && !this.ok)
            {
               if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryC[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryA.length)
               {
                  if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsA[this.i].model = this.inventoryC[this.i].mdl;
            this.gunsA[this.i].upg = this.inventoryA[this.i3].upg;
            this.gunsA[this.i].gotoAndStop(1);
            this.gunsA[this.i].x = this.xx;
            this.gunsA[this.i].y = this.yy;
            this.gunsA[this.i].scaleX = 1;
            this.gunsA[this.i].scaleY = 1;
            this.gunsA[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsA[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsA[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsAt[this.i] == undefined || this.gunsAt[this.i] == null)
            {
               this.gunsAt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsAt[this.i].x = this.xx + (this.game.sample2.x - this.game.sample.x);
            this.gunsAt[this.i].y = this.yy;
            this.gunsAt[this.i].txt.text = this.GunModelToGunName(this.gunsA[this.i].model);
            this.gunsA[this.i].onmade();
            this.gunsA[this.i].i3 = this.i3;
            if(this.ok && this.inventoryC[this.i].mdl != "item_grenade" && this.inventoryC[this.i].mdl != "gun_defecator")
            {
               this.gunsAt[this.i].txt2.htmlText = "Upgrade Level: " + this.inventoryA[this.i3].upg + "/3";
               if(this.inventoryA[this.i3].upg < 3)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].costupg) + "\'>Upgrade for $ " + this.gunsA[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsA[this.i].cost != undefined)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].cost) + "\'>Buy for $ " + this.gunsA[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryC[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsAt[this.i].txt.text = this.i6 + "x " + this.gunsAt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsAt[this.i].txt.text += "s";
                     }
                     this.gunsAt[this.i].txt2.htmlText = this.gunsAt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsAt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsAt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsAt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsAt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsA[this.i].cost > 0)
            {
               this.gunsAt[this.i].txt4.text = "Item price: $ " + this.gunsA[this.i].cost;
            }
            else
            {
               this.gunsAt[this.i].txt4.text = "";
            }
            if(this.gunsA[this.i].costupg > 0)
            {
               this.gunsAt[this.i].txt5.text = "Upgrade price: $ " + this.gunsA[this.i].costupg;
            }
            else
            {
               this.gunsAt[this.i].txt5.text = "";
            }
            if(this.gunsAl[this.i] == undefined || this.gunsAl[this.i] == null)
            {
               this.gunsAl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsAl[this.i].x = 0;
            this.gunsAl[this.i].y = this.yy - 9.5;
            if(this.ok && this.inventoryA[this.i3].upg >= 3 || this.i6 >= 6)
            {
               this.gunsAl[this.i].alpha = 0;
            }
            else
            {
               this.gunsAl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsAl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryC.length)
                  {
                     if(gunsAl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsA[i].ok || gunsA[i].model == "item_grenade")
                        {
                           if(gunsA[i].model == "item_grenade" && i6 < 6 || gunsA[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryC.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsA[i2].ok)
                                    {
                                       if(gunsA[i2].wep == gunsA[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsA[i2].cost + gunsA[i2].costupg * gunsA[i2].upg;
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= gunsA[i].cost - i7)
                              {
                                 if(gunsA[i].cost > 0)
                                 {
                                    CMPG_money -= gunsA[i].cost - i7;
                                    AddItemToHero1(gunsA[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryA.splice(gunsA[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsA[i].upg < 3)
                        {
                           if(CMPG_money >= gunsA[i].costupg)
                           {
                              if(gunsA[i].costupg > 0)
                              {
                                 CMPG_money -= gunsA[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryA.length)
                                 {
                                    if(inventoryA[i2].mdl == inventoryC[i].mdl)
                                    {
                                       inventoryA[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTbl();
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function ColourBuyB(param1:int) : String
      {
         if(this.CMPG_money >= param1)
         {
            return "#83EC7D";
         }
         return "#E63D40";
      }
      
      public function UpdateTblB() : void
      {
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryD.length)
         {
            if(this.gunsB[this.i] == undefined || this.gunsB[this.i] == null)
            {
               this.gunsB[this.i] = this.MakeGunByClass(this.inventoryD[this.i].mdl);
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryB.length && !this.ok)
            {
               if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryD[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryB.length)
               {
                  if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsB[this.i].model = this.inventoryD[this.i].mdl;
            this.gunsB[this.i].upg = this.inventoryB[this.i3].upg;
            this.gunsB[this.i].gotoAndStop(1);
            this.gunsB[this.i].x = this.xx;
            this.gunsB[this.i].y = this.yy;
            this.gunsB[this.i].scaleX = 1;
            this.gunsB[this.i].scaleY = 1;
            this.gunsB[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsB[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsB[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsBt[this.i] == undefined || this.gunsBt[this.i] == null)
            {
               this.gunsBt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsBt[this.i].x = this.xx + (this.game.sample2.x - this.game.sample.x);
            this.gunsBt[this.i].y = this.yy;
            this.gunsBt[this.i].txt.text = this.GunModelToGunName(this.gunsB[this.i].model);
            this.gunsB[this.i].onmade();
            this.gunsB[this.i].i3 = this.i3;
            if(this.ok && this.inventoryD[this.i].mdl != "item_grenade" && this.inventoryD[this.i].mdl != "gun_defecator")
            {
               this.gunsBt[this.i].txt2.htmlText = "Upgrade Level: " + this.inventoryB[this.i3].upg + "/3";
               if(this.inventoryB[this.i3].upg < 3)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].costupg) + "\'>Upgrade for $ " + this.gunsB[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsB[this.i].cost != undefined)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].cost) + "\'>Buy for $ " + this.gunsB[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryD[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsBt[this.i].txt.text = this.i6 + "x " + this.gunsBt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsBt[this.i].txt.text += "s";
                     }
                     this.gunsBt[this.i].txt2.htmlText = this.gunsBt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsBt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsBt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsBt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsBt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsB[this.i].cost > 0)
            {
               this.gunsBt[this.i].txt4.text = "Item price: $ " + this.gunsB[this.i].cost;
            }
            else
            {
               this.gunsBt[this.i].txt4.text = "";
            }
            if(this.gunsB[this.i].costupg > 0)
            {
               this.gunsBt[this.i].txt5.text = "Upgrade price: $ " + this.gunsB[this.i].costupg;
            }
            else
            {
               this.gunsBt[this.i].txt5.text = "";
            }
            if(this.gunsBl[this.i] == undefined || this.gunsBl[this.i] == null)
            {
               this.gunsBl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsBl[this.i].x = 0;
            this.gunsBl[this.i].y = this.yy - 9.5;
            if(this.ok && this.inventoryB[this.i3].upg >= 3 || this.i6 >= 6)
            {
               this.gunsBl[this.i].alpha = 0;
            }
            else
            {
               this.gunsBl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsBl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryD.length)
                  {
                     if(gunsBl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsB[i].ok || gunsB[i].model == "item_grenade")
                        {
                           if(gunsB[i].model == "item_grenade" && i6 < 6 || gunsB[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryD.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsB[i2].ok)
                                    {
                                       if(gunsB[i2].wep == gunsB[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsB[i2].cost + gunsB[i2].costupg * gunsB[i2].upg;
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= gunsB[i].cost - i7)
                              {
                                 if(gunsB[i].cost > 0)
                                 {
                                    CMPG_money -= gunsB[i].cost - i7;
                                    AddItemToHero2(gunsB[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryB.splice(gunsB[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsB[i].upg < 3)
                        {
                           if(CMPG_money >= gunsB[i].costupg)
                           {
                              if(gunsB[i].costupg > 0)
                              {
                                 CMPG_money -= gunsB[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryB.length)
                                 {
                                    if(inventoryB[i2].mdl == inventoryD[i].mdl)
                                    {
                                       inventoryB[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTblB();
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function onEnterFrameCredits(param1:Event) : void
      {
         if(this.STOP_SCROLL)
         {
            if(this.runner.y > -907 - 536)
            {
               this.runner.y -= 0.5 * 30 / stage.frameRate;
            }
         }
      }
      
      public function proceed() : void
      {
         if(this.MP_socket.connected)
         {
            this.login_login.alpha = 0.2;
            this.login_login.enabled = false;
            this.login_guest.alpha = 0.2;
            this.login_guest.enabled = false;
            this.PlaySound_full(this.ss_info_act);
            this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
            this.SaveGame();
            this.temp = this.servers_name[this.server_cur].split("(");
            this.CUR_SERVER_NAME = this.temp[0];
            this.errtxt.text = "";
            if(!this.GUEST_ACCESS)
            {
               this.MP_login_name = this.flogin.text;
               this.MP_socket.writeUTFBytes("rq=login&l=" + this.flogin.text + "&p=" + this.fpassword.text + "&v=" + this.GAME_VERSION + "&h=" + this.mh);
            }
            else
            {
               this.MP_login_name = "";
               this.MP_socket.writeUTFBytes("rq=login&l=.guest&p=.guest&v=" + this.GAME_VERSION + "&h=" + this.mh);
            }
            this.MP_socket.flush();
         }
      }
      
      public function serv_list_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
            this.LAST_ERROR = "Can\'t connect to main server";
            gotoAndStop("menu");
         }
      }
      
      public function serv_list_done(param1:Event) : void
      {
         var sr_arr:Array = null;
         var sr_arr2:Array = null;
         var e:Event = param1;
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
            this.str = this.myLoader.data;
            sr_arr = this.str.split(";");
            this.servers_name = new Array();
            this.servers_ip = new Array();
            this.servers_port = new Array();
            this.servers_uid = new Array();
            this.server_cur = 0;
            this.i = 0;
            while(this.i < sr_arr.length)
            {
               sr_arr2 = sr_arr[this.i].split("|");
               this.servers_name[this.i] = sr_arr2[0];
               this.servers_ip[this.i] = sr_arr2[1];
               this.servers_port[this.i] = sr_arr2[2];
               this.servers_uid[this.i] = sr_arr2[3];
               if(this.servers_uid[this.i] == this.LAST_SERVER_UID)
               {
                  this.server_cur = this.i;
               }
               ++this.i;
            }
            this.login_login.alpha = 1;
            this.login_login.enabled = true;
            this.login_guest.alpha = 1;
            this.login_guest.enabled = true;
            this.curserver.text = this.MP_SERVER_NAME = this.servers_name[this.server_cur];
            this.MP_SERVER_IP = this.servers_ip[this.server_cur];
            this.MP_SERVER_PORT = this.servers_port[this.server_cur];
            this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
            Security.loadPolicyFile("xmlsocket://" + this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT);
            this.MP_socket.connect(this.MP_SERVER_IP,this.MP_SERVER_PORT);
            this.curserv1.addEventListener(MouseEvent.CLICK,function():*
            {
               PlaySound_full(ss_info_act);
               if(MP_socket.connected)
               {
                  MP_socket.close();
               }
               errtxt.text = "";
               --server_cur;
               if(server_cur < 0)
               {
                  server_cur = servers_name.length - 1;
               }
               curserver.text = MP_SERVER_NAME = servers_name[server_cur];
               MP_SERVER_IP = servers_ip[server_cur];
               MP_SERVER_PORT = servers_port[server_cur];
               Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
               MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
            });
            this.curserv2.addEventListener(MouseEvent.CLICK,function():*
            {
               PlaySound_full(ss_info_act);
               if(MP_socket.connected)
               {
                  MP_socket.close();
               }
               errtxt.text = "";
               ++server_cur;
               if(server_cur >= servers_name.length)
               {
                  server_cur = 0;
               }
               curserver.text = MP_SERVER_NAME = servers_name[server_cur];
               MP_SERVER_IP = servers_ip[server_cur];
               MP_SERVER_PORT = servers_port[server_cur];
               Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
               MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
            });
         }
      }
      
      public function ch_clk(param1:MouseEvent) : void
      {
         this.i = 0;
         while(this.i < this.ch_total)
         {
            if(mouseX > this.list.x)
            {
               if(mouseX < this.list.x + 220)
               {
                  if(mouseY > this.list.y + this.i * 23)
                  {
                     if(mouseY < this.list.y + this.i * 23 + 23)
                     {
                        this.MP_channel = this.ch_links[this.i];
                        this.i = this.ch_total;
                        gotoAndStop("channel");
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function SetMPSets(param1:int) : void
      {
         if(this.GUEST_ACCESS)
         {
            if(param1 == 1)
            {
               this.errmenu_mp.visible = true;
               this.errmenu_mp.txt.text = "Guests can\'t play in Ranked Matches. Only spectating is allowed for Guests in Ranked Matches.";
            }
         }
         this.simplegui.simple_1.alpha = this.simplegui.simple_2.alpha = this.simplegui.simple_3.alpha = this.simplegui.simple_4.alpha = 0.5;
         this.DefaultMP();
         if(param1 == 1)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 1;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_1.alpha = 1;
         }
         else if(param1 == 2)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 3;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_2.alpha = 1;
         }
         else if(param1 == 3)
         {
            this.MPLIST_APPROVED = 2;
            this.MPLIST_RANKED = 2;
            this.MPLIST_HIDE_FULL = 1;
            this.simplegui.simple_3.alpha = 1;
         }
         this.MP_default_set = param1;
      }
      
      public function gl_clk2() : void
      {
         var _loc1_:int = 0;
         var _loc2_:String = null;
         var _loc3_:int = 0;
         _loc1_ = 2;
         _loc2_ = "false";
         _loc3_ = 1;
         if(this.ggg.gmax2.currentFrame == 2)
         {
            _loc1_ = 2;
         }
         if(this.ggg.gmax3.currentFrame == 2)
         {
            _loc1_ = 3;
         }
         if(this.ggg.gmax4.currentFrame == 2)
         {
            _loc1_ = 4;
         }
         if(this.ggg.gmax5.currentFrame == 2)
         {
            _loc1_ = 5;
         }
         if(this.ggg.gmax6.currentFrame == 2)
         {
            _loc1_ = 6;
         }
         if(this.ggg.gmax8.currentFrame == 2)
         {
            _loc1_ = 8;
         }
         if(this.ggg.gmax16.currentFrame == 2)
         {
            _loc1_ = 16;
         }
         if(this.ggg.gjoin1.currentFrame == 2)
         {
            _loc2_ = "true";
         }
         if(this.ggg.gjoin2.currentFrame == 2)
         {
            _loc2_ = "false";
         }
         if(this.ggg.gtype1.currentFrame == 2)
         {
            _loc3_ = 1;
         }
         if(this.ggg.gtype2.currentFrame == 2)
         {
            _loc3_ = 2;
         }
         if(this.ggg.gtype3.currentFrame == 2)
         {
            _loc3_ = 3;
         }
         this.MP_room_name = this.ggg.gtitle.text;
         this.MP_map_name = this.ggg.gmap.text;
         if(this.MP_socket.connected)
         {
            this.MP_pass = this.ggg.gatt.text;
            this.MP_socket.writeUTFBytes("rq=game_make&channel=" + this.MP_channel + "&gn=" + this.ggg.gtitle.text + "&maxplayers=" + _loc1_ + "&ttype=" + _loc3_ + "&mmap=" + this.ggg.gmap.text + "&att=" + this.ggg.gatt.text + "&fpss=" + this.ggg.gfps.text + "&ranked=" + _loc2_ + "&mods=" + this.ggg.gm_mods.text);
            this.MP_socket.flush();
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
            gotoAndStop("menu");
         }
      }
      
      public function gl_clk(param1:MouseEvent) : void
      {
         this.i = 0;
         while(this.i < this.ch_total)
         {
            if(mouseX > this.list2.x)
            {
               if(mouseX < this.list2.x + 735)
               {
                  if(mouseY > this.list2.y + this.xx + this.i * 32)
                  {
                     if(mouseY < this.list2.y + this.xx + this.i * 32 + 32)
                     {
                        this.MP_room = this.ch_links[this.i];
                        this.MP_room_name = this.ch_names[this.i];
                        this.MP_map_name = this.ch_map[this.i];
                        this.MP_app = this.ch_app[this.i];
                        this.MP_spectator = false;
                        if(mouseX > this.list2.x + 735 - 30)
                        {
                           this.MP_spectator = true;
                        }
                        if(this.ch_pass[this.i] == "no")
                        {
                           this.list2.removeEventListener(MouseEvent.CLICK,this.gl_clk);
                           removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
                           this.MP_pass = "";
                           gotoAndStop("room");
                        }
                        else
                        {
                           this.ggpp.visible = true;
                        }
                        this.i = this.ch_total;
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function DefaultMP() : void
      {
         this.MPLIST_GAMENAME = "any";
         this.MPLIST_MAPID = "any";
         this.MPLIST_MODE = 6;
         this.MPLIST_PUBLIC = 2;
         this.MPLIST_APPROVED = 2;
         this.MPLIST_RANKED = 2;
         this.MPLIST_WITH_FRIENDS = 2;
         this.MPLIST_NO_ENEMIES = 2;
         this.MPLIST_HIDE_FULL = 1;
      }
      
      public function onEnterFrame_ac2(param1:Event) : void
      {
         if(currentFrameLabel == "channel")
         {
            if(this.ok2)
            {
               this.yy -= 2 * 30 / ((stage.frameRate + 30) / 2);
            }
            if(this.ok)
            {
               this.yy += 2 * 30 / ((stage.frameRate + 30) / 2);
            }
            this.xx += this.yy * 30 / ((stage.frameRate + 30) / 2);
            if(this.xx < -this.ch_total * 32 + 220)
            {
               this.xx = -this.ch_total * 32 + 220;
            }
            if(this.xx > 0)
            {
               this.xx = 0;
            }
            this.i = 0;
            while(this.i < this.ch_total)
            {
               this.temp2[this.i].y = this.xx + this.i * 32;
               ++this.i;
            }
            this.sc_scrool.y = 112 + this.xx / (-this.ch_total * 32 + 220) * (225 - 112);
            if(this.yy > 15)
            {
               this.yy = 15;
            }
            if(this.yy < -15)
            {
               this.yy = -15;
            }
            if(this.yy > 1)
            {
               --this.yy;
            }
            else if(this.yy < -1)
            {
               this.yy += 1;
            }
            else
            {
               this.yy = 0;
            }
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
         }
      }
      
      public function sc_upB(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upxB(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_downB(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downxB(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      public function GL_Refresh() : void
      {
         if(this.MP_socket.connected)
         {
            this.MPLIST_GAMENAME = this.gupd_gname.text;
            this.MPLIST_MAPID = this.gupd_mid.text;
            this.SaveGame();
            this.MP_socket.writeUTFBytes("rq=game_list&channel=" + this.MP_channel + "&gl_gamename=" + this.MPLIST_GAMENAME + "&gl_mapid=" + this.MPLIST_MAPID + "&gl_mode=" + this.MPLIST_MODE + "&gl_public=" + this.MPLIST_PUBLIC + "&gl_approved=" + this.MPLIST_APPROVED + "&gl_ranked=" + this.MPLIST_RANKED + "&gl_with_friends=" + this.MPLIST_WITH_FRIENDS + "&gl_no_enemies=" + this.MPLIST_NO_ENEMIES + "&gl_hf=" + this.MPLIST_HIDE_FULL);
            this.MP_socket.flush();
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            gotoAndStop("menu");
         }
      }
      
      public function MP_get_pre() : void
      {
         this.MP_ping1 = getTimer();
         if(this.MP_socket.connected)
         {
            if(this.MP_slot_reset)
            {
               this.MP_myid = -1;
               this.MP_slot_reset = false;
            }
            this.MP_socket.writeUTFBytes("rq=jg&room=" + this.MP_room + "&myid=" + this.MP_myid + "&try=" + this.MP_slot_try + "&pass=" + this.MP_pass + "&lastid=" + this.chat_lastid + "&rdy=" + this.MP_ready + "&ce=" + this.MP_custom_events);
            this.MP_custom_events = "";
            this.MP_socket.flush();
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            gotoAndStop("menu");
         }
      }
      
      public function MP_get_done_pre(param1:String) : void
      {
         var array:Array = null;
         var param:Array = null;
         var array2:Array = null;
         var GOT:String = param1;
         array = GOT.split("&");
         param = new Array();
         this.i = 0;
         while(this.i < array.length)
         {
            array[this.i] = array[this.i].split("=");
            param[array[this.i][0]] = array[this.i][1];
            ++this.i;
         }
         if(param["tryagain"] == "1")
         {
            setTimeout(function():*
            {
               MP_get_pre();
            },100);
         }
         else
         {
            if(param["lastid"] != "" && param["lastid"] != undefined)
            {
               this.chat_lastid = int(param["lastid"]);
            }
            this.MP_ping2 = getTimer() - this.MP_ping1;
            if(this.MP_playerstotal == 0)
            {
               this.MP_playerstotal = int(param["maxplayers"]);
               this.ch_total = 0;
               this.list3.visible = true;
               this.i = 0;
               while(this.i < this.MP_playerstotal)
               {
                  if(this.ch_total == 0)
                  {
                     this.temp = this.list3.ch0;
                  }
                  else
                  {
                     this.temp = this.list3.addChild(new mp_room_list());
                  }
                  this.temp.y = 23 * this.ch_total;
                  this.NoMouse2(this.temp.txt);
                  this.temp.visible = true;
                  if(this.i >= 8)
                  {
                     this.list3.visible = false;
                  }
                  this.temp2[this.i] = this.temp;
                  ++this.ch_total;
                  ++this.i;
               }
            }
            if(this.MP_myid == -1 || this.MP_myid == -2 && !this.got_map_data)
            {
               if(param["myid"] == "-1" || param["myid"] == -1)
               {
                  this.rready.removeEventListener(MouseEvent.CLICK,this.ready_switch);
                  gotoAndStop("channel");
                  this.errmenu_mp.visible = true;
                  if(param["msg"] != undefined)
                  {
                     this.errmenu_mp.txt.text = param["msg"];
                  }
               }
               else
               {
                  this.MP_type = int(param["mptype"]);
                  this.MP_myid = int(param["myid"]);
                  this.MP_team = int(param["myteam"]);
                  if(param["approved"] != undefined)
                  {
                     this.MP_app = param["approved"] == "1";
                  }
                  this.MP_fps = 30;
                  this.MP_pl = Number(param["fpss"]);
                  this.DEFAULT_MAP = param["mapdata"];
                  this.DEFAULT_MAP = this.replace("[i]","&",this.DEFAULT_MAP);
                  this.DEFAULT_MAP = this.replace("[eq]","=",this.DEFAULT_MAP);
                  this.got_map_data = true;
                  this.MP_map_name = param["mapid"];
                  this.mapname_lobby.text = this.MP_map_name;
                  this.match_lobby.text = this.MP_room_name;
                  this.server_lobby.text = this.CUR_SERVER_NAME;
                  this.i = 0;
                  while(this.i < this.MP_playerstotal)
                  {
                     this.temp2[this.i].alpha = 0.5;
                     ++this.i;
                  }
                  this.temp2[this.MP_myid].alpha = 1;
                  this.MP_get_pre();
               }
            }
            else
            {
               if(param["events"] != "" && param["events"] != undefined)
               {
                  while(param["events"] != param["events"].replace("[eq]","="))
                  {
                     param["events"] = param["events"].replace("[eq]","=");
                  }
                  array2 = param["events"].split(";");
                  this.i = 0;
                  while(this.i < array2.length)
                  {
                     array2[this.i] = array2[this.i].split("|");
                     if(array2[this.i][0] == "chat")
                     {
                        this.gamechatbox_text += array2[this.i][1] + "<br>";
                        this.PlaySound_full(this.s_chat);
                     }
                     ++this.i;
                  }
               }
               this.i = 0;
               while(this.i < this.MP_playerstotal)
               {
                  if(param["p" + this.i + "nk"] != undefined)
                  {
                     this.temp2[this.i].txt.text = param["p" + this.i + "nk"];
                  }
                  ++this.i;
               }
               if(param["started"] == "true" || this.MP_spectator && this.got_map_data)
               {
                  this.MP_round = int(param["rnd"]);
                  MovieClip(root).mapdata = this.DEFAULT_MAP;
                  this.MP_mode = true;
                  this.CUR_CUSTOM_MAP = this.MP_map_name;
                  this.myCursor.gotoAndPlay("loading");
                  gotoAndStop("loading");
               }
               else
               {
                  this.MP_get_pre();
               }
            }
         }
      }
      
      public function k_down3(param1:KeyboardEvent) : void
      {
         if(currentLabel == "room")
         {
            if(param1.keyCode == 13)
            {
            }
         }
      }
      
      public function ready_switch(param1:MouseEvent) : void
      {
         if(this.MP_ready)
         {
            this.MP_ready = false;
            this.rready.gotoAndStop(2);
         }
         else
         {
            this.MP_ready = true;
            this.rready.gotoAndStop(1);
         }
      }
      
      public function timerHandler_loading(param1:TimerEvent) : void
      {
         gotoAndStop("gaming");
      }
      
      public function RateMap(param1:int) : void
      {
         var rateserv_list_failed:* = undefined;
         var rateserv_list_done:* = undefined;
         var how:int = param1;
         if(this.nonblockrate)
         {
            rateserv_list_failed = function(param1:IOErrorEvent):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               nonblockrate = true;
               if(currentLabel == "gaming")
               {
                  DialogSay("Can\'t submit vote right now. Please try again later.","#FFFF00");
               }
            };
            rateserv_list_done = function(param1:Event):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               if(currentLabel == "gaming")
               {
                  DialogSay(myRateLoader.data,"#FFFF00");
               }
            };
            this.DialogSay("You voted " + how + " stars on this map.","#FFFF00");
            this.nonblockrate = false;
            this.myRequest = new URLRequest(this.MP_mrate_server);
            this.myVariables = new URLVariables();
            this.myVariables.m = this.CUR_CUSTOM_MAP;
            this.myVariables.p = how;
            this.myRequest.method = URLRequestMethod.GET;
            this.myRequest.data = this.myVariables;
            this.myRateLoader.addEventListener(Event.COMPLETE,rateserv_list_done);
            this.myRateLoader.addEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
            this.myRateLoader.load(this.myRequest);
         }
      }
      
      public function k_down_space3(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space3);
            this.uncncld = false;
            this.PlaySound_full(this.ss_info_act);
            if(this.FORCE_CUSTOM_MAP)
            {
               this.GET_TRIES = 0;
               this.GotoMap(this.CUR_CUSTOM_MAP);
            }
            else
            {
               this.GET_TRIES = 0;
               this.GotoMap("c" + this.CMPG_THIS_LEVEL + "a");
            }
         }
      }
      
      public function onEnterFrame_ac(param1:Event) : void
      {
         if(this.ok2)
         {
            this.yy -= 2;
         }
         if(this.ok)
         {
            this.yy += 2;
         }
         this.xx += this.yy;
         if(this.xx < -this.BADGES_TOTAL * 32 + 296)
         {
            this.xx = -this.BADGES_TOTAL * 32 + 296;
         }
         if(this.xx > 0)
         {
            this.xx = 0;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.achive_obj[this.i].y = this.xx + this.i * 32;
            ++this.i;
         }
         this.sc_scrool.y = 98 + this.xx / (-this.BADGES_TOTAL * 32 + 296) * (282 - 98);
         if(this.yy > 15)
         {
            this.yy = 15;
         }
         if(this.yy < -15)
         {
            this.yy = -15;
         }
         if(this.yy > 1)
         {
            --this.yy;
         }
         else if(this.yy < -1)
         {
            this.yy += 1;
         }
         else
         {
            this.yy = 0;
         }
      }
      
      public function sc_up(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upx(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_down(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downx(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      public function intro_done() : void
      {
         if(!this.INTRO_DONE)
         {
            this.StopAllSounds();
            this.INTRO_DONE = true;
            this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
            if(this.main_song_ch != null)
            {
               this.main_song_working = true;
               this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
            }
            gotoAndStop("menu");
         }
      }
      
      public function __setPerspectiveProjection_(param1:Event) : void
      {
         root.transform.perspectiveProjection.fieldOfView = 90;
         root.transform.perspectiveProjection.projectionCenter = new Point(400,200);
      }
      
      internal function frame1() : *
      {
         this.GAME_VERSION = "1.23";
         this.GAME_VERSION_SIMPLE = "1.28a";
         SoundMixer.soundTransform = new SoundTransform(0,0);
         stop();
         this.proper_scale_mode = StageScaleMode.SHOW_ALL;
         this.proper_stage_align = "";
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.myLoader = new URLLoader();
         this.myRateLoader = new URLLoader();
         this.myDeRateLoader = new URLLoader();
         this.myLoader2 = new URLLoader();
         this.myLoader2noserver = new URLLoader();
         this.mySaveLoadLoader = new URLLoader();
         this.myReportLoader = new URLLoader();
         this.MP_server = "http://www.plazmaburst2.com/pb2/server.php";
         this.MP_mrate_server = "http://www.plazmaburst2.com/mrate.php";
         this.NetworkLoad_triesleft = 0;
         this.NetworkLoad_complete = false;
         this.NetworkLoad_failed = false;
         this.NetworkSave_triesleft = 0;
         this.NetworkSave_data = "";
         this.my_so = SharedObject.getLocal("plazma_burst2");
         this.NetworkLoad();
         this.edidumb = -1;
         this.edidumb = setInterval(this.edumb,500);
         try
         {
            MouseWheelEnabler.init(stage);
         }
         catch(error:Error)
         {
         }
         this._flash_version = 404;
         try
         {
            this._fullInfo = Capabilities.version;
            this._osSplitArr = this._fullInfo.split(" ");
            this._versionSplitArr = this._osSplitArr[1].split(",");
            this._versionInfo = this._versionSplitArr[0] + "." + this._versionSplitArr[1];
            this._flash_version = Number(this._versionInfo);
         }
         catch(e2:*)
         {
         }
         this.intro_first = true;
         this.conti.visible = false;
         this.conti_loading.visible = false;
         this.myMenu = new ContextMenu();
         this.myMenu.hideBuiltInItems();
         this.contextMenu = this.myMenu;
         this.theDate = new Date();
         stage.frameRate = 30;
         stage.quality = "HIGH";
         this.intro_vers.text = this.intro_vers.text.split("%version%").join(this.GAME_VERSION_SIMPLE);
         Security.allowDomain("http://www.plazmaburst2.com");
         this.spec_debug = false;
         this.whitness.alpha = 0;
         this.whitness.visible = false;
         this.loaded = 0;
         this.total = 100;
         this.ldd = false;
         if(stage.loaderInfo.bytesTotal == 0)
         {
            this.total = 7632588;
         }
         else
         {
            this.total = stage.loaderInfo.bytesTotal;
         }
         this.percent = 0;
         this.lastperc = 0;
         this.times = 0;
         this.totalseconds = 0;
         this.waitfor = 0;
         this.pass = false;
         this.death_cam = -1;
         this.fir = setInterval(this.firtim,1000);
         addEventListener(Event.ENTER_FRAME,this.handleProgress);
         this.handleProgress(null);
         this.firtim();
         this.pType = String(Capabilities.playerType);
         if(this.loaderInfo.url.search("http") == -1 && this.pType == "External")
         {
            this.spec_debug = true;
            this._flash_version = 10000 + this._flash_version;
            this.myRequest = new URLRequest("http://www.plazmaburst2.com/iddqd.php");
            this.myVariables = new URLVariables();
            this.myVariables.neko = "meow";
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            stage.frameRate = 25;
            this.myDeRateLoader.load(this.myRequest);
            this.myDeRateLoader.addEventListener(IOErrorEvent.IO_ERROR,function():*
            {
            });
         }
         this.myLoader2.addEventListener(IOErrorEvent.IO_ERROR,function():*
         {
         });
         this.myLoader2noserver.addEventListener(IOErrorEvent.IO_ERROR,function():*
         {
         });
         if(MovieClip(root).loaderInfo.url.indexOf("file:////Volumes/Macintosh%20HD/Users/") == -1)
         {
            if(MovieClip(root).loaderInfo.url.indexOf("file:///C|/%5FHome") == -1)
            {
               try
               {
                  this.CPMStarContentSpotID = "3840Q2701D848";
                  this.ad = new AdLoader(this.CPMStarContentSpotID);
                  this.adBox.addChild(this.ad);
               }
               catch(e:*)
               {
               }
               try
               {
                  ExternalInterface.addCallback("sendTextToFlash",this.getTextFromJavaScript);
               }
               catch(e:*)
               {
               }
            }
         }
         this.intro_btcb.addEventListener(MouseEvent.CLICK,function():*
         {
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.intro_base.mouseEnabled = false;
         this.intro_base.mouseChildren = false;
         this.conti.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(conti.visible && !pass)
            {
               pass = true;
               conti.alpha = 0.5;
            }
         });
         this.conti_loading.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            NetworkLoad_complete = true;
         });
      }
      
      internal function frame2() : *
      {
         stop();
         this.mh = "";
         this.COMIC_SCALE = 1.65;
         this.COMIC_SCALE_GUNS = 1.25;
         this.LAST_ERROR = "";
         this.normal_spine_length = 23;
         this.normal_shoulder_length = 4;
         this.TRIGGER_PLAYER_INITIATOR = -1;
         this.TRIGGER_PLAYER_KILLER = -1;
         this.ANONYMOUS_MODE = false;
         this.GLOBAL_REGEN_SPEED = 1;
         this.GLOBAL_REGEN_DELAY = 1;
         this.GLOBAL_FALL_DAMAGE_MULT = 1;
         this.GLOBAL_FALL_SENSITIVITY_MULT = 1;
         this.BOOST_MULT = 1;
         this.BOOST_HIGH_PHYSICS = 0;
         this.BOOST_LOW_PHYSICS = 0;
         Mouse.show();
         this.gtlt = getTimer();
         this.gtrec = 40;
         this.gtwi = this.gtrec;
         this._mp_ping_rl = 0;
         this.allow_unlag_fps = true;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.GUEST_ACCESS = false;
         this.MP_default_set = 1;
         this.MP_enc_deaths = 0;
         this.MP_real_deaths = 0;
         this.MP_enc_restarts = 0;
         this.MP_gbd = -1;
         this.MP_last_message_patience = 0;
         this.MP_last_message = 0;
         this.MP_BAD_WORDS_SAID = 0;
         this.MP_last_linked = -1;
         this.MP_myspecials = new Array();
         this.MP_myspecials_total = 0;
         this.MP_assigning_special = -1;
         this.MP_specials = new Array();
         this.MP_start_grenades_count = 0;
         this.MP_start_grenades_port_count = 0;
         this.MP_start_grenades_sh_count = 0;
         this.ENEMY_SENDER_i = 0;
         this.ENEMY_SENDER_last = getTimer();
         this.ENEMY_SENDER_lowestping = false;
         this.ENTER_TICKED = true;
         this.SP_unlimit_framerate = false;
         this.MP_startbarrels = new Array();
         this.PSYCHOBLOOD_MODE = 1;
         this.FRAMERATE = 1;
         this.PREDEF_TEAMS = new Array();
         this.PREDEF_COLORS = new Array();
         this.PREDEF_TEAMS[0] = "Alpha";
         this.PREDEF_TEAMS[1] = "Beta";
         this.PREDEF_TEAMS[2] = "Gamma";
         this.PREDEF_TEAMS[3] = "Delta";
         this.PREDEF_TEAMS[4] = "Zeta";
         this.PREDEF_TEAMS[5] = "Lambda";
         this.PREDEF_TEAMS[6] = "Sigma";
         this.PREDEF_TEAMS[7] = "Omega";
         this.PREDEF_TEAMS[8] = "Counter-Terrorists";
         this.PREDEF_COLORS[8] = "#b2d6ea";
         this.PREDEF_TEAMS[9] = "Terrorists";
         this.PREDEF_COLORS[9] = "#5d160b";
         this.PREDEF_TEAMS[10] = "Usurpation Forces";
         this.PREDEF_COLORS[10] = "#efe66c";
         this.PREDEF_TEAMS[11] = "Civil Security";
         this.PREDEF_COLORS[11] = "#eacf98";
         this.PREDEF_TEAMS[12] = "Red Team";
         this.PREDEF_COLORS[12] = "#fe0000";
         this.PREDEF_TEAMS[13] = "Blue Team";
         this.PREDEF_COLORS[13] = "#5dc6fd";
         this.PREDEF_TEAMS[14] = "Green Team";
         this.PREDEF_COLORS[14] = "#80fc9a";
         this.PREDEF_TEAMS[15] = "White Team";
         this.PREDEF_COLORS[15] = "#ededed";
         this.PREDEF_TEAMS[16] = "Black Team";
         this.PREDEF_COLORS[16] = "#3d3d3d";
         this.BAD_WORDS_PATTERN = this.decode("bipmf;bovt;bti1mf;bti1mft;btipmft;!btt!;g!v!d!l;g/v/d/l;g/v/l;g!v!l;vs!npn;vs!npuif;Btt!Npolfz;Bttgbdf;btti1mf;btti1mf{;bttipmf;bttipmft;bttipm{;bttxjqf;b{{ipmf;cbttufset;Cjbudi;cjudi;cjudift;Cmpx!Kpc;cpggjoh;cvuuipmf;cvuuxjqf;d1dl;d1dlt;d1l;Dbsqfu!Nvodifs;dbxl;dbxlt;Dmju;dout;dou{;dpdl;dpdlifbe;dpdl.ifbe;dpdlt;DpdlTvdlfs;dpdl.tvdlfs;tvdlt!dpdl;tvdlt!qfojt;dvou;dvout;dvou{;ejdl;ejme1;ejme1t;ejmep;ejmept;ejmme1;ejmme1t;epnjobusjdlt;epnjobusjdt;epnjobusjy;fofnb;g!v!d!l;g!v!d!l!f!s;gbh;gbh2u;gbhfu;gbhh2u;gbhhju;gbhhpu;gbhju;gbht;gbh{;gbjh;gbjht;gbsu;gmjqqjoh!uif!cjse;gvdl;gvdlfs;gvdljo;gvdljoh;gvdlt;Gvehf!Qbdlfs;gvl;Gvlbi;Gvlfo;gvlfs;Gvljo;Gvll;Gvllbi;Gvllfo;Gvllfs;Gvlljo;h11l;hbz;hbzcpz;hbzhjsm;hbzt;hbz{;Hpe.ebnofe;i11s;i1bs;i1sf;ifmmt;ipbs;ipps;ippsf;kbdlpgg;kbqt;kfsl.pgg;kjtjn;kjtt;kj{n;kj{{;lopc;lopct;lopc{;lvou;lvout;lvou{;Mftcjbo;Mf{{jbo;Mjqtijut;Mjqtiju{;nbtpdijtu;nbtpljtu;nbttufscbju;nbttuscbju;nbttuscbuf;nbtufscbjufs;nbtufscbuf;nbtufscbuft;Npuib!Gvdlfs;Npuib!Gvlfs;Npuib!Gvllbi;Npuib!Gvllfs;Npuifs!Gvdlfs;Npuifs!Gvlbi;Npuifs!Gvlfs;Npuifs!Gvllbi;Npuifs!Gvllfs;npuifs.gvdlfs;Nvuib!Gvdlfs;Nvuib!Gvlbi;Nvuib!Gvlfs;Nvuib!Gvllbi;Nvuib!Gvllfs;o2hs;obtuu;ojhhfs;ojhvs;ojjhfs;ojjhs;psbgjt;pshbtjn;pshbtn;pshbtvn;psjgbdf;psjgjdf;psjgjtt;qbdlj;qbdljf;qbdlz;qblj;qbljf;qblz;qfdlfs;qfffovt;qfffovttt;qffovt;qfjovt;qfo2t;qfobt;qfojt;qfojt.csfbui;qfovt;qfovvt;Qivd;Qivdl;Qivl;Qivlfs;Qivllfs;qpmbd;qpmbdl;qpmbl;Qppoboj;qs2d;qs2dl;qs2l;qvttf;qvttff;qvttz;qvvlf;qvvlfs;rvffs;rvffst;rvffs{;rxffst;rxffs{;rxfjs;sfdluvn;sfduvn;sfubse;tbejtu;tdbol;tdimpoh;tdsfxjoh;tfnfo;tfy;tfyz;Ti\"u;ti2u;ti2ufs;ti2ut;ti2uufs;ti2u{;tiju;tijut;tijuufs;Tijuuz;Tijuz;tiju{;Tizu;Tizuf;Tizuuz;Tizuz;tlbodl;tlbol;tlbolff;tlbolfz;tlbolt;Tlbolz;tmvu;tmvut;Tmvuuz;tmvu{;tpo.pg.b.cjudi;uju;uvse;wb2kjob;wbh2ob;wbhjjob;wbhjob;wbk2ob;wbkjob;wvmmwb;wvmwb;x1q;xi11s;xi1sf;xipsf;ysbufe;c\",di;cjudi;cmpxkpc;dmju;bstdimpdi;gvdl;tiju;bttipmf;c\"udi;c28di;c2udi;cj,di;cpjpmbt;cvdfub;d1dl;dbxl;dijol;djqb;dmjut;dpdl;dvn;dvou;ejmep;ejstb;fkblvmbuf;gbubtt;gdvl;gvl;gvy1s;ipfs;ipsf;kjtn;lbxl;m4judi;m4j,di;mftcjbo;nbtuvscbuf;nbtufscbu+;nbtufscbu4;npuifsgvdlfs;t/p/c/;npgp;ob{j;ojhhb;ojhhfs;ovutbdl;qivdl;qjnqjt;qvttf;qvttz;tdspuvn;ti\"u;tifnbmf;tij,;ti\",;tmvu;tnvu;uffut;ujut;cppct;c11ct;uff{;uftujdbm;uftujdmf;ujuu;x11tf;kbdlpgg;xbol;xipbs;xipsf;+ebno;+ezlf;+gvdl+;+tiju+;A%%;bndjl;boetlpub;bstf+;bttsbnnfs;bzjs;cj8di;cjudi+;cpmmpdl+;csfbtut;cvuu.qjsbuf;dbcspo;db{{p;disbb;divk;Dpdl+;dvou+;e5no;ebzhp;efhp;ejdl+;ejlf+;evqb;e{jxlb;fkbdlvmbuf;Flsfn+;Flup;fodvmfs;gbfo;gbh+;gbodvmp;gbooz;gfdft;gfh;Gfmdifs;gjdlfo;Gmjllfs;gpsftljo;Gpu{f;gvulsfu{o;hbz;hppl;hvjfob;i1s;i5y1s;ifmwfuf;ipfs+;ipolfz;Ivfwpo;ivj;jokvo;kj{{;lbolfs+;ljlf;lmppu{bl;lsbvu;lovmmf;lvl;lvltvhfs;Lvsbd;lvsxb;mftcp;nbnippo;nbtuvscbu;njcvo;npolmfjhi;npvmjfxpq;nvjf;nvmllv;nvtdij;ob{jt;ofqftbvsjp;ojhhfs;psptqv;qfstf;qjdlb;qjfsepm;qjnnfm;qjtt;qj{eb;qppoutff;qpso;q1so;qs1o;qsfuffo;qvub;qvup;rbicfi;sbvufocfsh;tdibggfs;tdifjtt;tdimbnqf;tdinvdl;tdsfx;ti\"u;tibsnvub;tibsnvuf;tijqbm;tij{;tlsjc{;tlvsxztzo;tqifodufs;tqjd;tqjfsebmbk;tqmpphf;tvlb;uxbu;wjuuv;xjditfs;{bcpvsbi;zpvs!npuifs;zp!npuifs;vs!npuifs;zpvs!npn;zp!npn;vs!npn;sbqf;cjdift;cjdif{;ojhb;tptj;zfcpl;dimfo;timzvyb;tvlb");
         this.BAD_WORDS = new Array();
         this.BAD_WORDS = this.BAD_WORDS_PATTERN.split("|");
         this.BAD_WORDS_PATTERN = "";
         this.LAST_VOTE = 0;
         this.MP_login_name = "";
         this.LAST_BADGE = 0;
         this.CREDITS_BY_GAME_END = false;
         this.BADGES_ENABLED = true;
         this.BADGES_TOTAL = 0;
         this.BADGE_STAT = new Array();
         this.BADGE_STAT_MAX = new Array();
         this.BADGE_TITLE = new Array();
         this.BADGE_REACHED = new Array();
         this.addBadge(0,"Kill 100 enemies",100);
         this.addBadge(1,"Kill 30 enemies with swords",30);
         this.addBadge(2,"Make 40 headshots",40);
         this.addBadge(3,"Kill an enemy when you are dead",1);
         this.addBadge(4,"Kill an enemy when you are dying",1);
         this.addBadge(5,"Kill 10 enemies while you are not standing on your feet",10);
         this.addBadge(6,"Destroy all the barrels at any 3 levels with at least 5 barrels",3);
         this.addBadge(7,"Kill 20 dying enemies with swords",20);
         this.addBadge(8,"Kill an enemy with help of elevator or door",1);
         this.addBadge(9,"Mirror 20 projectiles",20);
         this.addBadge(10,"Pass a mission with no kills",1);
         this.addBadge(11,"Beat all the campaign levels at any level of difficultly",1);
         this.addBadge(12,"Beat 42 level at Normal or Hard level of difficultly",1);
         this.addBadge(13,"Beat 41 level at Normal or Hard level of difficultly",1);
         this.addBadge(14,"Beat 41 level at Hard level of difficultly",1);
         this.addBadge(15,"Break 50 enemies in two parts",50);
         this.addBadge(16,"Pass at least 10 levels at Hard level of difficultly",10);
         this.addBadge(17,"Destroy a vehicle with swords",1);
         this.addBadge(18,"Kill 5 invisible enemies with swords",5);
         this.addBadge(19,"Kill 40 enemies at Hard level of difficultly",40);
         this.addBadge(20,"Do wall jump",1);
         this.addBadge(21,"Pass a mission with no shots at Normal or Hard level of difficultly",1);
         this.addBadge(22,"Make x5 times more damage than receive during any mission (make at least 100 damage)",1);
         this.BADGES_TOTAL = 23;
         this.MP_socket = new Socket();
         this.ss_info = new s_info();
         this.ss_info_off = new s_info_off();
         this.ss_info_act = new s_info_act();
         this.MP_SERVER_IP = "174.36.149.120";
         this.MP_SERVER_PORT = 10015;
         this.CURRENT_HINT = "";
         this.THIS_HINT = "";
         this.PITIMER = 0;
         this.SHAKEAMMOUT = 0;
         this.LAST_SERVER_UID = 0;
         this.MP_SERVER_GOT = "";
         this.MP_SERVER_GOT_CUR = "";
         this.MP_socket.addEventListener(Event.CLOSE,this.MP_s_closeHandler);
         this.MP_socket.addEventListener(Event.CONNECT,this.MP_s_connectHandler);
         this.MP_socket.addEventListener(IOErrorEvent.IO_ERROR,this.MP_s_ioErrorHandler);
         this.MP_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,this.MP_s_securityErrorHandler);
         this.MP_socket.addEventListener(ProgressEvent.SOCKET_DATA,this.MP_s_socketDataHandler);
         this.spawn = true;
         stage.quality = "HIGH";
         this.allowedText = " ,.\'][{}:?!@#$%^*()_-+=1234567890qwertyuiopasdfghjklzxcvbnmQAZWSXEDCRFVBGTYHNMJUIKLOP;<>\"/\\";
         this.allowedText += "йцукенгшщзхъфывапролджэячсмитьбюёЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ";
         this.FIRST_TIME = false;
         this.game_scale = 1;
         this.lgame_scale = 1;
         this.hscreenX = 400;
         this.hscreenY = 200;
         this.screenX = 800;
         this.screenY = 400;
         this.MP_spectator = false;
         this.MP_room = "plazma_playerz";
         this.MP_room_name = "";
         this.MP_map_name = "";
         this.MP_pass = "";
         this.MP_channel = "-";
         this.MP_channel_name = "-";
         this.MP_myid = 0;
         this.MP_team = 0;
         this.MP_total = 0;
         this.MP_mode = true;
         this.MP_clan = "";
         this.CASUAL_MODE = false;
         this.NOBASE = false;
         this.PLAZMA_GAME = true;
         this.AUTO_REVIVE = true;
         this.STRICT_MODE = false;
         this.MEAT_MODE = false;
         this.PRO_BOTS = false;
         this.ARCADE_GAME_MODE = true;
         this.LEVELS_TOTAL = 42;
         this.LEVELS_PASSED = 0;
         this.CMPG_THIS_LEVEL = -1;
         this.AWARD = false;
         this.MP_last_chat = "";
         this.MP_pwarn = false;
         this.INLAG = false;
         this.MP_ready = false;
         this.MP_type = 1;
         this.MP_half_bot = false;
         this.CMPG_name = "";
         this.EXOS_NAME = "Battlesuit AI Module";
         this.NOIR_NAME = "Noir Lime";
         this.PROXY_NAME = "Proxy";
         this.CMPG_money = 0;
         this.MP_nick = "TCO";
         this.SUPER_COMPUTER = false;
         this.RAGDOLL_COLLIDE = false;
         this.IM_A_CHEATER = false;
         this.LITE_PHYS = false;
         this.AUTO_PICK_NEW_WEPS = true;
         this.SOFT_SCREEN = true;
         this.SCREEN_EFFECTS = true;
         this.VIOLENCE = true;
         this.ALTCUR = true;
         this.CENSORESHIP = false;
         this.DISPLAY_CHAT = true;
         this.FX_VOLUME = 0.5;
         this.MUSIC_VOLUME = 0.5;
         this.CUR_MUSIC_VOLUME = 0;
         this.MUSIC_COLDDOWN = 100;
         this.HQ = true;
         this.MOUSE_WHEEL = true;
         this.OVERSCROLL = true;
         this.EASY_MODE = false;
         this.LOW_HPS = false;
         this.GSPEED = 0.5;
         this.GSPEED2 = 0.5;
         this.DEFAULT_FPS = 30;
         this.MP_fps = 30;
         this.MP_pbug = 0;
         this.max_after_impact_speed = 15;
         this.MP_app = false;
         this.temp2 = new Array();
         this.ch_total = 0;
         this.ch_links = new Array();
         this.ch_names = new Array();
         this.ch_pass = new Array();
         this.ch_app = new Array();
         this.ch_map = new Array();
         this.chat_lastid = -1;
         this.skin_model = new Array();
         this.skin_color_head = new Array();
         this.skin_color_body = new Array();
         this.skin_color_arms = new Array();
         this.skin_color_legs = new Array();
         this.clrs = new Array();
         this.inventoryA = new Array();
         this.inventoryB = new Array();
         this.inventoryC = new Array();
         this.inventoryD = new Array();
         this.armorA = 0;
         this.armorB = 0;
         this.AddItemToHero3("gun_pistol",3);
         this.AddItemToHero3("gun_pistol2",3);
         this.AddItemToHero3("gun_apistol",3);
         this.AddItemToHero3("gun_rifle",3);
         this.AddItemToHero3("gun_real_rifle",3);
         this.AddItemToHero3("gun_arifle",3);
         this.AddItemToHero3("gun_shotgun",3);
         this.AddItemToHero3("gun_arifle2",3);
         this.AddItemToHero3("gun_rl",3);
         this.AddItemToHero3("gun_raygun",3);
         this.AddItemToHero3("gun_plasmagun",3);
         this.AddItemToHero3("gun_railgun",3);
         this.AddItemToHero3("gun_bfg",3);
         this.AddItemToHero3("gun_defibrillator",3);
         this.AddItemToHero3("item_grenade",3);
         this.AddItemToHero4("gun_pistol2",3);
         this.AddItemToHero4("gun_apistol",3);
         this.AddItemToHero4("gun_real_rifle",3);
         this.AddItemToHero4("gun_arifle",3);
         this.AddItemToHero4("gun_real_shotgun",3);
         this.AddItemToHero4("gun_arifle2",3);
         this.AddItemToHero4("gun_rl",3);
         this.AddItemToHero4("gun_plasmagun",3);
         this.AddItemToHero4("gun_railgun",3);
         this.AddItemToHero4("gun_railgun2",3);
         this.AddItemToHero4("gun_defibrillator",3);
         this.AddItemToHero4("item_grenade",3);
         this.clrs[0] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[0].matrix = this.matrix;
         this.clrs[1] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0.3,0.2,0.2,0,0]);
         this.matrix = this.matrix.concat([0.2,0.3,0.2,0,0]);
         this.matrix = this.matrix.concat([0.2,0.2,0.3,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[1].matrix = this.matrix;
         this.clrs[2] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1.1,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,1.1,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,1.1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[2].matrix = this.matrix;
         this.clrs[3] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[3].matrix = this.matrix;
         this.clrs[4] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[4].matrix = this.matrix;
         this.clrs[5] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[5].matrix = this.matrix;
         this.clrs[6] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[6].matrix = this.matrix;
         this.clrs[7] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[7].matrix = this.matrix;
         this.clrs[8] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[8].matrix = this.matrix;
         this.MPclr = new Array();
         this.MPclr["r"] = [1,0,0];
         this.MPclr["g"] = [0,1,0];
         this.MPclr["b"] = [0,0,1];
         this.MPclr["d"] = [0.6,0.6,0.6];
         this.MPclr["k"] = [0.1,0.1,0.1];
         this.MPclr["p"] = [0.608,0.188,1];
         this.MPclr["w"] = [1,1,1];
         this.MPclr["c"] = [0,1,1];
         this.MPclr["m"] = [1,0,1];
         this.MPclr["y"] = [1,1,0];
         this.MPclr["n"] = [1,0.87,0.678];
         this.MPclr["s"] = [0.8,0.882,1];
         this.MPclr["o"] = [0.702,0.933,0.227];
         this.MPclr["e"] = [1,0.647,0];
         this.MPclr["a"] = [0.596,0.984,0.596];
         this.MPclr["h"] = [1,0.965,0.561];
         this.MPclr["v"] = [0.51 * 1.3,0.78 * 1.3,1 * 1.3];
         this.MPclr["1"] = [0.31 * 1.3,0.58 * 1.3,1 * 1.3];
         this.MPclr["2"] = [0.7 * 1.3,0.1 * 1.3,0.1 * 1.3];
         this.FIRST_RUN = true;
         this.my_so.flush();
         this.LoadGame();
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.mdialog.nickname.text = this.loaderInfo.parameters.l;
         }
         else
         {
            this.mdialog.nickname.text = this.CMPG_name;
         }
         this.mdialog.back1e2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.mdialog.back1e2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.mdialog.back1e2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            nicknameproceed();
         });
         this.NONMUTE = true;
         this.s_channel = new Array();
         this.vol3d = new Array();
         this.max_channels = 32 - 10;
         this.last_channel = 0;
         this.i = 0;
         while(this.i < this.max_channels)
         {
            this.s_channel[this.i] = new SoundChannel();
            if(this.s_channel[this.i] == null)
            {
               this.NONMUTE = false;
            }
            this.vol3d[this.i] = new SoundTransform(1);
            ++this.i;
         }
         this.vol = new SoundTransform(this.FX_VOLUME);
         this.vol2 = new SoundTransform(this.MUSIC_VOLUME);
         this.DEFAULT_MAP = "<player x=\"-340\" y=\"1\" uid=\"#hero\" tox=\"0\" toy=\"0\" hea=\"100\" hmax=\"100\" team=\"0\" side=\"1\" char=\"1\" incar=\"-1\" botaction=\"0\" ondeath=\"-1\" /><box x=\"-400\" y=\"100\" w=\"400\" h=\"100\" m=\"1\" />";
         this.dist_to_face = 600;
         this.s_chat = new chat();
         this.s_badge_earned = new badge_earned();
         this.s_coolbuddy2 = new coolbuddy2();
         this.s_mission_done = new mission_done();
         this.s_team_switch = new team_switch();
         this.s_corvett_die = new corvett_die();
         this.s_test_sound = new test_sound();
         this.s_hint_appear = new hint_appear();
         this.s_hint_disappear = new hint_disappear();
         this.s_ship_incoming = new ship_incoming();
         this.s_ship_explosion = new ship_explosion();
         this.s_robo_bug_jump = new robo_bug_jump();
         this.s_robo_bug_launch = new robo_bug_launch();
         this.s_robo_bug_hit = new robo_bug_hit();
         this.s_s_gun_rayrifle = new s_gun_rayrifle();
         this.myCursor.gotoAndPlay(1);
         this.myCursor.mouseEnabled = false;
         this.myCursor.mouseChildren = false;
         this.darkness.mouseEnabled = false;
         this.darkness.mouseChildren = false;
         this.m_dist = 0;
         this.momove = false;
         stage.addEventListener(MouseEvent.MOUSE_MOVE,this.mouseMoveHandler);
         stage.addEventListener(Event.ENTER_FRAME,function():*
         {
            if(momove)
            {
               momove = false;
               if(ALTCUR)
               {
                  if(myCursor.currentLabel != "loading")
                  {
                     if(currentFrame > 3)
                     {
                        if(currentLabel != "gaming" || currentLabel == "gaming" && (gamemenu.visible && !system_non_stop && !mens[MP_myid].dead))
                        {
                           myCursor.gotoAndPlay(1);
                        }
                        else if(myCursor.currentFrame != 7)
                        {
                           myCursor.gotoAndStop(7);
                        }
                        if(!MP_spectator)
                        {
                           if(mouseX != 0 || mouseY != 0)
                           {
                              myCursor.x = mouseX;
                              myCursor.y = mouseY;
                           }
                        }
                        ++m_dist;
                        if(m_dist > 200)
                        {
                           m_dist = 0;
                           if(!MP_spectator)
                           {
                              Mouse.hide();
                           }
                           else
                           {
                              Mouse.show();
                           }
                        }
                     }
                  }
                  if(!myCursor.visible)
                  {
                     myCursor.visible = true;
                  }
               }
               else
               {
                  Mouse.show();
                  if(myCursor.visible)
                  {
                     myCursor.visible = false;
                  }
               }
            }
         });
         this.debug_screen = new Shape();
         this.DEBUG_MODE = false;
         this.lastcurmove = 0;
         this.last_psi = 1;
         this.dying_after = 30;
         this.HUNT_LOST = 220;
         this.MP_teamkills = 0;
         this.MP_round = 0;
         this.MP_gamestate = 0;
         this.tooltip_updated = false;
         this.TOOLTIPS = true;
         this.HINTS = true;
         this.gamechat_input_text = "";
         this.MP_playerstotal = 0;
         this.PLAYER_WIDTH = 10;
         this.MP_start_x = 0;
         this.MP_start_y = 0;
         this.MP_force_disconnect = false;
         this.MP_chat_input = false;
         this.MP_chat_input_for = "all";
         this.MP_custom_events = "";
         this.MP_deaths = 0;
         this.MP_kills = 0;
         this.hero = new Array();
         this.hpwarning = false;
         this.hpbeepch = new SoundChannel();
         this.hp_warn_max = 0.5;
         this.s_hp_warn = new hp_warn();
         this.s_hp_dead = new hp_dead();
         this.gravitatorch = new SoundChannel();
         this.s_gravitator = new gravitator2();
         this.wind_base = 0;
         this.musch = new SoundChannel();
         this.s_gameplay_song = new gameplay_song();
         this.main_song_ch = new SoundChannel();
         this.s_main_song = new main_song();
         this.am_base_ch = new SoundChannel();
         this.s_am_base = new am_base();
         this.am_wind_ch = new SoundChannel();
         this.s_am_wind = new am_wind();
         this.timeshiftch = new SoundChannel();
         this.s_slow_down = new slow_down();
         this.s_slow_up = new slow_up();
         this.grenades_total = 0;
         this.grenades_port_total = 0;
         this.grenades_sh_total = 0;
         this.c_sim_rt = 0;
         this.c_sim_rt2 = 0;
         this.c_sim_stress = false;
         this.OpenTop = true;
         this.system_non_stop = true;
         this.stoped_by_focus = false;
         this.last_gun_b4_psi = -1;
         this.mini_scenario_cur = -1;
         this.mini_scenario_phase = 0;
         this.fps_last = getTimer();
         this.fps_ticks = 0;
         this.color_player = 11206570;
         this.color_friendly = 16776994;
         this.color_enemy = 16746632;
         this.color_player_over = "#EAFFEA";
         this.color_friendly_over = "#FFFF92";
         this.color_enemy_over = "#FFC8C8";
         this.firstframe = true;
         this.g_scale_outcar = 1;
         this.s_t_switch1 = new t_switch1();
         this.s_t_switch2 = new t_switch2();
         this.s_t_switch_denied = new t_switch_denied();
         this.s_t_door1_start = new t_door1_start();
         this.s_t_door1_stop = new t_door1_stop();
         this.s_step1 = new step1();
         this.s_step2 = new step2();
         this.s_step3 = new step3();
         this.s_step4 = new step4();
         this.s_robo_step1 = new robo_step1();
         this.s_robo_step2 = new robo_step2();
         this.s_robo_step3 = new robo_step3();
         this.s_robo_step4 = new robo_step4();
         this.s_body0 = new body0();
         this.s_body1 = new body1();
         this.s_body2 = new body2();
         this.s_body3 = new body3();
         this.s_metal0 = new metal_hor();
         this.s_metal1 = new metal_ver1();
         this.s_metal2 = new metal_ver2();
         this.s_metal3 = new metal_ver3();
         this.s_metal_gib = new metal_gib();
         this.s_steel_low = new steel_low();
         this.s_steel_med = new steel_med();
         this.s_steel_hor = new steel_hor();
         this.s_steel_hard = new steel_hard();
         this.s_glass1 = new glass1();
         this.s_glass2 = new glass2();
         this.s_barrel = new barrel();
         this.s_barrel2 = new barrel2();
         this.s_teleport = new teleport_spawn();
         this.s_portnade_explode = new portnade_explode();
         this.s_portnade_act2 = new portnade_act2();
         this.s_shnade_act = new shnade_act();
         this.s_shnade_explode = new shnade_explode();
         this.s_shnade_hit = new shnade_hit();
         this.s_shnade_hit_low = new shnade_hit_low();
         this.s_shnade_offline = new shnade_offline();
         this.s_fail_shot = new fail_shot();
         this.s_psi1 = new sou_blade_swing1();
         this.s_psi2 = new sou_blade_swing2();
         this.s_psi3 = new sou_blade_swing3();
         this.s_water_splash1 = new water_splash1();
         this.s_water_splash2 = new water_splash2();
         this.s_water_splash3 = new water_splash3();
         this.s_blood_hit = new blood_hit();
         this.s_blood_hit_sword = new blood_hit_sword();
         this.s_blood_head = new blood_head();
         this.s_blood_head2 = new blood_head2();
         this.s_blood_body = new blood_body();
         this.s_blood_body2 = new blood_body2();
         this.s_blood_leg_arm = new blood_leg_arm();
         this.s_body_fall = new body_fall();
         this.s_metal_hit = new metal_hit();
         this.s_wea1 = new wea1();
         this.s_wea2 = new wea2();
         this.s_wea_pickup = new wea_pickup();
         this.s_charged_explosion = new charged_explosion();
         this.s_silenced = new silenced();
         this.s_wea_sniper = new wea_sniper();
         this.s_wea_minigun2 = new wea_mingun2();
         this.s_wea_plasmagun = new wea_plasmagun();
         this.s_wea_apistol = new wea_apistol();
         this.s_wea_pistol = new wea_pistol();
         this.s_wea_pistol2 = new wea_pistol2();
         this.s_wea_shotgun = new wea_shotgun();
         this.s_wea_rifle = new wea_rifle();
         this.s_wea_rocket = new wea_rocket_launch();
         this.s_wea_railgun = new wea_railgun();
         this.s_wea_railgun2 = new wea_rail_alt();
         this.s_wea_mingun = new wea_mingun();
         this.s_wea_gl = new wea_gl();
         this.s_wea_vehcannon = new wea_vehcannon();
         this.s_wea_impulse = new wea_impulse();
         this.s_wea_rail_alt = new wea_rail_alt();
         this.s_wea_energy = new wea_energy();
         this.s_wea_evil_shot = new wea_evil_shot();
         this.s_wea_rifle_alt = new wea_rifle_alt();
         this.s_wea_shotgun_alt = new wea_shotgun_alt();
         this.s_wea_defibrillator = new wea_defibrillator();
         this.s_wea_vehminigun = new wea_vehminigun();
         this.s_wea_real_shotgun = new wea_real_shotgun();
         this.s_wea_real_shotgun_r = new wea_real_shotgun_r();
         this.s_wea_real_rifle = new wea_real_rifle();
         this.s_walker_step = new walker_step();
         this.s_walker_phase1 = new walker_phase1();
         this.s_walker_phase2 = new walker_phase2();
         this.s_walker_die = new walker_die();
         this.s_capsule_hit1 = new capsule_hit1();
         this.s_capsule_hit2 = new capsule_hit2();
         this.s_explode1 = new explode1();
         this.s_explode2 = new explode2();
         this.s_explode_bfg = new explode_bfg();
         this.s_reload = new reload();
         this.s_rl_reload = new rl_reload();
         this.s_dectalk_death1 = new dectalk_death1();
         this.s_dectalk_death2 = new dectalk_death2();
         this.s_dectalk_death3 = new dectalk_death3();
         this.dectalk_deaths = [this.s_dectalk_death1,this.s_dectalk_death2,this.s_dectalk_death3];
         this.s_dectalk_celebrate1 = new dectalk_celebrate1();
         this.s_dectalk_celebrate2 = new dectalk_celebrate2();
         this.s_dectalk_celebrate3 = new dectalk_celebrate3();
         this.s_dectalk_celebrate4 = new dectalk_celebrate4();
         this.s_dectalk_celebrate5 = new dectalk_celebrate5();
         this.dectalk_celebrate = [this.s_dectalk_celebrate1,this.s_dectalk_celebrate2,this.s_dectalk_celebrate3,this.s_dectalk_celebrate4,this.s_dectalk_celebrate5];
         this.s_dectalk_dying1 = new dectalk_dying1();
         this.s_dectalk_dying2 = new dectalk_dying2();
         this.s_dectalk_dying3 = new dectalk_dying3();
         this.s_dectalk_dying4 = new dectalk_dying4();
         this.dectalk_dying = [this.s_dectalk_dying1,this.s_dectalk_dying2,this.s_dectalk_dying3,this.s_dectalk_dying4];
         this.s_dectalk_welcome1 = new dectalk_welcome1();
         this.s_dectalk_welcome2 = new dectalk_welcome2();
         this.s_dectalk_welcome3 = new dectalk_welcome3();
         this.s_dectalk_welcome4 = new dectalk_welcome4();
         this.s_dectalk_welcome5 = new dectalk_welcome5();
         this.dectalk_welcome = [this.s_dectalk_welcome1,this.s_dectalk_welcome2,this.s_dectalk_welcome3,this.s_dectalk_welcome4,this.s_dectalk_welcome5];
         this.s_dectalk_hurt1 = new dectalk_hurt1();
         this.s_dectalk_hurt2 = new dectalk_hurt2();
         this.s_dectalk_hurt3 = new dectalk_hurt3();
         this.dectalk_hurt = [this.s_dectalk_hurt1,this.s_dectalk_hurt2,this.s_dectalk_hurt3];
         this.s_grenade = new grenade();
         this.s_grenade_act = new grenade_act();
         this.s_nade_throw = new nade_throw();
         this.s_explode_underwater = new explode_underwater();
         this.s_plasma_explosion = new plasma_explosion();
         this.s_box_low = new box_ver1();
         this.s_box_med = new box_ver2();
         this.s_box_hor = new box_hor();
         this.s_box_hard = new box_ver3();
         this.s_box_die = new box_die();
         this.s_drone_die = new drone_die();
         this.s_drone_hurt = new drone_hurt();
         this.expl_hurt_full = false;
         this.joint_cycle = 0;
         this.hpmax = 200;
         this.maxbulletlife = 0;
         this.boxx = new Array();
         this.boxy = new Array();
         this.boxw = new Array();
         this.boxh = new Array();
         this.boxmat = new Array();
         this.bgx = new Array();
         this.bgy = new Array();
         this.bgw = new Array();
         this.bgh = new Array();
         this.pushx = new Array();
         this.pushy = new Array();
         this.pushtox = new Array();
         this.pushtoy = new Array();
         this.pushstab = new Array();
         this.pushdamage = new Array();
         this.pushw = new Array();
         this.pushh = new Array();
         this.flare = new Array();
         this.flare_power = new Array();
         this.flarestotal = 0;
         this.wax = new Array();
         this.way = new Array();
         this.waw = new Array();
         this.wah = new Array();
         this.wadamage = new Array();
         this.ax = new Array();
         this.ay = new Array();
         this.lax = new Array();
         this.lay = new Array();
         this.atox = new Array();
         this.atoy = new Array();
         this.aio = new Array();
         this.aof = new Array();
         this.arad = new Array();
         this.around = new Array();
         this.amat = new Array();
         this.atim = new Array();
         this.acollided = new Array();
         this.ainwater = new Array();
         this.ablood = new Array();
         this.aactive = new Array();
         this.pspeed = 0;
         this.weapon_penetration_factor = 0;
         this.chtypa = new Array();
         this.chP = new Array();
         this.chC = new Array();
         this.chdef = new Array();
         this.chdamp = new Array();
         this.chio = new Array();
         this.chtsilp = new Array();
         this.atotal = 0;
         this.chtotal = 0;
         this.startatotal = 0;
         this.startchtotal = 0;
         this.bounce = 0.2;
         this.friction = 0.3;
         this.gravity = 0.5;
         this.barrels = new Array();
         this.guns = new Array();
         this.mens = new Array();
         this.vehicles = new Array();
         this.doors = new Array();
         this.decors = new Array();
         this.triggers = new Array();
         this.timers = new Array();
         this.regions = new Array();
         this._root = MovieClip(root);
         this.regionstotal = 0;
         this.triggerstotal = 0;
         this.timerstotal = 0;
         this.doorstotal = 0;
         this.bgstotal = 0;
         this.playerstotal = 0;
         this.boxestotal = 0;
         this.lampstotal = 0;
         this.watertotal = 0;
         this.gunstotal = 0;
         this.pushstotal = 0;
         this.vehiclestotal = 0;
         this.barrelstotal = 0;
         this.decorstotal = 0;
         this.sitmax = 14;
         this.key_left = false;
         this.key_right = false;
         this.key_up = false;
         this.key_down = false;
         this.key_grenade = false;
         this.key_pick = false;
         this.key_alt = false;
         this.key_grab = false;
         this.key_kinetic = false;
         this.key_fall = false;
         this.key_ctrl = false;
         this.cinetic_target = -1;
         this.timeshift = 0;
         this.energy_max = 100;
         this.energy = 100;
         this.joint_align = -1;
         this.puls = new Array();
         this.pulscur = 0;
         this.pulsmax = 64;
         this.surf_lnk = new Array();
         this.surf_lnk_to = new Array();
         this.ef = new Array();
         this.nextef = 0;
         this.maxef = 64;
         this.shnades = new Array();
         this.shnades_total = 0;
         this.shnades_next = 0;
         this.lamps_x = new Array();
         this.lamps_y = new Array();
         this.lamps_power = new Array();
         this.lamps_power2 = new Array();
         this.lamps_skips = 1;
         this.lamps_sprites = new Array();
         this.render_minX = 0;
         this.render_minY = 0;
         this.render_maxX = 0;
         this.render_maxY = 0;
         this.rnd = 1;
         this.Disable_next_click = false;
         this.FORCE_SNOW = false;
         this.flakes_spreadout = 150;
         this.flakes_letitsnow = true;
         this.mShape = new Sprite();
         this.optimalupd = true;
         this.NearBoxBSP_stepsize = 100;
         this.NearBoxBSP_empty = new Vector.<int>(0,true);
         this.synonym_uid = new Array();
         this.synonym_id = new Array();
         this.SHOW_FRAG_MESSAGES = true;
         this.mxnds1 = 0;
         this.mxnds2 = 0;
         this.mxnds3 = 0;
         this.tnds = 10;
         this.stable = true;
         this.unstable = -1;
         this.unstable_m = "none";
         this.MP_start_guns_total = 0;
         this.qpack_pattern = new Array();
         this.qpack_pattern_length = 0;
         this.qpack_pattern_simcalc = 0;
         this.qpack_base = "0123456789abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ_()$@~!.,*-+;:?<>/#%&";
         this.qpack_rule_2param("^","[^]");
         this.qpack_rule("\" /><player x=\"");
         this.qpack_rule("\" /><enemy x=\"");
         this.qpack_rule("\" /><door x=\"");
         this.qpack_rule("\" /><box x=\"");
         this.qpack_rule("\" /><gun x=\"");
         this.qpack_rule("\" /><pushf x=\"");
         this.qpack_rule("\" /><decor x=\"");
         this.qpack_rule("\" /><trigger enabled=\"true");
         this.qpack_rule("\" /><trigger enabled=\"false");
         this.qpack_rule("\" /><timer enabled=\"true");
         this.qpack_rule("\" /><timer enabled=\"false");
         this.qpack_rule("\" /><inf mark=\"");
         this.qpack_rule(" /><bg x=\"");
         this.qpack_rule(" /><lamp x=\"");
         this.qpack_rule(" /><region x=\"");
         this.qpack_rule("<player x=\"");
         this.qpack_rule("\" damage=\"");
         this.qpack_rule("\" maxspeed=\"");
         this.qpack_rule("\" model=\"gun_");
         this.qpack_rule("\" model=\"");
         this.qpack_rule("\" botaction=\"");
         this.qpack_rule("\" ondeath=\"");
         this.qpack_rule("\" actions_");
         this.qpack_rule("_targetB=\"");
         this.qpack_rule("_type=\"");
         this.qpack_rule("_targetA=\"");
         this.qpack_rule("\" team=\"");
         this.qpack_rule("\" side=\"");
         this.qpack_rule("\" command=\"");
         this.qpack_rule("\" flare=\"");
         this.qpack_rule("\" power=\"");
         this.qpack_rule("\" moving=\"true");
         this.qpack_rule("\" moving=\"false");
         this.qpack_rule("\" tarx=\"");
         this.qpack_rule("\" tary=\"");
         this.qpack_rule("\" tox=\"");
         this.qpack_rule("\" toy=\"");
         this.qpack_rule("\" hea=\"");
         this.qpack_rule("\" hmax=\"");
         this.qpack_rule("\" incar=\"");
         this.qpack_rule("\" char=\"");
         this.qpack_rule("\" maxcalls=\"");
         this.qpack_rule("\" vis=\"false");
         this.qpack_rule("\" vis=\"true");
         this.qpack_rule("\" use_on=\"");
         this.qpack_rule("\" use_target=\"");
         this.qpack_rule("\" upg=\"0^");
         this.qpack_rule("\" upg=\"");
         this.qpack_rule("^fgun_");
         this.qpack_rule("\" addx=\"");
         this.qpack_rule("\" addy=\"");
         this.qpack_rule("\" y=\"");
         this.qpack_rule("\" w=\"");
         this.qpack_rule("\" h=\"");
         this.qpack_rule("\" m=\"");
         this.qpack_rule("\" at=\"");
         this.qpack_rule("\" delay=\"");
         this.qpack_rule("\" target=\"");
         this.qpack_rule("\" stab=\"");
         this.qpack_rule("\" mark=\"");
         this.qpack_rule("0^T0^3");
         this.qpack_rule("0^x^y0^z0^h1^");
         this.qpack_rule("^m3^o-1^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
         this.qpack_rule("^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
         this.qpack_rule("^A0^B0^C130^D130^q");
         this.qpack_rule("0^u0.4^t1\"^");
         this.qpack_rule("0^Q1");
         this.qpack_rule("0^R");
         this.qpack_rule("0^S");
         this.qpack_rule("0^Q-");
         this.qpack_rule("0^Q");
         this.qpack_rule("\" /><water x=\"");
         this.qpack_rule("\" forteam=\"");
         this.qpack_rule("^Ttrue");
         this.qpack_rule("true");
         this.qpack_rule("false");
         this.qpack_rule("^m2^o-1^m2^p0^m2^n0^)");
         this.qpack_rule("pistol");
         this.qpack_rule("rifle");
         this.qpack_rule("shotgun");
         this.qpack_rule("real_");
         this.qpack_rule_2param("","<q.");
         this.INTRUDER_DATABASE = new Object();
         this.INTRUDER_DATABASE_length = 0;
         this.ENABLE_LEVEL_LOGIC_ERRORS = false;
         this.trigger_loops = 0;
         this.level_variables = null;
         this.dm_slots_on_spawn = null;
         this.dm_max_guns_on_spawn = 0;
         this.session_variables = {};
         this.TraceLine_lasttime = 0;
         this.tracep = 0;
         this.NO_PSI = false;
         this.START_CUSTOM_MAP = false;
         this.CUR_CUSTOM_MAP = "";
         if(this.loaderInfo.parameters.custommap != undefined)
         {
            this.START_CUSTOM_MAP = true;
         }
         this.CACHED_MAPS = new Array();
         this.CACHED_MAPS["c0a"] = "<q.^f-502^*199^A0^B0^C800^D800^q0^r1^F1^E3^k0^l-1\"^c-161^-6^.107^,310^T1\"^c-560^-43^.266^,410^T1\"^c-264^-5^.4^,150^T0^4-216^*150^i^/2^s-1^L3-178^-5^.18^,1150^T1^3-180^*19^.4^,13^_-197^*16^.19^,8^_-199^*19^.4^,140^T0\"^d-150^*300^u1^t0\" /><vehicle x=\"-43^*110^r-1^jveh_drone^A0^B0\" hpp=\"20^1-43^*69^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^3-299^-20^.17^,1000^T1^3-630^-^.100^,500^T1^3-180^-3^.4^,4^_-261^-3^.4^,40^T0\" /><barrel x=\"-283^-30^jbar_orange^A0^B0\" /><barrel x=\"-279^-30^jbar_orange^A0^B0^3-202^*12^.7^,4^_-242^*19^.4^,14^_-259^*16^.19^,8^_-261^*19^.4^,130^T0\" /><vehicle x=\"-273^-20^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"-267^-20^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-182^-80^jbar_orange^A0^B0^3-222^*15^.4^,90^T0\"^d-280^*200^u1^t0\" /><barrel x=\"-236^*140^jbar_orange^A0^B0\" /><barrel x=\"-183^*180^jbar_orange^A0^B0^360^-47^.20^,73^_60^!1^.20^,18^_69^-51^.93^,69^_79^*33^.83^,480^T0^127^-51^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^427^-20^ia^/^s-1^L267^-28^.9^,200^x^y0^z0^h4^I\" /><vehicle x=\"-502^*230^r1^jveh_capsule^A0^B10\" hpp=\"100^5-630^*240^.100^,2400^A1^B0^Y100^g0\"^d36^-0^u1^t0^3-10^-^.20^,18^_-50^-^.20^,180^T0^1-53^*59^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"-53^*100^r-1^jveh_drone^A0^B0\" hpp=\"20^4-53^*80^ivehminigun^s-1^L1-191^*159^A0^B0^C100^D100^q2^r-1^F7^E-1^k2^l-1^1-216^*119^A0^B0^C70^D70^q2^r-1^F8^E-1^k2^l-1^1-248^*159^A0^B0^C100^D100^q2^r1^F7^E-1^k0^l-1^4-42^*90^ivehminigun^s-1^L4-248^*180^i^&^#^s-1^L4-191^*180^i^&^#^s-1^L4-248^*190^i^/2^s-1^L4-191^*190^i^/2^s-1^L3-331^-20^.35^,300^T1^3-365^-31^.41^,310^T1^3-387^-40^.37^,270^T1^3-406^-50^.24^,130^T2^3-431^-63^.14^,290^T2^3-484^-73^.72^,190^T2^3-427^-69^.12^,140^T2^3-630^-80^.365^,400^T2\"^d-426^-260^u0.5^t0^3-480^-40^.60^,100^T1^3-630^-32^.80^,690^T2\"^d-477^-300^u0.3^t0\"^d-504^-300^u0.3^t0\"^d-399^-260^u0.5^t0^3-497^-62^.19^,250^T2^3-526^-70^.33^,250^T2^+-550^-74^.20^,60^g0^+-412^-74^.102^,60^g0^3-501^-67^.8^,80^T2^3-530^-73^.8^,110^T2^3-310^-70^.13^,140^T2^3-458^-46^.15^,80^T2^6-295^!40^jstone^U-1^O0^P0^2-301^!2^.14^,10^(H^2-372^-36^.9^,6^(H^6-368^-370^jstone2^U-1^O0^P0^2-298^-9^.12^,13^(H^2-300^!0^.14^,10^(H^2-370^-34^.10^,6^(H\" /><inf x=\"-502^*230^Zhero1_guns^;0^369^-8^.93^,14^_6^-50^.64^,700^T0^114^-51^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^414^-20^ia^/^s-1^M0\"^c64^!6^.98^,44^_110^*90^.52^,700^T0^4-307^-690^jitem_grenade^s-1^L4-301^-690^jitem_grenade^s-1^L4-201^*130^jitem_grenade^s-1^L4-197^*200^jitem_grenade^s-1^M0\"^d-310^-510^u0.4^t1^7^G1^m1^o7^m1^p1^m1^nc1a^>\"^e31^-27^.37^,230^K0^J6^1-224^*119^A0^B0^C70^D70^q2^r-1^F8^E-1^k2^l-1^4-224^*140^i^/2^s-1^L4-264^-20^jitem_grenade^s-1^L4-276^!0^jitem_grenade^s-1^L3-263^*12^.5^,40^T0^4-264^-30^jitem_grenade^s-1^L3-60^-5^.91^,1150^T1^3-166^-30^.125^,900^T2^1-81^-201^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4-81^!90^ia^/^s-1^L1-70^-301^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4-70^-290^ia^/^s-1^L3-160^-27^.40^,10^_-90^-20^.10^,15^_-170^-24^.40^,10^_-173^-21^.33^,10^_-173^!8^.23^,10^_-140^-^.30^,100^T1^3-289^-5^.30^,1150^T1^3-100^-^.30^,100^T1\"^c-114^!^.18^,50^T1\"^d-105^*300^u1^t0\"^d-59^*300^u1^t0\" /><barrel x=\"-186^-80^jbar_orange^A0^B0^3-336^-53^.8^,130^T1^3-343^!8^.26^,160^T1\" /><barrel x=\"-532^-780^jbar_blue^A0^B0\" /><barrel x=\"-535^-780^jbar_blue^A0^B0^1-287^-91^A-5^B3^C0^D0^q1^r1^F2^E-1^k0^l-1^1-296^!31^A-8^B3^C0^D0^q1^r1^F2^E-1^k0^l-1^4-298^-80^ia^#^s-1^L4-311^!90^ia^#^s-1^L2-352^-20^.12^,13^(H^2-354^-21^.14^,10^(H^2-355^-23^.14^,10^(H^6-349^-250^jstone^U-1^O0^P0^3-225^*12^.10^,4^_-241^*12^.7^,40^T0\"^d-230^*500^u1^t0\"^d-207^*500^u1^t0\"^c-260^*15^.21^,40^T0\"^c-198^*15^.21^,4^_-270^!0^.100^,1100^T0\" /><barrel x=\"-255^-80^jbar_orange^A0^B0\" /><barrel x=\"-252^-80^jbar_orange^A0^B0^3-225^-3^.10^,4^_-222^-5^.4^,80^T0\"^c-177^-5^.4^,150^T0\"^c-260^*11^.83^,31^_-484^-64^.61^,140^T2^5110^*240^.52^,1500^A-2^B0^Y100^g0\" /><inf x=\"-482^*50^Znobase^;0\" />";
         this.CACHED_MAPS["c1a"] = "<q.^f35^*179^A0^B2^C800^D800^q0^r1^F1^E-1^k0^l-1^3-10^-5^.79^,1360^T0\"^c64^*26^.416^,146^_60^-2^.20^,38^_60^*34^.20^,18^_70^-6^.50^,13^_69^*37^.146^,14^_78^*80^.147^,480^T0^192^-61\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^1105^!\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^3100^-^.8^,10^_116^*31^.21^,17^_116^*3^.21^,120^T0^267^*17^.9^,200\" uid=\"#doori^x^y0^z0^h4^I\"^e58^*17^.7^,250\" uid=\"#region_193^K1^J2\"^e67^!^.9^,200\" uid=\"#region_195^K-1^J4^3181^*27^.34^,18^_135^-24^.33^,29^_133^-^.7^,6^_204^*53^.21^,136^_181^-4^.24^,6^_180^-2^.3^,8^_150^*14^.4^,20^_194^-24^.11^,6^_193^-22^.3^,80^T0^1186^-41\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4186^!0\" uid=\"#gun_183^ia^#^s-1^L1137^-241\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k3^l-1^1169^-241\" uid=\"#player^A0^B0^C140^D140^q1^r-1^F6^E-1^k3^l-1^4137^-210\" uid=\"#gun_183^ia^#^s-1^L3153^!^.9^,50^T0^1158^!1\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4158^*20\" uid=\"#gun_183^ia^#^s-1^L3194^-44^.11^,6^_116^-6^.10^,7^_110^-33^.30^,70^T0\"^d97^*22^~d160^*22^~d179^-6^~d192^-26^~d95^-200^u0.4^t1^3120^-50^.10^,7^_103^-50^.7^,7^_60^-50^.30^,25^_60^-70^.108^,500^T0^4169^-210\" uid=\"#gun_183^ia^#2^s-1^L3143^!8^.5^,9^_166^-64^.4^,47^_166^-24^.4^,370^T0^1160^-691\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k3^l-1^4160^-660\" uid=\"#gun_183^ia^#^s-1^M0\"^d192^-450^u0.4^t1^3193^-41^.3^,9^_194^-64^.16^,16^_193^-62^.3^,180^T0\"^d192^-660^u0.4^t1^1199^-641\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4199^-610\" uid=\"#gun_183^ia^#^s-1^L2172^-25^.19^,50\" uid=\"#door2^x^y0^z0^h2^I\"^e172^-95^.19^,50\" uid=\"#regionT^K-1^J4^7^G1^m1^o0^m1^p1^m1^n2^m2^o28^m2^p13^m2^n4^m3^o28^m3^p13^m3^n5^m4^o28^m4^p14^m4^n6^m5^o43^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^e143^-59^.12^,110\" uid=\"#region_334^K0^J1\" /><barrel x=\"153^*160\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"154^-220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"150^-220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"127^-480\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"131^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"135^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"95^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"83^-480\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"203^-620\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"173^-230\" uid=\"#barrel^jbar_orange^A0^B0^354^!01^.143^,40^_191^-95^.45^,46^_240^-60^.40^,60^_220^*58^.50^,98^_315^*80^.95^,110^_310^-52^.10^,28^_270^-90^.140^,40^_340^-60^.70^,40^_369^*40^.111^,80^_372^-58^.30^,16^_376^-56^.30^,16^_380^-54^.30^,16^_384^-52^.96^,680^T0^+280^-62^.30^,280\" uid=\"#water^g0^+310^-80^.10^,100\" uid=\"#water^g0^+320^-62^.20^,280\" uid=\"#water^g0^1349^-601\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4349^-570\" uid=\"#gun_183^ia^#^s-1^L1283^-351\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4283^-320\" uid=\"#gun_183^ia^#^s-1^L1254^-601\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4254^-570\" uid=\"#gun_183^ia^#^s-1^M0\"^d245^-41^~d266^-41^~d290^-89^~d330^-89^~d380^-410^u0.4^t1^3131^-28^.6^,70^T0^1108^-501\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k3^l-1^4108^-470\" uid=\"#gun_183^ia^#^s-1^L492^-30\" uid=\"#gun_183^ia^/^s-1^L4105^*30\" uid=\"#gun_183^ia^/^s-1^L3210^*80^.60^,50^T0^1235^*579\" uid=\"#player_305^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4236^*610\" uid=\"#gun_183^ia^#^s-1^M0\"^e175^-23^.5^,20\" uid=\"#region_307^K-1^J4\"^e183^-23^.6^,20\" uid=\"#region_308^K-1^J4^1249^*579\" uid=\"#player_305B^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4250^*610\" uid=\"#gun_183^ia^#^s-1^M0\"^e122^-43^.6^,50\" uid=\"#region_311^K-1^J4^3267^-35^.17^,60^T0^174^-501\" uid=\"#player^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^475^-470\" uid=\"#gun_183^ia^#2^s-1^M0\" /><inf x=\"35^*210\" uid=\"#engine_mark^Zhero1_guns^;0^3-60^*40^.91^,1810^T1^531^*70^.29^,400\" uid=\"#pusher^A0^B2^Y100^g0^5-60^*70^.91^,300\" uid=\"#pusher_408^A2^B0^Y100^g0^560^*70^.18^,360\" uid=\"#pusher_408^A-2^B0^Y100^g0\"^d36^*450^u1^t0^7^G1^m1^o0^m1^p0^m1^n1^>^1277^-601\" uid=\"#player^A0^B0^C140^D140^q1^r-1^F6^E-1^k0^l-1^4278^-570\" uid=\"#gun_183^ia^#2^s-1^M0\"^e387^-39^.63^,160\" uid=\"#region_462^K2^J6^7^G1^m1^o7^m1^p1^m1^nc2a^>^2400^-39^.3^,140\" uid=\"#door^x^y0^z0^h1^I^383^-60^.11^,15^_77^-33^.6^,7^_100^-47^.5^,10^_191^-76^.4^,40^T0\"^c69^*16^.5^,180^T4\"^c174^-27^.1^,710^T4\"^c188^-27^.1^,710^T4^3260^*80^.70^,100^_286^!1^.14^,190^T0^1275^-351\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4275^-320\" uid=\"#gun_183^ia^#^s-1^L3310^!^.10^,370^T0\" /><barrel x=\"272^-330\" uid=\"#barrel^jbar_orange^A0^B0\"^e206^-78^.40^,210\" uid=\"#region_277^K3^J6^7^G-1^m1^o43^m1^pRun, then jump on the wall and hold only the jump button. Don\'t press run button before collision^m1^n0^>\"^e137^-52^.13^,200\" uid=\"#region_2863^K4^J6^7^G1^m1^o43^m1^pPress E button to activate the panel board.^m1^n0^>\"^e217^-37^.30^,260\" uid=\"#region_278^K5^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^d149^-640^u0.4^t0^3168^-48^.4^,4^_166^-95^.6^,9^_230^-99^.70^,42^_180^*27^.3^,210^T0^6315^-520\" uid=\"#decor^jray_floor^U-1^O0^P0^6315^-380\" uid=\"#decor^jray_ceil^U-1^O0^P0^5314^-35^.2^,190\" uid=\"#pusher_613^A0^B0^Y0^g-1000\"^d315^-390^u0.2^t0\"^d315^-510^u0.2^t0^4202^-30\" uid=\"#gun_156^jitem_grenade^s-1^L4197^-30\" uid=\"#gun_156^jitem_grenade^s-1^M0\" />";
         this.CACHED_MAPS["c2a"] = "<q.^f-98^*479^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-200^*90^.470^,276^_-200^*100^.133^,40^_-200^*48^.141^,180^T0^2-112^*73^.3^,140^x^y0^z0^h10^I^3-81^*100^.91^,23^_-140^*40^.90^,20^_-3^*100^.43^,40^_-10^*48^.50^,18^_-20^*40^.80^,20^_10^*100^.50^,700^T0\" /><inf x=\"-98^*510^Zhero1_guns^;0\"^e-112^*61^.3^,140^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>^9^G1^X0^W0\" /><barrel x=\"-57^*420^jbar_orange^A0^B0\" /><barrel x=\"-12^*420^jbar_orange^A0^B0\"^e-3^*61^.12^,140^K1^J1^2-50^*38^.30^,40^x^y0^z0^h4^I^3-20^-^.40^,20^_-90^-^.40^,20^_50^*100^.30^,190^_-200^*40^.80^,180^_-130^-40^.80^,20^_-20^-40^.80^,200^T0\"^e-50^-^.30^,40^K2^J5\"^d-10^*76^~d-60^*76^~d-49^*30^~d-21^*30^~d-49^!0^~d-21^!0^~d-49^-50^~d-21^-500^u0.4^t1^7^G1^m1^o0^m1^p1^m1^n2^>^7^G1^m1^o25^m1^p1^m1^n0^m2^o25^m2^p2^m2^n0^m3^o43^m3^pYou can slow down time, by pressing Z or PageDown button.^m3^n0^m4^o-1^m4^p0^m4^n0^$^a^G1^X3^W60^2-55^*10^.4^,110^x^y0^z0^h5^I^2-55^*21^.4^,110^x^y0^z0^h5^I^2-19^*10^.4^,110^x^y0^z0^h5^I^2-19^*21^.4^,110^x^y0^z0^h5^I^a^G1^X4^W120^7^G1^m1^o0^m1^p3^m1^n3^m2^o0^m2^p2^m2^n4^)^7^G1^m1^o0^m1^p5^m1^n5^m2^o0^m2^p4^m2^n6^)\"^e-55^*30^.4^,110^K-1^J4\"^e-55^*1^.4^,110^K-1^J4\"^e-19^*30^.4^,110^K-1^J4\"^e-19^*1^.4^,110^K-1^J4\"^d-80^*19^~d10^*19^~d49^!0^~d-91^!00^u0.4^t1^1-65^!^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^4-65^*30^ia^#2^s-1^L1-72^!^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-72^*30^ia^#^s-1^L1-7^!^A0^B0^C140^D140^q1^r-1^F6^E-1^k0^l-1^12^!^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4-7^*30^ia^#2^s-1^L42^*30^ia^#^s-1^L1-70^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^1-60^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4-60^-370^ia^#^s-1^L4-70^-370^ia^#^s-1^L1-10^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^1^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-10^-370^ia^#^s-1^L4^-370^ia^#^s-1^L3-100^-^.15^,4^_-125^!6^.15^,8^_15^-^.15^,4^_39^!6^.15^,80^T0^1-118^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-118^-370^ia^#^s-1^L148^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^448^-370^ia^#^s-1^M0\" /><barrel x=\"-111^!40^jbar_orange^A0^B0\" /><barrel x=\"40^!40^jbar_orange^A0^B0^3-130^-80^.80^,20^_-20^-80^.80^,20^_-20^!20^.60^,20^_-130^!20^.80^,200^T0\"^d-49^-90^~d-21^-90^~d-49^!30^~d-21^!300^u0.4^t1^2-55^-59^.4^,11^(I^2-55^-70^.4^,11^(I^2-55^-99^.4^,11^(I^2-55^!10^.4^,11^(I^2-19^!10^.4^,11^(I^2-19^-99^.4^,11^(I^2-19^-70^.4^,11^(I^2-19^-59^.4^,11^(I^3-200^!30^.130^,80^_-110^!70^.190^,40^_^!60^.70^,40^_^!30^.30^,20^_30^-90^.30^,35^_50^!44^.57^,47^_90^!24^.27^,30^_100^!30^.70^,61^_140^-70^.140^,110^_55^-70^.62^,320^T0^+40^!29^.50^,150^g0^+30^!40^.10^,100^g0^+40^!44^.10^,60^g0^+^!50^.50^,100^g0^+-70^!40^.70^,300^g0^+-50^!29^.30^,110^g0\"^d10^!51^~d10^!59^~d61^!24^~e-50^-80^.30^,90^K5^J6\"^e-50^!20^.30^,90^K6^J6^1-116^!201^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-116^!170^ia^#^s-1^L7^G1^m1^o28^m1^p11^m1^n9^m2^o28^m2^p11^m2^n10^)^8^G1^m1^o28^m1^p11^m1^n12^m2^o28^m2^p11^m2^n11^)\"^e-50^-69^.3^,30^K-1^J4\"^e-23^-69^.3^,30^K-1^J4\"^e-23^!09^.3^,30^K-1^J4\"^e-50^!09^.3^,30^K-1^J4^443^-390^jitem_grenade^s-1^L4-113^-390^jitem_grenade^s-1^L2117^-96^.23^,60^x^y0^z0^h3^I\"^e117^-70^.23^,60^K-1^J4\"^e93^!01^.23^,240^K8^J6\"^e118^!13^.21^,180^K7^J6\"^d118^-80^~d139^-80^~d139^!100^u0.4^t1^7^G1^m1^o0^m1^p14^m1^n13^m2^o22^m2^p8^m2^n1^)^7^G1^m1^o0^m1^p14^m1^n16^m2^o22^m2^p7^m2^n1^)\"^e117^!24^.23^,60^K-1^J4^1123^-961^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^1135^-961^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4123^-930^ia^#^s-1^L4135^-930^ia^#^s-1^L3104^-64^.7^,9^_91^-47^.7^,11^_77^-49^.18^,6^_150^-60^.40^,14^_110^-35^.4^,5^_141^-40^.9^,5^_145^-64^.11^,100^T0^189^-491^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l9^489^-460^irl^s-1^L370^*100^.110^,119^_164^*100^.116^,1300^T0\" /><barrel x=\"113^-680^jbar_orange^A0^B0\" /><barrel x=\"84^-470^jbar_orange^A0^B0\" /><barrel x=\"112^-330^jbar_orange^A0^B0\" /><barrel x=\"143^-380^jbar_orange^A0^B0\" /><barrel x=\"90^-680^jbar_orange^A0^B0\" /><barrel x=\"95^-680^jbar_orange^A0^B0\" /><barrel x=\"148^-620^jbar_orange^A0^B0^7^G1^m1^o0^m1^p15^m1^n17^>^2170^-29^.6^,320^x^y0^z0^h2^I\"^e170^!^.6^,320^K-1^J4\"^d99^-52^~d146^-20^~d116^-20^~e180^-30^.10^,300^K10^J6^7^G1^m1^o7^m1^p1^m1^nc3a^>^3112^-50^.11^,4^_135^-43^.9^,11^_110^-45^.4^,9^_131^-50^.9^,40^T0\"^c-112^*60^.3^,120^T4\"^c-55^*20^.4^,200^T4\"^c-19^*20^.4^,200^T4\"^c-19^-20^.4^,200^T4\"^c-55^-20^.4^,200^T4\"^c119^-72^.2^,560^T4\"^c136^-72^.2^,560^T4\"^c170^-30^.6^,300^T4\"^c-48^*37^.1^,1610^T4\"^c-23^*37^.1^,1610^T4\"^e-53^-50^.36^,170^K11^J6^7^G1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c3a"] = "<q.^f-158^*99^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c392^*100^.115^,1550^T0\"^c-260^*50^.168^,58^_-260^-^.168^,80^_-260^*70^.170^,30^_-260^*10^.110^,200^T0^2-170^*41^.6^,32^(I\" /><vehicle x=\"-129^*160^r1^jveh_drone^A0^B0\" hpp=\"20\" /><inf x=\"-158^*140^Zhero1_guns^;0^3-120^-4^.180^,760^T1^1-3^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-3^-20^ia^#^s1^L1-22^-41^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^4-22^-20^ia^#2^s1^L3150^-4^.250^,760^T1^350^!1^.115^,690^T2\"^c54^-5^.102^,130^T1^+60^-6^.90^,50^g0\"^d52^*300^u1^t0\"^d157^*300^u1^t0\"^d-70^*500^u1^t0^3250^*13^.20^,4^_248^-2^.4^,4^_248^*15^.4^,8^_268^*15^.7^,8^_268^-2^.4^,40^T0\"^c250^*29^.80^,40^_248^*32^.4^,8^_250^*30^.20^,4^_268^*32^.4^,80^T0^1266^*129^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1266^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1254^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4266^*330^irailgun^s-1^L4266^*160^irl^s-1^L4254^!0^i^&^#^s-1^L1266^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4266^!0^i^&^#^s-1^L3308^-2^.4^,4^_328^-2^.4^,4^_305^*15^.7^,8^_328^*15^.4^,8^_308^*32^.4^,8^_328^*32^.4^,8^_310^*30^.20^,4^_310^*13^.20^,40^T0^1315^*129^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1315^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4315^*330^irailgun^s-1^L1314^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4314^!0^i^&^#^s-1^M0\"^d230^*400^u1^t0\"^d350^*400^u1^t0^3160^*2^.6^,9^_286^*7^.7^,13^_286^*45^.7^,20^_268^*47^.44^,4^_268^*47^.4^,6^_308^*47^.4^,60^T0\"^c270^*46^.40^,17^_282^-^.15^,6^_284^*4^.11^,70^T0^4255^*310^jitem_grenade^s-1^L4287^*480^jitem_grenade^s-1^L4325^*310^jitem_grenade^s-1^L4293^*480^jitem_grenade^s-1^L3390^-^.54^,80^_420^*4^.24^,30^_430^*8^.17^,18^_440^*12^.10^,92^_439^*30^.17^,5^_391^*27^.3^,7^_391^*40^.3^,7^_389^*105^.19^,69^_404^*27^.3^,7^_404^*40^.3^,7^_390^*24^.23^,7^_445^*50^.5^,11^_404^*120^.86^,760^T0^1396^*239^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4396^*270^irailgun^s-1^L1443^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4443^*330^irailgun^s-1^L1411^*239^A0^B0^C300^D300^q2^r1^F7^E-1^k0^l-1^4411^*270^irailgun^s-1^L1409^!^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4409^*30^i^&^#^s-1^L1415^!^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^1426^*39^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^1436^*79^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4415^*30^i^&^#^s-1^L4436^*110^i^&^#^s-1^L2392^*18^.6^,19^(I\"^e392^-^.6^,190^K-1^J4\"^e380^*20^.23^,240^K0^J4^7^G1^m1^o0^m1^p1^m1^n0^>^3438^*32^.3^,70^T0\" /><barrel x=\"273^*170^jbar_orange^A0^B0\" /><barrel x=\"307^*170^jbar_orange^A0^B0\" /><barrel x=\"302^-20^jbar_orange^A0^B0\" /><barrel x=\"299^-20^jbar_orange^A0^B0\" /><barrel x=\"304^*490^jbar_orange^A0^B0\" /><barrel x=\"307^*490^jbar_orange^A0^B0\" /><barrel x=\"326^*150^jbar_orange^A0^B0^1452^*299^A0^B0^C150^D150^q2^r1^F8^E-1^k0^l-1\"^e490^*12^.10^,40^K2^J5^2450^*12^.10^,40^x^y0^z0^h3^I^3500^*100^.46^,180^_446^-50^.59^,300^T0\"^e490^*90^.10^,40^K-1^J4^7^G1^m1^o0^m1^p2^m1^n2^>\"^e451^*22^.8^,100^K1^J1^7^G1^m1^o0^m1^p2^m1^n3^>^1490^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4490^-0^i^&^#^s-1^L3487^-3^.15^,50^T0^1498^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4498^-0^i^&^#^s-1^L3455^*32^.3^,7^_487^*46^.3^,210^T0\"^e490^*70^.10^,200^K3^J6^7^G1^m1^o7^m1^p1^m1^nc4a^>\" /><barrel x=\"403^*260^jbar_orange^A0^B0\" /><barrel x=\"429^*60^jbar_orange^A0^B0\" /><barrel x=\"446^*320^jbar_orange^A0^B0\" /><barrel x=\"448^*320^jbar_orange^A0^B0^3448^-3^.12^,50^T0^1453^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^+450^!1^.50^,390^g10^4315^*160^irl^s-1^L4453^-0^irl^s-1^L4426^*70^irl^s-1^L4452^*330^irl^s-1^M0\"^d294^*28^~d285^*28^~d425^*43^~d471^*43^~d499^!0^~d451^!00^u0.4^t1^1-129^*119^A0^B0^C100^D100^q1^r1^F5^E-2^k0^l-1^4-129^*150^ivehminigl^s-1^M0\" /><vehicle x=\"45^*180^r-1^jveh_walker^A0^B0\" hpp=\"50^145^*149^A0^B0^C150^D150^q2^r-1^F8^E-2^k0^l-1^445^*170^ivehcannon^s-1^M1^5404^*190^.80^,700^A-3^B0^Y100^g0^3-260^*80^.160^,190^T0^5-200^*162^.100^,820^A3^B0^Y100^g0^445^*190^i^/2^s-1^L338^-8^.23^,180^T2^3149^-8^.23^,180^T2^1223^*149^A0^B0^C150^D150^q2^r-1^F8^E-2^k0^l-1\" /><vehicle x=\"223^*180^r-1^jveh_walker^A0^B0\" hpp=\"50^4223^*170^ivehcannon^s-1^M1^4223^*190^i^/2^s-1^L1-58^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^1-47^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-47^-20^ia^#^s1^L4-58^-20^ia^#^s1^M0\"^e-120^*15^.130^,240^K4^J6^7^G1^m1^o29^m1^p22^m1^n6^>^4103^!00^jitem_grenade^s-1^L491^!00^jitem_grenade^s-1^L3-94^*44^.4^,8^_-94^*4^.4^,110^T0\"^c392^*17^.6^,170^T4\"^c451^*10^.48^,10^T4\"^c498^*100^.1^,900^T4\"^c491^*100^.1^,900^T4^6494^-30^jantigravity0^U-1^O0^P0\"^e451^*6^.8^,100^K5^J1^7^G1^m1^o34^m1^p0^m1^nantigravity^m2^o36^m2^p2^m2^n-1^)^5490^*100^.10^,1040^A0^B0^Y0^g0^2489^-2^.10^,2^(H\"^e270^*42^.40^,150^K6^J6^7^G-1^m1^o43^m1^pYou can throw grenades by pressing G or Ins0 key^m1^n0^>\"^e352^*56^.18^,670^K7^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^e426^*45^.17^,390^K8^J6^7^G-1^m1^o43^m1^pI\'m warning you, that stuff isn\'t water...^m1^n0^>\"^e489^*45^.13^,250^K9^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c4a"] = "<q.^f5^-501^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-175^*65^.295^,155^_10^-30^.110^,600^T0^2^-50^.10^,40^x^y0^z0^h3^I\"^e^-30^.10^,40^K-1^J4^9^G1^X0^W0^7^G1^m1^o0^m1^p0^m1^n0^>^310^*27^.110^,37^_22^-24^.4^,11^_22^-7^.4^,7^_44^-^.76^,40^_-30^*24^.50^,24^_-50^-^.30^,5^_-33^-27^.6^,13^_-120^-37^.106^,53^_-72^-31^.20^,9^_-120^-27^.30^,33^_-230^*30^.80^,120^_-111^-^.19^,5^_-120^*24^.19^,31^_-120^*24^.30^,7^_-101^*28^.21^,11^_-60^*28^.33^,11^_-30^*30^.20^,10^_-30^*58^.20^,10^_-50^*80^.64^,26^_10^*80^.110^,29^_-184^*54^.21^,33^_-184^*80^.34^,33^_-120^*80^.30^,330^T0^131^-301^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-36^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-41^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-46^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-77^-351^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-143^*49^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-143^*80^irl^s-1^L431^-270^irailgun^s-1^M0\" /><barrel x=\"40^-280^jbar_orange^A0^B0\" /><barrel x=\"37^-280^jbar_orange^A0^B0\" /><inf x=\"5^-470^Zhero1_guns^;0^1-85^!41^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-92^!^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-92^*30^irl^s-1^L1-46^!^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-37^!^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-46^*30^irailgun^s-1^L4-37^*30^irl^s-1^L3-110^-20^.8^,12^_-30^*20^.10^,27^_-82^*2^.7^,5^_-65^*2^.7^,5^_-93^!4^.29^,40^T0^1-78^*19^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-98^-271^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-98^-240^irl^s-1^L3-8^-27^.6^,6^_-160^*70^.18^,10^_-128^*70^.18^,100^T0^4-159^*310^jitem_grenade^s-1^L4-113^*250^jitem_grenade^s-1^L4-160^*810^jitem_grenade^s-1^L2-149^*5^.28^,40^x^y0^z0^h3^I^3-230^*110^.60^,940^T0^4-161^*810^jitem_grenade^s-1^M0\"^e-147^!4^.24^,150^K2^J6\"^e-149^-28^.28^,40^K-1^J4^3-100^*100^.10^,300^T0^5-230^*140^.60^,300^A2^B0^Y100^g0^5-50^*140^.30^,600^A-2^B0^Y100^g0^5-229^*196^.209^,560^A0^B2^Y100^g0^1-85^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-159^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-113^*239^A0^B0^C150^D150^q1^r-1^F8^E-1^k0^l-1^1-49^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-36^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1\"^e-149^*23^.28^,40^K3^J5^3-160^-60^.50^,300^T0^+-150^-35^.30^,250^g10\"^e-119^-6^.17^,220^K1^J6^7^G-1^m1^o0^m1^p1^m1^n2^m2^o19^m2^p1^m2^n0^m3^o20^m3^p2^m3^n0^m4^o-1^m4^p0^m4^n0^$^8^G-1^m1^o0^m1^p1^m1^n3^m2^o19^m2^p2^m2^n0^m3^o20^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$^4-85^!10^i^&^#^s-1^L4-78^*50^i^&^#^s-1^L4-85^*310^i^&^#^s-1^L4-49^*310^i^&^#^s-1^L4-36^*310^i^&^#^s-1^L239^*52^.10^,26^(I^2-81^*23^.22^,40^x^y0^z0^h10^I\"^e-59^*23^.22^,40^K-1^J4^7^G1^m1^o0^m1^p3^m1^n5^>^433^-290^jitem_grenade^s-1^L3-30^-30^.30^,600^T0\"^d-136^*800^u1^t0\"^d-80^*800^u0.5^t0\"^d-60^*800^u0.5^t0\"^d-4^!^~d-100^*10^~d-31^*10^~d-47^-6^~d-78^-4^~d^*530^u0.4^t1^4-77^-320^irailgun^s-1^L14^*239^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^44^*290^irl^s-1^L7^G1^m1^o7^m1^p1^m1^nc5a^>\"^e30^*53^.9^,270^K4^J6\"^c1^-31^.1^,590^T4\"^c8^-31^.1^,590^T4\"^c-80^*23^.20^,40^T4\"^c-148^*22^.2^,530^T4\"^c-124^*22^.2^,530^T4\" />";
         this.CACHED_MAPS["c5a"] = "<q.^f-197^*699^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c71^*94^.129^,280^T0\"^c100^*38^.14^,220^T0\"^c-30^*98^.55^,430^T0\"^c-5^*55^.30^,560^T0\"^c-300^*100^.270^,104^_-270^*70^.90^,20^_-280^*110^.210^,160^T0^2-214^*95^.11^,26^(I^3-80^*110^.52^,30^_-70^*60^.40^,20^_-140^*30^.40^,50^_-110^*20^.80^,40^_-170^*30^.10^,50^_-200^*30^.10^,50^_-230^*30^.10^,50^_-170^*70^.18^,7^_-137^*66^.37^,19^_-160^*52^.26^,50^T0\" /><inf x=\"-197^*730^Zhero1_guns^;0^3-120^*69^.12^,19^_-73^*60^.6^,4^_-270^*30^.20^,50^_-280^*70^.20^,90^_-270^*10^.140^,30^_-156^*79^.11^,13^_-73^*30^.6^,200^T0^2-160^*12^.20^,32^(I^2-190^*12^.20^,32^(I^2-220^*12^.20^,32^(I^2-250^*12^.20^,32^(I^2-250^*29^.10^,40^x^y0^z0^h5^I^2-240^*29^.10^,40^x^y0^z0^h5^I^2-220^*29^.10^,40^x^y0^z0^h5^I^2-210^*29^.10^,40^x^y0^z0^h5^I^2-190^*29^.10^,40^x^y0^z0^h5^I^2-180^*29^.10^,40^x^y0^z0^h5^I^2-160^*29^.10^,40^x^y0^z0^h5^I^2-150^*29^.10^,40^x^y0^z0^h5^I\"^e-140^*29^.10^,40^K-1^J4\"^e-170^*29^.10^,40^K-1^J4\"^e-200^*29^.10^,40^K-1^J4\"^e-230^*29^.10^,40^K-1^J4\"^e-260^*29^.10^,40^K-1^J4\"^e-160^*27^.20^,40^K-1^J4\"^e-190^*27^.20^,40^K-1^J4\"^e-220^*27^.20^,40^K-1^J4\"^e-250^*27^.20^,40^K-1^J4\"^e-170^*40^.10^,110^K3^J1\"^e-200^*40^.10^,110^K2^J1\"^e-230^*40^.10^,110^K1^J1\"^e-260^*40^.10^,110^K0^J1^7^G1^m1^o0^m1^p5^m1^n4^m2^o0^m2^p6^m2^n3^m3^o0^m3^p4^m3^n8^m4^o-1^m4^p9^m4^n1^m5^o-1^m5^p9^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o0^m1^p7^m1^n3^m2^o0^m2^p8^m2^n2^m3^o0^m3^p3^m3^n7^m4^o-1^m4^p0^m4^n0^$^7^G1^m1^o0^m1^p9^m1^n2^m2^o0^m2^p10^m2^n1^m3^o0^m3^p2^m3^n6^m4^o32^m4^p4^m4^n1^m5^o32^m5^p2^m5^n1^m6^o33^m6^p4^m6^n0^m7^o33^m7^p2^m7^n0^m8^o43^m8^pThese prisoners are your allies now.^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o0^m1^p11^m1^n1^m2^o0^m2^p12^m2^n0^m3^o0^m3^p1^m3^n5^m4^o-1^m4^p0^m4^n0^$^1-210^*119^A0^B0^C100^D100^q2^r1^F2^E-1^k2^l-1^1-178^*119^A0^B0^C300^D300^q3^r1^F8^E-1^k2^l-1^1-150^*119^A0^B0^C100^D100^q2^r1^F2^E-1^k2^l-1^1-182^*119^A0^B0^C300^D300^q3^r1^F8^E-1^k2^l-1^4-180^*300^i^/2^s-1^L4-180^*310^i^/2^s-1^L3-187^*55^.13^,50^T0^5-96^*59^.22^,390^A0^B-0.8^Y0^g0^5-74^*58^.4^,290^A-1^B0^Y0^g0^1-108^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-121^*299^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-122^*659^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-111^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-122^*690^irailgun^s-1^L1-242^*119^A0^B0^C140^D140^q2^r1^F6^E-1^k2^l-1^4-240^*300^i^/2^s-1^L4-121^*330^i^&^#^s-1^L4-108^*330^i^&^#^s-1^L1-143^*719^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-143^*740^i^&^#^s-1^L1-103^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-103^*330^i^&^#^s-1^L1-60^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-60^*630^irl^s-1^L1-50^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-50^*630^irailgun^s-1^L1-233^*289^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-233^*320^i^&^#^s-1^L3-143^*57^.13^,10^_-150^*72^.9^,4^_-103^*60^.6^,40^T0^5-100^*58^.4^,110^A1^B0^Y0^g0^3-136^*99^.63^,13^_-84^*91^.8^,80^T0^2-40^*81^.5^,220^x^y0^z0^h6^I\"^e-50^*81^.10^,220^K4^J6^7^G1^m1^o0^m1^p13^m1^n14^m2^o43^m2^p0^m2^n0^)\"^e-40^*101^.5^,220^K-1^J4^3-40^*60^.40^,10^_20^*70^.6^,36^_20^*8^.6^,6^_-6^*53^.6^,19^_-6^*24^.6^,6^_-6^*8^.6^,6^_-38^*3^.188^,230^T1^1-14^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-14^*630^igl^s1^L1-2^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-2^*710^irailgun^s-1^L485^*710^irl^s-1^L322^*70^.18^,90^T0^660^*30^jship^U-1^O0^P0^5^*70^.20^,670^A0^B-0.45^Y0^g0^246^*10^.11^,7^(H^264^*7^.10^,4^(H^259^*6^.7^,3^(H^254^*8^.8^,5^(H^465^*80^iraygun^s0^L461^*90^irl^s0^L449^*110^jitem_grenade^s0^L457^*100^jitem_grenade^s0^L3-70^*58^.20^,48^_-33^*24^.3^,11^_-33^*45^.3^,150^T0\"^d-160^*93^~d-110^*85^~d-60^*79^~d12^*910^u1^t0\"^d-71^*40^~d-225^*49^~d-194^*49^~d-135^*46^~d-165^*620^u0.4^t1^1-36^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-45^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-36^*220^irailgun^s-1^L4-45^*220^irl^s-1^L133^*29^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^441^*50^i^&^#^s-1^L141^*29^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^433^*50^i^&^#^s-1^L4-111^*720^irailgun^s-1^L4-143^*750^i^/2^s-1^M0\"^d31^*170^u0.4^t0^170^*69^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^470^*90^i^&^#^s-1^M0\" /><barrel x=\"-49^*220^jbar_orange^A0^B0^3100^*20^.50^,30^_100^*70^.100^,36^_100^*24^.3^,11^_100^*45^.3^,150^T0^1106^*199^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^370^*70^.36^,9^_110^*50^.90^,70^_-35^*99^.35^,90^T0\"^d-17^*310^u0.4^t0^3100^*110^.100^,20^_70^*99^.36^,90^T0^2120^*93^.5^,26^(I^320^*99^.20^,9^_-10^*70^.10^,140^T0\"^c25^*98^.14^,320^T0^470^*80^irailgun^s-1^L441^*40^irailgun^s-1^L433^*40^irailgun^s-1^L5-70^*176^.42^,660^A3^B0^Y100^g0^5100^*170^.42^,600^A-3^B0^Y100^g0^185^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-237^*289^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-237^*320^i^&^#^s-1^M0\"^e110^*92^.10^,250^K5^J6^7^G1^m1^o7^m1^p1^m1^nc6a^>^4106^*210^igl^s1^L4-36^*210^igl^s1^L453^*110^jitem_grenade^s0^L6-90^*200^jantigravity^U-1^O0^P0^6-80^*200^jantigravity^U-1^O0^P0^66^*30^jantigravity^U-1^O0^P0^614^*30^jantigravity^U-1^O0^P0\" /><inf x=\"-188^*750^Zshadowmap_size^;35\"^d56^*850^u1^t0^2-330^!0^.530^,40^(I^2-330^*110^.60^,160^(I\"^c-40^*80^.5^,200^T4\"^c-250^*28^.110^,20^T4\" />";
         this.CACHED_MAPS["c6a"] = "<q.^f-83^*299^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-60^*9^.120^,240^T0\"^c-60^*130^.160^,1210^T0\"^c140^*10^.40^,500^T0\"^e-130^*114^.60^,240^K-1^J4^3-150^*30^.100^,70^_-150^*90^.100^,400^T0^2-90^*51^.5^,22^(I\" /><inf x=\"-83^*340^Zhero1_guns^;0^3-60^*80^.39^,16^_-20^*18^.23^,6^_-26^*20^.16^,8^_-20^*55^.10^,15^_40^*20^.100^,60^_-20^-^.68^,40^_35^*10^.20^,20^_-60^*9^.30^,190^T0^2-51^*53^.32^,20^x^y0^z0^h5^I\"^e-82^*53^.32^,20^K-1^J4^7^G1^m1^o0^m1^p1^m1^n1^>^143^*199^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1-47^*529^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^1-7^!^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^1-28^*529^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1\"^e-70^*51^.10^,220^K0^J6^4-28^*550^irailgun^s-1^L443^*210^irailgun^s-1^L4-7^*10^irailgun^s-1^L4-47^*550^irailgun^s-1^L390^*57^.50^,180^T0^1-13^*199^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-13^*210^i^&^#^s-1^L1-20^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-20^*210^irl^s-1^L319^*42^.5^,21^_-19^*44^.15^,4^_14^*44^.11^,4^_21^*83^.99^,5^_-55^*30^.20^,4^_-32^*15^.12^,30^T0^1-7^*439^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^117^*439^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-7^*450^irailgun^s-1^L417^*450^irailgun^s-1^L3-7^*42^.24^,1^_-43^*54^.9^,4^_19^*18^.5^,5^_-61^-3^.47^,37^_^*16^.5^,60^T0^1-19^!^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^4-19^*10^irailgun^s-1^L3113^*61^.7^,7^_-14^*58^.2^,2^_-14^*64^.2^,2^_-14^*61^.2^,2^_23^*47^.2^,2^_23^*50^.2^,2^_20^*53^.5^,2^_-23^*67^.11^,20^T0\" /><vehicle x=\"56^*780^r1^jveh_rope^A0^B0\" hpp=\"100^323^*77^.2^,2^_23^*74^.2^,2^_23^*71^.2^,2^_-13^*80^.2^,2^_-13^*83^.2^,2^_-13^*86^.2^,2^_-13^*89^.2^,2^_-30^*94^.19^,40^T0\" /><vehicle x=\"-48^*820^r1^jveh_crate^A0^B0\" hpp=\"100^3^*110^.18^,5^_40^*110^.18^,5^_20^*94^.10^,16^_70^*94^.7^,13^_-60^*137^.50^,17^_70^*137^.121^,17^_75^*87^.6^,6^_75^*89^.4^,4^_79^*85^.4^,4^_-58^*110^.18^,40^T0^1-38^*799^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-38^*810^irl^s-1^L1-43^*1099^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-43^*1110^irl^s-1^L113^*1099^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^413^*1110^irl^s-1^L187^*829^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^487^*850^irl^s-1^L3113^*83^.7^,9^_110^*125^.81^,440^T0\"^e100^*100^.10^,180^K1^J1^7^G1^m1^o0^m1^p2^m1^n4^>^2114^*75^.5^,15^(I\"^e114^*89^.5^,150^K-1^J4^377^*34^.3^,4^_77^*58^.3^,40^T0^580^*58^.10^,380^A0^B-0.45^Y0^g0^377^*50^.3^,4^_77^*42^.3^,4^_-150^*137^.100^,23^_-70^*118^.20^,12^_-150^*123^.20^,40^_-120^*93^.10^,70^T0^4-115^*940^iplasmagun^s0^L3-100^*97^.6^,130^T0^2-69^*123^.4^,18^(I\"^e-69^*108^.4^,180^K3^J5\"^e-120^*108^.10^,150^K2^J6^7^G1^m1^o0^m1^p3^m1^n5^>^2-130^*90^.60^,24^(I^7^G1^m1^o0^m1^p4^m1^n0^>^5-60^*180^.50^,430^A3^B0^Y100^g0^570^*180^.50^,430^A-3^B0^Y100^g0^5-60^*220^.180^,400^A0^B3^Y100^g0^193^*829^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^493^*850^irl^s-1^L3-120^*117^.10^,70^T0\"^d26^*420^u0.6^t1^3170^*137^.80^,1770^T0\"^d10^*1400^u0.5^t0\"^d30^*1400^u0.5^t0\"^d50^*1400^u0.5^t0\"^d-72^*49^~d-13^*39^~d-5^*11^~d-22^*11^~d130^*80^~d97^*770^u0.6^t1\"^d-9^*500^u0.6^t1\"^d19^*85^~d-118^*109^~d-112^*109^~d-55^*105^~c-136^*120^.76^,400^T0\"^c100^*130^.20^,1200^T0\"^c120^*90^.60^,800^T0\"^c-150^*60^.90^,400^T0^2-203^*137^.53^,87^(I\" /><barrel x=\"-27^*170^jbar_orange^A0^B0\" /><barrel x=\"7^*20^jbar_orange^A0^B0\" /><barrel x=\"11^*20^jbar_orange^A0^B0\" /><barrel x=\"1^*200^jbar_orange^A0^B0\" /><barrel x=\"-14^*960^jbar_orange^A0^B0\" /><barrel x=\"-18^*960^jbar_orange^A0^B0\" /><barrel x=\"108^*850^jbar_orange^A0^B0\" /><barrel x=\"105^*850^jbar_orange^A0^B0\" /><barrel x=\"-48^*110^jbar_orange^A0^B0\" /><barrel x=\"61^*220^jbar_orange^A0^B0^3130^*57^.20^,97^_90^*34^.3^,4^_90^*42^.3^,40^T0\" /><barrel x=\"105^*220^jbar_orange^A0^B0\" /><barrel x=\"102^*220^jbar_orange^A0^B0^3115^*24^.5^,70^T0^1124^*199^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^4124^*210^irailgun^s-1^L685^*200^jantigravity^U-1^O0^P0^1129^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1133^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1137^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1\"^e149^*30^.22^,270^K4^J6^7^G1^m1^o7^m1^p1^m1^nc7a^>\"^c-50^*53^.30^,20^T4\"^c-69^*106^.4^,160^T4\"^c-129^*113^.2^,240^T4\"^c-73^*113^.2^,240^T4\"^c-91^*113^.2^,240^T4\"^c-107^*113^.2^,240^T4\"^c114^*74^.5^,130^T4^3-10^*89^.29^,20^T0\"^e49^*78^.14^,280^K5^J6^7^G-1^m1^o43^m1^pHold LEFT and RIGHT button to swinging. Press E or X to release rope.^m1^n0^>\"^e21^*80^.10^,420^K6^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^e85^*80^.10^,640^K6^J6\"^e28^*44^.61^,100^K6^J6\" />";
         this.CACHED_MAPS["c7a"] = "<q.^f-64^*1109^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-100^*190^.250^,220^_-150^*60^.120^,120^_-40^*200^.20^,90^_7^*74^.28^,4^_105^*60^.65^,100^_86^*120^.20^,20^_114^*81^.56^,31^_-50^*200^.15^,95^_-85^*87^.31^,70^T0^5-70^*160^.20^,400^A0^B0^Y100^g0\" /><inf x=\"-64^*1150^Zhero1_guns^;0^320^*160^.30^,40^_-101^*200^.321^,20^_100^*150^.50^,10^_130^*194^.90^,34^_-40^*87^.20^,7^_-30^*90^.20^,6^_-60^*66^.20^,12^_-46^*63^.10^,11^_-40^-20^.210^,40^_90^*170^.20^,30^_-150^*160^.80^,80^_-40^*51^.20^,51^_90^*51^.20^,550^T0^+-30^!^.135^,190^g0^3-24^*40^.74^,8^_60^*40^.18^,8^_32^*14^.26^,4^_30^*22^.4^,12^_^-^.30^,4^_58^-^.35^,4^_56^*14^.4^,7^_^*15^.4^,25^_^*39^.4^,9^_26^!4^.4^,8^_56^-^.4^,80^T0^6-13^*400^jantigravity^U-1^O0^P0^61^*400^jantigravity^U-1^O0^P0^615^*400^jantigravity^U-1^O0^P0^629^*400^jantigravity^U-1^O0^P0^643^*400^jantigravity^U-1^O0^P0^669^*400^jantigravity^U-1^O0^P0^683^-0^jantigravity^U-1^O0^P0^669^-0^jantigravity^U-1^O0^P0^623^-0^jantigravity^U-1^O0^P0^3-12^*4^.13^,40^T0^6-6^*40^jantigravity^U-1^O0^P0^637^-200^jantigravity^U-1^O0^P0^5-20^*52^.69^,120^A0^B-1^Y0^g0^315^*90^.9^,20^_46^*90^.9^,20^_20^*100^.30^,14^_44^*74^.5^,40^T0^561^*52^.17^,120^A0^B-1^Y0^g0^560^*24^.18^,240^A0^B-1^Y0^g0^516^*24^.14^,240^A0^B-1^Y0^g0^5-11^*24^.11^,200^A0^B-1^Y0^g0^530^*2^.14^,220^A0^B-1^Y0^g0^3-29^*117^.19^,50^T0^427^*750^iplasmagun^s0^L3130^*130^.40^,60^_139^*150^.81^,1300^T0^6123^*810^jantigravity^U-1^O0^P0^5114^*140^.16^,590^A0^B-0.45^Y0^g0^3110^*76^.14^,21^_45^*126^.21^,60^T0^262^*144^.3^,18^(I^656^*1260^jantigravity^U-1^O0^P0^361^*141^.5^,40^T0\"^e62^*154^.3^,180^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>\"^e63^-6^.17^,130^K0^J1^3-30^*170^.55^,200^T0^550^*163^.11^,370^A0^B-0.45^Y0^g0^1-34^*869^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^4-23^*930^ia^#2^s-1^L1-23^*899^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^3-150^*90^.60^,700^T0^1-68^*599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^110^*739^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^1-26^*509^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^1-13^*1169^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^310^*125^.19^,50^T0^130^*999^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^322^*108^.6^,100^T0^129^*1599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^135^*1599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^3-60^*90^.4^,40^T0\"^d-48^*76^~d1^*135^~d37^*112^~d20^*60^~d55^*15^~d-19^*25^~d45^*9^~d18^-5^~d83^-5^~d-16^!90^u0.4^t1^361^*160^.35^,170^T0\"^d18^*176^~d65^*1700^u0.4^t1^4-34^*900^ia^#2^s-1^L4-68^*630^ia^#2^s-1^L4-26^*540^ia^#2^s-1^L410^*770^ia^#2^s-1^L4-13^*1190^ia^#2^s-1^L429^*1620^ia^#2^s-1^L435^*1620^ia^#2^s-1^L431^*1020^ia^#2^s-1^L372^*76^.20^,6^_50^*86^.12^,6^_72^*106^.20^,12^_67^*100^.20^,60^T0^183^*1059^A0^B0^C400^D400^q1^r-1^F9^E-1^k0^l-1^1137^*1299^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^4137^*1320^ia^#2^s-1^L377^*110^.4^,7^_-15^*74^.15^,4^_12^*82^.8^,120^T0^1-6^*739^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^4-6^*770^ia^#2^s-1^M0\"^d104^*870^u0.4^t1^177^*759^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^185^*759^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^1100^*1199^A0^B0^C400^D400^q1^r-1^F9^E-1^k0^l-1^578^*40^.12^,400^A0^B-1^Y0^g0\"^c150^*170^.70^,300^T0^113^*1699^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^413^*1710^ia^#2^s-1^L4-6^*760^irl^s-1^L4-17^*1710^jitem_grenade^s-1^L4-12^*1710^jitem_grenade^s-1^L417^*1260^jitem_grenade^s-1^L415^*1260^jitem_grenade^s-1^L432^*750^jitem_grenade^s-1^M0\"^e140^*167^.76^,230^K1^J6^7^G1^m1^o7^m1^p1^m1^nc8a^>^483^*1110^irailgun2^s1^M2^4100^*1250^irailgun2^s1^M2^477^*810^irailgun2^s1^M2^485^*810^irailgun2^s1^M2^1130^*1499^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^4130^*1520^irl^s-1^M0\" />";
         this.CACHED_MAPS["c8a"] = "<q.^f53^*139^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c41^*100^.34^,300^T0\"^c41^*70^.16^,3100^T0\"^c63^*70^.147^,3100^T0^7^G1^m1^o0^m1^p#door_left^m1^n#door_left_open^>\"^e53^*16^.14^,110^K1^J1^250^*6^.20^,50^x^y0^z0^h8^I\"^e50^-225^.20^,50^K-1^J4^7^G1^m1^o0^m1^p0^m1^n1^>^3-30^-230^.310^,40^_75^-201^.81^,5^_150^!80^.13^,30^_120^!20^.37^,7^_75^!03^.23^,13^_96^!50^.37^,4^_120^!45^.17^,5^_123^!03^.36^,7^_193^*40^.87^,2900^T0^8^G-1^m1^o0^m1^p2^m1^n4^m2^o19^m2^p2^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$^3115^-70^.80^,100^T0\"^e137^!45^.13^,90^K8^J5^373^-50^.27^,5^_114^-50^.46^,5^_164^-65^.15^,7^_173^-60^.22^,12^_78^-40^.13^,14^_122^-26^.15^,8^_127^-21^.12^,9^_132^!6^.9^,23^_77^!1^.31^,10^_137^!1^.58^,10^_78^*14^.51^,8^_-30^*100^.80^,350^_70^-225^.93^,250^T0\"^d60^-2120^u0.3^t1^370^!00^.10^,110^_70^-64^.10^,320^T0\" /><inf x=\"53^*170^Zhero1_guns^;0^2101^!05^.19^,50^x^y0^z0^h5^I^376^!45^.25^,9^_134^!87^.19^,17^_128^!71^.9^,330^T0^+80^!80^.48^,210^g0^+90^!76^.38^,40^g0^374^!71^.16^,90^T0^484^!700^jitem_grenade^s-1^L487^!700^jitem_grenade^s-1^M0\"^e78^!51^.13^,250^K7^J1\"^e163^!80^.30^,70^K-1^J4\"^e163^-225^.30^,50^K-1^J4\"^e120^-212^.42^,140^K3^J6\"^e164^-211^.12^,200^K2^J6^7^G-1^m1^o0^m1^p2^m1^n5^m2^o19^m2^p3^m2^n0^m3^o20^m3^p2^m3^n0^m4^o-1^m4^p0^m4^n0^$^2163^-205^.30^,50^x^y0^z0^h6^I\"^e139^!08^.10^,140^K4^J1^7^G1^m1^o0^m1^p1^m1^n9^>\"^e101^!45^.19^,50^K-1^J4\"^e176^!67^.15^,140^K5^J1^7^G-1^m1^o0^m1^p2^m1^n5^m2^o19^m2^p2^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e137^!78^.13^,90^K6^J5^7^G-1^m1^o0^m1^p3^m1^n2^>^7^G1^m1^o0^m1^p3^m1^n11^>\"^e128^!32^.9^,130^K7^J1^2137^!45^.13^,90^x^y0^z0^h3^I^377^-221^.22^,6^_148^*12^.18^,6^_76^!30^.22^,60^T0^1187^-2051^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^370^-7^.10^,530^T0\"^c57^*70^.6^,510^T0\"^c57^*17^.6^,440^T0\"^c57^-29^.6^,440^T0\"^c57^-75^.6^,440^T0\"^c57^!21^.6^,440^T0\"^c57^!67^.6^,440^T0\"^c57^-213^.6^,270^T0\"^d60^*180^u0.3^t1\"^d60^-280^u0.3^t1\"^d60^-740^u0.3^t1\"^d60^!200^u0.3^t1\"^d60^!660^u0.3^t1^370^*100^.10^,1030^T0\"^d110^-207^~d153^-2110^u0.4^t1^4187^-2030^irailgun2^s2^M2\" /><barrel x=\"106^-2230^jbar_orange^A0^B0\" /><barrel x=\"109^-2230^jbar_orange^A0^B0^3105^-7^.3^,5^_101^*100^.179^,66^_75^*100^.20^,660^T0^595^*100^.6^,860^A0^B-1.5^Y100^g0^5101^*30^.4^,160^A-0.5^B-1^Y100^g0^591^*30^.4^,160^A0.5^B-1^Y100^g0\"^d120^*290^u0.4^t1^698^*140^jantigravity^U-1^O0^P0^377^*40^.14^,10^_105^*40^.93^,100^T0^2101^*40^.5^,7^(I^2102^*36^.5^,4^(I^2103^*35^.5^,4^(I^290^*40^.5^,7^(I^289^*36^.5^,4^(I^288^*35^.5^,4^(I^2104^*34^.2^,4^(I^290^*34^.2^,4^(I^3180^*5^.18^,22^_88^-216^.16^,11^_120^!45^.13^,90^T0\" /><inf x=\"56^*1030^Zsky^;3\"^d86^!23^~d134^!510^u0.4^t1^7^G-1^m1^o22^m1^p7^m1^n1^>^3117^-31^.20^,8^_146^-35^.10^,4^_154^-32^.3^,7^_172^-3^.12^,13^_185^*20^.12^,4^_105^*7^.3^,50^T0\"^d110^*50^u0.4^t1^3154^!7^.3^,70^T0\"^d159^-22^~d104^-220^u0.4^t1^3185^-40^.10^,230^T0^1152^-351^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^4152^-340^iplasmagun^s2^L1130^-501^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1169^-651^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^197^-501^A0^B0^C300^D300^q2^r1^F7^E-1^k0^l-1^4130^-480^iplasmagun^s2^L497^-480^iplasmagun^s2^L4169^-640^iplasmagun^s2^L1189^-401^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4189^-380^irailgun^s-1^L1182^-601^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4182^-590^irailgun^s-1^L4182^-580^irl^s-1^L4189^-370^irl^s-1^L3114^-36^.8^,40^T0^1102^!11^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^489^-90^irl^s-1^L489^!00^irailgun^s-1^L189^!11^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^4102^!00^irailgun^s-1^L4102^-90^irl^s-1^L1155^!11^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1149^*119^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4155^!00^iplasmagun^s2^L4149^*130^iplasmagun^s2^L1184^*49^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1187^*199^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4184^*60^iplasmagun^s2^L4187^*210^iplasmagun^s2^M0\" /><barrel x=\"125^-240^jbar_orange^A0^B0\" /><barrel x=\"130^!90^jbar_orange^A0^B0\" /><barrel x=\"135^!40^jbar_orange^A0^B0\" /><barrel x=\"93^-480^jbar_orange^A0^B0\" /><barrel x=\"119^-680^jbar_orange^A0^B0\" /><barrel x=\"145^-680^jbar_orange^A0^B0\" /><barrel x=\"148^-680^jbar_orange^A0^B0\" /><barrel x=\"156^-480^jbar_orange^A0^B0\" /><barrel x=\"162^-680^jbar_orange^A0^B0\" /><barrel x=\"156^-300^jbar_orange^A0^B0\" /><barrel x=\"89^-380^jbar_orange^A0^B0^197^!451^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^191^!451^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^191^!301^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^197^!301^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^1124^!201^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1133^!201^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1143^!451^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1127^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^497^!430^i^/2^s-1^L497^!280^i^/2^s-1^L4124^!190^i^/2^s-1^L4133^!190^i^&^#^s-1^L491^!290^i^&^#^s-1^L491^!430^i^&^#^s-1^L4143^!430^i^&^#^s-1^L396^!05^.4^,11^_121^!05^.4^,50^T0\" /><vehicle x=\"67^*90^r1^jveh_crate^A0^B0\" hpp=\"100^468^*80^jitem_grenade^s-1^L467^*100^jitem_grenade^s-1^M0\" /><inf x=\"63^*1030^Zshadowmap_size^;35^3107^!67^.5^,7^_150^!03^.13^,63^_160^!03^.40^,57^_73^-76^.57^,140^T0^572^-96^.6^,40^A-1^B0^Y100^g0^194^!031^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^494^!000^iplasmagun^s2^L4127^!000^iplasmagun^s2^M0\" /><barrel x=\"101^-740^jbar_orange^A0^B0\" /><barrel x=\"104^-740^jbar_orange^A0^B0^3170^-76^.10^,8^_170^!01^.10^,80^T0^6175^!000^jteleport^U-1^O0^P0^6175^-850^jteleport2^U-1^O0^P0\"^d175^-85^~d175^!000^u0.4^t1^383^-74^.10^,8^_83^-51^.10^,80^T0^688^-600^jteleport2^U-1^O0^P0^688^-730^jteleport^U-1^O0^P0\"^d88^-73^~d88^-60^~e84^-60^.8^,130^K-1^J4\"^e171^-83^.8^,190^K9^J2^7^G-1^m1^o30^m1^p14^m1^n13^>^377^!7^.14^,130^T0^1151^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1168^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^4151^!000^iplasmagun^s2^L4168^!000^iplasmagun^s2^L4124^!170^iplasmagun^s2^L4133^!170^irailgun2^s2^M2^4149^*150^irl^s-1^L4187^*230^irl^s-1^L4184^*80^irl^s-1^L4155^-80^irl^s-1^M0\" /><barrel x=\"170^-90^jbar_orange^A0^B0\" /><barrel x=\"82^*160^jbar_orange^A0^B0\" /><barrel x=\"85^*160^jbar_orange^A0^B0\" /><barrel x=\"88^*160^jbar_orange^A0^B0\" /><barrel x=\"107^*160^jbar_orange^A0^B0\"^d95^!55^~c82^*100^.32^,300^T0\"^e87^*105^.21^,630^K10^J6^7^G1^m1^o7^m1^p1^m1^nc9a^>^550^*100^.20^,400^A0^B0^Y100^g0^494^!020^irailgun2^s2^M2^3107^!56^.5^,70^T0\"^c52^*58^.1^,2860^T4\"^c190^!82^.1^,460^T4\"^c165^!82^.1^,460^T4\"^c143^!48^.2^,360^T4\"^c103^!07^.1^,410^T4\"^c67^*58^.1^,2860^T4\"^c117^!07^.1^,410^T4^396^!13^.5^,20^T0\" />";
         this.CACHED_MAPS["c9a"] = "<q.^f-118^-2031^A4^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-210^!80^.150^,600^T0\"^c-60^*14^.109^,2540^T0^411^-280^irailgun^s-1^L3-48^*40^.99^,40^_10^*6^.35^,11^_31^!8^.13^,22^_40^!4^.10^,46^_-30^-30^.46^,10^_-8^-21^.15^,11^_-30^-50^.74^,10^_34^-70^.11^,100^T0^240^-60^.5^,100^x^y0^z0^h3^I^326^-77^.17^,11^_17^-85^.28^,15^_10^-97^.35^,4^_2^!11^.46^,9^_40^-200^.10^,32^_-30^-70^.10^,140^_-24^!28^.11^,9^_-25^!50^.50^,7^_4^!71^.26^,6^_3^!97^.19^,10^_-24^-200^.74^,10^_-23^!79^.15^,4^_-70^*40^.26^,250^_-30^-225^.80^,55^_40^-70^.10^,710^T0\" /><inf x=\"-118^!990^Zhero1_guns^;0^340^*6^.10^,160^T0^2-44^-204^.14^,60^x^y0^z0^h7^I\"^e-44^-30^.14^,60^K-1^J4^7^G-1^m1^o0^m1^p1^m1^n0^m2^o19^m2^p0^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-43^-210^.12^,230^K0^J6^211^-72^.23^,50^x^y0^z0^h3^I^7^G1^m1^o0^m1^p2^m1^n13^m2^o0^m2^p3^m2^n6^m3^o0^m3^p1^m3^n7^m4^o0^m4^p4^m4^n10^m5^o28^m5^p5^m5^n11^m6^o29^m6^p0^m6^n11^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^e29^-40^.11^,100^K1^J1\"^e40^-50^.5^,100^K-1^J4\"^e11^-75^.22^,170^K2^J6^7^G1^m1^o0^m1^p0^m1^n3^>\"^e-20^!91^.10^,100^K4^J1^2-28^-60^.5^,100^x^y0^z0^h3^I\"^e-28^-50^.5^,100^K-1^J4\"^e-44^-70^.14^,60^K-1^J4\"^e-54^-210^.9^,200^K3^J6\"^e-44^-225^.14^,60^K-1^J4^7^G-1^m1^o0^m1^p1^m1^n9^m2^o19^m2^p3^m2^n0^m3^o20^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$^2-28^-40^.5^,100^x^y0^z0^h3^I\"^e-28^-30^.5^,100^K-1^J4^3^!36^.13^,5^_-22^!13^.5^,5^_2^!18^.7^,8^_36^!31^.9^,6^_21^!55^.9^,5^_^!54^.6^,7^_7^!75^.6^,7^_34^!80^.11^,5^_-24^!46^.15^,7^_-9^!16^.11^,6^_-26^-70^.37^,9^_^!05^.7^,150^T0^426^-2230^iplasmagun^s2^L134^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^434^-2230^irl^s-1^L418^-2230^irailgun^s-1^L329^!4^.3^,260^T0^111^!971^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^118^!971^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^418^!960^iplasmagun^s2^L411^!960^iplasmagun^s2^L111^!361^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^411^!350^iplasmagun^s2^L119^!111^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^131^!111^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^419^!100^irl^s-1^L431^!100^irailgun^s-1^M0\"^e46^-68^.3^,10^K-1^J4\"^d5^!^~d28^-37^~d47^-61^~d9^-80^~d20^!21^~d14^!58^~d-10^!58^~d-19^!890^u0.4^t1^120^!711^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^420^!700^iplasmagun^s2^L122^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^422^!490^iplasmagun^s2^L1-36^-2041^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4-36^-2010^iplasmagun^s2^L123^-851^A0^B0^C150^D150^q2^r1^F8^E-1^k0^l-1^423^-830^iplasmagun^s2^L111^-301^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^411^-290^iplasmagun^s2^L132^-501^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^114^-501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^414^-480^iplasmagun^s2^L432^-480^iplasmagun^s2^L135^!81^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^435^!70^iplasmagun^s2^L414^-470^irl^s-1^L432^-470^irl^s-1^L435^!60^irailgun^s-1^L411^!340^irl^s-1^L422^!480^irl^s-1^L420^!690^irl^s-1^L418^!950^irl^s-1^L411^!950^irl^s-1^L4-36^-2020^irl^s-1^L3-49^!5^.33^,6^_-11^-26^.6^,60^T0^126^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^118^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^3-130^-225^.86^,55^_40^!48^.10^,37^_-54^-231^.34^,49^_-130^*40^.70^,230^_-210^-201^.90^,69^_-210^!28^.90^,680^T0^5-210^!91^.89^,150^A1^B-0.5^Y100^g0^1-75^-2251^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1-67^-2251^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4-75^-2220^i^&^#^s-1^L4-67^-2220^i^&^#^s-1^M0\"^d-56^-2110^u0.4^t1^3-80^!80^.20^,20^_-130^-215^.35^,170^T0\"^e-29^-210^.9^,200^K3^J6\" /><barrel x=\"-97^-2130^jbar_orange^A0^B0\" /><barrel x=\"-100^-2130^jbar_orange^A0^B0\" /><barrel x=\"-103^-2130^jbar_orange^A0^B0\"^e-12^-72^.23^,50^K-1^J4^348^-202^.162^,780^T1^347^!53^.9^,27^_47^-76^.9^,60^_47^!9^.9^,35^_47^*40^.9^,430^T0^241^!85^.7^,150^x^y0^z0^h5^I\"^e41^!70^.7^,150^K-1^J4^7^G1^m1^o0^m1^p5^m1^n14^>\"^d71^!330^u1^t0\"^d72^-580^u1^t0^2120^!92^.14^,10^(H^6127^!970^jstone^U-1^O0^P0\"^e110^!80^.100^,240^K5^J6^7^G1^m1^o7^m1^p1^m1^nc10a^>\"^c41^!85^.7^,150^T4\"^c-28^-40^.5^,300^T4\"^c40^-60^.5^,100^T4\"^c11^-72^.23^,50^T4\"^c-38^-32^.2^,1970^T4^590^-49^.80^,1310^A-1^B0^Y100^g0\" />";
         this.CACHED_MAPS["c10a"] = "<q.^f9^-2021^A4^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c91^-91^.208^,1180^T0\" /><inf x=\"9^!980^Zhero1_guns^;0^3-120^-202^.219^,780^T1\" /><vehicle x=\"197^!730^r-1^jveh_jeep^A0^B0\" hpp=\"30^4197^!720^ivehminigun^s-1^M1^1197^!751^A0^B0^C250^D250^q2^r-1^F8^E-2^k0^l-1^3221^!60^.89^,51^_190^!80^.40^,310^T0^4197^!700^igl^s2^L3210^!70^.20^,20^_160^!90^.40^,200^T0^1157^-2021^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4157^-2010^irl^s-1^L1187^!901^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4187^!890^irl^s-1^L390^!96^.60^,14^_90^-90^.10^,88^_94^!56^.102^,4^_120^!20^.40^,4^_94^!50^.96^,8^_180^!26^.40^,4^_240^!36^.56^,7^_290^!30^.90^,81^_115^!15^.8^,25^_157^!15^.5^,9^_178^!21^.5^,19^_217^!21^.5^,9^_238^!31^.5^,190^T0\"^d119^-580^u1^t0\"^d219^-580^u1^t0\"^d164^-580^u1^t0\"^d261^-590^u1^t0\"^d311^-590^u1^t0^1176^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4156^!480^irailgun^s-1^L1155^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1191^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1209^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1201^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1149^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1132^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1141^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1252^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^1276^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^1265^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4177^!480^irailgun^s-1^L4191^!240^irailgun^s-1^L4210^!240^irailgun^s-1^L4149^!180^irailgun^s-1^L4133^!180^irailgun^s-1^M0\" /><vehicle x=\"256^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"267^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"277^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"287^!570^r1^jveh_crate^A0^B0\" hpp=\"100^4256^!540^i^&^#^s-1^L4256^!530^i^&^#^s-1^L4256^!520^i^&^#^s-1^L4267^!540^i^/2^s-1^L4277^!540^jitem_grenade^s-1^L4267^!530^i^/2^s-1^L4267^!520^i^/2^s-1^L4277^!530^jitem_grenade^s-1^L4277^!520^jitem_grenade^s-1^L4287^!540^iplasmagun^s-1^L4287^!530^iplasmagun^s-1^L4287^!520^iplasmagun^s-1^M0\" /><barrel x=\"242^!580^jbar_orange^A0^B0\" /><barrel x=\"239^!580^jbar_orange^A0^B0\" /><barrel x=\"216^!680^jbar_orange^A0^B0\" /><barrel x=\"185^!240^jbar_orange^A0^B0\" /><barrel x=\"272^!340^jbar_orange^A0^B0\" /><barrel x=\"249^!340^jbar_orange^A0^B0\" /><barrel x=\"246^!340^jbar_orange^A0^B0\" /><barrel x=\"192^!540^jbar_orange^A0^B0\" /><barrel x=\"142^!480^jbar_orange^A0^B0\" /><barrel x=\"144^!480^jbar_orange^A0^B0^3290^-90^.20^,300^T0\"^c299^!06^.81^,300^T0\"^d61^!630^u1^t0^5-160^*21^.130^,2110^A2^B0^Y40^g0^217^!95^.12^,7^(H^623^!980^jstone^U-1^O0^P0^219^!93^.8^,4^(H^380^-84^.14^,760^T0\"^d180^!61^~d200^!31^~d142^!250^u0.4^t1^3160^-96^.27^,5^_220^!00^.30^,50^T0^1165^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1174^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1184^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1225^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1234^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1246^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4246^-980^irailgun^s-1^L4225^-980^irailgun^s-1^L4184^-950^irailgun^s-1^L4174^-950^irailgun2^s2^M2^4165^-950^irailgun^s-1^L3160^!41^.10^,14^_96^-202^.284^,78^_300^-70^.80^,400^T0^5300^*28^.60^,980^A-3^B0^Y100^g0^4234^-990^irailgun2^s2^M2^4202^!250^irailgun2^s2^M2^4142^!190^irailgun2^s2^M2^4252^!330^irailgun2^s2^M2^4265^!330^irailgun2^s2^M2^4276^!330^irailgun2^s2^M2^390^-90^.30^,10^_210^!37^.21^,6^_320^!20^.60^,210^T0\"^e294^!19^.16^,120^K0^J6^7^G1^m1^o7^m1^p1^m1^nc11a^>^3-160^!90^.130^,780^T1^394^!51^.75^,220^T0\" />";
         this.CACHED_MAPS["c11a"] = "<q.^f-70^-21^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-160^*67^.420^,113^_-160^-^.87^,20^_-80^-2^.26^,18^_-57^*3^.7^,23^_-58^*22^.12^,5^_-160^*40^.87^,28^_-80^*22^.13^,5^_-160^!3^.160^,67^_5^-3^.35^,5^_10^*6^.20^,12^_-3^-20^.23^,6^_-3^-24^.15^,16^_-3^-37^.65^,43^_44^-25^.101^,55^_50^-3^.10^,7^_55^-5^.30^,5^_80^-3^.10^,7^_110^-3^.35^,34^_120^*23^.140^,103^_110^*25^.40^,5^_70^*25^.20^,5^_50^*20^.10^,6^_49^*45^.38^,5^_100^*45^.40^,5^_12^*37^.8^,7^_10^*37^.5^,17^_12^*50^.14^,5^_-21^*35^.12^,5^_-30^*23^.3^,13^_-20^*15^.10^,9^_-29^*13^.11^,3^_160^*55^.30^,5^_165^*90^.95^,46^_-160^*70^.70^,40^_34^-30^.16^,110^T0\" /><inf x=\"-70^*10^Zhero1_guns^;0^2-80^*12^.4^,12^(I^33^*25^.10^,5^_94^*12^.12^,2^_88^-8^.6^,20^T0^2170^*44^.6^,210^x^y0^z0^h3^I^390^-20^.25^,10^_84^-22^.11^,8^_106^-8^.6^,2^_-36^!0^.26^,70^T0^1-32^!01^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^1-19^!01^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^118^*59^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^16^-201^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^139^-301^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^125^*59^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^163^-51^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^1157^*229^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l2^4-32^-70^i^&^#^s-1^L4-19^-70^i^&^#^s-1^L418^*80^i^&^#^s-1^L425^*80^i^&^#^s-1^L46^!80^i^&^#^s-1^L439^-270^i^&^#^s-1^L463^-30^i^&^#^s-1^L4157^*240^i^&^#^s-1^L6-52^*220^jantigravity^U-1^O0^P0^6-15^*350^jantigravity^U-1^O0^P0^5-19^*60^.8^,250^A0^B-1^Y0^g0^5-56^*47^.8^,250^A0^B-1^Y0^g0^3-41^*50^.12^,50^T0^6-35^*500^jantigravity^U-1^O0^P0^5-39^*75^.8^,250^A0^B-1^Y0^g0\" /><barrel x=\"-87^*420^jbar_orange^A0^B0\" /><barrel x=\"-85^*420^jbar_orange^A0^B0^5-160^*151^.70^,810^A2^B0^Y100^g0^655^*450^jantigravity^U-1^O0^P0^551^*70^.8^,250^A0^B-1^Y0^g0^620^*500^jantigravity^U-1^O0^P0^516^*75^.8^,250^A0^B-1^Y0^g0^4157^*250^ibfg^s1^L4157^*260^iplasmagun^s1^L4157^*270^irailgun2^s1^M2^5165^*171^.85^,810^A-2^B0^Y100^g0^317^*35^.23^,50^T0\"^d110^*900^u1^t0\"^d150^*900^u1^t0\"^d70^*900^u1^t0\"^d30^*900^u1^t0\"^d-10^*900^u1^t0\"^d-50^*900^u1^t0\"^d-90^*900^u1^t0\"^d72^!7^~d44^!7^~d23^*25^~d-70^*900^u1^t0\"^d-30^*900^u1^t0\"^d10^*900^u1^t0\"^d50^*900^u1^t0\"^d90^*900^u1^t0\"^d130^*900^u1^t0^4158^*250^jitem_grenade^s-1^L4158^*240^jitem_grenade^s-1^L6100^-200^jantigravity^U-1^O0^P0^596^-^.8^,200^A0^B-1^Y0^g0^397^*11^.6^,3^_98^*11^.4^,4^_99^*11^.2^,50^T0\" /><barrel x=\"-25^*150^jbar_orange^A0^B0\" /><barrel x=\"-22^*150^jbar_orange^A0^B0\" /><barrel x=\"8^*270^jbar_orange^A0^B0\" /><barrel x=\"22^*370^jbar_orange^A0^B0\" /><barrel x=\"25^*370^jbar_orange^A0^B0\" /><barrel x=\"14^-350^jbar_orange^A0^B0\" /><barrel x=\"17^-350^jbar_orange^A0^B0\" /><barrel x=\"108^!80^jbar_orange^A0^B0\" /><barrel x=\"118^!0^jbar_orange^A0^B0\"^e170^*64^.6^,210^K-1^J4^7^G1^m1^o0^m1^p1^m1^n0^>\"^e180^*44^.20^,210^K1^J6^7^G1^m1^o7^m1^p1^m1^nc12a^>^2176^*44^.6^,210^x^y0^z0^h3^I\"^e176^*64^.6^,210^K-1^J4^7^G1^m1^o0^m1^p2^m1^n2^>^1146^*249^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l0^4146^*290^irailgun2^s1^M2^4146^*280^iplasmagun^s1^L4146^*270^ibfg^s1^L4146^*260^i^&^#^s-1^L4147^*260^jitem_grenade^s-1^L4147^*270^jitem_grenade^s-1^L4146^*300^irl^s1^M2^4157^*280^irl^s1^M2^310^*56^.5^,11^_85^*51^.5^,11^_40^*20^.15^,30^T0\"^c170^*44^.12^,210^T4\" />";
         this.CACHED_MAPS["c12a"] = "<q.^f-89^*599^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-170^*98^.146^,820^T0\"^c-24^*48^.131^,320^T0\"^c-39^*16^.158^,75^_-170^*60^.90^,80^_-160^*40^.90^,100^_-80^*30^.30^,90^_-70^*20^.50^,15^_-6^*20^.46^,15^_-6^!0^.46^,10^_-40^!0^.20^,10^_-60^*14^.30^,70^_-160^-50^.350^,40^_47^!4^.48^,16^_20^-27^.34^,29^_60^!0^.10^,10^_20^*40^.23^,33^_40^*34^.10^,4^_37^*11^.13^,4^_60^*34^.10^,3^_80^*34^.41^,4^_100^*48^.31^,38^_80^*21^.41^,9^_80^*50^.41^,4^_110^*80^.80^,1400^T0^+-30^-20^.50^,120^g0^+-20^!6^.14^,40^g0\" /><barrel x=\"7^*220^jbar_orange^A0^B0\" /><barrel x=\"9^*220^jbar_orange^A0^B0\" /><barrel x=\"-47^*220^jbar_orange^A0^B0\" /><barrel x=\"-30^*220^jbar_orange^A0^B0\" /><barrel x=\"-23^-80^jbar_orange^A0^B0\" /><barrel x=\"14^-80^jbar_orange^A0^B0\" /><barrel x=\"38^-80^jbar_orange^A0^B0\" /><barrel x=\"56^!20^jbar_orange^A0^B0\" /><barrel x=\"59^!20^jbar_orange^A0^B0^396^*55^.20^,130^T0\" /><inf x=\"-89^*630^Zhero1_guns^;0^3-170^*110^.90^,30^_-45^*103^.23^,33^_-90^*110^.60^,200^T0^2-100^*80^.10^,20^(I^165^*339^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^465^*350^ia^#2^s1^L187^*209^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^487^*220^ia^#2^s1^L145^*109^A0^B0^C400^D400^q1^r1^F6^E-1^k0^l-1^445^*120^ia^#2^s1^L166^!01^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^187^!41^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^466^-80^ia^#2^s1^L487^!30^ia^#2^s1^L171^-501^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^180^-501^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^471^-480^ia^#2^s1^L480^-480^ia^#2^s1^L18^!01^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^48^-70^ia^#2^s1^L3-55^*32^.3^,40^T0^190^*499^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^490^*510^ia^#2^s1^L490^*530^irl^s-1^L487^*240^irl^s-1^L465^*370^irl^s-1^L487^!10^irl^s-1^M0\" /><inf x=\"-77^*660^Zshadowmap_size^;35\" /><vehicle x=\"16^*360^r1^jveh_drone^A0^B0\" hpp=\"50^116^*319^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^416^*340^ivehminigun^s-1^L1-31^*349^A0^B0^C100^D100^q2^r1^F5^E-2^k0^l-1\" /><vehicle x=\"-31^*390^r1^jveh_drone^A0^B0\" hpp=\"50^4-31^*360^ivehminigl^s-1^M0\" /><vehicle x=\"^*380^r-1^jveh_drone^A0^B0\" hpp=\"50^1^*349^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^4^*360^ivehminigun^s-1^M0\"^d18^-2^~d60^*600^u1^t0\"^d80^*600^u1^t0\"^d40^*600^u1^t0^333^*50^.7^,130^T0\"^d14^*720^u1^t0\"^d-5^*850^u1^t0^+20^-20^.27^,70^g0^+40^!6^.7^,40^g0^3-35^-32^.62^,240^T0^662^-490^jteleport^U-1^O0^P0^662^-310^jteleport2^U-1^O0^P0\"^e57^-29^.10^,230^K0^J6^7^G1^m1^o7^m1^p1^m1^nc13a^>\"^d62^-31^~d62^-490^u0.4^t1\" />";
         this.CACHED_MAPS["c13a"] = "<q.^f^*559^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^e-15^*22^.30^,150^K0^J6\"^c-90^*100^.180^,1600^T2^3-8^*50^.16^,110^T3^3-13^*46^.26^,100^T3^3-17^*40^.34^,30^T3^3-34^*35^.16^,50^T3^3-70^*34^.20^,40^T3^350^*34^.20^,40^T3^3-80^*90^.20^,400^T3^360^*34^.20^,940^T3^3-70^*20^.30^,70^T3^340^*20^.30^,70^T3^310^*10^.10^,700^T3^3-20^*10^.10^,700^T3^3-70^-^.55^,600^T3^314^-^.66^,600^T3^3-30^*5^.15^,150^T3^314^*5^.16^,150^T3\" /><inf x=\"^*590^Zhero1_guns^;0^270^*120^.80^,180^(I^2-150^*120^.80^,180^(I^3-80^*90^.150^,200^T0^2-150^*120^.300^,40^(I\"^d-30^*60^~d30^*60^~d^*280^u0.4^t1\" /><barrel x=\"-16^*420^jbar_blue^A0^B0\" /><barrel x=\"16^*420^jbar_blue^A0^B0\" /><barrel x=\"58^*220^jbar_blue^A0^B0\" /><barrel x=\"52^*220^jbar_blue^A0^B0\" /><barrel x=\"-58^*220^jbar_blue^A0^B0\" /><barrel x=\"-52^*220^jbar_blue^A0^B0^3-20^*34^.4^,80^T3^316^*34^.4^,80^T3\" /><barrel x=\"-28^*70^jbar_blue^A0^B0\" /><barrel x=\"27^*70^jbar_blue^A0^B0^2-10^*8^.20^,80^x^y0^z0^h1000^I^1^*79^A0^B0^C300^D300^q1^r-1^F2^E-1^k2^l-1^1120^*1199^A0^B0^C300^D300^q1^r-1^F2^E-1^k3^l-1^298^*136^.14^,24^(I^2109^*142^.22^,12^(I^2127^*133^.13^,19^(I\"^e-59^*49^.8^,160^K-1^J4\"^e51^*49^.8^,160^K-1^J4^7^G1^m1^o25^m1^p0^m1^n0^m2^o25^m2^p1^m2^n0^)^a^G7^X1^W30^7^G-1^m1^o28^m1^p2^m1^n1^m2^o28^m2^p2^m2^n2^m3^o29^m3^p1^m3^n0^m4^o29^m4^p2^m4^n0^$^4120^*1210^ia^#^s1^L318^*35^.16^,50^T3^1-22^*49^A4^B2^C0^D0^q1^r1^F8^E-1^k0^l-1^122^*39^A-4^B-2^C0^D0^q1^r1^F8^E-1^k0^l-1^130^*39^A-2^B0^C0^D0^q1^r-1^F8^E-1^k0^l-1^2-80^*32^.20^,14^(I^2-90^*15^.30^,17^(I^260^*15^.30^,17^(I^260^*32^.20^,14^(I\"^e-70^*32^.20^,20^K-1^J4\"^e-70^*15^.30^,20^K-1^J4\"^e40^*15^.30^,20^K-1^J4\"^e50^*32^.20^,20^K-1^J4^a^G1^X2^W60^7^G1^m1^o0^m1^p7^m1^n3^m2^o0^m2^p8^m2^n4^m3^o0^m3^p10^m3^n6^m4^o0^m4^p9^m4^n5^m5^o0^m5^p12^m5^n8^m6^o0^m6^p11^m6^n7^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^4-19^*100^i^&^#^s-1^L424^*50^i^&^#^s-1^L436^-0^i^/2^s-1^L360^*90^.20^,400^T3^3-80^*34^.20^,940^T3^2-70^*50^.10^,16^(I^260^*50^.10^,16^(I\"^e-80^*50^.10^,20^K-1^J4\"^e70^*50^.10^,20^K-1^J4^2-10^*8^.20^,80^x^y0^z0^h1000^I\"^e-35^-2^.20^,80^K-1^J4\"^e14^-2^.20^,80^K-1^J4^7^G1^m1^o0^m1^p3^m1^n9^>^7^G1^m1^o0^m1^p13^m1^n10^>\"^e-69^*49^.8^,170^K3^J1\"^e61^*49^.8^,170^K4^J1^3-80^*52^.10^,200^T3^370^*52^.10^,200^T3^350^*80^.20^,200^T3^3-70^*80^.20^,200^T3\"^e-20^-20^.40^,300^K5^J6^7^G1^m1^o7^m1^p1^m1^nc14a^>\"^c-10^*5^.7^,20^T4\"^c3^*5^.7^,20^T4\" />";
         this.CACHED_MAPS["c14a"] = "<q.^f-50^*289^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-200^*100^.420^,2300^T2^3-200^*100^.140^,600^T3^3-40^*100^.20^,600^T3^3-60^*20^.20^,200^T3^3-200^*10^.280^,400^T3^3-200^*50^.120^,500^T3^3^*40^.70^,400^T3\" /><inf x=\"-50^*320^Zhero1_guns^;0^3-43^*13^.17^,70^T3^3-20^*15^.23^,70^T3^3-30^*100^.100^,400^T3^310^*70^.50^,700^T3^65^*410^jteleport^U-1^O0^P0^65^*590^jteleport2^U-1^O0^P0^5-20^*60^.20^,200^A1^B0^Y0^g0\"^d5^*59^~d5^*410^u0.4^t1^665^*590^jteleport2^U-1^O0^P0^665^*410^jteleport^U-1^O0^P0\"^d65^*59^~d65^*41^~e^*60^.10^,220^K0^J6\"^e60^*60^.10^,220^K-1^J6^7^G-1^m1^o30^m1^p0^m1^n1^m2^o43^m2^p0^m2^n0^)^+80^-60^.50^,300^g3\" /><barrel x=\"77^*120^jbar_blue^A0^B0\" /><barrel x=\"137^*120^jbar_blue^A0^B0^3140^*100^.80^,1100^T3^3130^*10^.90^,1400^T3^360^*100^.90^,300^T3^364^*38^.20^,40^T3^3120^*40^.26^,40^T3^390^*30^.14^,40^T3^3116^*20^.12^,40^T3^385^*14^.13^,40^T3^3100^*60^.4^,40^T3^3114^*53^.4^,40^T3^380^*60^.4^,40^T3^3130^*60^.4^,40^T3^399^*45^.11^,40^T3^3107^*6^.13^,40^T3^3118^!0^.16^,90^T3^390^-7^.14^,130^T3^371^-23^.15^,40^T3^391^!6^.43^,40^T3^3123^-35^.15^,40^T3^395^-41^.13^,40^T3^3-78^-68^.118^,620^T3^3107^-55^.15^,40^T3^376^-55^.15^,40^T3^330^-90^.114^,400^T3^330^-50^.50^,600^T3\" /><barrel x=\"73^*120^jbar_blue^A0^B0\" /><barrel x=\"133^*120^jbar_blue^A0^B0\" /><barrel x=\"132^*620^jbar_blue^A0^B0\" /><barrel x=\"102^*620^jbar_blue^A0^B0\" /><barrel x=\"82^*620^jbar_blue^A0^B0\" /><barrel x=\"116^*550^jbar_blue^A0^B0^1101^*449^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1102^*299^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^192^*139^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1109^*69^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1118^*199^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1122^*399^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^164^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^174^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^474^-470^ia^#^s1^L464^-470^ia^#^s1^L3-56^-50^.30^,40^T3\" /><barrel x=\"-16^-570^jbar_blue^A0^B0\" /><barrel x=\"19^-620^jbar_blue^A0^B0\" /><barrel x=\"-27^-480^jbar_blue^A0^B0\" /><barrel x=\"42^-480^jbar_blue^A0^B0\" /><barrel x=\"45^-480^jbar_blue^A0^B0\" /><barrel x=\"-4^-630^jbar_blue^A0^B0^320^-58^.20^,220^T3^3-20^-59^.11^,190^T3^3^-63^.10^,100^T3^3-120^-63^.52^,670^T3^3-200^-50^.100^,800^T3^3-88^-57^.11^,130^T3^3-10^-20^.30^,200^T3^4101^*470^ia^#^s1^L4102^*320^ia^#^s1^L4122^*430^ia^#^s1^L4118^*230^ia^#^s1^L492^*170^ia^#^s1^L4109^*100^ia^#^s1^L155^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^159^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^460^-470^ia^#^s1^L455^-470^ia^#^s1^L4-76^*110^jitem_grenade^s-1^L4-70^*110^jitem_grenade^s-1^L4-64^*110^jitem_grenade^s-1^L1-32^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-32^-480^ia^#^s1^L1-92^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-105^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^3-90^-20^.30^,200^T3^1-11^-591^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^13^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-11^-570^ia^#^s1^L42^-620^ia^#^s1^L3102^!8^.1^,120^T3^1126^-351^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^4126^-320^irailgun2^s1^M2^1-111^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-61^-671^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-61^-640^ia^#^s1^L4-111^-480^ia^#^s1^L5-60^*100^.20^,550^A0^B0^Y100^g0^2-126^-29^.6^,23^(I\"^e-121^-29^.7^,230^K1^J6\"^d90^*50^~d130^*30^~d83^-29^~d37^-35^~d-34^-350^u0.4^t1^1-98^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-84^-561^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-84^-550^ia^#^s1^L1-71^-621^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-71^-590^ia^#^s1^L1-46^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-46^-480^ia^#^s1^L1-111^-401^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-98^-521^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-91^-521^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-111^-380^ia^#^s1^L1-93^-401^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^325^-54^.10^,100^T3^315^-64^.10^,100^T3^3-5^-65^.10^,100^T3^4-93^-380^irl^s-1^L4-98^-490^irl^s-1^L4-92^-610^irl^s-1^L4-98^-610^irl^s-1^L4-91^-490^irl^s-1^L4-105^-480^irl^s-1^L7^G1^m1^o7^m1^p1^m1^nc15a^>\"^e-38^*25^.10^,130^K2^J6^7^G-1^m1^o43^m1^pThe grenade\'s blast force is a great power. What about a grenade jump?^m1^n0^>\" />";
         this.CACHED_MAPS["c15a"] = "<q.^f67^*399^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-170^*80^.390^,2100^T2^360^*40^.160^,100^T3^360^*10^.90^,100^T3^360^*80^.160^,200^T3^360^!4^.60^,100^T3^360^-50^.90^,700^T3^3-5^!4^.35^,100^T3^3-10^-50^.40^,700^T3^3-75^*10^.35^,100^T3^274^*60^.6^,20^(I^3-80^!10^.230^,400^T3^5-40^!08^.30^,20^A0^B0^Y0^g100\" /><inf x=\"67^*430^Zhero1_guns^;0^3-170^*80^.120^,500^T3\"^d-130^*1100^u1^t0\"^d-100^*1100^u1^t0\"^d-70^*1100^u1^t0\"^d-40^*1100^u1^t0\"^d-10^*1100^u1^t0\"^d20^*1100^u1^t0\"^d50^*1100^u1^t0\"^d80^*1100^u1^t0^167^*99^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^467^*130^irl^s-1^L320^*80^.10^,800^T3^3-5^*10^.31^,100^T3^3-10^*15^.10^,450^T3^185^!41^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^325^*20^.15^,100^T3^485^!10^irl^s-1^L110^!41^A0^B0^C400^D400^q1^r1^F6^E-1^k0^l-1^410^!10^irl^s-1^L230^!4^.30^,50^x^y0^z0^h5^I^+30^-73^.30^,370^g50\"^e30^-4^.30^,110^K0^J6^4-65^!90^jitem_grenade^s0^M0\"^e30^!05^.30^,50^K-1^J6^7^G1^m1^o0^m1^p1^m1^n1^>^4-24^-490^jitem_grenade^s0^L4-67^!90^jitem_grenade^s0^L120^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^420^-470^irailgun^s-1^L410^-390^irailgun^s-1^L410^-470^irailgun^s-1^L374^*33^.146^,270^T3^3140^*10^.80^,1600^T3^3130^-30^.17^,260^T3^3120^-40^.16^,180^T3\" /><barrel x=\"138^-280^jbar_blue^A0^B0\" /><barrel x=\"134^-280^jbar_blue^A0^B0\" /><barrel x=\"117^-480^jbar_blue^A0^B0\" /><barrel x=\"111^-480^jbar_blue^A0^B0^476^-470^irailgun^s-1^L486^-470^irailgun^s-1^L486^-390^irailgun^s-1^L3-170^-20^.130^,1300^T3^3-30^-50^.10^,50^T3^3-30^-35^.10^,50^T3^3-30^-20^.10^,50^T3^3-30^-5^.10^,50^T3^3-30^*10^.10^,50^T3^3-6^*30^.31^,50^T3^3-170^*17^.100^,470^T3^1-44^-201^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-44^!70^igl^s1^M3^1^*299^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^4^*330^irl^s-1^L15^*299^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^45^*330^irl^s-1^L1-48^*99^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-48^*130^igl^s1^M3^1-25^-51^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-25^-20^igl^s1^M3^1-58^-201^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-58^!70^igl^s1^M3\"^d-50^!0^~d100^-40^~d100^!0^~d11^*200^u0.4^t1^175^-501^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^186^-501^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^186^-421^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^110^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^110^-421^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^2-90^*30^.10^,13^(I^1-8^*149^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^4-8^*170^igl^s1^M3^118^*99^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^418^*130^igl^s1^M3\"^e-81^*31^.8^,160^K1^J6^7^G1^m1^o7^m1^p1^m1^nc16a^>\"^c32^!6^.1^,920^T4\"^c57^!6^.1^,920^T4^5-88^*156^.38^,760^A3^B0^Y100^g0^560^*156^.38^,760^A-3^B0^Y100^g0\" />";
         this.CACHED_MAPS["c16a"] = "<q.^f-170^*59^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-203^*50^.403^,1030^T2^3-178^!0^.142^,600^T3\" /><inf x=\"-170^*80^Zhero1_guns^;0^310^!0^.190^,600^T3^3-49^!9^.72^,510^T3\" /><barrel x=\"-126^-80^jbar_blue^A0^B0\" /><barrel x=\"-81^-80^jbar_blue^A0^B0^3-260^*60^.88^,1300^T3\" /><barrel x=\"-135^-80^jbar_blue^A0^B0\" /><barrel x=\"-150^-80^jbar_blue^A0^B0\" /><barrel x=\"-75^-80^jbar_blue^A0^B0\"^d-70^*100^u0.4^t1^1-358^*1099^A0^B0^C350^D350^q1^r-1^F2^E-1^k1^l-1^4-358^*1130^ibfg^s1^L3-177^*6^.17^,210^T3^3-160^*25^.20^,50^T3^3-120^*13^.24^,110^T3^3-80^*24^.20^,40^T3^3-40^*20^.20^,200^T3^3^*15^.20^,50^T3^340^*20^.20^,420^T3^380^*60^.120^,400^T3^2-355^*125^.8^,20^(I^2-371^*126^.8^,20^(I^2-368^*131^.19^,11^(I\"^e-168^*41^.8^,360^K0^J6^7^G1^m1^o25^m1^p0^m1^n0^>^a^G3^X1^W50\"^e-68^*6^.18^,40^K-1^J4\"^e-39^*24^.18^,40^K-1^J4\"^e-20^!5^.18^,40^K-1^J4\"^e1^*19^.18^,40^K-1^J4^7^G-1^m1^o28^m1^p1^m1^n1^m2^o28^m2^p1^m2^n3^m3^o28^m3^p1^m3^n2^m4^o28^m4^p1^m4^n4^$^3-144^*9^.32^,60^T3^2-368^*110^.19^,11^(I^530^*19^.39^,290^A0^B-1^Y0^g0^635^!00^jantigravity^U-1^O0^P0^665^!00^jantigravity^U-1^O0^P0^3-69^*2^.19^,220^T3^3-10^*60^.98^,200^T3^3^*50^.20^,200^T3^3-110^*20^.20^,150^T3^3-140^*60^.100^,200^T3\"^d-170^*800^u1^t0\"^d-156^*800^u1^t0\"^d-140^*800^u1^t0\"^d-25^*800^u1^t0\"^d-39^*800^u1^t0\"^d-11^*800^u1^t0\"^d35^-90^u0.4^t0\"^d65^-90^u0.4^t0^380^-6^.7^,70^T3^399^*2^.101^,220^T3\"^e115^*23^.38^,260^K2^J6^7^G1^m1^o7^m1^p1^m1^nc17a^>^5^*152^.90^,920^A-1^B0^Y100^g0^5-260^*152^.70^,920^A1^B0^Y100^g0^3-132^*45^.13^,150^T3\"^c47^*40^.6^,200^T4\" />";
         this.CACHED_MAPS["c17a"] = "<q.^f118^*19^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c354^!1^.73^,160^T0\"^c511^-21^.74^,370^T1\"^c-50^*50^.308^,1010^T2^4227^*20^ivehcannon^s-1^M2\" /><inf x=\"118^*50^Zhero1_guns^;0^3-50^!0^.310^,900^T3^340^*20^.20^,420^T3^380^*62^.120^,420^T3^530^*19^.39^,290^A0^B-1^Y0^g0^635^!00^jantigravity^U-1^O0^P0^665^!00^jantigravity^U-1^O0^P0^3-50^*60^.138^,200^T3\"^d35^-90^u0.4^t0\"^d65^-90^u0.4^t0^380^-6^.7^,70^T3^399^*2^.101^,220^T3^247^*40^.6^,20^(I^3179^*60^.61^,200^T3^3230^*64^.30^,340^T3\" /><vehicle x=\"226^*80^r1^jveh_walker^A0^B0\" hpp=\"500^3250^-20^.263^,800^T1\"^d280^*400^u1^t0\"^d285^*300^u1^t0\"^d275^*490^u1^t0^3330^!0^.30^,30^_420^!0^.30^,30^_323^!6^.40^,11^_417^!6^.40^,110^T0^1356^!01^A0^B0^C150^D150^q1^r1^F8^E-1^k2^l-1^4356^-70^i^&^#^s-1^L4367^!70^irailgun2^s1^M3^4374^!70^irl^s-1^M3^4411^!70^irailgun2^s1^M3^4415^!70^irl^s-1^M3^1374^!91^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1338^!01^A0^B0^C150^D150^q1^r1^F8^E-1^k2^l-1^4338^-70^i^&^#^s-1^L1410^-201^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1366^!91^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1415^-201^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1\" /><vehicle x=\"391^*30^r-1^jveh_walker^A0^B0\" hpp=\"100^4389^*40^ivehcannon^s-1^M2^1391^-31^A0^B0^C150^D150^q1^r1^F8^E-2^k2^l-1^3580^-20^.127^,800^T1^3489^-50^.115^,500^T2^+513^-36^.67^,140^g15\"^d500^-0^u1^t0\"^d530^-0^u1^t0\"^d560^-0^u1^t0\"^d590^-0^u1^t0\"^d390^*80^u1^t0\" /><inf x=\"129^*60^Zshadowmap_size^;40\" /><vehicle x=\"484^!20^r-1^jveh_jeep^A0^B0\" hpp=\"100^1484^!61^A0^B0^C150^D150^q1^r-1^F8^E-2^k2^l-1^4483^!40^ivehminigun^s-1^M2\"^e590^*39^.20^,810^K0^J6^7^G1^m1^o3^m1^p0^m1^n0^m2^o43^m2^p0^m2^n0^)\" /><vehicle x=\"635^!20^r1^jveh_jeep^A0^B0\" hpp=\"200^4635^!20^ivehminigun^s-1^M3^3687^-40^.56^,600^T1^3733^-50^.177^,500^T1^3859^-40^.33^,350^T1^3870^-24^.33^,280^T1^3880^!0^.40^,900^T1^1775^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1807^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1837^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1850^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^4775^-470^iplasmagun^s-1^L4807^-470^iplasmagun^s-1^L4837^-470^iplasmagun^s-1^L4850^-470^iplasmagun^s-1^M0\" /><inf x=\"135^*70^Zsky^;1^3940^!0^.100^,900^T1\"^e912^-20^.38^,560^K1^J6^7^G1^m1^o7^m1^p1^m1^nc18a^>\" /><vehicle x=\"741^-370^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"735^-370^r1^jveh_crate^A0^B0\" hpp=\"100^3950^*40^.20^,30^_960^*60^.80^,400^T0\"^d930^*300^u1^t0\"^c952^*37^.88^,700^T0^2954^*10^.9^,19^(I^5960^*141^.80^,810^A-2^B0^Y100^g0^582^*182^.178^,1220^A2^B0^Y100^g0\"^c914^!1^.31^,890^T1^31010^*40^.20^,300^T0^21015^*10^.9^,19^(I^3952^-9^.88^,110^T0\"^e161^*25^.31^,260^K2^J6^7^G1^m1^o43^m1^pPress the USE button to enter a vehicle.^m1^n0^>\"^e273^*47^.41^,710^K3^J6^7^G1^m1^o43^m1^pHold JUMP or DUCK buttons to control the walker\'s body positions.^m1^n0^>\"^e558^*3^.20^,550^K4^J3^7^G1^m1^o43^m1^pPress USE button again to leave walker.^m1^n0^>\"^e665^*40^.42^,760^K5^J6^7^G1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c18a"] = "<q.^f-10^*369^A0^B10^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c40^*175^.260^,2350^T0\"^c-170^*80^.210^,1600^T1^3-60^*80^.40^,1000^T1^3^*80^.50^,1000^T1\" /><inf x=\"-10^*400^Zhero1_guns^;0^3-120^-40^.160^,400^T2^3-170^!0^.90^,700^T2^3-170^*80^.119^,700^T1^+-20^*20^.20^,400^g1^+-80^-20^.150^,200^g1^+-170^*10^.110^,200^g1^+-80^!0^.20^,100^g1^2-91^*9^.2^,2^(I^2-91^*5^.2^,2^(I^2-91^*1^.2^,2^(I^2-91^-3^.2^,2^(I^2-91^-7^.2^,2^(I^2-98^*10^.10^,20^(H^5-88^*10^.28^,200^A-0.2^B0^Y0^g0^5-60^-20^.120^,200^A-0.2^B0^Y0^g0^5-80^!0^.20^,300^A0^B-0.2^Y0^g0\"^d-10^*1200^u2^t0^5-20^!0^.20^,100^A0^B0.2^Y0^g0\" /><barrel x=\"31^-260^jbar_orange^A0^B0\" /><barrel x=\"-32^-370^jbar_orange^A0^B0\" /><barrel x=\"-87^-70^jbar_orange^A0^B0^128^-281^A-2^B-3^C0^D0^q1^r1^F2^E-1^k0^l-1^112^-401^A-2^B3^C0^D0^q1^r-1^F2^E-1^k0^l-1^1-40^-291^A-2^B-3^C0^D0^q1^r-1^F2^E-1^k0^l-1^1-86^-31^A-2^B0^C0^D0^q1^r-1^F2^E-1^k0^l-1^417^-330^ia^#^s1^L434^-320^ia^#^s1^L4-53^-330^ia^#^s1^L4-84^*20^ia^#^s1^M0\"^d-85^-70^u0.3^t0^+50^*20^.30^,400^g1^370^-20^.69^,10^_40^-40^.170^,40^_80^*22^.59^,52^_30^-41^.20^,39^_40^*60^.30^,30^_50^*60^.70^,200^T0^+70^-30^.100^,100^g1^560^-30^.110^,100^A-0.2^B0^Y0^g0^290^-31^.2^,2^(I^290^-34^.2^,2^(I^290^-37^.2^,2^(I^289^-30^.4^,10^(H\" /><barrel x=\"55^*110^jbar_orange^A0^B0\" /><barrel x=\"65^*10^jbar_orange^A0^B0^164^!21^A-20^B30^C0^D0^q1^r1^F2^E-1^k0^l-1^469^*100^ia^#^s1^M0\"^d95^-380^u0.3^t0\" /><barrel x=\"94^-380^jbar_orange^A0^B0^3124^*60^.42^,20^_133^*11^.74^,41^_113^*66^.17^,230^T0\"^d122^*42^~d122^*230^u0.1^t0^3195^*60^.125^,140^_162^*15^.8^,45^_162^*64^.8^,280^T0^2170^*15^.20^,40^x^y0^z0^h4^I^2170^*40^.20^,40^x^y0^z0^h4^I\"^e170^*64^.20^,40^K2^J6\"^e170^*89^.20^,40^K-1^J4^3190^*64^.8^,56^_162^*111^.8^,26^_190^*111^.8^,26^_113^*98^.17^,230^T0\"^d146^*1040^u0.4^t1^3192^*94^.18^,7^_219^*70^.101^,50^_229^*94^.19^,10^_236^*110^.84^,56^_79^*64^.21^,10^_45^*72^.39^,17^_97^*93^.21^,11^_89^*90^.11^,100^T0^2166^*57^.2^,210^x^y0^z0^h20^I^2168^*15^.2^,210^x^y0^z0^h20^I\"^e168^*36^.2^,210^K-1^J4\"^e166^*36^.2^,210^K-1^J4^7^G1^m1^o0^m1^p13^m1^n2^m2^o0^m2^p12^m2^n3^m3^o25^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e180^*36^.10^,210^K0^J6^a^G1^X1^W30^7^G1^m1^o0^m1^p11^m1^n1^m2^o0^m2^p10^m2^n0^)^2166^*85^.2^,210^x^y0^z0^h20^I^2168^*85^.2^,210^x^y0^z0^h20^I^2190^*85^.2^,210^x^y0^z0^h20^I^2192^*85^.2^,210^x^y0^z0^h20^I\"^e166^*106^.2^,210^K-1^J4\"^e168^*64^.2^,210^K-1^J4\"^e190^*64^.2^,210^K-1^J4\"^e192^*106^.2^,210^K-1^J4^7^G1^m1^o25^m1^p1^m1^n0^>^a^G1^X3^W60^7^G1^m1^o0^m1^p14^m1^n5^m2^o0^m2^p16^m2^n7^m3^o0^m3^p15^m3^n6^m4^o0^m4^p17^m4^n8^$^3152^*90^.3^,2^_160^*90^.5^,4^_127^*90^.11^,4^_127^*95^.7^,2^_161^*101^.10^,2^_161^*112^.10^,2^_161^*123^.10^,2^_161^*134^.10^,2^_169^*94^.22^,5^_12^*81^.58^,210^T0\"^c12^*160^.28^,810^T0^214^*100^.9^,19^(I^310^*135^.17^,350^T0^259^*100^.9^,19^(I^323^*120^.66^,10^_55^*123^.17^,23^_10^*168^.17^,27^_20^*177^.143^,27^_197^*177^.103^,27^_260^*125^.90^,45^_189^*101^.10^,2^_189^*112^.10^,2^_189^*123^.10^,2^_189^*134^.10^,20^T0\"^d163^*1830^u1^t0\"^d180^*1830^u1^t0\"^d197^*1830^u1^t0\"^d-10^*1400^u1^t0^355^*136^.17^,3^_117^*113^.13^,3^_113^*133^.29^,3^_128^*117^.4^,7^_128^*132^.4^,6^_90^*153^.10^,13^_87^*83^.10^,2^_19^*127^.23^,120^T0^511^*141^.15^,60^A1^B0^Y100^g0^3178^*162^.4^,4^_168^*162^.4^,4^_188^*162^.4^,40^T0^5163^*177^.34^,150^A0^B0^Y100^g0^5197^*244^.63^,670^A-1^B0^Y100^g0^5100^*244^.63^,670^A1^B0^Y100^g0^383^*113^.17^,3^_128^*153^.4^,70^T0^6225^*700^jantigravity^U-1^O0^P0^5220^*90^.9^,200^A0^B-1^Y0^g0^3214^*140^.26^,3^_250^*142^.20^,5^_240^*125^.30^,5^_214^*125^.16^,5^_232^*105^.19^,170^T0\"^d172^*1830^u1^t0\"^d189^*1830^u1^t0\"^d225^*710^u0.4^t0^1168^*239^A4^B7^C0^D0^q1^r1^F2^E-1^k0^l-1^1159^*599^A0^B0^C300^D300^q1^r1^F8^E-1^k0^l-1^1201^*599^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1144^*599^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^1216^*599^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4143^*630^i^&^#^s-1^L4217^*630^i^&^#^s-1^L1243^*1099^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4243^*1120^irl^s-1^L1189^*1119^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4189^*1140^irl^s-1^L1220^*1249^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4220^*1260^irl^s-1^L1237^*1399^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4237^*1410^irl^s-1^L1104^*929^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^4104^*950^irl^s-1^L192^*899^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^492^*920^irl^s-1^L177^*1199^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^1116^*1329^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^478^*1230^irl^s-1^L4117^*1360^irl^s-1^L4117^*1340^irailgun^s-1^L477^*1210^irailgun^s-1^L492^*940^irailgun^s-1^L3190^*137^.8^,15^_162^*137^.8^,150^T0^1136^*899^A0^B0^C1000^D1000^q1^r1^F11^E-1^k3^l-1^4136^*920^irl^s1^M2^4136^*930^irailgun2^s1^M1^4136^*940^iplasmagun^s1^M2^4136^*950^ibfg^s1^M1\" /><barrel x=\"73^*740^jbar_orange^A0^B0\" /><barrel x=\"133^*620^jbar_orange^A0^B0\" /><barrel x=\"123^*1150^jbar_orange^A0^B0\" /><barrel x=\"126^*1150^jbar_orange^A0^B0\" /><barrel x=\"91^*1150^jbar_orange^A0^B0\" /><barrel x=\"53^*1220^jbar_orange^A0^B0\" /><barrel x=\"135^*1350^jbar_orange^A0^B0\" /><barrel x=\"138^*1350^jbar_orange^A0^B0\" /><barrel x=\"203^*960^jbar_orange^A0^B0\" /><barrel x=\"206^*960^jbar_orange^A0^B0\" /><barrel x=\"234^*720^jbar_orange^A0^B0\" /><barrel x=\"231^*720^jbar_orange^A0^B0\" /><barrel x=\"254^*1120^jbar_orange^A0^B0\" /><barrel x=\"219^*1420^jbar_orange^A0^B0\" /><barrel x=\"224^*1420^jbar_orange^A0^B0\" /><barrel x=\"255^*1440^jbar_orange^A0^B0^1223^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l-1^4223^*950^irl^s1^M2^4223^*960^irailgun2^s1^M1^4223^*970^iplasmagun^s1^M2^4223^*980^ibfg^s1^M1^3260^*180^.90^,430^T0\"^c300^*143^.50^,270^T0\"^e270^*140^.39^,200^K4^J6^7^G1^m1^o7^m1^p1^m1^nc19a^>\"^c166^*85^.4^,700^T4\"^c190^*85^.4^,210^T4\" />";
         this.CACHED_MAPS["c19a"] = "<q.^f-80^*679^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-110^*161^.165^,131^_-170^*107^.96^,28^_-170^*68^.96^,28^_-170^*63^.115^,63^_-79^*90^.14^,5^_-68^*90^.21^,8^_-51^*95^.5^,17^_-49^*66^.10^,3^_-57^*43^.31^,43^_-32^*45^.67^,45^_-2^*51^.8^,10^_-10^*49^.12^,10^_29^*51^.94^,51^_-37^*90^.76^,8^_-38^*95^.5^,17^_29^*90^.18^,24^_41^*123^.82^,83^_-14^*95^.5^,22^_16^*107^.5^,290^T0^2-93^*79^.6^,11^(I\" /><inf x=\"-80^*700^Zhero1_guns^;0^3-50^*110^.36^,2^_-3^*105^.13^,5^_-170^*146^.80^,44^_-17^*64^.28^,4^_-24^*73^.5^,100^T0^1-12^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-12^*480^i^&^#^s-1^L1-2^*639^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^17^*639^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-2^*670^i^&^#^s-1^L47^*670^i^&^#^s-1^L126^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^118^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^418^*480^i^&^#^s-1^L426^*480^i^&^#^s-1^L4-2^*660^irl^s-1^L47^*660^irl^s-1^L418^*470^irl^s-1^L426^*470^irl^s-1^L4-12^*470^irl^s-1^M0\"^d-23^*81^~d5^*81^~d-60^*810^u0.4^t1^3-40^*66^.3^,12^_-63^*54^.20^,21^_22^*70^.9^,40^T0^126^*699^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^426^*730^i^&^#^s-1^L426^*720^irl^s-1^M0^+-46^*95^.8^,80^g0^+-74^*135^.24^,460^g0^+-33^*108^.19^,180^g0^5-46^*87^.8^,210^A0^B-0.45^Y0^g0^+-9^*100^.25^,100^g0^+-90^*130^.16^,230^g0^+-50^*108^.17^,130^g0^+-14^*110^.5^,150^g0^+-9^*130^.6^,300^g0^+10^*130^.6^,300^g0^+-3^*130^.13^,250^g0^3-20^*130^.4^,11^_-40^*125^.4^,60^T0^+16^*130^.25^,230^g0^+21^*107^.20^,170^g0^+-50^*119^.41^,90^g0^+-50^*130^.10^,110^g0^+-36^*130^.16^,110^g0^+-16^*130^.7^,110^g0^+-40^*130^.4^,50^g0^+-50^*144^.70^,140^g0^3-170^*190^.96^,60^_-105^*190^.55^,55^_-60^*190^.96^,46^_20^*190^.103^,600^T0^1-5^*899^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-5^*930^irl^s-1^L113^*929^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^413^*960^irl^s-1^L1-6^*1139^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^117^*1199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^126^*1089^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-6^*1170^irl^s-1^L417^*1230^irl^s-1^L426^*1120^irl^s-1^L1-43^*1129^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-32^*1259^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-27^*1129^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-27^*1160^irl^s-1^L4-43^*1160^irl^s-1^L4-32^*1290^irl^s-1^L1-84^*1079^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-74^*1189^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-84^*1110^irl^s-1^L4-74^*1220^irl^s-1^L4-43^*1150^iplasmagun^s-1^L4-32^*1280^iplasmagun^s-1^L4-27^*1150^iplasmagun^s-1^L4-6^*1160^iplasmagun^s-1^L413^*950^iplasmagun^s-1^M0\"^d-61^*1200^u0.4^t0\"^d1^*1260^u0.4^t0\"^d-29^*1370^u0.4^t0\"^d31^*970^u0.4^t0\"^c-170^*84^.60^,230^T0\"^c55^*134^.68^,150^T0^+41^*130^.82^,70^g0\"^e45^*134^.41^,170^K0^J6^7^G1^m1^o7^m1^p1^m1^nc20a^>^6-42^*660^jantigravity^U-1^O0^P0\" />";
         this.CACHED_MAPS["c20a"] = "<q.^f-148^*1409^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^e127^*135^.11^,200^K2^J4\"^c40^*160^.220^,900^T0\"^c-240^*190^.280^,120^_-160^*140^.40^,10^_-100^*160^.20^,30^_-240^*110^.216^,70^_-240^*140^.100^,700^T0^+-240^*150^.140^,100^g0^+-120^*140^.20^,80^g0\" /><inf x=\"-148^*1450^Zhero1_guns^;0^5-240^*150^.88^,100^A3^B0^Y0^g0^3-100^*115^.30^,15^_-86^*160^.56^,20^_-40^*160^.20^,30^_-50^*115^.30^,350^T0\"^e-68^*123^.16^,140^K0^J1^7^G1^m1^o30^m1^p9^m1^n2^m2^o-1^m2^p0^m2^n2^m3^o0^m3^p0^m3^n3^m4^o40^m4^p1^m4^n0^$\"^e-139^*112^.12^,30^K-1^J4^6-133^*1110^jteleport^U-1^O0^P0\"^d-133^*1110^u0.4^t0^2-27^*131^.5^,170^x^y0^z0^h2^I\"^e-27^*146^.5^,170^K-1^J4^3-240^*190^.290^,40^_12^*136^.18^,3^_28^*116^.32^,6^_-24^*112^.24^,8^_26^*126^.14^,16^_-96^*90^.160^,50^_11^*99^.20^,15^_7^*95^.10^,8^_-30^*136^.15^,6^_96^*90^.140^,50^_-20^*85^.200^,45^_110^*116^.65^,6^_100^*170^.180^,30^_120^*125^.6^,15^_120^*143^.6^,14^_140^*93^.10^,8^_140^*112^.10^,13^_170^*116^.10^,35^_60^*100^.40^,50^T0^1-18^*1359^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-18^*1390^igl^s1^M2^1-12^*899^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-12^*930^irl^s-1^L118^*1359^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^135^*1259^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^145^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^156^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^435^*1290^irl^s1^M2^445^*1190^irl^s1^M2^418^*1390^irailgun^s1^M2^456^*1190^irailgun^s1^M2^167^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^191^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^179^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^467^*880^irailgun^s-1^L491^*880^irailgun^s-1^L479^*880^irl^s-1^L359^*118^.5^,8^_66^*103^.5^,80^T0^177^*999^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^477^*1030^irailgun^s-1^L315^*116^.18^,30^T0^124^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^121^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1160^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1\" /><barrel x=\"168^*920^jbar_orange^A0^B0\" /><barrel x=\"165^*920^jbar_orange^A0^B0\" /><barrel x=\"19^*1010^jbar_orange^A0^B0\" /><barrel x=\"22^*1010^jbar_orange^A0^B0\" /><barrel x=\"41^*920^jbar_orange^A0^B0\" /><barrel x=\"45^*920^jbar_orange^A0^B0\" /><barrel x=\"-10^*1140^jbar_orange^A0^B0\" /><barrel x=\"-5^*1140^jbar_orange^A0^B0\" /><barrel x=\"-3^*1140^jbar_orange^A0^B0^420^*1190^irailgun2^s1^M2^3-1^*95^.3^,10^_-1^*112^.3^,12^_60^*97^.5^,3^_95^*97^.5^,30^T0^4160^*930^irailgun2^s1^M2^6133^*910^jteleport^U-1^O0^P0^6133^*1090^jteleport2^U-1^O0^P0^6133^*1170^jteleport^U-1^O0^P0^6133^*1390^jteleport2^U-1^O0^P0\"^d133^*1090^u0.4^t0\"^d133^*910^u0.4^t0\"^d133^*1390^u0.4^t0\"^d133^*1170^u0.4^t0^6-133^*1290^jteleport2^U-1^O0^P0\"^d-133^*1290^u0.4^t0^328^*160^.4^,370^T0\"^d3^*124^~d-15^*980^u0.4^t1\" /><barrel x=\"-18^*920^jbar_orange^A0^B0\" /><barrel x=\"-15^*920^jbar_orange^A0^B0\" /><barrel x=\"86^*870^jbar_orange^A0^B0\" /><barrel x=\"84^*870^jbar_orange^A0^B0\"^d60^*1700^u0.5^t0\"^d76^*1700^u0.5^t0\"^d90^*1700^u0.5^t0^330^*142^.30^,3^_55^*140^.12^,60^T0^165^*1399^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^465^*1430^igl^s1^M2^157^*1419^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^457^*1450^igl^s1^M2\"^c-27^*130^.5^,150^T4\"^e128^*109^.11^,200^K1^J4\"^e124^*108^.3^,190^K-1^J4\"^e139^*134^.3^,190^K-1^J4^7^G-1^m1^o30^m1^p4^m1^n6^>^7^G-1^m1^o30^m1^p0^m1^n5^>^3220^*116^.120^,760^T0^4149^*1190^igl^s1^M2^1186^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4186^*930^irailgun2^s1^M2^1213^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4213^*930^irailgun2^s1^M2^3160^*148^.20^,13^_220^*148^.20^,13^_190^*95^.3^,7^_207^*95^.3^,70^T0^6200^*900^jantigravity^U-1^O0^P0^5193^*105^.14^,150^A0^B-0.7^Y0^g0\"^d200^*910^u0.4^t0\"^e64^*96^.32^,120^K3^J1\"^e64^*111^.32^,110^K-1^J4^7^G-1^m1^o30^m1^p7^m1^n8^>\" /><barrel x=\"177^*1180^jbar_orange^A0^B0\" /><barrel x=\"172^*1180^jbar_orange^A0^B0^2-157^*235^.17^,26^(H^2-131^*235^.17^,26^(H^2-150^*218^.30^,13^(H^2-150^*241^.30^,13^(H^1-136^*2179^A0^B0^C600^D600^q0^r1^F1^E-1^k1^l-1\" /><inf x=\"-136^*2200^Zhero1_guns^;-1\"^e-143^*230^.15^,150^K-1^J4^330^*160^.17^,200^T0^1227^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4227^*1190^igl^s1^M2^1239^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4239^*1190^igl^s1^M2^1148^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^5180^*115^.40^,100^A0^B-0.7^Y0^g0\"^c250^*150^.90^,50^_250^*170^.90^,400^T0\"^e230^*147^.110^,430^K4^J7^7^G1^m1^o7^m1^p1^m1^nc21a^>\"^e-21^*106^.22^,180^K5^J1\"^e-19^*121^.14^,100^K-1^J4^7^G-1^m1^o30^m1^p11^m1^n12^>^4-73^*1160^idefibrillator^s0^L5100^*300^.97^,1310^A-3^B0^Y100^g0^5-47^*300^.97^,1100^A3^B0^Y100^g0^4-136^*2200^idefecator^s-1^M0\"^e-90^*129^.10^,150^K6^J6^7^G-1^m1^o43^m1^pWith help of this device (slot 6), you can revive dead allies. Press TAB to switch between heroes.^m1^n0^>^6-115^*1100^jantigravity^U-1^O0^P0^6-105^*1100^jantigravity^U-1^O0^P0\"^e257^*137^.8^,250^K7^J6^7^G-1^m1^o43^m1^pYou can continue only with ally.^m1^n0^>\"^e240^*155^.20^,720^K6^J6^2260^*133^.5^,19^(I\" />";
         this.CACHED_MAPS["c21a"] = "<q.^f-53^*199^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-140^*130^.260^,160^_-200^*70^.145^,20^_-200^*130^.70^,130^_-55^*74^.90^,24^_-30^*60^.40^,15^_-50^*20^.80^,80^_-60^*80^.10^,40^_30^*80^.10^,40^_100^*20^.80^,80^_110^*130^.70^,130^_90^*70^.90^,20^_80^*60^.20^,10^_-110^*10^.50^,10^_40^*10^.50^,10^_60^*40^.20^,10^_-100^*40^.20^,100^T0\" /><inf x=\"-53^*220^Zhero1_guns^;0^1-38^*199^A0^B0^C700^D700^q0^r-1^F1^E-1^k0^l1\" /><inf x=\"-38^*220^Zhero1_guns^;-1^330^*70^.40^,6^_-100^*15^.30^,15^_50^*15^.30^,15^_-77^*20^.5^,20^_52^*20^.5^,20^_-55^*20^.95^,50^T0^9^G1^X0^W30^7^G1^m1^o33^m1^p1^m1^n1^>\" /><barrel x=\"-79^*170^jbar_orange^A0^B0\" /><barrel x=\"-82^*170^jbar_orange^A0^B0\" /><barrel x=\"59^*170^jbar_orange^A0^B0\" /><barrel x=\"62^*170^jbar_orange^A0^B0\" /><barrel x=\"-89^*420^jbar_orange^A0^B0\" /><barrel x=\"82^*350^jbar_orange^A0^B0\" /><barrel x=\"-68^*120^jbar_orange^A0^B0\" /><barrel x=\"48^*120^jbar_orange^A0^B0\" /><barrel x=\"-128^*220^jbar_orange^A0^B0\" /><barrel x=\"-125^*220^jbar_orange^A0^B0\" /><barrel x=\"108^*220^jbar_orange^A0^B0\" /><barrel x=\"105^*220^jbar_orange^A0^B0^2-28^*143^.7^,16^(H^2-12^*143^.7^,16^(H^2-26^*145^.18^,5^(H^1-16^*1299^A0^B0^C700^D700^q1^r-1^F1^E-1^k3^l-1\"^e7^*22^.6^,40^K-1^J4\"^e63^*43^.6^,40^K-1^J4^7^G1^m1^o25^m1^p1^m1^n0^m2^o0^m2^p3^m2^n2^)^a^G1^X2^W30^7^G1^m1^o28^m1^p2^m1^n0^m2^o28^m2^p2^m2^n1^m3^o28^m3^p2^m3^n0^m4^o28^m4^p2^m4^n1^$^+30^!0^.70^,100^g100^3-140^-20^.260^,40^_-110^*130^.145^,40^_-110^*33^.20^,3^_70^*33^.20^,3^_34^*43^.16^,3^_-70^*43^.16^,3^_74^*53^.16^,30^T0^610^*210^jteleport^U-1^O0^P0^666^*410^jteleport^U-1^O0^P0^3-125^*5^.80^,33^_30^*130^.90^,20^_70^*120^.57^,30^_-200^*20^.80^,800^T0\"^d-116^*42^~d-67^*25^~d52^*24^~d100^*43^~d60^*98^~d99^*800^u0.4^t1^4-16^*1320^iraygun^s1^M3^3-31^*26^.2^,8^_-1^*26^.2^,8^_94^*5^.10^,5^_47^*43^.4^,110^T0^270^*69^.20^,4^(I\"^e90^*69^.20^,40^K-1^J4\"^e-40^*93^.60^,210^K3^J6^7^G1^m1^o7^m1^p1^m1^nc22a^>\" />";
         this.CACHED_MAPS["c22a"] = "<q.^f20^*739^A0^B0^C100^D100^q0^r-1^F1^E-1^k0^l-1\"^c-169^*230^.122^,590^T0\"^c-140^*171^.260^,142^_-200^*70^.145^,20^_-200^*183^.70^,154^_-55^*74^.90^,24^_-60^*80^.10^,40^_30^*80^.10^,40^_110^*180^.110^,151^_90^*70^.90^,200^T0\" /><inf x=\"20^*760^Zhero1_guns^;0^330^*70^.40^,6^_-60^*130^.95^,40^_30^*130^.90^,20^_70^*120^.57^,300^T0\"^d60^*98^~d99^*800^u0.4^t1^270^*69^.20^,4^(I^3-60^*180^.95^,33^_-200^*230^.40^,600^T0^1-55^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-55^*1320^irl^s-1^L1-117^*1459^A0^B15^C350^D350^q1^r1^F8^E-1^k0^l-1^1-43^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-117^*1470^irl^s-1^L4-43^*1320^irl^s-1^L1-33^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-33^*1320^iplasmagun^s-1^L1-86^*1699^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-74^*1699^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-86^*1720^iplasmagun^s-1^L4-73^*1720^iplasmagun^s-1^L6-80^*700^jantigravity^U-1^O0^P0^5-90^*90^.20^,200^A0^B-0.8^Y0^g0\"^d-80^*710^u0.4^t0^5-120^*120^.20^,200^A0^B-0.8^Y0^g0^6-110^*1000^jantigravity^U-1^O0^P0\"^d-110^*1010^u0.4^t0^3-120^*100^.20^,5^_-90^*130^.20^,50^T0^5-90^*150^.20^,200^A0^B-0.8^Y0^g0^6-80^*1300^jantigravity^U-1^O0^P0\"^d-80^*1310^u0.4^t0^3-120^*160^.20^,50^T0^6-110^*1600^jantigravity^U-1^O0^P0\"^d-110^*1610^u0.4^t0^3-200^*257^.160^,37^_-93^*230^.6^,30^_-17^*150^.17^,24^_-64^*170^.8^,6^_-55^*230^.15^,20^_130^*190^.90^,200^T0\"^c-50^*210^.5^,300^T4\"^d-20^*2100^u0.6^t0\"^d-11^*2060^u0.6^t0\"^d132^*2100^u0.6^t0\"^d65^*2370^u0.6^t0^327^*161^.40^,8^_82^*161^.40^,36^_74^*147^.14^,23^_67^*140^.14^,17^_60^*135^.12^,110^T0^1-28^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-17^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-28^*1820^irailgun^s-1^L4-17^*1820^irailgun^s-1^L1-10^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-10^*1820^irailgun^s-1^L189^*1609^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1100^*1609^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^489^*1620^irailgun^s-1^L4101^*1620^irailgun^s-1^L127^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^139^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^427^*1320^irl^s-1^L440^*1330^irl^s-1^M0\" /><vehicle x=\"38^*1640^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"52^*1320^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"3^*1330^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"9^*1330^r1^jveh_crate^A0^B0\" hpp=\"100^44^*1340^jitem_grenade^s-1^L46^*1350^jitem_grenade^s-1^L46^*1320^jitem_grenade^s-1^L14^*1369^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^110^*1369^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^410^*1420^irailgun^s-1^L45^*1420^irailgun^s-1^M0\"^d49^*1520^u0.4^t1^3105^*170^.10^,15^_-144^*192^.18^,160^T0^2-50^*210^.5^,300^x^y0^z0^h5^I\"^e-50^*180^.5^,300^K-1^J4^7^G1^m1^o0^m1^p1^m1^n0^>\"^e-59^*206^.9^,260^K0^J6\" /><inf x=\"-8^*240^Zsky^;2\"^e137^*256^.83^,670^K1^J6^7^G1^m1^o7^m1^p1^m1^nc23a^>^355^*175^.27^,5^_73^*208^.11^,380^T0^5-90^*110^.20^,200^A0^B-0.6^Y0^g0^5-120^*140^.20^,200^A0^B-0.6^Y0^g0^5-90^*170^.20^,200^A0^B-0.6^Y0^g0^5-120^*180^.20^,200^A0^B-0.8^Y0^g0^5-120^*200^.20^,200^A0^B-0.6^Y0^g0\" />";
         this.CACHED_MAPS["c23a"] = "<q.^f-208^*99^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-181^*10^.131^,490^T0\" /><inf x=\"-208^*120^Zhero1_guns^;0\" /><inf x=\"-191^*150^Zsky^;2^3-300^*10^.130^,80^_-350^*40^.90^,110^_-60^*10^.90^,80^_-190^-30^.150^,40^_-150^*40^.10^,50^_-120^*40^.10^,20^_-90^*40^.10^,500^T0^5-170^*10^.10^,400^A0^B-0.6^Y0^g0^5-70^*10^.10^,400^A0^B-0.6^Y0^g0^3-150^-25^.20^,15^_-120^-20^.10^,20^_-100^-25^.20^,15^_-100^-5^.16^,5^_-146^-5^.16^,50^T0^1-30^*359^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^1-2^*359^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^1-92^-51^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-137^-51^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-72^-301^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-95^-251^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-138^-251^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-138^-30^i^&^#^s-1^L4-91^-30^i^&^#^s-1^L4-95^-220^i^&^#^s-1^L4-71^-270^i^&^#^s-1^L4-138^-220^i^&^#^s-1^L4-138^-40^irl^s-1^L4-91^-40^irl^s-1^L4-95^-230^irl^s-1^L4-138^-230^irl^s-1^L4-71^-280^irl^s-1^L4-95^-210^irailgun2^s1^M2\" /><vehicle x=\"-236^*500^r1^jveh_capsule^A0^B30\" hpp=\"100\" /><vehicle x=\"-220^*500^r1^jveh_capsule^A0^B20\" hpp=\"100^1-236^*459^A0^B0^C350^D350^q1^r1^F8^E-2^k0^l-1^1-220^*459^A0^B0^C350^D350^q1^r1^F8^E-2^k0^l-1^4-220^*490^irailgun2^s1^M2^4-236^*490^irailgun2^s1^M2\" /><barrel x=\"-158^-280^jbar_orange^A0^B0\" /><barrel x=\"-153^-280^jbar_orange^A0^B0\" /><barrel x=\"-173^*120^jbar_orange^A0^B0\" /><barrel x=\"-250^*120^jbar_orange^A0^B0\" /><barrel x=\"-256^*120^jbar_orange^A0^B0\" /><vehicle x=\"-30^*400^r1^jveh_capsule^A0^B20\" hpp=\"100\" /><vehicle x=\"-2^*400^r1^jveh_capsule^A0^B20\" hpp=\"100^4-29^*390^irailgun2^s1^M2^4-1^*390^irailgun2^s1^M2^350^*10^.50^,80^_20^*36^.50^,10^_60^*49^.90^,119^_9^*16^.13^,120^T0^5-300^*131^.40^,910^A2^B0^Y100^g0\"^c20^*31^.53^,1010^T0\"^d10^*280^u1^t0^124^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^425^*110^iplasmagun^s1^M3^153^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^157^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^453^*110^iplasmagun^s1^M3^457^*110^iplasmagun^s1^M3\"^e30^-20^.20^,500^K0^J6^7^G1^m1^o7^m1^p1^m1^nc24a^>\"^c-150^*40^.70^,300^T0\"^d-140^*600^u1^t0\"^d-115^*600^u1^t0\"^d-90^*600^u1^t0\"^d-165^*600^u1^t0\"^d-65^*600^u1^t0\"^d-40^*600^u1^t0\"^d-190^*600^u1^t0^6-165^-300^jantigravity^U-1^O0^P0^6-65^-300^jantigravity^U-1^O0^P0\"^d-65^-290^u0.4^t0\"^d-165^-290^u0.4^t0^5-35^*47^.38^,160^A0^B0.1^Y0^g0^580^*158^.70^,680^A-2^B0^Y100^g0^380^*90^.70^,840^T0\" />";
         this.CACHED_MAPS["c24a"] = "<q.^f-72^*599^A0^B4^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-260^*150^.428^,190^_-260^*150^.180^,100^_-60^*97^.30^,47^_-80^*36^.20^,7^_-70^*30^.30^,70^_-30^*20^.10^,6^_30^*30^.90^,70^_-10^*70^.10^,40^_-20^*50^.24^,10^_50^*52^.30^,12^_90^*40^.10^,20^_110^*70^.70^,110^_70^*55^.20^,5^_94^*160^.86^,950^T0\" /><inf x=\"-72^*630^Zhero1_guns^;0^3-65^*150^.75^,60^_-36^*75^.16^,4^_40^*78^.19^,4^_^*160^.80^,50^_74^*160^.29^,400^T0\"^d-74^*1490^u0.7^t0^1-7^*699^A-4^B2^C0^D0^q1^r1^F2^E-1^k0^l-1^1-1^*709^A-6^B0^C0^D0^q1^r1^F2^E-1^k0^l-1^1-20^*749^A2^B0^C0^D0^q1^r1^F2^E-1^k0^l-1\"^d-8^*81^~d34^*810^u0.4^t1^1-9^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^117^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^127^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^148^*779^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^159^*779^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^175^*899^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1102^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1105^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1108^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^195^*399^A0^B0^C300^D300^q1^r-1^F12^E-1^k3^l-1^186^*549^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^3-50^*20^.13^,20^_27^*20^.14^,20^_-50^*3^.124^,430^T0^1-78^*199^A0^B0^C300^D300^q1^r-1^F12^E-1^k0^l-1^1-72^*199^A0^B0^C300^D300^q1^r-1^F12^E-1^k0^l-1^313^*50^.27^,4^_61^*90^.18^,4^_56^*70^.23^,4^_56^*77^.3^,100^T0^1-26^*29^A0^B0^C300^D300^q1^r-1^F12^E-1^k3^l-1^117^*29^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^3-160^*20^.100^,60^_-110^*25^.20^,10^_-8^*34^.18^,4^_27^*66^.19^,40^T0^154^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^163^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^158^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1\"^e28^*77^.12^,120^K0^J1^7^G1^m1^o0^m1^p0^m1^n1^>^2-107^*44^.14^,200^x^y0^z0^h3^I^3-110^*57^.20^,140^T0\"^e-107^*26^.14^,200^K-1^J4^1-109^*249^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-120^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-126^*289^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-145^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^3-142^*25^.11^,11^_-160^*25^.10^,130^T0^16^*339^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1-18^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^112^*29^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^324^*10^.14^,10^_-47^*10^.13^,10^_-11^*20^.31^,6^_-17^*7^.4^,6^_-160^*58^.10^,13^_-260^*58^.80^,980^T0^2-180^*24^.20^,6^(I\"^c-106^*43^.2^,170^T4\"^c-96^*43^.2^,170^T4\"^c-101^*43^.2^,170^T4\"^c-178^*22^.2^,620^T4\"^c-164^*22^.2^,620^T4\"^c-159^*45^.4^,200^T4^4-126^*320^i^&^%^s1^L4-145^*230^i^&^%^s1^L4-120^*230^i^&^%^s1^L4-109^*280^i^&^%^s1^M0\"^d-130^*400^u0.2^t1^3-135^*29^.11^,110^T0\" /><barrel x=\"-58^*320^jbar_blue^A0^B0\" /><barrel x=\"-55^*320^jbar_blue^A0^B0\" /><barrel x=\"-52^*320^jbar_blue^A0^B0\" /><barrel x=\"-87^*220^jbar_blue^A0^B0\" /><barrel x=\"-24^*220^jbar_blue^A0^B0\" /><barrel x=\"-22^*220^jbar_blue^A0^B0\" /><barrel x=\"32^*320^jbar_blue^A0^B0\" /><barrel x=\"-5^*50^jbar_blue^A0^B0^460^*310^ia^#^s2^L434^*510^ia^#^s2^L473^*560^ia^#^s2^L4-64^*370^ia^#^s2^M0\"^e-180^*41^.20^,180^K1^J1^7^G1^m1^o7^m1^p1^m1^nc25a^>\" />";
         this.CACHED_MAPS["c25a"] = "<q.^f-59^*299^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-150^*120^.480^,130^_-80^*30^.80^,40^_-150^*143^.120^,93^_-150^*90^.80^,100^_-36^*54^.22^,4^_-14^*37^.40^,27^_2^*43^.26^,33^_21^*46^.35^,360^T0\" /><inf x=\"-59^*320^Zhero1_guns^;0^1-26^*539^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^4-19^*550^irailgun2^s1^M2^3-36^*70^.22^,7^_-49^*130^.104^,62^_70^*75^.5^,25^_90^*54^.13^,4^_110^*44^.25^,14^_67^*40^.15^,4^_91^*34^.48^,21^_-12^*22^.201^,32^_86^*27^.11^,12^_126^*53^.71^,40^_125^*67^.23^,3^_129^*81^.27^,30^T0^168^*399^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^3153^*85^.35^,360^T0^468^*430^i^&^#^s1^M2^494^*570^i^&^#^s1^M2^4103^*370^i^&^#^s1^M2^4117^*470^i^&^#^s1^M2^4149^*560^i^&^#^s1^M2\"^d56^*61^~d111^*72^~d95^*47^~d-28^*430^u0.4^t1\" /><barrel x=\"-29^*560^jbar_blue^A0^B0^222^*71^.11^,15^(I^240^*57^.11^,17^(I\"^e33^*68^.7^,230^K0^J6^7^G1^m1^o0^m1^p0^m1^n1^m2^o0^m2^p1^m2^n2^)\"^e22^*82^.11^,150^K-1^J4\"^e40^*45^.11^,170^K-1^J4^475^*240^iplasmagun^s1^M3^492^*360^iplasmagun^s1^M3^4103^*360^iplasmagun^s1^M3^4133^*690^iplasmagun^s1^M3^4146^*700^i^&^#^s1^M2\" /><barrel x=\"^*390^jbar_blue^A0^B0\" /><barrel x=\"-3^*390^jbar_blue^A0^B0^343^*126^.82^,53^_178^*78^.79^,88^_196^*95^.31^,4^_119^*132^.27^,40^_140^*122^.36^,12^_162^*100^.14^,60^T0^1248^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1241^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4180^*880^irl^s1^M2^4193^*810^irl^s1^M2^4206^*810^irl^s1^M2^4241^*960^irailgun^s1^M2^4248^*960^irailgun^s1^M2\"^d155^*105^~d192^*1070^u0.4^t1^3210^*150^.120^,40^_240^*94^.90^,104^_250^*125^.80^,410^T0^5240^*259^.121^,790^A-2^B0^Y100^g0\"^d181^*1410^u1^t0\"^d193^*1460^u1^t0\"^d206^*1500^u1^t0\"^d168^*1340^u1^t0^6204^*950^jantigravity^U-1^O0^P0^5198^*130^.12^,350^A0^B-1^Y0^g0^3240^*180^.90^,440^T0\" /><barrel x=\"59^*1280^jbar_orange^A0^B0\" /><barrel x=\"114^*1280^jbar_orange^A0^B0\" /><barrel x=\"117^*1280^jbar_orange^A0^B0^3-16^*137^.39^,18^_71^*133^.19^,110^T0^186^*1329^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^486^*1360^igl^s1^M2^486^*1370^irailgun^s1^M2^198^*1259^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1107^*1259^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^498^*1300^irl^s1^M2^4107^*1300^irl^s1^M2^498^*1290^igl^s1^M2^4107^*1290^igl^s1^M2^128^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^138^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^428^*1330^irl^s1^M2^438^*1330^irl^s1^M2^438^*1320^igl^s1^M2^428^*1320^igl^s1^M2^1-25^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-52^*1429^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-38^*1429^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-25^*1330^irl^s1^M2^4-38^*1460^irailgun^s1^M2^4-52^*1460^irl^s1^M2^4-25^*1320^igl^s1^M2^4-38^*1450^igl^s1^M2^4-52^*1450^igl^s1^M2^4236^*1510^jitem_grenade^s-1^L4231^*1510^jitem_grenade^s-1^L4226^*1510^jitem_grenade^s-1^L4220^*1510^iplasmagun^s-1^L4215^*1510^iraygun^s-1^M0\"^e-150^*220^.90^,770^K1^J6^7^G1^m1^o7^m1^p1^m1^nc26a^>^3195^*101^.3^,10^_234^*86^.12^,110^T0\"^d86^*600^u0.4^t1^352^*27^.18^,10^_51^*36^.9^,13^_170^*114^.20^,40^T0^175^*219^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^194^*539^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^192^*339^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1103^*339^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1117^*439^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1149^*529^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1146^*669^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1133^*669^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1180^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1193^*779^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1206^*779^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1\" />";
         this.CACHED_MAPS["c26a"] = "<q.^f68^*199^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-113^*130^.164^,930^T0\"^c-104^*37^.132^,46^_-75^-^.255^,40^_-30^*3^.30^,19^_-35^*6^.30^,19^_-40^*9^.30^,19^_-45^*12^.30^,19^_-53^*15^.33^,19^_20^*50^.10^,36^_-20^*32^.48^,5^_-180^*32^.135^,72^_70^*20^.70^,300^T0^570^*113^.118^,930^A-2^B0^Y100^g0\" /><inf x=\"68^*220^Zhero1_guns^;0\"^e-20^*27^.10^,150^K0^J6^7^G1^m1^o28^m1^p1^m1^n1^m2^o28^m2^p1^m2^n2^)\"^e4^*46^.5^,20^K-1^J4\"^e-9^*37^.5^,20^K-1^J4^3-100^*60^.88^,5^_-180^*70^.90^,60^_-100^*35^.50^,15^_-15^*35^.43^,60^T0^1-91^*729^A0^B0^C500^D500^q2^r-1^F6^E-1^k0^l-1^4-91^*750^irailgun2^s2^M3\"^e-45^*27^.25^,130^K1^J1^2-45^*31^.25^,3^(I\"^e-20^*31^.25^,30^K-1^J4^7^G1^m1^o0^m1^p0^m1^n4^>^3-67^*40^.7^,11^_23^*50^.27^,20^_45^*80^.10^,45^_10^*90^.40^,200^T0^613^*350^jantigravity^U-1^O0^P0^56^*50^.14^,150^A0^B-1^Y0^g0^3-15^*60^.7^,100^T0^1-18^*319^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-18^*350^i^&^#^s1^M2^1-70^*349^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-70^*380^irl^s1^M2^3-94^*58^.34^,8^_-49^*27^.7^,190^T0^128^*499^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^428^*530^i^&^#^s1^M2^3-55^*64^.25^,70^T0^1-26^*599^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-26^*630^i^&^#^s1^M2^1-16^*599^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-16^*630^irl^s1^M2^3-55^*85^.25^,7^_-72^*90^.88^,10^_-180^*140^.80^,800^T0^2-34^*78^.3^,70^x^y0^z0^h3^I^2-34^*71^.3^,70^x^y0^z0^h3^I\"^e-34^*84^.3^,70^K-1^J4\"^e-34^*65^.3^,70^K-1^J4\"^e-26^*76^.11^,170^K2^J1^7^G1^m1^o0^m1^p1^m1^n5^m2^o0^m2^p2^m2^n6^)^3-106^*122^.26^,22^_-50^*95^.60^,9^_-180^*185^.155^,69^_-90^*120^.24^,8^_-50^*130^.30^,20^_-11^*54^.11^,40^T0\"^d60^*400^u1^t0\"^d70^*400^u1^t0\"^d80^*350^u1^t0^360^*10^.20^,16^_^*110^.23^,27^_-6^*103^.14^,12^_-30^*180^.53^,58^_40^*180^.20^,1040^T0^+23^*108^.17^,180^g0^3-75^*86^.5^,10^T0^45^*1110^i^#^s0^L3-180^*220^.240^,20^_47^*204^.13^,280^T0^424^*1810^jitem_grenade^s-1^L431^*1810^jitem_grenade^s-1^L438^*1810^jitem_grenade^s-1^L29^*110^.7^,20^x^y0^z0^h10^I\"^e19^*110^.7^,20^K-1^J4\"^e16^*110^.7^,20^K-1^J4\"^e12^*122^.11^,120^K3^J6^7^G-1^m1^o0^m1^p3^m1^n8^m2^o19^m2^p3^m2^n0^m3^o20^m3^p4^m3^n0^m4^o-1^m4^p0^m4^n0^$^8^G-1^m1^o0^m1^p3^m1^n9^m2^o19^m2^p4^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e23^*136^.17^,60^K4^J6\" /><barrel x=\"10^*1820^jbar_orange^A0^B0\" /><barrel x=\"7^*1820^jbar_orange^A0^B0\" /><barrel x=\"4^*1820^jbar_orange^A0^B0^3-120^*211^.95^,150^T0\"^e-120^*198^.80^,170^K5^J6^7^G1^m1^o7^m1^p1^m1^nc27a^>\" /><vehicle x=\"-72^*930^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"^*1820^r1^jveh_crate^A0^B0\" hpp=\"100^4-72^*920^irl^s-1^M0\" /><vehicle x=\"5^*1120^r1^jveh_crate^A0^B0\" hpp=\"100^45^*1130^i^&^#^s0^M0\"^c-180^*207^.233^,370^T0\"^c17^*170^.33^,400^T0\"^c23^*14^.4^,140^T4\"^d13^*360^u0.4^t0\"^d-35^*48^~d-57^*114^~d-3^*78^~d-60^*194^~d32^*142^~d32^*1710^u0.4^t1\" /><inf x=\"48^*230^Zsky^;2\"^e-101^*89^.12^,200^K6^J6^7^G1^m1^o43^m1^pI heard rockets can make you fly, maybe you should try that sometime.^m1^n0^>\"^e-66^*112^.18^,230^K7^J6^7^G1^m1^o43^m1^p0^m1^n0^>\"^e-9^*123^.11^,210^K8^J6^7^G1^m1^o43^m1^pThe distance between walls is larger than usual... Rifle is now your best friend.^m1^n0^>\" />";
         this.CACHED_MAPS["c27a"] = "<q.^f70^!001^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-240^-57^.290^,730^T0\"^c-170^-20^.120^,370^T0\"^c-340^*10^.100^,150^_70^!00^.30^,10^_10^-60^.70^,20^_73^-75^.7^,9^_98^-84^.2^,2^_10^!00^.70^,70^_70^!20^.70^,500^T1^3160^!00^.100^,700^T1^3130^!25^.40^,450^T2\"^c140^!20^.20^,50^T1^+140^!20^.20^,50^g5^3180^-70^.80^,520^T1^3-90^-60^.110^,10^_-80^!20^.100^,50^_-210^!10^.90^,60^_-100^-60^.30^,33^_-150^-60^.30^,33^_-83^!12^.19^,15^_-77^!14^.19^,15^_-71^!16^.19^,15^_-65^!18^.19^,150^T0\" /><inf x=\"70^-970^Zhero1_guns^;0\"^d100^-400^u1^t0^3-280^-40^.120^,26^_-60^-21^.120^,45^_-190^*10^.220^,430^T0^2-149^-42^.10^,180^x^y0^z0^h3^I^2-81^-42^.10^,180^x^y0^z0^h3^I^3-100^!08^.3^,4^_-123^!08^.3^,4^_-180^-78^.10^,10^_-210^-60^.20^,17^_-210^-86^.40^,70^T0^1-207^-861^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-207^-840^iplasmagun^s1^M2^2-120^!08^.20^,40^x^y0^z0^h3^I\"^e-120^-60^.20^,40^K-1^J4\"^e-120^!08^.20^,40^K-1^J4\"^e-130^-93^.10^,170^K0^J6^8^G-1^m1^o0^m1^p2^m1^n1^m2^o19^m2^p0^m2^n0^m3^o20^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-100^-93^.10^,170^K0^J6\"^e-118^-94^.16^,170^K1^J1^7^G-1^m1^o0^m1^p2^m1^n0^m2^o19^m2^p1^m2^n0^m3^o20^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-130^-33^.10^,270^K1^J6\"^e-100^-33^.10^,270^K1^J6\"^e-118^-46^.16^,170^K0^J1^3-142^-29^.3^,13^_-81^-29^.3^,130^T0\"^e-138^-47^.8^,140^K2^J1\"^e-81^-59^.10^,180^K-1^J4\"^e-149^-59^.10^,180^K-1^J4^7^G1^m1^o0^m1^p1^m1^n9^>\"^e-69^-47^.8^,140^K3^J1^7^G1^m1^o0^m1^p0^m1^n10^>^3-149^-29^.3^,13^_-74^-29^.3^,13^_-148^-29^.8^,6^_-80^-29^.8^,60^T0^1-144^-421^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-76^-421^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^1-198^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-198^!080^iplasmagun^s1^M2^1-190^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-181^!101^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-190^!080^iplasmagun^s1^M2^4-181^!080^iplasmagun^s1^M2^1-205^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-205^!080^iplasmagun^s1^M2^1-162^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^1-155^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^1-148^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^4-76^-410^ibfg^s-1^L4-144^-410^ibfg^s1^M2\"^d142^!230^u1^t0^3-174^!07^.8^,70^T0\" /><barrel x=\"-7^!180^jbar_orange^A0^B0\" /><barrel x=\"-2^!180^jbar_orange^A0^B0^3-280^!12^.77^,58^_-240^!06^.14^,14^_-270^-60^.14^,14^_-240^-60^.14^,140^T0\"^d-267^-75^~d-259^-75^~d-237^-75^~d-229^-75^~d-144^-41^~d-76^-41^~d-110^-340^u0.4^t1^3-129^-54^.5^,8^_-96^-54^.5^,8^_-300^-89^.30^,4^_-330^!06^.30^,4^_-330^!30^.60^,40^_-410^-67^.90^,103^_-340^-67^.30^,5^_-290^-58^.20^,50^T0\" /><barrel x=\"-293^-870^jbar_orange^A0^B0\" /><barrel x=\"-289^-870^jbar_orange^A0^B0\" /><barrel x=\"-304^!040^jbar_orange^A0^B0\" /><barrel x=\"-301^!040^jbar_orange^A0^B0^5180^*140^.80^,2100^A-3^B0^Y100^g0^5-90^*170^.120^,1600^A3^B0^Y100^g0\"^d131^-430^u1^t0\"^d160^-600^u1^t0^1-283^-891^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-283^-880^iplasmagun^s1^M2^1-298^-891^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-298^-880^iplasmagun^s1^M2^1-289^-851^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-289^-840^iplasmagun^s1^M2^1-296^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-303^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-314^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-314^!280^iplasmagun^s1^M2^4-303^!280^iplasmagun^s1^M2^4-296^!280^iplasmagun^s1^M2^1-237^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1-232^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-237^!040^iplasmagun^s1^M2^4-232^!040^iplasmagun^s1^M2^1-307^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1-315^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-315^!030^iplasmagun^s1^M2^4-307^!030^iplasmagun^s1^M2^1-279^!121^A0^B0^C500^D500^q1^r1^F11^E-1^k0^l-1^4-279^!090^irailgun^s1^M3^4-279^!100^irailgun^s1^M3^4-275^-880^irailgun^s1^M3^4-232^!030^irailgun^s1^M3^3-272^-85^.4^,8^_-272^-63^.4^,150^T0\"^d-300^-400^u0.4^t1^3-340^*10^.73^,40^_-410^*10^.80^,80^_-250^*10^.94^,560^T0^4150^!240^jitem_grenade^s-1^M0\"^d-200^-95^~d-180^-95^~d-160^-95^~d-140^-95^~d-120^-95^~d-100^-95^~d-80^-95^~c50^-70^.30^,40^_99^-85^.1^,160^T0^4-314^!260^ibfg^s1^M2^3-100^!10^.31^,60^_-125^!12^.31^,58^_-250^-90^.6^,24^_-207^-92^.4^,80^T0^6-256^!120^jantigravity^U-1^O0^P0^5-262^-98^.12^,140^A0^B-1^Y0^g0\" /><barrel x=\"-242^!100^jbar_orange^A0^B0^3-169^-79^.2^,2^_-165^-79^.2^,2^_-161^-79^.2^,2^_-157^-79^.2^,2^_-153^-79^.2^,2^_-152^-67^.7^,7^_-283^!12^.10^,50^T0\"^e-270^*10^.24^,300^K4^J6^7^G1^m1^o7^m1^p1^m1^nc28a^>\"^e-302^-65^.32^,250^K5^J6^7^G1^m1^o43^m1^pWith a rocket, anything is possible... even jumping!^m1^n0^>\" />";
         this.CACHED_MAPS["c28a"] = "<q.^f46^!^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1^3-10^-^.60^,140^_67^-^.83^,1400^T0\" /><inf x=\"46^*20^Zhero1_guns^;0^5-180^-20^.566^,1200^A0^B0^Y0^g1000^330^*23^.50^,7^_33^*30^.7^,12^_90^*3^.40^,8^_-19^*10^.39^,150^_13^*5^.14^,13^_110^*17^.10^,22^_138^*33^.22^,6^_134^*30^.46^,6^_146^*26^.8^,13^_140^-5^.168^,135^_200^*20^.57^,39^_190^*13^.13^,40^T0\" /><inf x=\"40^*40^Zsky^;2^376^*18^.7^,6^_167^*3^.13^,12^_-20^*15^.3^,90^T0\" /><barrel x=\"42^*250^jbar_blue^A0^B0\" /><barrel x=\"45^*250^jbar_blue^A0^B0\" /><barrel x=\"101^*50^jbar_blue^A0^B0\" /><barrel x=\"-5^*120^jbar_blue^A0^B0\" /><barrel x=\"132^*20^jbar_blue^A0^B0\" /><barrel x=\"136^*20^jbar_blue^A0^B0\" /><barrel x=\"164^-30^jbar_blue^A0^B0\" /><barrel x=\"162^*320^jbar_blue^A0^B0\" /><barrel x=\"194^*150^jbar_blue^A0^B0\" /><barrel x=\"197^*150^jbar_blue^A0^B0\" /><barrel x=\"184^-30^jbar_blue^A0^B0^2147^*52^.6^,200^x^y0^z0^h5^I\"^e147^*34^.6^,200^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>\"^e191^*7^.8^,130^K0^J1\"^c45^!0^.27^,1300^T0\"^c30^*18^.53^,280^T0\"^c134^*30^.46^,500^T0\"^c180^*12^.30^,320^T0\"^c30^*23^.50^,50^T0\"^c15^*9^.15^,190^T0\"^c83^*15^.51^,35^_146^*59^.8^,80^T0\"^d-10^*500^u1^t0\"^d-30^*500^u1^t0\"^d10^*500^u1^t0\"^d30^*500^u1^t0\"^d80^*500^u1^t0\"^d100^*500^u1^t0\"^d120^*500^u1^t0\"^d140^*500^u1^t0\"^d180^*500^u1^t0\"^d200^*500^u1^t0\"^d220^*500^u1^t0^170^*229^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^470^*260^irl^s1^M2^154^*229^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^454^*260^irl^s1^M2^136^*299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^436^*330^irailgun^s1^M2^1-14^*99^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-14^*130^igl^s1^M2^1114^*169^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4114^*200^irl^s1^M2^1136^*299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1144^*329^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4136^*330^irl^s1^M2^4144^*360^irl^s1^M2^4136^*320^irailgun^s1^M2^4144^*350^irailgun^s1^M2^1142^!^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1169^*29^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4142^*20^irailgun^s1^M2^4142^*30^irl^s1^M2^4169^*60^irl^s1^M2^4169^*50^irailgun^s1^M2^1169^*299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4169^*330^irl^s1^M2^4169^*320^irailgun^s1^M2^1205^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1215^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1227^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4205^*230^irl^s1^M2^4215^*230^irl^s1^M2^4227^*230^irl^s1^M2^4205^*220^irailgun^s1^M2^4215^*220^irailgun^s1^M2^4227^*220^irailgun^s1^M2\"^c147^*52^.6^,200^T4^3336^-5^.104^,135^_358^*1^.22^,130^T0\"^e360^*30^.81^,440^K1^J6^7^G1^m1^o7^m1^p1^m1^nc29a^>^3254^*16^.28^,80^T0\" /><barrel x=\"288^-30^jbar_blue^A0^B0\" /><barrel x=\"291^-30^jbar_blue^A0^B0^1267^-51^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1279^-51^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4267^-20^irl^s1^M2^4279^-20^irl^s1^M2\" />";
         this.CACHED_MAPS["c29a"] = "<q.^f-156^-201^A0^B0^C100^D100^q1^r1^F3^E-1^k0^l-1\"^c-340^*150^.530^,210^_-210^*60^.352^,40^_-340^-20^.530^,40^_-110^*40^.40^,40^_-340^*60^.170^,60^_-143^*21^.2^,3^_-139^*21^.2^,30^T0\"^d-140^*190^u0.4^t1^3-43^*21^.2^,3^_-39^*21^.2^,30^T0\"^d-40^*190^u0.4^t1^1-196^-201^A0^B0^C1000^D1000^q0^r1^F8^E-1^k1^l9^1-189^-201^A0^B0^C1000^D1000^q0^r1^F8^E-1^k1^l9^5-340^-^.130^,200^A1^B0^Y100^g0^1-182^-201^A0^B0^C1000^D1000^q0^r1^F11^E-1^k1^l9^4-189^!70^i^&^#^s-1^L4-196^!70^i^/2^s-1^L37^*21^.2^,30^T0\"^d10^*190^u0.4^t1^311^*21^.2^,3^_57^*21^.2^,30^T0\"^d60^*190^u0.4^t1^361^*21^.2^,3^_107^*21^.2^,3^_111^*21^.2^,30^T0\"^d110^*190^u0.4^t1^3-50^-5^.30^,2^_^*2^.30^,2^_50^*2^.30^,2^_110^*2^.30^,2^_-52^-5^.3^,5^_-21^-5^.3^,5^_-2^*2^.3^,5^_29^*2^.3^,5^_48^*2^.3^,5^_79^*2^.3^,5^_108^*2^.3^,5^_139^*2^.3^,250^T0^2142^*2^.18^,40^x^y0^z0^h3^I^3160^*60^.90^,1200^T0\"^e109^*17^.15^,160^K0^J6^7^G1^m1^o48^m1^p3^m1^n5^m2^o48^m2^p2^m2^n5^m3^o48^m3^p1^m3^n5^m4^o48^m4^p8^m4^n5^m5^o48^m5^p9^m5^n5^m6^o48^m6^p10^m6^n5^m7^o48^m7^p11^m7^n5^m8^o20^m8^p9^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^2-175^-^.4^,200^x^y0^z0^h3^I^2-209^*19^.4^,200^x^y0^z0^h3^I\"^e-209^-^.4^,200^K-1^J4\"^e-175^*19^.4^,200^K-1^J4^9^G1^X1^W20^7^G1^m1^o0^m1^p2^m1^n1^m2^o0^m2^p1^m2^n2^m3^o19^m3^p9^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-204^-7^.9^,140^K2^J1^7^G1^m1^o0^m1^p3^m1^n4^>^4-189^!80^i^/2^s-1^L4-196^!80^i^&^#^s-1^L2139^*20^.3^,180^x^y0^z0^h50^I\"^e139^*2^.3^,180^K-1^J4\"^e139^*20^.3^,180^K-1^J4\"^e150^*20^.10^,180^K3^J6^7^G1^m1^o0^m1^p3^m1^n5^m2^o0^m2^p0^m2^n7^)^35^!5^.6^,8^_52^!5^.7^,9^_-110^!4^.40^,16^_140^-2^.26^,210^T0\"^e142^*40^.18^,40^K4^J5^7^G1^m1^o25^m1^p1^m1^n0^>^a^G1^X0^W30^1139^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^4139^*630^i^&^#^s-1^L1163^*599^A0^B0^C150^D150^q0^r-1^F8^E-1^k0^l-1^4163^*630^i^&^#^s-1^L3170^*210^.80^,160^_100^*100^.90^,200^T0^177^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^183^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^483^*630^i^&^#^s-1^L477^*630^i^&^#^s-1^L116^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^447^!70^i^/2^s-1^L137^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^147^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^170^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^4-35^-40^jitem_grenade^s-1^L437^!70^i^/2^s-1^L470^!70^i^/2^s-1^M0\"^d90^*830^u0.4^t1^340^*100^.70^,10^_40^*100^.20^,300^T0\" /><vehicle x=\"63^*750^r1^jveh_crate^A0^B0\" hpp=\"100^463^*740^irailgun2^s-1^L358^*73^.8^,3^_120^*70^.10^,21^_-20^*70^.40^,20^_-30^*90^.30^,10^_-10^*84^.20^,4^_30^*90^.16^,7^_-140^*100^.100^,50^_50^*105^.40^,15^_-340^*150^.280^,100^_-140^*150^.120^,30^_-20^*107^.20^,4^_10^*107^.20^,4^_-30^*65^.20^,110^T0^1-19^*899^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-19^*930^irl^s0^L1-3^*899^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-3^*930^irl^s0^L1-24^*649^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-24^*680^irl^s0^L142^*999^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^138^*899^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^438^*930^irailgun^s0^L442^*1030^irailgun^s0^M0\" /><barrel x=\"22^*620^jbar_blue^A0^B0\" /><barrel x=\"25^*620^jbar_blue^A0^B0\" /><barrel x=\"2^*860^jbar_blue^A0^B0^1-44^*999^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-44^*1030^irailgun^s0^L1-53^*999^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-53^*1030^irailgun^s0^L4-53^*1020^irl^s0^M0\"^d5^*96^~d-36^*74^~d41^*1180^u0.4^t1^350^*150^.40^,300^T0^2140^*104^.30^,40^x^y0^z0^h3^I^1150^*1039^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^1161^*1039^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^4150^*1070^irailgun^s0^L4161^*1070^irailgun^s0^L3117^*104^.23^,90^T0\"^e140^*210^.30^,40^K-1^J4\"^e160^*120^.9^,170^K5^J1^7^G-1^m1^o0^m1^p4^m1^n8^>\"^e120^*120^.17^,170^K6^J1^7^G-1^m1^o0^m1^p4^m1^n11^>\"^e140^*104^.30^,40^K-1^J4^3110^*130^.30^,3^_100^*140^.7^,70^T0^1112^*1299^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^1138^*1299^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^4138^*1330^irailgun^s0^L4112^*1330^irailgun^s0^M0\"^d100^*1800^u1^t0\"^d120^*1800^u1^t0\"^d140^*1800^u1^t0\"^d80^*1800^u1^t0\"^d60^*1800^u1^t0\"^d40^*1800^u1^t0\"^d20^*1800^u1^t0\"^d^*1800^u1^t0\"^d-20^*1800^u1^t0\"^d-40^*1800^u1^t0\" /><inf x=\"85^*1650^Zsky^;2\"^d150^*700^u0.4^t1^5-121^*286^.101^,1360^A2^B0^Y100^g0\"^e130^*300^.40^,1300^K7^J6^7^G1^m1^o7^m1^p2^m1^nc30a^>\" /><inf x=\"119^*30^Zhero2_guns^;1^9^G1^X8^W40^7^G1^m1^o42^m1^pHalt! There is an intruder! He must be stopped!^m1^n4^>^8^G1^m1^o42^m1^pI\'m back! Did you miss me?^m1^n3^>\" />";
         this.CACHED_MAPS["c30a"] = "<q.^f-165^-261^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-86^*19^.49^,270^T0\"^c-184^*21^.38^,23^_-150^-^.380^,150^_-185^*26^.5^,560^T0^2-180^-26^.30^,40^x^y0^z0^h3^I\" /><inf x=\"-165^-240^Zhero2_guns^;0^3-182^*22^.37^,60^T0^5-342^-30^.209^,700^A0^B0^Y0^g1000\"^e-176^*14^.22^,150^K0^J1\"^c-149^*16^.3^,160^T4^2-149^*16^.3^,160^x^y0^z0^h10^I\"^e-149^*1^.3^,160^K-1^J4^7^G1^m1^o0^m1^p1^m1^n1^>^1-137^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-137^*30^i^&^#^s-1^L1-125^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-125^*30^i^&^#^s-1^L1-147^*219^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-147^*250^i^&^%^s-1^L3-183^*29^.29^,120^T0\"^d-115^*400^u1^t0\"^d-230^!000^u1^t0\" /><barrel x=\"-152^*240^jbar_blue^A0^B0\" /><inf x=\"-140^*270^Zsky^;2^3-330^-60^.70^,900^T0^9^G1^X1^W0\"^e-180^-^.30^,40^K-1^J4^7^G1^m1^o0^m1^p0^m1^n2^>^3-122^*5^.12^,90^T0^1-85^!^A0^B0^C300^D300^q2^r-1^F6^E-1^k0^l3^4-85^*30^ia^#2^s2^L1-74^*199^A0^B0^C300^D300^q2^r-1^F6^E-1^k0^l3^4-74^*220^irl^s2^M3^1-69^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^1-54^*259^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^4-69^*30^ia^#^s2^L4-54^*290^ia^#^s2^L3-87^*20^.18^,4^_-71^*26^.12^,10^_-63^*26^.27^,5^_-85^*18^.4^,7^_-55^*8^.25^,180^T0^1-40^*259^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^1-41^*79^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4-40^*290^ia^#^s2^L4-41^*110^ia^#^s2^M0\"^c-62^*24^.25^,50^T0\"^d-6^*400^u1^t0\" /><barrel x=\"-133^*20^jbar_blue^A0^B0\" /><barrel x=\"-130^*20^jbar_blue^A0^B0\" /><barrel x=\"-63^*280^jbar_blue^A0^B0\" /><barrel x=\"-108^*20^jbar_blue^A0^B0\" /><barrel x=\"-24^*20^jbar_blue^A0^B0^3-180^*50^.16^,28^_-2^*6^.98^,20^_16^*21^.22^,35^_77^*21^.37^,35^_62^*14^.33^,28^_6^*14^.19^,280^T0^113^*139^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^1-8^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^13^*59^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^4-8^*30^ia^#^s2^L43^*90^ia^#^s2^L413^*170^ia^#^s2^L1101^*209^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4101^*240^ibfg^s2^L1126^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4126^*30^ibfg^s2^L352^*33^.35^,5^_79^*31^.7^,140^T0^161^*329^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^461^*360^ibfg^s2^L176^*329^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^476^*360^ibfg^s2^L9^G1^X0^W120^21^*150^.34^,4^(I^217^*167^.3^,21^(I^2^*167^.3^,21^(I^2^*167^.35^,4^(I^232^*167^.3^,21^(I^110^*1499^A0^B0^C200^D200^q1^r1^F8^E-1^k3^l2^410^*1530^irailgun^s1^L126^*1499^A0^B0^C200^D200^q2^r-1^F2^E-1^k3^l3^426^*1530^ia^#^s2^L7^G20^m1^o28^m1^p17^m1^n-4^>^7^G20^m1^o28^m1^p18^m1^n-3^>\"^e-140^*60^.236^,30^K-1^J4\"^e-145^*50^.259^,30^K-1^J4^331^*14^.12^,140^T0^1-85^*199^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-85^*230^i^&^#^s-1^L1-96^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-96^*30^i^&^#^s-1^L3140^*14^.90^,240^T0\"^e150^*40^.80^,400^K4^J6^7^G1^m1^o7^m1^p2^m1^nc31a^>^9^G1^X5^W30^7^G1^m1^o42^m1^pAliens are attacking our base! Call for reinforcements now!^m1^n4^>^7^G1^m1^o42^m1^pI will die before I surrender to these monsters!^m1^n4^>^7^G1^m1^o42^m1^pWe must stop them! Don\'t stop shooting!^m1^n4^>^9^G1^X6^W100^9^G1^X7^W200^7^G1^m1^o42^m1^pMan, I hate them aliens, they remind me of my wife!^m1^n4^>^7^G1^m1^o42^m1^pHold them off for as long as possible!^m1^n4^>^9^G1^X8^W260^9^G1^X9^W340\" /><inf x=\"-135^*270^Zmeat^;0\" />";
         this.CACHED_MAPS["c31a"] = "<q.^f-56^*599^A3^B6^C100^D100^q0^r1^F3^E-1^k0^l-1\"^e99^*14^.47^,280^K8^J6\"^c134^*30^.306^,1100^T0\"^c46^!0^.14^,330^T0\" /><inf x=\"-56^*620^Zhero2_guns^;0^5-150^*155^.90^,950^A2^B0^Y100^g0^3-150^-40^.90^,14^_-80^-38^.18^,9^_-80^!3^.18^,90^T0^2-70^-22^.6^,16^(I^2-78^-22^.6^,16^(I^3-70^-43^.20^,7^_-20^-43^.40^,7^_40^-43^.30^,7^_-70^-70^.217^,400^T0^+-60^-50^.190^,200^g0^+-50^-46^.30^,40^g0^+20^-46^.20^,40^g0\"^c-150^!0^.90^,400^T0\"^c-70^-44^.210^,360^T0\"^d-40^-0^u1^t0\"^d-20^-0^u1^t0\"^d^-0^u1^t0\"^d20^-0^u1^t0\"^d40^*100^u1^t0\"^d60^*200^u1^t0^1-12^-431^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l4^4-12^-400^irailgun2^s1^M3^1-7^-431^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l4^4-7^-400^irailgun2^s1^M3^143^-431^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l4^151^-411^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l4^443^-400^irailgun^s1^M3^452^-380^irailgun^s1^M3^360^!0^.20^,440^T0^246^-40^.14^,3^(I^3-150^*60^.90^,800^T0\"^c57^!1^.1^,310^T4\"^c48^!1^.1^,310^T4^370^!0^.50^,10^_130^-58^.15^,32^_100^-44^.40^,60^T0\"^d102^-24^~c74^!4^.70^,300^T0\"^c120^!0^.20^,100^T0\"^d80^*300^u1^t0\"^d100^*300^u1^t0\"^d120^*300^u1^t0^3-150^-58^.90^,52^_-150^-47^.80^,200^T0^+-70^-54^.10^,40^g0^2-70^-54^.20^,40^x^y0^z0^h3^I^3130^-46^.15^,8^_140^!0^.10^,700^T0^+130^-54^.10^,40^g0\"^e-70^-54^.20^,40^K0^J5^7^G-1^m1^o0^m1^p3^m1^n2^>^7^G-1^m1^o0^m1^p3^m1^n1^>\"^e120^-54^.20^,40^K1^J5^9^G1^X0^W100\"^c-69^-55^.208^,20^T4^4-57^-530^jitem_grenade^s-1^L4-53^-530^jitem_grenade^s-1^L4138^-570^jitem_grenade^s-1^L4134^-570^jitem_grenade^s-1^L7^G0^m1^o-1^m1^p0^m1^n0^>\"^e101^-28^.15^,170^K2^J1^389^-5^.21^,9^_95^*4^.8^,12^_144^-71^.216^,390^T0\"^e-18^*60^.153^,20^K-1^J4^2-167^*39^.24^,8^(I^2-169^*54^.7^,18^(I^2-167^*54^.19^,5^(I^1-155^*389^A0^B0^C200^D200^q1^r-1^F8^E-1^k3^l-1^4-155^*420^irailgun2^s1^M3^a^G10^X3^W10^7^G10^m1^o28^m1^p5^m1^n-3^>^7^G1^m1^o25^m1^p1^m1^n0^>^3156^!6^.14^,64^_176^-22^.14^,58^_196^-30^.14^,50^_216^-22^.14^,58^_156^*33^.14^,33^_176^*33^.14^,18^_196^*33^.14^,24^_216^*33^.14^,27^_134^*33^.16^,23^_236^-31^.14^,49^_256^-25^.14^,55^_276^-22^.14^,58^_256^!0^.14^,5^_236^*33^.14^,33^_276^*33^.14^,23^_296^!6^.14^,64^_296^*33^.14^,33^_316^*33^.14^,33^_334^*33^.106^,39^_316^!0^.14^,70^_334^!6^.106^,940^T0\"^d153^*310^u0.6^t0\"^d174^*310^u0.6^t0\"^d193^*310^u0.6^t0\"^d213^*310^u0.6^t0\"^d233^*310^u0.6^t0\"^d253^*310^u0.6^t0\"^d273^*310^u0.6^t0\"^d293^*310^u0.6^t0\"^d313^*310^u0.6^t0\"^d332^*310^u0.6^t0^3256^*33^.14^,32^_196^-8^.14^,12^_276^-3^.14^,7^_236^!6^.14^,5^_176^*8^.14^,80^T0\" /><barrel x=\"199^-60^jbar_blue^A0^B0\" /><barrel x=\"203^-60^jbar_blue^A0^B0\" /><barrel x=\"180^*100^jbar_blue^A0^B0\" /><barrel x=\"205^-280^jbar_blue^A0^B0\" /><barrel x=\"208^-280^jbar_blue^A0^B0\" /><barrel x=\"178^-200^jbar_blue^A0^B0\" /><barrel x=\"246^-290^jbar_blue^A0^B0\" /><barrel x=\"246^!40^jbar_blue^A0^B0\" /><barrel x=\"249^!40^jbar_blue^A0^B0\" /><barrel x=\"258^-230^jbar_blue^A0^B0\" /><barrel x=\"228^-200^jbar_blue^A0^B0\" /><barrel x=\"268^-80^jbar_blue^A0^B0\" /><barrel x=\"282^!0^jbar_blue^A0^B0\" /><barrel x=\"285^!0^jbar_blue^A0^B0\" /><barrel x=\"278^-200^jbar_blue^A0^B0\" /><barrel x=\"281^-200^jbar_blue^A0^B0\" /><barrel x=\"308^!40^jbar_blue^A0^B0\" /><barrel x=\"335^!40^jbar_blue^A0^B0\" /><barrel x=\"338^!40^jbar_blue^A0^B0\" /><barrel x=\"304^!40^jbar_blue^A0^B0^1188^*79^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4188^*100^irl^s1^M3^1207^-81^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1188^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1221^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1258^!01^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1278^-31^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1322^!01^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1285^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1344^!61^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4207^-50^irl^s1^M3^4188^!90^irl^s1^M3^4221^!90^irl^s1^M3^4258^-70^irl^s1^M3^4278^-0^irl^s1^M3^4285^!90^irl^s1^M3^4322^-70^irl^s1^M3^4344^!30^irl^s1^M3^5150^-68^.200^,30^A0^B0^Y0^g1000^5136^*30^.214^,100^A0^B0^Y100^g0^1262^-251^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4262^-220^irl^s1^M3^1238^-311^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4238^-280^irl^s1^M3^1238^!61^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4238^!30^irl^s1^M3\"^e360^-^.80^,210^K5^J6^7^G1^m1^o7^m1^p2^m1^nc32a^>\" /><inf x=\"-51^*480^Zsky^;2\"^e-59^*30^.25^,240^K6^J4^7^G1^m1^o43^m1^pPsst, hide...^m1^n0^>\"^e116^-24^.24^,210^K7^J6^7^G-1^m1^o43^m1^pYou really should think about that grenade jump!^m1^n0^>^7^G-1^m1^o43^m1^p0^m1^n0^>^3136^-20^.13^,2^_112^-20^.12^,2^_112^!8^.8^,4^_139^-32^.10^,15^_137^-24^.12^,2^_138^-28^.11^,2^_128^!1^.4^,20^T0\" />";
         this.CACHED_MAPS["c32a"] = "<q.^f-120^*199^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c60^*160^.30^,480^T0^7^G-1^m1^o43^m1^pStand against a wall and look at the place where your feet collides with fall, jump and start firing plasma!^m1^n0^>\"^c-210^*112^.336^,113^_-210^*20^.120^,50^_-210^*60^.120^,30^_-100^*10^.60^,40^_-50^*20^.20^,50^_-36^*17^.68^,47^_-100^*38^.20^,40^T0\" /><inf x=\"-120^*230^Zhero2_guns_nonades^;0^1-87^*99^A0^B0^C200^D200^q1^r1^F7^E-1^k0^l-1^1196^*489^A0^B0^C200^D200^q2^r-1^F2^E-1^k3^l-1^4196^*510^ia^#^s2^M3^1-78^*99^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-59^*99^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^4-87^*130^i^&^%^s1^M3^3-15^*38^.39^,5^_-66^*34^.9^,10^_-71^*35^.35^,40^T0^1-61^*349^A0^B0^C200^D200^q1^r1^F7^E-1^k3^l-1^1-85^*379^A0^B0^C200^D200^q1^r1^F7^E-1^k3^l-1^4-85^*410^iplasmagun^s1^M3^4-61^*380^iplasmagun^s1^M3^1185^*489^A0^B0^C300^D300^q2^r-1^F6^E-1^k3^l3^4185^*510^ia^#2^s2^M3^3-72^*38^.4^,4^_-97^*56^.24^,6^_-45^*56^.35^,6^_-64^*56^.12^,40^T0^2171^*66^.8^,21^(I^2167^*49^.43^,5^(I^2200^*66^.13^,25^(I^2168^*72^.40^,13^(I^320^*38^.106^,68^_58^*70^.68^,45^_58^*112^.68^,28^_78^*170^.48^,113^_7^*66^.35^,6^_8^*85^.29^,5^_-41^*86^.32^,6^_-77^*72^.35^,4^_-50^*86^.10^,18^_5^*66^.3^,9^_-11^*59^.3^,9^_-210^*99^.90^,460^T0^2-133^*30^.6^,10^(I^3-290^*124^.110^,154^_-124^*99^.38^,9^_11^*46^.29^,120^T0\"^d70^*1700^u0.4^t0\"^d50^*1600^u0.4^t0\"^d30^*1500^u0.4^t0\"^d10^*1400^u0.4^t0\"^d-10^*1300^u0.4^t0\"^d-30^*1300^u0.4^t0\"^d-50^*1300^u0.4^t0\"^d-70^*1300^u0.4^t0\"^d-90^*1300^u0.4^t0\"^d-110^*1400^u0.4^t0\"^d-130^*1500^u0.4^t0\" /><inf x=\"-51^*1410^Zsky^;2^3-92^*93^.9^,80^T0\"^d-75^*44^~d-25^*43^~d-25^*72^~d-103^*76^~d68^*78^~e-90^*116^.150^,20^K-1^J4\"^e-90^*118^.150^,20^K-1^J4\"^e-116^*32^.24^,140^K1^J6^7^G1^m1^o25^m1^p0^m1^n0^>^a^G10^X2^W60^7^G10^m1^o28^m1^p7^m1^n-1^m2^o28^m2^p2^m2^n-1^m3^o28^m3^p2^m3^n-1^m4^o-1^m4^p0^m4^n0^$^7^G-1^m1^o25^m1^p0^m1^n0^>^649^*380^jantigravity^U-1^O0^P0^543^*66^.13^,280^A0^B-1^Y0^g0^6-84^*560^jantigravity^U-1^O0^P0^5-90^*72^.12^,160^A0^B-1^Y0^g0^333^*98^.9^,180^T0^2-70^*36^.3^,4^(H^2-210^*40^.83^,30^(H^560^*274^.67^,1090^A-2^B0^Y100^g0^4-105^*210^iplasmagun^s0^M3^3-154^*138^.7^,18^_-290^*180^.143^,340^T0\"^c-290^*149^.140^,290^T0\"^d-182^*1440^u0.4^t1\" /><vehicle x=\"-140^*1150^r1^jveh_crate^A0^B0\" hpp=\"100^3-147^*113^.2^,2^_-142^*113^.5^,17^_-134^*113^.2^,20^T0^4-140^*1140^iplasmagun^s0^M3\" /><inf x=\"-194^*1270^Zhero2_guns_nades^;0^3-198^*127^.8^,50^T0\"^e-188^*146^.38^,220^K4^J6\"^e-181^*123^.28^,20^K-1^J4^2-208^*123^.28^,20^x^y0^z0^h20^I^7^G-1^m1^o0^m1^p7^m1^n4^m2^o19^m2^p4^m2^n0^m3^o20^m3^p5^m3^n0^m4^o43^m4^p0^m4^n0^$\"^e-208^*123^.28^,20^K-1^J4\"^e-180^*114^.27^,160^K5^J6^8^G-1^m1^o0^m1^p7^m1^n5^m2^o19^m2^p5^m2^n0^m3^o20^m3^p4^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-290^*149^.80^,290^K6^J6^7^G1^m1^o7^m1^p2^m1^nc33a^>\"^e-182^*110^.41^,130^K0^J6^3-150^*138^.5^,30^T0^7^G-1^m1^o0^m1^p8^m1^n10^>\"^c-145^*137^.205^,10^T4^360^*138^.10^,3^_70^*125^.11^,30^T0\"^e-145^*138^.5^,30^K-1^J4\"^e55^*138^.5^,30^K-1^J4\"^e67^*124^.14^,140^K7^J1^2-110^*138^.5^,30^x^y0^z0^h6^I^7^G-1^m1^o0^m1^p8^m1^n9^>^360^*165^.30^,70^T0\"^e58^*151^.14^,140^K8^J1^2-272^*200^.6^,23^(H^2-288^*200^.6^,23^(H^2-288^*200^.22^,6^(H^1-277^*1799^A0^B0^C350^D350^q2^r1^F2^E-1^k9^l-1^4-277^*1830^irailgun2^s2^M3\"^e-70^*152^.10^,210^K9^J6^7^G1^m1^o14^m1^p8^m1^n14^>\"^e-142^*124^.4^,70^K-1^J4\" /><inf x=\"-110^*630^Zmeat^;0\" />";
         this.CACHED_MAPS["c33a"] = "<q.^f104^*479^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-150^*80^.270^,110^_93^*41^.97^,41^_79^*32^.25^,3^_48^*41^.26^,4^_36^*39^.22^,9^_76^*29^.8^,4^_36^*14^.154^,84^_32^*17^.28^,5^_-75^*17^.81^,5^_-71^*14^.71^,64^_-119^!2^.179^,58^_14^*39^.9^,6^_7^*37^.12^,4^_-9^*52^.8^,12^_-9^*21^.11^,6^_-65^*56^.59^,9^_-70^*52^.8^,12^_-50^*50^.29^,5^_-50^*34^.29^,4^_-70^*21^.10^,6^_-45^*32^.19^,17^_25^*55^.11^,3^_34^*58^.4^,8^_-71^*140^.161^,70^_110^*140^.80^,1100^T0\"^c80^*140^.40^,600^T0\" /><inf x=\"104^*500^Zhero2_guns^;0^3-26^*37^.4^,5^_-210^*40^.115^,110^_-150^*140^.55^,800^T0\"^c-110^*140^.50^,600^T0\" /><vehicle x=\"90^*350^r1^jveh_crate^A0^B0\" hpp=\"100\"^d66^*32^~d-17^*39^~d-54^*39^~d-108^*500^u0.4^t1^3-210^*140^.80^,140^_10^*75^.10^,15^_50^*77^.19^,150^T0^640^*300^jray_ceil^U-1^O0^P0^640^*170^jray_floor^U-1^O0^P0\"^d40^*180^u0.4^t0\"^d40^*290^u0.4^t0^539^*30^.2^,130^A0^B0^Y0^g-100^192^*209^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^192^*129^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^492^*170^irl^s1^M3^119^*389^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^131^*549^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-12^*559^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-23^*559^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^492^*240^irl^s1^M3^419^*420^irl^s1^M3^431^*580^irl^s1^M3^4-12^*590^irl^s1^M3^4-23^*590^irl^s1^M3^57^*12^.24^,240^A0^B-1^Y0^g0^613^!20^jantigravity^U-1^O0^P0^625^!20^jantigravity^U-1^O0^P0^3-26^*47^.4^,70^T0^1-29^*339^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-29^*370^irl^s1^M3^1-40^*339^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-22^*169^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-40^*370^irl^s1^M3^4-22^*200^irl^s1^M3\" /><vehicle x=\"84^*350^r1^jveh_crate^A0^B0\" hpp=\"100^492^*160^irailgun^s1^M3^492^*230^irailgun^s1^M3^431^*570^irailgun^s1^M3^419^*410^irailgun^s1^M3^4-22^*190^irailgun^s1^M3^4-29^*360^irailgun^s1^M3^4-40^*360^irailgun^s1^M3^4-23^*580^irailgun^s1^M3^4-12^*580^irailgun^s1^M3^379^*32^.5^,70^T0^492^*250^iplasmagun^s1^M3^492^*180^iplasmagun^s1^M3^419^*430^iplasmagun^s1^M3^431^*590^iplasmagun^s1^M3^4-22^*210^iplasmagun^s1^M3^4-12^*600^iplasmagun^s1^M3^4-23^*600^iplasmagun^s1^M3^4-29^*380^iplasmagun^s1^M3^4-40^*380^iplasmagun^s1^M3\"^d3^*67^~d36^*680^u0.4^t1^358^*77^.22^,200^T0\"^e18^*1^.16^,140^K0^J1^2-32^*71^.5^,160^x^y0^z0^h5^I\"^e-32^*85^.5^,160^K-1^J4^7^G1^m1^o0^m1^p0^m1^n1^>^590^*140^.20^,600^A0^B2^Y100^g0^+-95^*10^.24^,220^g0^3-103^*30^.13^,50^T0^6-82^!20^jantigravity0^U-1^O0^P0\"^e-59^*29^.13^,130^K1^J1^7^G1^m1^o34^m1^p4^m1^nantigravity^m2^o36^m2^p3^m2^n-1^)^5-90^*140^.15^,1520^A0^B0^Y0^g0^2-89^!1^.13^,3^(H^2-97^*86^.26^,60^x^y0^z0^h10^I\"^e-71^*86^.26^,60^K-1^J4^7^G1^m1^o0^m1^p2^m1^n3^>\"^e-64^*66^.10^,110^K2^J1^1-115^*399^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-115^*430^irailgun2^s1^M3^4-115^*450^igl^s1^M3^1-82^*59^A0^B0^C0^D0^q1^r1^F2^E-1^k0^l-1\" /><barrel x=\"-85^!00^jbar_blue^A0^B0\" /><barrel x=\"-87^!00^jbar_blue^A0^B0\"^e-110^*140^.52^,400^K3^J6^7^G1^m1^o7^m1^p2^m1^nc34a^>\" />";
         this.CACHED_MAPS["c34a"] = "<q.^f60^-341^A0^B-10^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-138^*90^.344^,140^_-21^-^.71^,90^_70^-^.180^,90^_20^*4^.20^,14^_85^*4^.15^,14^_20^*34^.20^,14^_80^*34^.20^,14^_10^*40^.47^,16^_63^*40^.47^,16^_50^*45^.20^,130^T0\"^d41^*230^u0.4^t1^553^-7^.14^,830^A0^B-1^Y0^g0\" /><inf x=\"60^-320^Zhero2_guns^;0\"^d41^*1^~d79^*1^~d79^*23^~d60^*31^~e45^*17^.30^,150^K0^J6^7^G1^m1^o0^m1^p0^m1^n1^>^270^!^.20^,60^x^y0^z0^h10^I\"^e50^!^.20^,60^K-1^J4^164^-591^A0^B-10^C0^D0^q1^r1^F2^E-1^k0^l-1^3170^*46^.80^,86^_-200^-30^.200^,60^_-200^-^.120^,50^_-200^*40^.90^,450^T0^+-80^!0^.59^,200^g1000^3-30^*40^.20^,16^_-79^*35^.95^,9^_-98^*32^.23^,4^_-135^*110^.85^,50^_-60^*110^.140^,40^_-200^*110^.80^,800^T0^6-104^-0^jantigravity0^U-1^O0^P0^2-110^*1^.11^,1^(H^6-60^-300^jantigravity0^U-1^O0^P0^6-40^-300^jantigravity0^U-1^O0^P0\"^e-47^*10^.14^,200^K1^J1\"^e-67^*10^.14^,200^K2^J1^5-70^*6^.20^,360^A0^B0^Y0^g0^5-50^*6^.20^,360^A0^B0^Y0^g0^7^G1^m1^o36^m1^p2^m1^n-1^m2^o34^m2^p2^m2^nantigravity^m3^o36^m3^p4^m3^n-1^m4^o-1^m4^p0^m4^n0^$^7^G1^m1^o36^m1^p1^m1^n-1^m2^o34^m2^p1^m2^nantigravity^m3^o36^m3^p3^m3^n-1^m4^o-1^m4^p0^m4^n0^$^5-70^-^.20^,300^A0^B0^Y0^g0^5-50^-^.20^,300^A0^B0^Y0^g0\"^d-60^-0^u0.2^t0\"^d-40^-0^u0.2^t0^3-110^*50^.12^,60^T0\" /><barrel x=\"-97^*20^jbar_red^A0^B0\"^e-110^*13^.11^,140^K3^J1^5-110^*34^.11^,330^A0^B0^Y0^g0^7^G1^m1^o36^m1^p5^m1^n-1^m2^o34^m2^p0^m2^nantigravity^)\" /><barrel x=\"-87^*20^jbar_red^A0^B0\" /><barrel x=\"-109^*30^jbar_red^A0^B0\" /><barrel x=\"-106^*30^jbar_red^A0^B0\" /><barrel x=\"-103^*30^jbar_red^A0^B0\" /><barrel x=\"-57^-280^jbar_red^A0^B0\" /><barrel x=\"-54^-280^jbar_red^A0^B0\" /><barrel x=\"-45^-280^jbar_red^A0^B0\" /><barrel x=\"-36^-280^jbar_red^A0^B0^227^*21^.6^,180^x^y0^z0^h10^I\"^e27^*37^.6^,180^K-1^J4^7^G1^m1^o0^m1^p2^m1^n5^>\"^e159^*19^.10^,200^K4^J1^2108^*30^.63^,50^x^y0^z0^h60^I\" /><barrel x=\"112^*320^jbar_red^A0^B0\" /><barrel x=\"119^*320^jbar_red^A0^B0\" /><barrel x=\"131^*320^jbar_red^A0^B0\" /><barrel x=\"127^*320^jbar_red^A0^B0\" /><barrel x=\"141^*320^jbar_red^A0^B0\" /><barrel x=\"146^*320^jbar_red^A0^B0\" /><barrel x=\"148^*320^jbar_red^A0^B0\" /><barrel x=\"144^*320^jbar_red^A0^B0\" /><barrel x=\"134^*320^jbar_red^A0^B0\" /><barrel x=\"123^*320^jbar_red^A0^B0\" /><barrel x=\"116^*320^jbar_red^A0^B0\" /><barrel x=\"114^*320^jbar_red^A0^B0\" /><barrel x=\"138^*320^jbar_red^A0^B0\" /><barrel x=\"136^*320^jbar_red^A0^B0\" /><barrel x=\"151^*320^jbar_red^A0^B0\"^e108^*29^.63^,50^K7^J5\"^e130^*27^.20^,280^K5^J6^7^G1^m1^o0^m1^p3^m1^n7^>^391^*46^.96^,110^T0\"^d-40^*67^~d80^*410^u0.4^t1^375^*110^.175^,460^T0\"^c33^-50^.52^,40^_80^*10^.10^,200^T0^6120^-0^jantigravity0^U-1^O0^P0^6150^-0^jantigravity0^U-1^O0^P0^6135^-0^jantigravity0^U-1^O0^P0^2114^*1^.12^,3^(H^2129^*1^.12^,3^(H^2144^*1^.12^,3^(H\"^c206^*80^.44^,500^T0\"^e120^*71^.130^,310^K6^J6^7^G1^m1^o7^m1^p2^m1^nc35a^>^5162^*36^.9^,70^A-1^B0^Y0^g0^5164^*37^.8^,80^A-4^B0^Y0^g0^5166^*38^.7^,90^A-10^B0^Y0^g0\" /><barrel x=\"-3^*370^jbar_red^A0^B0\" /><barrel x=\"1^*370^jbar_red^A0^B0\" /><barrel x=\"7^*370^jbar_red^A0^B0\" /><barrel x=\"3^*370^jbar_red^A0^B0\" /><barrel x=\"90^*420^jbar_red^A0^B0\" /><barrel x=\"88^*420^jbar_red^A0^B0\" /><barrel x=\"86^*420^jbar_red^A0^B0\" /><barrel x=\"83^*420^jbar_red^A0^B0\" /><barrel x=\"-112^*420^jbar_red^A0^B0\" /><barrel x=\"-114^*420^jbar_red^A0^B0\" /><barrel x=\"154^*320^jbar_red^A0^B0\" /><barrel x=\"158^*320^jbar_red^A0^B0\" /><barrel x=\"160^*320^jbar_red^A0^B0\"^e169^*29^.63^,50^K-1^J5^7^G1^m1^o0^m1^p3^m1^n10^m2^o36^m2^p9^m2^n0.1^)^5109^*36^.53^,50^A0^B0^Y0^g0\" />";
         this.CACHED_MAPS["c35a"] = "<q.^f-67^*499^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-180^*90^.340^,113^_-180^*50^.130^,40^_-180^*113^.130^,43^_-55^*150^.112^,77^_50^*50^.100^,40^_50^*150^.80^,80^_-180^!0^.330^,40^_100^*50^.140^,100^_-180^*20^.80^,400^T0\" /><inf x=\"-67^*540^Zhero2_guns^;0\"^d-30^*30^~d30^*300^u0.4^t1^3-33^*33^.2^,2^_-29^*33^.2^,2^_-29^*29^.2^,2^_-33^*29^.2^,2^_31^*33^.2^,2^_27^*33^.2^,2^_27^*29^.2^,2^_31^*29^.2^,2^_-60^-4^.5^,8^_-110^-6^.30^,14^_55^-4^.5^,8^_80^-6^.30^,14^_-20^-6^.40^,9^_-30^-8^.60^,70^T0\"^d-49^*300^u0.05^t0\"^d49^*300^u0.05^t0\"^d30^-70^u0.02^t0\"^d-30^-70^u0.02^t0\"^d-30^*720^u0.02^t0\"^d30^*720^u0.02^t0^3-80^*20^.10^,15^_70^*20^.10^,15^_-13^*13^.2^,3^_11^*13^.2^,3^_2^*14^.10^,2^_-12^*14^.10^,2^_-3^*13^.6^,20^T0\"^d10^*11^~d-10^*11^~d-4^*11^~d4^*110^u0.4^t1^3-2^*12^.4^,2^_-10^*80^.20^,200^T0^670^*700^jray_ceil^U-1^O0^P0^670^*500^jray_floor^U-1^O0^P0\"^d70^*690^u0.2^t0\"^d70^*510^u0.2^t0^7^G1^m1^o38^m1^p0^m1^n0^m2^o34^m2^p1^m2^nnull^m3^o34^m3^p0^m3^nnull^m4^o25^m4^p0^m4^n0^$^568^*68^.4^,160^A0^B0^Y0^g-50000\"^e-95^*7^.12^,140^K0^J1\"^e^*43^.49^,20^K-1^J4^2-79^*129^.10^,17^(I^2-75^*130^.26^,5^(I^1-62^*1129^A0^B0^C400^D400^q1^r-1^F7^E-1^k3^l1^7^G20^m1^o28^m1^p1^m1^n-1^>^a^G5^X1^W15^4-62^*1150^iraygun^s1^M2\" /><vehicle x=\"117^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"129^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"135^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-1^*150^jbar_red^A0^B0\" /><barrel x=\"1^*150^jbar_red^A0^B0\" /><barrel x=\"53^-80^jbar_red^A0^B0\" /><barrel x=\"62^-80^jbar_red^A0^B0\" /><barrel x=\"65^-80^jbar_red^A0^B0\" /><barrel x=\"-53^-80^jbar_red^A0^B0\" /><barrel x=\"-62^-80^jbar_red^A0^B0\" /><barrel x=\"-65^-80^jbar_red^A0^B0\" /><barrel x=\"-78^-80^jbar_red^A0^B0\" /><barrel x=\"-98^-40^jbar_red^A0^B0\" /><barrel x=\"78^-80^jbar_red^A0^B0\" /><barrel x=\"98^-40^jbar_red^A0^B0^3150^*150^.90^,120^_128^*150^.5^,900^T0^5-180^*80^.110^,410^A10^B0^Y-100^g0\"^c120^*150^.40^,600^T0\"^e119^*150^.44^,400^K2^J6^7^G1^m1^o7^m1^p2^m1^nc36a^>\"^e-19^*8^.38^,170^K3^J6^7^G-1^m1^o43^m1^pYou know, swords can make you jump higher.^m1^n0^>\"^e-40^*27^.11^,420^K4^J6\"^e-37^*37^.72^,130^K4^J6\"^e29^*28^.14^,440^K4^J6^7^G-1^m1^o43^m1^p0^m1^n0^>^3-4^*1^.7^,11^_-30^*10^.4^,4^_26^*10^.4^,40^T0\" /><inf x=\"-21^*170^Zmeat^;0\" />";
         this.CACHED_MAPS["c36a"] = "<q.^f-71^*899^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l8\"^c-160^*150^.750^,130^_-100^*90^.78^,70^_-160^*150^.70^,130^_-100^*150^.70^,40^_-32^*94^.23^,74^_-14^*88^.30^,68^_60^*90^.36^,11^_-6^*77^.42^,14^_5^*69^.48^,49^_-40^*150^.138^,30^_30^*124^.17^,24^_-7^*144^.17^,34^_70^*144^.17^,34^_70^*96^.18^,11^_44^*61^.268^,41^_72^*83^.18^,11^_99^*66^.18^,11^_150^*66^.18^,11^_130^*94^.13^,4^_180^*94^.13^,4^_190^*78^.37^,220^T0^1-60^*899^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l8\" /><inf x=\"-71^*930^Zhero1_guns^;-1\" /><inf x=\"-60^*930^Zhero2_guns^;-1^3150^*84^.12^,4^_165^*112^.5^,29^_120^*130^.61^,20^_180^*70^.18^,14^_270^*78^.37^,50^T0^2237^*77^.2^,2^(I^2242^*77^.2^,2^(I^2247^*77^.2^,2^(I^2252^*77^.2^,2^(I^2257^*77^.2^,2^(I^3223^*75^.7^,19^_267^*75^.7^,19^_210^*104^.25^,4^_213^*110^.12^,8^_257^*150^.54^,40^_250^*150^.12^,55^_253^*99^.15^,7^_200^*150^.70^,30^_92^*90^.13^,4^_306^*65^.4^,8^_306^*75^.4^,5^_290^*65^.4^,8^_290^*75^.4^,5^_308^*63^.44^,43^_300^*100^.13^,4^_330^*94^.13^,3^_330^*82^.13^,2^_329^*85^.4^,4^_329^*93^.4^,4^_340^*85^.4^,4^_340^*93^.4^,4^_370^*83^.13^,3^_369^*82^.4^,4^_380^*82^.4^,4^_380^*74^.4^,4^_369^*74^.4^,4^_370^*71^.2^,2^_340^*55^.67^,35^_397^*63^.123^,43^_381^*71^.2^,2^_375^*71^.3^,2^_410^*72^.20^,5^_414^*81^.20^,5^_418^*90^.20^,5^_422^*99^.20^,5^_426^*108^.20^,5^_444^*108^.16^,51^_458^*108^.20^,5^_462^*99^.20^,5^_466^*90^.20^,5^_391^*110^.13^,4^_374^*98^.13^,4^_444^*150^.21^,30^_440^*150^.29^,20^_291^*121^.89^,10^_348^*150^.41^,170^T0\"^d-18^*116^~d59^*114^~d109^*115^~d187^*1060^u0.4^t1^3510^*150^.110^,70^_540^*90^.80^,70^_512^*83^.8^,70^T0^2520^*63^.20^,5^(I^3470^*81^.20^,50^T0\"^d336^*87^~d376^*76^~d283^*106^~d359^*105^~d339^*1600^u0.2^t0\"^d430^*1600^u0.2^t0\"^d500^*1600^u0.2^t0\"^d189^*1600^u0.2^t0\"^d111^*1600^u0.2^t0\"^d415^*1600^u0.2^t0\"^d399^*1600^u0.2^t0\"^d489^*1600^u0.2^t0\"^d479^*1600^u0.2^t0\"^d323^*1600^u0.2^t0\"^d174^*1600^u0.2^t0\"^d145^*1600^u0.2^t0\"^d128^*1600^u0.2^t0\"^d161^*1600^u0.2^t0\"^d530^*750^u0.4^t1^1336^*819^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1376^*709^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1415^*809^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1420^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1424^*989^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1412^*719^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1363^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1382^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1391^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1376^*979^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1377^*829^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1385^*979^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1311^*999^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1265^*989^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1242^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1250^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1258^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1229^*749^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1234^*1039^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1212^*1039^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1184^*939^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1189^*939^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1171^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1177^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1186^*699^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1158^*839^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1130^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1142^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1102^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^170^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^143^*689^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^133^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^124^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^165^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^184^*959^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^424^*820^ia^#^s1^M3^433^*820^ia^#^s1^M3^443^*740^ia^#^s1^M3^470^*660^ia^#^s1^M3^465^*950^ia^#^s1^M3^484^*1010^ia^#^s1^M3^4102^*950^ia^#^s1^M3^4130^*660^ia^#^s1^M3^4142^*660^ia^#^s1^M3^4158^*890^ia^#^s1^M3^4171^*660^ia^#^s1^M3^4177^*660^ia^#^s1^M3^4186^*750^ia^#^s1^M3^4184^*990^ia^#^s1^M3^4189^*990^ia^#^s1^M3^4212^*1090^ia^#^s1^M3^4234^*1090^ia^#^s1^M3^4229^*800^ia^#^s1^M3^4258^*820^ia^#^s1^M3^4250^*660^ia^#^s1^M3^4242^*660^ia^#^s1^M3^4265^*1040^ia^#^s1^M3^4311^*1050^ia^#^s1^M3^1285^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^4285^*640^ia^#^s1^M3^4336^*850^ia^#^s1^M3^4363^*600^ia^#^s1^M3^4382^*600^ia^#^s1^M3^4391^*600^ia^#^s1^M3^4376^*740^ia^#^s1^M3^4377^*880^ia^#^s1^M3^4376^*1030^ia^#^s1^M3^4385^*1030^ia^#^s1^M3^4412^*770^ia^#^s1^M3^4415^*860^ia^#^s1^M3^4420^*950^ia^#^s1^M3^4424^*1040^ia^#^s1^M3^1471^*1079^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^4471^*1130^ia^#^s1^M3\" /><inf x=\"-62^*1020^Zstrict_casual^;0^4-53^*910^idefibrillator^s-1^L4-51^*910^idefibrillator^s-1^M0\" /><barrel x=\"59^*630^jbar_blue^A0^B0\" /><barrel x=\"64^*630^jbar_blue^A0^B0\" /><barrel x=\"47^*710^jbar_blue^A0^B0\" /><barrel x=\"90^*920^jbar_blue^A0^B0\" /><barrel x=\"96^*920^jbar_blue^A0^B0\" /><barrel x=\"125^*630^jbar_blue^A0^B0\" /><barrel x=\"134^*630^jbar_blue^A0^B0\" /><barrel x=\"194^*800^jbar_blue^A0^B0\" /><barrel x=\"202^*800^jbar_blue^A0^B0\" /><barrel x=\"227^*1060^jbar_blue^A0^B0\" /><barrel x=\"334^*960^jbar_blue^A0^B0\" /><barrel x=\"330^*650^jbar_blue^A0^B0\" /><barrel x=\"334^*650^jbar_blue^A0^B0\" /><barrel x=\"395^*570^jbar_blue^A0^B0\" /><barrel x=\"367^*570^jbar_blue^A0^B0\" /><barrel x=\"358^*570^jbar_blue^A0^B0^1-3^*879^A0^B0^C350^D350^q2^r1^F8^E-1^k0^l-1^19^*879^A0^B0^C350^D350^q2^r1^F8^E-1^k0^l-1^49^*910^irailgun^s-1^L4-3^*910^irl^s-1^M0\"^e510^*78^.32^,170^K0^J7^7^G1^m1^o7^m1^p1^m1^nc37a^>^5-160^*232^.258^,820^A3^B0^Y100^g0^5510^*232^.110^,820^A-3^B0^Y100^g0^4242^*620^irailgun2^s1^M3^4285^*620^irailgun2^s1^M3^4471^*1090^irailgun2^s1^M3^1470^*629^A0^B0^C350^D350^q1^r1^F2^E-1^k0^l-1^4470^*680^ia^#^s1^M3^4470^*650^irailgun2^s1^M3^9^G1^X1^W30^7^G1^m1^o42^m1^pHey! Who are you and why are you here?^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X2^W90^7^G1^m1^o42^m1^pI\'m here to complete my mission.^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X3^W60^7^G1^m1^o42^m1^pWhat about you?^m1^n1^m2^o25^m2^p3^m2^n0^)^a^G1^X4^W30^7^G1^m1^o42^m1^pYou better not be part of the security troops. I hate those guys!^m1^n3^m2^o25^m2^p4^m2^n0^)^a^G1^X5^W60^7^G1^m1^o42^m1^pDon\'t be silly, of course I\'m not.^m1^n1^m2^o25^m2^p5^m2^n0^)^a^G1^X6^W60^7^G1^m1^o42^m1^pIf we stick together, we might live longer!^m1^n3^m2^o25^m2^p6^m2^n0^)^a^G1^X7^W60^7^G1^m1^o42^m1^pOkay.^m1^n1^>^7^G1^m1^o19^m1^p1^m1^n0^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^3114^*114^.14^,40^T0\"^e135^*142^.25^,130^K9^J1^7^G1^m1^o33^m1^p42^m1^n0^m2^o28^m2^p42^m2^n3^m3^o28^m3^p42^m3^n2^m4^o33^m4^p42^m4^n1^m5^o42^m5^pSecret Androids activated.^m5^n-1^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^2-173^*137^.18^,9^(I^2-175^*150^.8^,16^(I^2-173^*155^.23^,8^(I^1-165^*1369^A0^B0^C400^D400^q1^r1^F9^E-1^k1^l-1\"^e129^*148^.6^,60^K-1^J4\"^e160^*148^.6^,60^K-1^J4^4-165^*1400^ia^#2^s-1^M3^4329^*1220^ibfg^s-1^M0\" /><vehicle x=\"329^*1240^r1^jveh_crate^A0^B0\" hpp=\"100\"^e275^*74^.14^,140^K10^J4\"^e295^*74^.10^,140^K10^J4\"^e276^*82^.26^,50^K-1^J4^7^G-1^m1^o30^m1^p4^m1^n6^m2^o30^m2^p5^m2^n6^)\" />";
         this.CACHED_MAPS["c37a"] = "<q.^f-55^*899^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l10\"^c-90^*160^.50^,920^T0\"^c-40^*118^.546^,59^_-50^*160^.20^,56^_-150^*160^.80^,140^_-94^*90^.64^,70^_-4^*118^.34^,13^_-45^*86^.30^,66^_-28^*81^.48^,61^_-38^*123^.41^,12^_90^*118^.34^,13^_100^*81^.38^,61^_10^*75^.100^,55^_42^*93^.12^,3^_66^*93^.12^,3^_43^*91^.4^,7^_40^*79^.7^,100^T0^1-64^*899^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l10\" /><inf x=\"-55^*930^Zhero1_guns^;-1\" /><inf x=\"-64^*930^Zhero2_guns^;-1\" /><inf x=\"-59^*1010^Zstrict_casual^;0^373^*79^.7^,10^_73^*91^.4^,7^_45^*91^.30^,3^_117^*91^.34^,71^_101^*133^.41^,16^_142^*110^.12^,3^_170^*110^.12^,3^_144^*83^.86^,63^_192^*96^.32^,21^_178^*90^.20^,12^_112^*86^.12^,9^_210^*71^.138^,51^_248^*80^.19^,20^_289^*92^.18^,32^_265^*107^.17^,7^_225^*115^.17^,5^_241^*136^.11^,9^_286^*83^.24^,23^_326^*93^.41^,6^_364^*91^.41^,6^_319^*68^.99^,48^_369^*75^.10^,15^_393^*90^.10^,12^_427^*74^.10^,11^_397^*66^.73^,46^_419^*92^.8^,9^_433^*95^.13^,9^_430^*99^.10^,13^_430^*111^.10^,9^_416^*118^.29^,10^_374^*97^.16^,11^_320^*150^.98^,40^_374^*115^.16^,8^_300^*113^.17^,3^_80^*108^.12^,3^_28^*108^.12^,3^_96^*125^.28^,11^_190^*121^.18^,9^_194^*148^.18^,3^_207^*148^.7^,13^_247^*136^.44^,13^_300^*128^.10^,3^_182^*133^.14^,16^_154^*133^.16^,16^_131^*137^.57^,13^_460^*70^.33^,50^_470^*80^.33^,60^_480^*90^.33^,700^T0\"^c110^*128^.84^,100^T0\"^c194^*147^.20^,290^T0\"^c214^*136^.116^,180^T0\"^d20^*1400^u0.4^t0\"^d40^*1400^u0.4^t0\"^d60^*1400^u0.4^t0\"^d80^*1400^u0.4^t0\"^d100^*1400^u0.4^t0\"^d160^*1600^u0.4^t0\"^d180^*1600^u0.4^t0\"^d200^*1600^u0.4^t0\"^d220^*1600^u0.4^t0\"^d240^*1600^u0.4^t0\"^d260^*1600^u0.4^t0\"^d280^*1600^u0.4^t0\"^d300^*1600^u0.4^t0\"^d320^*1600^u0.4^t0\"^d148^*100^~d176^*100^~d-9^*108^~d345^*103^~d360^*84^~d447^*100^~d438^*84^~d274^*1210^u0.4^t1^3203^*115^.10^,30^T0\"^e487^*111^.15^,220^K-1^J4^151^*929^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^171^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^186^*1079^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^152^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^164^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^133^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1107^*809^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1126^*909^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1147^*1099^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1179^*1099^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1175^*829^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1240^*1149^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1266^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1294^*919^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1288^*829^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1245^*709^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1269^*1069^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1280^*1069^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1305^*1129^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1333^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1331^*709^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1349^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1364^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1356^*679^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1389^*679^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1425^*919^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1398^*909^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1435^*739^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1441^*659^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1443^*949^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1467^*699^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1477^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1484^*899^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^433^*780^ia^#^s1^M3^452^*780^ia^#^s1^M3^451^*960^ia^#2^s1^M3^464^*780^ia^#^s1^M3^471^*960^ia^#^s1^M3^486^*1110^ia^#^s1^M3^4107^*840^ia^#^s1^M3^4126^*940^ia^#^s1^M3^4147^*1130^ia^#^s1^M3^4179^*1130^ia^#2^s1^M3^4175^*860^ia^#^s1^M3^1218^*959^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1207^*959^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^4207^*990^ia^#^s1^M3^4218^*990^ia^#^s1^M3^4240^*1180^ia^#2^s1^M3^4245^*740^ia^#^s1^M3^4266^*830^ia^#2^s1^M3^4288^*860^ia^#^s1^M3^4294^*950^ia^#^s1^M3^4280^*1100^ia^#^s1^M3^4269^*1100^ia^#^s1^M3^4305^*1160^ia^#^s1^M3^1321^*709^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^4333^*960^ia^#^s1^M3^4321^*740^ia^#^s1^M3^4331^*740^ia^#2^s1^M3^4356^*710^ia^#^s1^M3^4349^*960^ia^#^s1^M3^4364^*960^ia^#^s1^M3^4398^*940^ia^#^s1^M3^4389^*710^ia^#^s1^M3^4425^*950^ia^#^s1^M3^4435^*770^ia^#^s1^M3^4441^*690^ia^#^s1^M3^4467^*730^ia^#^s1^M3^4443^*980^ia^#2^s1^M3^4477^*830^ia^#2^s1^M3^4484^*930^ia^#^s1^M3^3399^*81^.14^,3^_330^*210^.40^,700^T0^451^*950^ibfg^s1^M2^433^*1100^ibfg^s1^M2^133^*1079^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^433^*1110^ia^#2^s1^M3^4179^*1120^ibfg^s1^M2^4240^*1170^ibfg^s1^M2^4266^*820^ibfg^s1^M2^4331^*730^ibfg^s1^M2^4443^*970^ibfg^s1^M2^4477^*820^ibfg^s1^M2^4107^*860^irl^s1^M3^4126^*960^irl^s1^M3^4207^*1010^irl^s1^M3^4245^*760^irl^s1^M3^4269^*1120^irl^s1^M3^4333^*980^irl^s1^M3^4321^*760^irl^s1^M3^4398^*960^irl^s1^M3^4364^*980^irl^s1^M3^452^*760^irailgun^s1^M3^486^*1090^irailgun^s1^M3^4147^*1110^irailgun^s1^M3^4175^*840^irailgun^s1^M3^4218^*970^irailgun^s1^M3^4294^*930^irailgun^s1^M3^4288^*840^irailgun^s1^M3^4280^*1080^irailgun^s1^M3^4356^*690^irailgun^s1^M3^4435^*750^irailgun^s1^M3^4467^*710^irailgun^s1^M3^4425^*930^irailgun^s1^M3^4484^*910^irailgun^s1^M3\"^e47^*88^.26^,140^K0^J1\"^e55^*103^.10^,120^K-1^J4^7^G-1^m1^o30^m1^p1^m1^n2^>^1210^*1149^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^4210^*1190^irailgun2^s1^M3^1195^*1329^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4195^*1370^irailgun2^s1^M3^1195^*1479^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4195^*1520^irailgun2^s1^M3^1243^*1359^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4243^*1400^irailgun2^s1^M3^1255^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4255^*840^irailgun2^s1^M3^1306^*1279^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4306^*1320^irailgun2^s1^M3^1291^*1359^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^4291^*1400^irailgun2^s1^M3\" /><vehicle x=\"8^*840^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-13^*830^jbar_blue^A0^B0\" /><barrel x=\"58^*770^jbar_blue^A0^B0\" /><barrel x=\"61^*770^jbar_blue^A0^B0\" /><barrel x=\"92^*770^jbar_blue^A0^B0\" /><barrel x=\"153^*850^jbar_blue^A0^B0\" /><barrel x=\"156^*850^jbar_blue^A0^B0\" /><barrel x=\"298^*940^jbar_blue^A0^B0\" /><barrel x=\"277^*730^jbar_blue^A0^B0\" /><barrel x=\"388^*990^jbar_blue^A0^B0\" /><barrel x=\"380^*990^jbar_blue^A0^B0\" /><barrel x=\"384^*990^jbar_blue^A0^B0\" /><barrel x=\"446^*680^jbar_blue^A0^B0\" /><barrel x=\"451^*680^jbar_blue^A0^B0^3505^*87^.215^,670^T1\" /><vehicle x=\"559^*1080^r-1^jveh_walker^A0^B0\" hpp=\"100^3490^*118^.16^,30^T0\"^d440^*1400^u0.4^t0\"^d460^*1400^u0.4^t0\"^d480^*1400^u0.4^t0\"^d500^*1400^u0.4^t0\"^d520^*1400^u0.4^t0\"^d540^*1400^u0.4^t0\"^d560^*1400^u0.4^t0^4559^*1050^ivehcannon^s-1^M2\" /><barrel x=\"516^*890^jbar_blue^A0^B0\" /><barrel x=\"522^*890^jbar_blue^A0^B0\" /><barrel x=\"502^*1200^jbar_blue^A0^B0^4559^*1110^igl^s1^M3^1559^*1049^A0^B0^C200^D200^q1^r-1^F2^E-2^k0^l-1^3504^*102^.2^,16^_470^*102^.2^,120^T0^5640^*140^.80^,610^A-2^B0^Y100^g0\"^e590^*140^.50^,610^K1^J7^3638^*89^.4^,4^_640^*88^.80^,20^T0^7^G1^m1^o7^m1^p1^m1^nc38a^>^9^G1^X2^W30^7^G1^m1^o42^m1^pSo what are you doing here?^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X3^W90^7^G1^m1^o42^m1^pDo you remember that day when the first experimental portal was opened up to go to \'\'Another World\'\'?^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X4^W180^7^G1^m1^o42^m1^pOh...^m1^n3^m2^o25^m2^p3^m2^n0^)^a^G1^X5^W230^7^G1^m1^o42^m1^pThat portal, which connects us with the future of unknown race from unknown corner of unknown galaxy is the biggest mistake humanity made.^m1^n3^m2^o25^m2^p4^m2^n0^)^a^G1^X6^W230^7^G1^m1^o42^m1^pOnly one day, which abolished more than 2700 years of human life...^m1^n3^m2^o25^m2^p5^m2^n0^)^a^G1^X7^W210^7^G1^m1^o42^m1^pI remember that, scientists had sent two volunteers armed to the teeth... back to the past to change the course of history...^m1^n3^m2^o25^m2^p6^m2^n0^)^a^G1^X8^W140^7^G1^m1^o42^m1^pBut communication with them was lost.^m1^n3^m2^o-1^m2^p0^m2^n0^m3^o25^m3^p7^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-38^*115^.23^,330^K9^J4^7^G1^m1^o42^m1^pYes, it\'s better we go.^m1^n3^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o19^m8^p8^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o19^m1^p9^m1^n0^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o19^m8^p8^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^5-84^*160^.44^,500^A0^B0^Y100^g0^5-123^*215^.93^,550^A2^B0^Y100^g0^5-80^*160^.37^,400^A0^B3^Y0^g0^7^G1^m1^o19^m1^p9^m1^n0^m2^o42^m2^pSo let\'s find \'\'Correction Nine\'\' and finish what they started.^m2^n1^)^a^G1^X11^W140\" />";
         this.CACHED_MAPS["c38a"] = "<q.^f-32^!^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c190^*50^.170^,62^_-50^-^.100^,41^_-180^-2^.380^,400^T1^349^*1^.2^,4^_-51^*1^.2^,40^T0\" /><inf x=\"-69^*20^Zhero2_guns^;-1\" /><inf x=\"-32^*40^Zhero1_guns^;-1^6-50^*10^jray_floor^U-1^O0^P0^1-69^-21^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l4^650^*10^jray_floor^U-1^O0^P0^3190^*60^.10^,500^T0^5-58^*120^.9^,1200^A10^B0^Y0^g-10^549^*120^.9^,1190^A-10^B0^Y0^g-10^5-80^*120^.22^,1000^A0^B0^Y0^g10000^558^*120^.82^,1300^A0^B0^Y0^g10000^5-180^*160^.360^,400^A0^B0^Y0^g10000^9^G50^X0^W100^7^G30^m1^o28^m1^p2^m1^n-1^m2^o29^m2^p0^m2^n1^)\"^e235^*30^.125^,360^K5^J7\"^e-40^*63^.80^,670^K-1^J4^3216^*10^.19^,17^_219^*18^.5^,100^T0^1229^*99^A0^B0^C150^D150^q1^r-1^F2^E-1^k2^l-1^4229^*130^irl^s1^M1^3-30^*23^.20^,3^_10^*23^.20^,3^_-7^*10^.5^,2^_20^*40^.10^,3^_-30^*40^.10^,3^_-40^*53^.10^,3^_30^*53^.10^,30^T0\"^c-12^*21^.1^,220^T4\"^c-29^*38^.1^,390^T4\"^c11^*21^.1^,220^T4\"^c28^*38^.1^,390^T4\"^c8^*8^.1^,90^T4\"^c-9^*8^.1^,90^T4\"^c21^*38^.1^,160^T4\"^c-22^*38^.1^,160^T4\"^c-39^*51^.1^,520^T4\"^c-32^*51^.1^,520^T4\"^c31^*51^.1^,520^T4\"^c38^*51^.1^,520^T4\" /><barrel x=\"12^*20^jbar_blue^A0^B0\" /><barrel x=\"-24^*250^jbar_blue^A0^B0\" /><barrel x=\"24^*250^jbar_blue^A0^B0\" /><barrel x=\"36^*20^jbar_blue^A0^B0\" /><barrel x=\"-28^*420^jbar_blue^A0^B0\" /><barrel x=\"28^*420^jbar_blue^A0^B0\" /><barrel x=\"18^*250^jbar_blue^A0^B0\" /><barrel x=\"-18^*250^jbar_blue^A0^B0\" /><barrel x=\"-12^*20^jbar_blue^A0^B0\"^d-15^*460^u1^t0\"^d-35^*300^u1^t0\"^d35^*300^u1^t0\"^d20^*30^u1^t0\"^d-20^*30^u1^t0^5-62^*22^.4^,340^A0^B0^Y0^g10000^5-180^*150^.100^,1620^A3^B0^Y100^g0^7^G-1^m1^o14^m1^p1^m1^n2^m2^o4^m2^p1^m2^n100^m3^o32^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$^9^G-1^X1^W0\"^e-73^!^.8^,20^K-1^J4\" /><barrel x=\"-36^*20^jbar_blue^A0^B0^3-10^*12^.5^,6^_5^*12^.5^,6^_26^*30^.3^,9^_-29^*30^.3^,9^_-39^*63^.3^,11^_36^*63^.3^,11^_-10^*43^.20^,3^_6^*46^.3^,4^_-9^*46^.3^,40^T0\"^c-5^*41^.1^,320^T4\"^c4^*41^.1^,320^T4\"^d15^*460^u1^t0^9^G50^X0^W80^9^G50^X0^W90\" /><inf x=\"-42^*110^Zmeat^;0^32^*10^.5^,20^T0^9^G1^X2^W1300^7^G1^m1^o38^m1^p4^m1^n0^m2^o38^m2^p2^m2^n0^m3^o38^m3^p5^m3^n0^m4^o38^m4^p0^m4^n0^m5^o38^m5^p1^m5^n0^m6^o38^m6^p3^m6^n0^m7^o34^m7^p0^m7^nnull^m8^o34^m8^p1^m8^nnull^m9^o35^m9^p0^m9^n0^m10^o35^m10^p1^m10^n0^7^G1^m1^o19^m1^p1^m1^n0^m2^o26^m2^p1^m2^n0^m3^o32^m3^p1^m3^n1^m4^o42^m4^pThe field is disabled, lets go!^m4^n3^$^7^G1^m1^o9^m1^pPROXY HAS DIED^m1^n0^>^9^G1^X3^W1300^3207^*2^.32^,8^_197^*70^.163^,40^_243^*60^.10^,500^T0\"^d222^*25^~d180^*200^u1^t0\"^d263^*200^u1^t1^3-11^*3^.4^,5^_7^*3^.4^,50^T0^5197^*187^.140^,1170^A-3^B0^Y100^g0^3265^*5^.55^,14^_190^-^.170^,420^T0^5270^*32^.90^,340^A-3^B0^Y100^g0^7^G1^m1^o7^m1^p1^m1^nc39a^>^9^G1^X6^W60^7^G1^m1^o42^m1^pOh no! You trapped, use your skills to stay alive!^m1^n3^>^4^*440^jitem_grenade^s-1^L45^*440^jitem_grenade^s-1^L4-5^*440^jitem_grenade^s-1^M0\" />";
         this.CACHED_MAPS["c39a"] = "<q.^f255^-21\" uid=\"#hero_7^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c535^*40^.312^,860^T0\"^c190^*40^.345^,62^_120^-2^.79^,780^T1\" /><inf x=\"246^*20\" uid=\"#engine_mark_8^Zhero2_guns^;-1\" /><inf x=\"255^*20\" uid=\"#engine_mark_9^Zhero1_guns^;-1^1246^-21\" uid=\"#player_12^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l-1^3190^*60^.10^,50^_216^*10^.19^,17^_219^*18^.5^,100^T0^1235^*59\" uid=\"#playeri^A0^B0^C0^D0^q1^r-1^F2^E-1^k2^l-1^4229^*100\" uid=\"#gun_30^irl^s1^M1^3207^*2^.32^,8^_197^*70^.51^,40^_243^*60^.10^,500^T0\"^d222^*25^~d180^*200^u1^t0\"^d261^*290^u1^t1^5220^*254^.40^,1170\" uid=\"#pusher_93^A2^B0^Y100^g0^3270^*5^.50^,14^_190^-^.350^,800^T0^2192^*13^.6^,190\" uid=\"#door^x^y0^z0^h1^I^3390^*42^.70^,20^_400^*5^.50^,14^_267^*42^.63^,200^T0\"^d340^*600^u0.5^t0^3239^*64^.51^,300^T0\"^d360^*600^u0.5^t0\"^d380^*600^u0.5^t0^3380^*41^.20^,12^_320^*41^.20^,12^_450^*41^.20^,12^_260^*3^.70^,120^T0^6365^-0\" uid=\"#decor_563^jnull^U-1^O0^P0\"^e334^*29^.13^,330\" uid=\"#region_564^K0^J4^7^G1^m1^o34^m1^p0^m1^nship_noir^m2^o39^m2^p10^m2^n0^m3^o25^m3^p3^m3^n0^m4^o25^m4^p4^m4^n0^$^2365^-2^.18^,90\" uid=\"#doorc^x^y0^z0^h10^H^2369^-^.11^,60\" uid=\"#doorb^x^y0^z0^h10^H^2348^!^.9^,60\" uid=\"#doora^x^y0^z0^h10^H\"^e348^*3^.2^,20\" uid=\"#region_569^K-1^J4\"^e369^*6^.2^,20\" uid=\"#region_570^K-1^J4\"^e365^*4^.2^,20\" uid=\"#region_571^K-1^J4^7^G1^m1^o0^m1^p3^m1^n1^m2^o0^m2^p1^m2^n3^m3^o0^m3^p2^m3^n2^m4^o39^m4^p0^m4^n0^m5^o14^m5^p3^m5^n3^m6^o33^m6^p3^m6^n0^m7^o32^m7^p3^m7^n1^m8^o4^m8^p3^m8^n0^m9^o43^m9^pRevive Noir Lime to continue...^m9^n0^m10^o20^m10^p9^m10^n0^2199^*154^.20^,70\" uid=\"#door^x^y0^z0^h1^H^2213^*168^.6^,180\" uid=\"#door^x^y0^z0^h1^H^2197^*171^.22^,50\" uid=\"#door^x^y0^z0^h1^H^2199^*169^.5^,180\" uid=\"#door^x^y0^z0^h1^H^1209^*1539\" uid=\"#player_578^A0^B0^C1^D800^q2^r1^F13^E-1^k0^l-1^4209^*1570\" uid=\"#gun_579^iminigun^s-1^M0\" /><inf x=\"259^*160\" uid=\"#engine_mark_580^Zstrict_casual^;0\"^e390^*28^.30^,300\" uid=\"#region_581^K2^J7^7^G1^m1^o0^m1^p8^m1^n5^m2^o45^m2^p1^m2^n0^m3^o43^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$^5224^*159^.354^,390\" uid=\"#pusher_583^A0^B2^Y100^g0^3390^*3^.70^,12^_510^*41^.20^,12^_520^*42^.25^,20^_510^*3^.20^,12^_520^*5^.30^,470^T0^5540^*189^.38^,1170\" uid=\"#pusher_93^A-2^B0^Y100^g0^2420^*25^.10^,200\" uid=\"#doorczx^x^y0^z0^h10^I\"^e420^*41^.10^,200\" uid=\"#region_592^K-1^J4\"^d470^*600^u0.5^t0\"^d490^*600^u0.5^t0\"^d510^*600^u0.5^t0^3540^*74^.175^,38^_660^*42^.71^,18^_600^!8^.4^,12^_480^-24^.150^,56^_660^*5^.50^,10^_690^*74^.120^,82^_660^-24^.71^,56^_595^*5^.35^,10^_540^*5^.29^,10^_595^*40^.35^,160^T0^2630^*3^.30^,70\" uid=\"#doorasd^x^y0^z0^h5^I\"^e630^-26^.30^,70\" uid=\"#regionasd^K-1^J4\"^d575^*13^~d640^*34^~d627^-9^~d627^-21^~d650^*340^u0.4^t1^3621^*2^.4^,120^T0^1589^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^3553^*1^.46^,40^T0^1603^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1638^*29\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1573^*9\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1596^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^2530^*25^.10^,200\" uid=\"#doorczx2^x^y0^z0^h10^I\"^e530^*41^.10^,200\" uid=\"#region_592b^K-1^J4\"^e500^*28^.30^,300\" uid=\"#region_581^K3^J7^7^G1^m1^o0^m1^p10^m1^n7^>^3480^*10^.10^,16^_475^*5^.10^,110^T0^4573^*30\" uid=\"#gun^irl^s-1^M3^4603^*70\" uid=\"#gun^irl^s-1^M3^4638^*50\" uid=\"#gun^irl^s-1^M3^3555^*14^.15^,16^_609^*28^.7^,130^T0^1666^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4666^*70\" uid=\"#gun^irailgun2^s-1^M3^1675^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4675^*70\" uid=\"#gun^irailgun2^s-1^M3^4209^*1560\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1550\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1580\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1590\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1600\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1610\" uid=\"#gun_712^jitem_grenade^s-1^L3560^*39^.27^,130^T0^4596^!80\" uid=\"#gun^iraygun^s-1^M3^4589^!80\" uid=\"#gun^iraygun^s-1^M3^4589^!70\" uid=\"#gun^i^#^s-1^M3^4596^!70\" uid=\"#gun^i^#^s-1^M3^1672^-241\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4672^-210\" uid=\"#gun^i^#^s-1^M3^4672^-220\" uid=\"#gun^iraygun^s-1^M3^1686^-241\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4686^-210\" uid=\"#gun^i^#^s-1^M3^4686^-220\" uid=\"#gun^iraygun^s-1^M3^3620^-34^.53^,460^T0\" /><vehicle x=\"436^*80\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4436^*70\" uid=\"#gun_734^idefibrillator^s-1^L4436^*80\" uid=\"#gun_734^idefibrillator^s-1^L4436^*90\" uid=\"#gun_734^idefibrillator^s-1^M0\" /><vehicle x=\"441^*80\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4441^*80\" uid=\"#gun_734^iplasmagun^s-1^M3^4441^*70\" uid=\"#gun_734^i^/2^s-1^M3\"^e637^*16^.16^,150\" uid=\"#region_741^K4^J1^7^G1^m1^o0^m1^p9^m1^n6^m2^o0^m2^p12^m2^n6^m3^o0^m3^p13^m3^n15^m4^o-1^m4^p0^m4^n0^$\" /><barrel x=\"628^-220\" uid=\"#barrel_743^jbar_red^A0^B0\" /><barrel x=\"662^-220\" uid=\"#barrel_743^jbar_red^A0^B0^3567^-^.9^,100^T0^6685^*60\" uid=\"#decor^jteleport^U-1^O0^P0^6685^*230\" uid=\"#decor^jteleport2^U-1^O0^P0\"^d685^*22^~d685^*70^u0.4^t1^6555^-230\" uid=\"#decor^jteleport^U-1^O0^P0^6555^-60\" uid=\"#decor^jteleport2^U-1^O0^P0\"^d555^-7^~d555^-220^u0.4^t1^3567^-20^.56^,120^T0\"^e552^-5^.6^,200\" uid=\"#regionfag^K5^J4\"^e682^*24^.6^,200\" uid=\"#region_758^K6^J4\"^e560^!5^.2^,90\" uid=\"#region_759^K-1^J4^7^G-1^m1^o30^m1^p10^m1^n13^>^7^G-1^m1^o30^m1^p11^m1^n12^>\"^e678^*14^.2^,90\" uid=\"#region_762^K-1^J4^3600^*2^.4^,11^_664^*2^.4^,12^_690^-21^.120^,590^T0^1613^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4613^!70\" uid=\"#gun^i^#^s-1^M3^4613^!80\" uid=\"#gun^iraygun^s-1^M3\" /><inf x=\"264^*140\" uid=\"#engine_mark_772^Zno_auto_revive^;0^4484^*110\" uid=\"#gun^ivgun^s-1^L4573^*60\" uid=\"#gun^ivgun^s1^M3\" /><vehicle x=\"484^*130\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4484^*120\" uid=\"#gun^ivgun^s-1^L4485^*130\" uid=\"#gun^ivgun^s-1^L4603^*100\" uid=\"#gun^ivgun^s1^M3^4638^*90\" uid=\"#gun^ivgun^s1^M3^4666^*110\" uid=\"#gun^ivgun^s1^M3^4675^*110\" uid=\"#gun^ivgun^s1^M3^4672^!80\" uid=\"#gun^ivgun^s1^M3^4613^!40\" uid=\"#gun^ivgun^s1^M3^4596^!40\" uid=\"#gun^ivgun^s1^M3^4589^!40\" uid=\"#gun^ivgun^s1^M3^4686^!80\" uid=\"#gun^ivgun^s1^M3^2730^-6^.8^,170\" uid=\"#door^x^y0^z0^h1^I\"^e691^-7^.39^,150\" uid=\"#region_279^K7^J7^7^G1^m1^o7^m1^p1^m1^nc40a^>^2630^*3^.3^,400\" uid=\"#door_174^x^y0^z0^h5^I^2657^*3^.3^,400\" uid=\"#door_175^x^y0^z0^h5^I\"^e657^-26^.3^,70\" uid=\"#region_176^K-1^J4^3622^*11^.7^,80^T0\"^e372^*25^.38^,430\" uid=\"#region_402^K9^J7^7^G1^m1^o42^m1^pWelcome back to life, newcomer.^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X8^W30^8^G1^m1^o43^m1^p0^m1^n0^m2^o25^m2^p0^m2^n0^m3^o19^m3^p12^m3^n0^m4^o19^m4^p13^m4^n0^m5^o19^m5^p14^m5^n0^m6^o19^m6^p15^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^a^G1^X10^W60^7^G1^m1^o42^m1^pHi guys. It\'s very good that we do not have to wait for each other. It seems that all of us are ready.^m1^n2^m2^o25^m2^p2^m2^n0^)^a^G1^X11^W90^7^G1^m1^o42^m1^pWe almost there. Time machine must be in this place...^m1^n2^m2^o25^m2^p7^m2^n0^)^a^G1^X12^W30^7^G1^m1^o42^m1^pOh...^m1^n1^m2^o25^m2^p5^m2^n0^)^a^G1^X13^W5^7^G1^m1^o42^m1^pDo you hear this noise?^m1^n3^>^7^G1^m1^o42^m1^pWait, I know this guy...^m1^n1^m2^o25^m2^p6^m2^n0^)^a^G1^X14^W60^7^G1^m1^o42^m1^pShould we revive him?^m1^n3^>^a^G1^X15^W120^a^G1^X16^W90^7^G1^m1^o42^m1^pSo let\'s go.^m1^n1^>^3200^*140^.30^,80^_270^*50^.30^,130^T0^6269^*640\" uid=\"#decor_800^jship^U-1^O0^P0^1254^*639\" uid=\"#player_801^A-3^B0^C0^D200^q10^r1^F14^E-1^k0^l-1^4237^*710\" uid=\"#gun_802^i^#^s-1^M3^1237^*699\" uid=\"#player_801^A-2^B0^C29^D200^q10^r1^F14^E-1^k0^l-1^1277^*639\" uid=\"#player_801^A1^B0^C0^D200^q10^r-1^F14^E-1^k0^l-1^4257^*650\" uid=\"#gun_802^i^#^s-1^M3^4280^*650\" uid=\"#gun_802^i^#^s-1^M3^4271^*650\" uid=\"#gun_802^iraygun^s-1^M3^4237^*730\" uid=\"#gun_802^idefibrillator^s-1^M0\" />";
         this.CACHED_MAPS["c40a"] = "<q.^f-42^*699^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c-260^*130^.720^,230^_-30^*70^.30^,40^_-120^*2^.20^,22^_-260^*130^.260^,400^T0\" /><inf x=\"-42^*740^Zhero1_guns^;0^2-60^*91^.11^,31^(H^2-55^*109^.4^,200^x^y0^z0^h5^I^2-31^*91^.7^,31^(H^2-29^*109^.4^,200^x^y0^z0^h5^I^1-21^*699^A0^B0^C100^D100^q0^r-1^F3^E-1^k0^l-1^1-15^*699^A0^B0^C800^D800^q0^r-1^F13^E-1^k0^l-1\" /><inf x=\"-21^*720^Zhero2_guns^;-1^4-15^*710^idefibrillator^s-1^L4-15^*720^i^/2^s-1^M3^4-15^*730^iraygun^s-1^M3^4-15^*740^iminigun^s-1^L4-15^*750^iplasmagun^s-1^M3^4-15^*760^irl^s-1^M3^4-15^*770^jitem_grenade^s-1^L2-50^*70^.20^,50^x^y0^z0^h10^I^9^G1^X0^W0^7^G1^m1^o0^m1^p1^m1^n0^>\"^e-55^*90^.4^,200^K-1^J4\"^e-50^*82^.20^,130^K1^J1^7^G1^m1^o0^m1^p4^m1^n2^>\"^e-50^-50^.20^,50^K-1^J4^3-10^*70^.100^,30^_^*76^.40^,30^_19^*80^.101^,300^T0\"^e-60^*20^.60^,140^K2^J6^3-111^-55^.170^,45^_-144^-50^.94^,50^_-30^-50^.120^,19^_23^-20^.81^,10^_20^-26^.90^,740^T0^7^G1^m1^o1^m1^p4^m1^n2^m2^o41^m2^ptest_sound^m2^n0^m3^o29^m3^p0^m3^n4^m4^o29^m4^p0^m4^n5^$^3-180^-40^.50^,60^_-260^-20^.110^,80^_-218^*70^.58^,60^_-260^*70^.80^,108^_-140^*10^.30^,10^_-70^*10^.20^,20^_-10^*130^.205^,30^_50^*10^.40^,10^_40^*70^.80^,40^_-130^*6^.15^,160^T0^5^-20^.20^,300^A0^B-1^Y0^g0^610^-500^jantigravity^U-1^O0^P0^3-180^*70^.130^,400^T0\"^d-40^*89^~d20^*99^~d50^*99^~d-80^*20^~d-55^!5^~d10^*36^~d10^-49^~d-170^-0^u0.4^t1^3100^*10^.95^,1100^T0\" /><vehicle x=\"77^!00^r-1^jveh_corvette^A0^B0\" hpp=\"400^177^!61^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l5^477^!30^ivehgun^s-1^L3^*10^.10^,10^_-30^-20^.10^,100^T0\" /><vehicle x=\"60^*200^r-1^jveh_corvette^A0^B0\" hpp=\"400^460^*180^ivehgun^s-1^L160^*159^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l4^3-80^*2^.20^,220^T0\"^e53^*40^.41^,630^K-1^J4^1-127^*129^A0^B0^C100^D100^q1^r1^F5^E-2^k0^l3\" /><vehicle x=\"-127^*170^r1^jveh_corvette^A0^B0\" hpp=\"400^4-127^*150^ivehgun^s-1^M0\"^e-138^*33^.24^,260^K-1^J4^+-80^-46^.100^,40^g1^+-50^-50^.20^,50^g1^+-130^-46^.30^,40^g1^3-100^-40^.20^,15^_-170^!4^.10^,10^_-140^-33^.8^,11^_-26^-24^.16^,60^T0^270^*30^.5^,200^x^y0^z0^h10^I^276^*30^.5^,200^x^y0^z0^h10^I^282^*30^.5^,200^x^y0^z0^h10^I^386^*7^.18^,30^T0\"^e70^*49^.5^,200^K-1^J4\"^e76^*49^.5^,200^K-1^J4\"^e82^*49^.5^,200^K-1^J4^7^G1^m1^o0^m1^p5^m1^n6^>^7^G1^m1^o0^m1^p6^m1^n7^>^7^G1^m1^o0^m1^p7^m1^n8^>^1105^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^4105^*130^iraygun^s-1^M2^1114^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^1123^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^4114^*130^iraygun^s-1^M2^4123^*130^iraygun^s-1^M2^3130^*22^.38^,22^_100^*80^.95^,40^_240^*60^.220^,160^_190^*5^.62^,1050^T0^9^G1^X6^W10^7^G1^m1^o42^m1^pSomeone have to enable time machine. I will do it myself.^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X7^W60^7^G1^m1^o42^m1^pGood luck!^m1^n3^m2^o25^m2^p3^m2^n0^)^9^G1^X8^W60^7^G1^m1^o0^m1^p3^m1^n9^m2^o32^m2^p1^m2^n3^m3^o32^m3^p2^m3^n3^m4^o-1^m4^p0^m4^n0^$\"^e-29^*90^.4^,200^K-1^J4^260^*100^.6^,20^(I^3152^*17^.28^,170^T0\"^e186^*85^.5^,50^K-1^J4\"^e177^*41^.12^,330^K9^J6^7^G1^m1^o14^m1^p1^m1^n10^m2^o40^m2^p1^m2^n0^m3^o32^m3^p1^m3^n1^m4^o0^m4^p9^m4^n12^m5^o14^m5^p2^m5^n13^m6^o0^m6^p#doorasdc^m6^n#region_212^m7^o32^m7^p2^m7^n1^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^c-55^*90^.4^,200^T4\"^c-29^*90^.4^,200^T4\"^c-48^*68^.1^,1210^T4\"^c-33^*68^.1^,1210^T4\"^c71^*30^.3^,200^T4\"^c77^*30^.3^,200^T4\"^c83^*30^.3^,200^T4\"^d196^*500^u0.4^t1^2162^*57^.5^,180^x^y0^z0^h10^I\"^e162^*40^.5^,180^K-1^J4\"^c163^*40^.3^,180^T4^2180^*100^.6^,20^(I\"^e190^*85^.5^,50^K-1^J4^3380^*130^.80^,1000^T0^6353^*740^jfinal_place2^U-1^O0^P0^2336^*75^.34^,3^(H^3180^*130^.90^,200^T0^6217^*50^jantigravity^U-1^O0^P0^6230^*50^jantigravity^U-1^O0^P0^6204^*50^jantigravity^U-1^O0^P0^5195^*60^.45^,550^A0^B-0.7^Y0^g0^3243^*70^.8^,16^_280^*66^.13^,16^_282^*73^.8^,16^_325^*73^.64^,16^_316^*65^.21^,10^_350^*130^.53^,200^T0\"^d280^*1500^u0.4^t0\"^d300^*1500^u0.4^t0\"^d320^*1500^u0.4^t0\"^d340^*1500^u0.4^t0\"^d360^*1500^u0.4^t0\"^d260^*1500^u0.4^t0\"^d200^*105^~d217^*6^~d230^*6^~d204^*60^u0.4^t1^1305^*899^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"305^*940^r-1^jveh_corvette^A0^B0\" hpp=\"400^4305^*930^ivehgun^s-1^L5270^*130^.80^,100^A0^B3^Y0^g0^1331^*889^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"331^*930^r-1^jveh_corvette^A0^B0\" hpp=\"400^4331^*920^ivehgun^s-1^L1322^*1059^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"322^*1100^r-1^jveh_corvette^A0^B0\" hpp=\"400^4322^*1090^ivehgun^s-1^L1288^*1059^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"288^*1100^r-1^jveh_corvette^A0^B0\" hpp=\"400^4288^*1090^ivehgun^s-1^L4230^*850^ivehgun^s-1^L1229^*819^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"229^*860^r-1^jveh_corvette^A0^B0\" hpp=\"400\"^e336^*102^.34^,280^K10^J7^7^G1^m1^o43^m1^pTo be continued...^m1^n0^m2^o47^m2^p0^m2^n0^m3^o41^m3^plast_teleport^m3^n0^m4^o-1^m4^p0^m4^n0^$^3187^*80^.23^,50^T0\"^e134^*40^.14^,190^K-1^J1\"^e134^*40^.14^,190^K11^J6^7^G1^m1^o41^m1^pt_switch2^m1^n0^>\"^e310^*123^.77^,680^K12^J7^7^G1^m1^o42^m1^pForward to the past!^m1^n2^>\" />";
         this.CACHED_MAPS["c41a"] = "<q.^f-47^*259^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^3-180^-^.148^,700^T0\"^c-185^*100^.330^,1120^T1^3-8^*26^.46^,5^_-6^*30^.6^,19^_-40^*30^.6^,19^_-78^*26^.46^,5^_-96^*50^.46^,8^_10^*50^.46^,8^_60^*20^.10^,10^_-110^*20^.10^,10^_-170^*30^.40^,40^_90^*30^.40^,40^_-90^*5^.10^,10^_40^*5^.10^,10^_10^*5^.10^,10^_-60^*5^.10^,10^_-70^*24^.10^,8^_20^*24^.10^,8^_80^*20^.20^,10^_-140^*20^.20^,10^_-240^*180^.80^,2500^T2^3120^*180^.120^,1350^T2\"^d-150^*1100^u1^t0\"^d-120^*1100^u1^t0\"^d-90^*1100^u1^t0\"^d-60^*1100^u1^t0\"^d-30^*1100^u1^t0\"^d^*1100^u1^t0\"^d30^*1100^u1^t0\"^d60^*1100^u1^t0\"^d90^*1100^u1^t0\"^d119^*1100^u1^t0\" /><barrel x=\"-43^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-33^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-7^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"3^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-33^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-7^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"22^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-62^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-122^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"82^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"88^*220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-129^*220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-150^*320\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"110^*320\" uid=\"#barrel^jbar_orange^A0^B0\"^e-49^*66^.13^,50\" uid=\"#region^K-1^J4\"^e-150^*79^.260^,70\" uid=\"#region^K-1^J4^2-257^*20^.19^,90\" uid=\"#door^x^y0^z0^h1^I^2-257^*36^.6^,200\" uid=\"#door^x^y0^z0^h1^I^2-256^*36^.25^,50\" uid=\"#door^x^y0^z0^h1^I^a^G10^X0^W30^7^G-1^m1^o28^m1^p1^m1^n-1^>^1-241^*199\" uid=\"#playerasds2^A0^B0^C100^D100^q2^r1^F12^E-1^k3^l0^2-32^*19^.24^,40\" uid=\"#doorsadf^x^y0^z0^h4^I^9^G1^X1^W0^7^G-1^m1^o0^m1^p3^m1^n2^m2^o26^m2^p3^m2^n0^)\"^e-32^*26^.24^,40\" uid=\"#region_356^K3^J5^7^G-1^m1^o26^m1^p2^m1^n0^m2^o0^m2^p3^m2^n3^)^7^G-1^m1^o25^m1^p2^m1^n0^>^a^G-1^X2^W30\"^e-32^*1^.24^,40\" uid=\"#region_360^K4^J5^7^G-1^m1^o25^m1^p3^m1^n0^>^a^G-1^X1^W30^3-8^-^.148^,70^_-60^-3^.78^,670^T0\" /><inf x=\"-47^*560\" uid=\"#engine_mark^Zmeat^;0^3-60^*44^.15^,4^_5^*44^.15^,4^_-110^*44^.20^,4^_50^*44^.20^,40^T0^9^G1^X5^W1^7^G1^m1^o-1^m1^p0^m1^n0^m2^o25^m2^p0^m2^n0^)^5-32^!^.24^,40\" uid=\"#pusher_374^A0^B0^Y0^g0^4-47^*290\" uid=\"#gun_378^irailgun2^s1^M3\"^d-50^*20^~d10^*20^~d-75^*41^~d35^*410^u0.4^t1\" /><inf x=\"-47^*520\" uid=\"#engine_mark^Zsky^;3^+-130^*10^.220^,50\" uid=\"#water^g0^+50^*5^.40^,50\" uid=\"#water^g0^+20^*5^.20^,50\" uid=\"#water^g0^+-50^*5^.60^,50\" uid=\"#water^g0^+-32^-^.24^,30\" uid=\"#water^g0^+-130^*5^.40^,50\" uid=\"#water^g0^+-80^*5^.20^,50\" uid=\"#water^g0^+-120^*15^.10^,50\" uid=\"#water^g0^+-100^*15^.60^,50\" uid=\"#water^g0^+^*15^.60^,50\" uid=\"#water^g0^+-40^*11^.40^,10\" uid=\"#water^g0^+-34^*15^.28^,40\" uid=\"#water^g0^+70^*15^.10^,50\" uid=\"#water^g0^3120^*32^.120^,1020^T0\"^c124^*50^.116^,280^T0\"^c127^*45^.24^,130^T4^2127^*45^.4^,130\" uid=\"#door1^x^y0^z0^h1^I^2132^*45^.4^,130\" uid=\"#door2^x^y0^z0^h1^I^2137^*45^.4^,130\" uid=\"#door3^x^y0^z0^h1^I^2142^*45^.4^,130\" uid=\"#door4^x^y0^z0^h1^I^2147^*45^.4^,130\" uid=\"#door5^x^y0^z0^h1^I\"^e127^*57^.4^,130\" uid=\"#region1^K-1^J4\"^e132^*57^.4^,130\" uid=\"#region2^K-1^J4\"^e137^*57^.4^,130\" uid=\"#region3^K-1^J4\"^e142^*57^.4^,130\" uid=\"#region4^K-1^J4\"^e147^*57^.4^,130\" uid=\"#region5^K-1^J4\"^e155^*56^.41^,390\" uid=\"#region_507^K6^J6^7^G1^m1^o7^m1^pc0a^m1^n0^>^7^G1^m1^o0^m1^p4^m1^n4^>^7^G1^m1^o0^m1^p5^m1^n5^>^7^G1^m1^o0^m1^p6^m1^n6^>^7^G1^m1^o0^m1^p7^m1^n7^>^7^G1^m1^o0^m1^p8^m1^n8^>\"^e81^*11^.8^,120\" uid=\"#region_514^K7^J1\"^e21^*37^.8^,120\" uid=\"#region_514^K8^J1\"^e-69^*37^.8^,120\" uid=\"#tr^K10^J1\"^e-129^*11^.8^,120\" uid=\"#region_514^K11^J1\"^e-30^*73^.20^,120\" uid=\"#region_514^K9^J1^5-160^*180^.280^,300\" uid=\"#pusher_121^A0^B5^Y0^g0\" />";
         this.CUR_LOADING = "";
         this.GET_TRIES = 0;
         this.MP_waiting_for_answer = true;
         this.players_online = 0;
         this.connection_lost_ping = 0;
         this.MP_get_done_STR = "";
         this.MP_get_done_HAP = false;
         this.exec_measures_len = 30;
         this.exec_measures_rate = 90;
         this.exec_measures_rate_passed = 0;
         this.exec_measures_tot = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_calls = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_peak = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_start = new Vector.<uint>(this.exec_measures_len);
         this.MeasuresReset();
         this.LITE_PHYS_tim = true;
         this.phys_stress = 0;
         this.let_scroll_last = 0;
         this.mouse_x = 0;
         this.mouse_y = 0;
         this.gravitatorTransform = new SoundTransform(0);
         this.musTransform = new SoundTransform(0);
         this.am_base_Transform = new SoundTransform(0);
         this.am_wind_Transform = new SoundTransform(0);
         this.main_song_Transform = new SoundTransform(0);
         this.grav_working = true;
         this.mus_working = true;
         this.am_base_working = true;
         this.am_wind_working = true;
         this.main_song_working = true;
         this.CreateRestoreLoopSounds();
         this.multiplayer_repsawn_timer_speed = 1;
         this.voice_pressure = 0.2;
         this.FUN_NICE_BULLETS = 0;
         this.FUN_SPENT_BULLETS = 0;
         this.FUN_DAMAGE_MADE = 0;
         this.FUN_HEADSHOTS_MADE = 0;
         this.FUN_DAMAGE_TAKEN = 0;
         this.FUN_TIME_SPEND = 0;
         this.FUN_ELEMINATED = 0;
         this.last_gun_b4_psi = -1;
         this.FORCE_CUSTOM_MAP = false;
      }
      
      internal function frame4() : *
      {
         stop();
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.darkness.visible = true;
         this.darkness.alpha = 1;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.CREDITS_BY_GAME_END = false;
         try
         {
            this.ResetVol();
            this.UpdateGravitatorVol();
         }
         catch(e:Error)
         {
            NONMUTE = false;
         }
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         if(this.ALTCUR)
         {
            Mouse.hide();
         }
         if(this.NetworkLoad_failed && !this.NetworkLoad_complete)
         {
            this.NetworkLoad_failed = false;
            this.NetworkLoad_triesleft = 0;
            this.LAST_ERROR = "Warning: Unable to complete synchronization for saved data. Can\'t connect to server.\n\nUsing saved data from computer.";
         }
         if(this._flash_version < 11.75 && Capabilities.version.split(" ")[0] != "LNX" || this._flash_version < 11.15)
         {
            if(this.LAST_ERROR == "")
            {
               this.LAST_ERROR = "*Your Flash Player (" + this._flash_version + ") is outdated.\n\n" + "This game requires Flash Player 11.8 or higher.\n\n" + "Please consider Flash Player update by following link:\n\n" + "<a href=\"http://get.adobe.com/flashplayer\"><font size=\"14\" color=\"#FFFFFF\">http://get.adobe.com/flashplayer</font></a>";
            }
            else if(this.LAST_ERROR.indexOf("Error") != -1)
            {
               this.LAST_ERROR = "*<font color=\"#FF3333\">Your Flash Player (" + this._flash_version + ") is outdated.</font>\n" + "This game requires Flash Player 11.8 or higher.\n" + "Please consider Flash Player update by following link:\n" + "<a href=\"http://get.adobe.com/flashplayer\"><font size=\"14\" color=\"#FFFFFF\">http://get.adobe.com/flashplayer</font></a>\n\n" + this.LAST_ERROR;
            }
         }
         if(this.LAST_ERROR == "")
         {
            this.errmenu.visible = false;
         }
         else
         {
            if(this.LAST_ERROR.charAt(0) == "*")
            {
               this.errmenu.txt.htmlText = this.LAST_ERROR.slice(1);
            }
            else
            {
               this.errmenu.txt.text = this.LAST_ERROR;
            }
            this.LAST_ERROR = "";
         }
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            errmenu.visible = false;
         });
         this.menu_buttons2.scaleX = this.menu_buttons2.scaleY = this.menu_buttons2.scaleZ = this.menu_buttons.scaleX = this.menu_buttons.scaleY = this.menu_buttons.scaleZ = 1.5;
         this.menu_buttons.alpha = 0.5;
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            m_active = -1;
         });
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            m = 0;
            while(m < 7)
            {
               if(menu_buttons2.mouseX > menu_buttons["btn" + m].x && menu_buttons2.mouseX < menu_buttons["btn" + m].x + 200 && menu_buttons2.mouseY > menu_buttons["btn" + m].y && menu_buttons2.mouseY < menu_buttons["btn" + m].y + 20)
               {
                  m_active = m;
                  m_hold = m;
                  menu_buttons["btn" + m].btn_over.alpha = 0;
                  menu_buttons["btn" + m].ghost.alpha = 1;
                  menu_buttons["btn" + m].z = 5;
                  PlaySound_full(ss_info_off);
               }
               else
               {
                  menu_buttons["btn" + m].z = 0;
               }
               ++m;
            }
         });
         this.menu_buttons2.addEventListener(MouseEvent.CLICK,function():*
         {
            m = 0;
            while(m < 7)
            {
               menu_buttons["btn" + m].z = 0;
               if(m_hold == m)
               {
                  if(menu_buttons2.mouseX > menu_buttons["btn" + m].x && menu_buttons2.mouseX < menu_buttons["btn" + m].x + 200 && menu_buttons2.mouseY > menu_buttons["btn" + m].y && menu_buttons2.mouseY < menu_buttons["btn" + m].y + 20)
                  {
                     m_hold = -1;
                     m_active = m;
                     if(m == 0)
                     {
                        UnloadMenuItems();
                        gotoAndStop("campaign");
                     }
                     if(m == 1)
                     {
                        try
                        {
                           navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=3"),"_blank");
                        }
                        catch(e:Error)
                        {
                        }
                     }
                     if(m == 2)
                     {
                        UnloadMenuItems();
                        gotoAndStop("options");
                     }
                     if(m == 3)
                     {
                        UnloadMenuItems();
                        LocateMeToMp();
                     }
                     if(m == 4)
                     {
                        UnloadMenuItems();
                        gotoAndStop("credits");
                     }
                     if(m == 5)
                     {
                        try
                        {
                           navigateToURL(new URLRequest("http://www.plazmaburst2.com"),"_blank");
                        }
                        catch(e:Error)
                        {
                        }
                     }
                     if(m == 6)
                     {
                        try
                        {
                           navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
                        }
                        catch(e:Error)
                        {
                        }
                     }
                     PlaySound_full(ss_info_act);
                     m = 7;
                  }
               }
               ++m;
            }
            if(m_hold != -1)
            {
               m_hold = -1;
            }
         });
         this.lm_active = -1;
         this.m_active = -1;
         this.m_time = 0;
         this.m_hold = -1;
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_MOVE,this.mov);
         this.menu_buttons["btn" + 0].txt.text = "CAMPAIGN";
         this.menu_buttons["btn" + 1].txt.text = "FAQ";
         this.menu_buttons["btn" + 2].txt.text = "SETTINGS & PERFORMANCE";
         this.menu_buttons["btn" + 3].txt.text = "MULTIPLAYER";
         this.menu_buttons["btn" + 4].txt.text = "CREDITS";
         this.menu_buttons["btn" + 5].txt.text = "OFFICIAL WEBSITE";
         this.menu_buttons["btn" + 6].txt.text = "PLAY COOLBUDDY GAMES";
         this.m = 0;
         while(this.m < 7)
         {
            this.menu_buttons["btn" + this.m].ghost.alpha = 0;
            this.menu_buttons["btn" + this.m].ghost.txt.text = this.menu_buttons["btn" + this.m].txt.text;
            ++this.m;
         }
         this.earth_pos1 = 0;
         this.earth.rotation = (Math.random() - 0.5) * 0.3;
         this.new_nick = this.CMPG_name.toLowerCase();
         this.newString = "";
         this.pattern_no_nix = "!@#$%^&*()+=|/\\№;%:?*[];\',.<>{}~`";
         this.pattern_no_nix += "\"";
         this.i = 0;
         while(this.i < this.new_nick.length)
         {
            if(this.pattern_no_nix.indexOf(this.new_nick.charAt(this.i)) == -1)
            {
               if(this.new_nick.charAt(this.i) == " ")
               {
                  this.newString += "_";
               }
               else
               {
                  this.newString += this.new_nick.charAt(this.i);
               }
            }
            ++this.i;
         }
         this.new_nick = this.newString;
         this.menu_buttons.txtconsole.htmlText = "Welcome back, " + this.CMPG_name + "!";
         this.new_nick2 = this.new_nick + "@localhost:~$ ";
         this.new_nick += "@localhost:/# ";
         if(!this.stable)
         {
            this.new_nick += this.unstable;
         }
         this.blink_main = -100;
         this.i = 0;
         while(this.i < 30)
         {
            this.earth["sh" + this.i].gotoAndStop(1);
            this.earth["sh" + this.i].started = false;
            ++this.i;
         }
         this.MUSIC_START = getTimer();
         this.TROOPS_GONE = false;
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
         if(this.START_CUSTOM_MAP)
         {
            this.START_CUSTOM_MAP = false;
            this.GET_TRIES = 0;
            this.GotoMap(this.loaderInfo.parameters.custommap);
            this.darkness.alpha = 1;
            this.darkness.visible = true;
         }
         this.flike.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.loaderInfo.url.search("http") == -1 && this.pType == "External")
         {
            this.CMPG_name = ".:Eric Gurt:.";
         }
         if(ExternalInterface.available)
         {
            ExternalInterface.call("RedirectTester()");
         }
      }
      
      internal function frame5() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         if(this.FORCE_CUSTOM_MAP && this.LAST_ERROR != "YOUR TEAMMATE DIED." && this.LAST_ERROR != "YOUR TEAMMATE IS CRITICALLY INJURED." && this.LAST_ERROR != "YOUR TEAM IS DEAD." && this.LAST_ERROR != "BAD LUCK, YOU DIED." && this.LAST_ERROR != "YOU ARE DEAD.")
         {
            this.txt.text = this.LAST_ERROR;
         }
         else
         {
            this.txt.text = this.LAST_ERROR + "\nTHAT DIDN\'T GO AS WELL AS EXPECTED...";
         }
         this.LAST_ERROR = "";
         this.menu_start2.addEventListener(MouseEvent.CLICK,function():*
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            PlaySound_full(ss_info_act);
            myCursor.gotoAndPlay("loading");
            gotoAndStop("loading");
         });
         this.menu_start2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_start2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_noback.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_noback.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_back2.addEventListener(MouseEvent.CLICK,function():*
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.menu_back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space);
         this.i = Math.floor(Math.random() * 6.9);
         if(this.i == 0)
         {
            this.cap.text = "Heavy Battlesuit makes you slower, but gives more stability and more hitpoints.";
         }
         if(this.i == 1)
         {
            this.cap.text = "When you slowdown time, your hero and his projectiles are faster than any others.";
         }
         if(this.i == 2)
         {
            this.cap.text = "Swords can make you jump higher and run faster.";
         }
         if(this.i == 3)
         {
            this.cap.text = "Headshots do the most damage to the enemy.";
         }
         if(this.i == 4)
         {
            this.cap.text = "Enemies can attack you when they are dying.";
         }
         if(this.i == 5)
         {
            this.cap.text = "Use covers to restore health.";
         }
         if(this.i == 6)
         {
            this.cap.text = "You can quickly restart failed mission by pressing R or SPACE key.";
         }
         this.menu_fail_mp.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            LocateMeToMp();
         });
         this.menu_fail_mp.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_fail_mp.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.flike2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_pb1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/game.asp?gid=744"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_pb1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_pb1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_mold.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/game.asp?gid=1485"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_mold.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_mold.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_fail_faq.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            gotoAndStop("custom");
         });
         this.menu_fail_faq.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_fail_faq.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame6() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         this.FORCE_CUSTOM_MAP = false;
         this.MP_mode = false;
         this.MP_spectator = false;
         if(this.FUN_TIME_SPEND < 3)
         {
            this.camp_score.visible = false;
         }
         else
         {
            this.xx = Math.ceil(this.FUN_TIME_SPEND / 30);
            this.str = String(this.xx - Math.floor(this.xx / 60) * 60);
            if(this.xx - Math.floor(this.xx / 60) * 60 < 10)
            {
               this.str = "0" + this.str;
            }
            this.str = String(Math.floor(this.xx / 60) - Math.floor(this.xx / 60 / 60) * 60) + ":" + this.str;
            if(Math.floor(this.xx / 60) - Math.floor(this.xx / 60 / 60) * 60 < 10)
            {
               this.str = "0" + this.str;
            }
            this.str = String(Math.floor(this.xx / 60 / 60)) + ":" + this.str;
            this.camp_score.stts.text = this.str + "\n\n";
            this.camp_score.stts.text += this.FUN_ELEMINATED + "\n\n";
            this.camp_score.stts.text += this.FUN_HEADSHOTS_MADE + "\n\n";
            this.camp_score.stts.text += Math.round(this.FUN_DAMAGE_TAKEN) + "\n\n";
            this.camp_score.stts.text += Math.round(this.FUN_DAMAGE_MADE) + "\n\n";
            this.camp_score.stts.text += this.FUN_SPENT_BULLETS + "\n\n";
            if(this.FUN_SPENT_BULLETS == 0)
            {
               this.camp_score.stts.text += "0 %\n\n";
            }
            else
            {
               this.camp_score.stts.text += Math.round(this.FUN_NICE_BULLETS / this.FUN_SPENT_BULLETS * 1000) / 10 + " %\n\n";
            }
            this.i4 = 0;
            if(this.FUN_SPENT_BULLETS < 1 || this.FUN_DAMAGE_TAKEN < 1 || this.FUN_ELEMINATED < 1)
            {
               this.i4 += 300;
            }
            if(this.FUN_SPENT_BULLETS < 1)
            {
               this.FUN_SPENT_BULLETS = 1;
            }
            if(this.FUN_DAMAGE_TAKEN < 1)
            {
               this.FUN_DAMAGE_TAKEN = 1;
            }
            this.i4 += Math.ceil(this.FUN_ELEMINATED * 8 + this.FUN_HEADSHOTS_MADE + this.FUN_DAMAGE_MADE / this.FUN_DAMAGE_TAKEN * 80);
            if(this.i4 > 500)
            {
               this.i4 = 500;
            }
            if(!this.AWARD)
            {
               this.i4 = 0;
            }
            this.camp_score.stts.text += "$" + this.i4 + " ";
            if(this.AWARD)
            {
               this.SaveGame();
            }
            else
            {
               this.camp_score.stts.text += "(finished before)";
            }
            this.camp_score.txt.text = "CONGRATULATIONS! MISSION " + this.CMPG_THIS_LEVEL + " COMPLETE";
         }
         this.AWARD = false;
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("menu");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.next_lev.addEventListener(MouseEvent.CLICK,function():*
         {
            SaveGame();
            NextLevel();
         });
         this.next_lev.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.next_lev.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.equipment.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("eq");
         });
         this.equipment.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.equipment.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.equipment2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("eq2");
         });
         this.equipment2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.equipment2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.char0.text = this.CMPG_name;
         this.camp_btn = new Array();
         this.xx = 0;
         this.yy = 0;
         this.i2 = -1;
         this.fire = false;
         this.i = 0;
         while(this.i < this.LEVELS_TOTAL)
         {
            if(this.i == 0)
            {
               this.camp_btn[this.i] = this.camp_list.slot0;
            }
            else
            {
               this.camp_btn[this.i] = this.camp_list.addChild(new camp_slot());
            }
            this.camp_btn[this.i].x = this.xx;
            this.camp_btn[this.i].y = this.yy;
            if(this.i >= 29 && this.i <= 35)
            {
               this.camp_btn[this.i].gotoAndStop(2);
            }
            else if(this.i > 35 && this.i <= 40)
            {
               this.camp_btn[this.i].gotoAndStop(3);
            }
            else if(this.i == 41)
            {
               this.camp_btn[this.i].gotoAndStop(4);
            }
            else if(this.i >= 13 && this.i <= 17)
            {
               this.camp_btn[this.i].gotoAndStop(5);
            }
            else
            {
               this.camp_btn[this.i].gotoAndStop(1);
            }
            this.camp_btn[this.i].txt.text = this.i + 1;
            this.camp_btn[this.i].btn0.gotoAndStop(1);
            if(this.i <= this.LEVELS_PASSED)
            {
               this.camp_btn[this.i].alpha = 1;
            }
            else
            {
               this.camp_btn[this.i].alpha = 0.5 - Math.max(0,this.i - this.LEVELS_PASSED - 5) * 0.1;
            }
            this.xx += 35;
            if(this.xx > 730)
            {
               this.xx = 0;
               this.yy += 35;
            }
            ++this.i;
         }
         this.camp_list.addEventListener(MouseEvent.CLICK,function():*
         {
            AWARD = false;
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     CMPG_THIS_LEVEL = i;
                     PlaySound_full(ss_info_act);
                     if(i == LEVELS_PASSED)
                     {
                        AWARD = true;
                     }
                     stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
                     gotoAndStop("difch");
                  }
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     camp_btn[i].btn0.gotoAndStop(3);
                     PlaySound_full(ss_info_off);
                  }
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            i2 = -1;
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  camp_btn[i].btn0.gotoAndStop(1);
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     if(i2 == -1)
                     {
                        PlaySound_full(ss_info);
                     }
                     i2 = i;
                     camp_btn[i].btn0.gotoAndStop(2);
                  }
                  else
                  {
                     camp_btn[i].btn0.gotoAndStop(1);
                  }
               }
               ++i;
            }
         });
         this.UpdateSkinC(0);
         this.UpdateSkinC(1);
         this.head0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_head[0];
            UpdateSkinC(0);
         });
         this.head0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_head[0];
            UpdateSkinC(0);
         });
         this.body0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_body[0];
            UpdateSkinC(0);
         });
         this.body0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_body[0];
            UpdateSkinC(0);
         });
         this.arms0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_arms[0];
            UpdateSkinC(0);
         });
         this.arms0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_arms[0];
            UpdateSkinC(0);
         });
         this.legs0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_legs[0];
            UpdateSkinC(0);
         });
         this.legs0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_legs[0];
            UpdateSkinC(0);
         });
         this.head1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_head[1];
            UpdateSkinC(1);
         });
         this.head1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_head[1];
            UpdateSkinC(1);
         });
         this.body1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_body[1];
            UpdateSkinC(1);
         });
         this.body1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_body[1];
            UpdateSkinC(1);
         });
         this.arms1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_arms[1];
            UpdateSkinC(1);
         });
         this.arms1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_arms[1];
            UpdateSkinC(1);
         });
         this.legs1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_legs[1];
            UpdateSkinC(1);
         });
         this.legs1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_legs[1];
            UpdateSkinC(1);
         });
         this.char0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_model[0];
            if(skin_model[0] == 5)
            {
               ++skin_model[0];
            }
            RefrSkin(0);
            UpdateSkinC(0);
         });
         this.char0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_model[0];
            if(skin_model[0] == 5)
            {
               --skin_model[0];
            }
            RefrSkin(0);
            UpdateSkinC(0);
         });
         this.char1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_model[1];
            if(skin_model[1] == 5)
            {
               ++skin_model[1];
            }
            UpdateSkinC(1);
         });
         this.char1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_model[1];
            if(skin_model[1] == 5)
            {
               --skin_model[1];
            }
            UpdateSkinC(1);
         });
         this.creds.text = "$ " + this.CMPG_money;
         if(this.LEVELS_PASSED >= 30)
         {
            this.no_proxy.visible = false;
         }
         this.camp_score.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            camp_score.visible = false;
         });
         this.camp_score.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("menu");
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=Shooting"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cust_m.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("custom");
         });
         this.cust_m.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cust_m.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.achives.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("achiv");
         });
         this.achives.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.achives.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("custom");
         });
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            LocateMeToMp();
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.flike3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.camp_score.flike3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.flike3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.SaveGame();
      }
      
      internal function frame7() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.back1e1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("campaign");
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.game.hero1tit.text = this.CMPG_name + "\'s equipment";
         this.gunsA = new Array();
         this.gunsAt = new Array();
         this.gunsAl = new Array();
         this.game.sample.visible = false;
         this.game.sample_no.visible = false;
         this.game.sample2.visible = false;
         this.game.sample3.visible = false;
         this.firstframe = true;
         this.UpdateTbl();
         if(this.skin_model[0] < 49)
         {
            this.bt_1.gotoAndStop(2);
            this.bt_2.gotoAndStop(1);
         }
         else
         {
            this.bt_1.gotoAndStop(1);
            this.bt_2.gotoAndStop(2);
         }
         this.bt_1.addEventListener(MouseEvent.CLICK,function():*
         {
            if(skin_model[0] == 49)
            {
               skin_model[0] = 40;
            }
            bt_2.gotoAndStop(1);
            bt_1.gotoAndStop(2);
            SaveGame();
         });
         this.bt_2.addEventListener(MouseEvent.CLICK,function():*
         {
            if(skin_model[0] != 49)
            {
               skin_model[0] = 49;
            }
            bt_2.gotoAndStop(2);
            bt_1.gotoAndStop(1);
            SaveGame();
         });
         this.eq_pcg.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=New%20Addition"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.eq_pcg.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.eq_pcg.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame8() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.back1e2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("campaign");
         });
         this.back1e2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.game.hero1tit.text = this.PROXY_NAME + "\'s equipment";
         this.gunsB = new Array();
         this.gunsBt = new Array();
         this.gunsBl = new Array();
         this.game.sample.visible = false;
         this.game.sample_no.visible = false;
         this.game.sample2.visible = false;
         this.game.sample3.visible = false;
         this.firstframe = true;
         this.UpdateTblB();
         this.eq_pcg2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=New%20Addition"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.eq_pcg2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.eq_pcg2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame9() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         if(this.CREDITS_BY_GAME_END)
         {
            this.runner.finalbtn.visible = true;
         }
         else
         {
            this.runner.finalbtn.visible = false;
         }
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            removeEventListener(Event.ENTER_FRAME,onEnterFrameCredits);
            GotoMap("c41a");
         });
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cust_back1.addEventListener(MouseEvent.CLICK,function():*
         {
            removeEventListener(Event.ENTER_FRAME,onEnterFrameCredits);
            if(CREDITS_BY_GAME_END)
            {
               GotoMap("c41a");
            }
            else
            {
               gotoAndStop("menu");
            }
         });
         this.cust_back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
         });
         this.cust_back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
         });
         this.STOP_SCROLL = true;
         this.runner.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            STOP_SCROLL = false;
         });
         this.runner.addEventListener(MouseEvent.CLICK,function():*
         {
            STOP_SCROLL = true;
         });
         this.runner.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            STOP_SCROLL = true;
         });
         addEventListener(Event.ENTER_FRAME,this.onEnterFrameCredits);
      }
      
      internal function frame10() : *
      {
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.nologin_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.nologin_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nologin_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.nologin_start.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=6"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.nologin_start.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nologin_start.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame11() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.MP_login_auto_try = false;
         this.server_cur = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.login_login.alpha = 0.2;
         this.login_login.enabled = false;
         this.login_guest.alpha = 0.2;
         this.login_guest.enabled = false;
         this.errtxt.text = "";
         try
         {
            if(this.mh.length < 3)
            {
               this.mh = this["ve" + "r" + "s" + "io" + "n_" + "ha" + "sh"]("De" + "ad" + "ly N" + "eu" + "ro" + "to" + "x" + "in.");
            }
         }
         catch(e:Error)
         {
         }
         if(this.loaderInfo.parameters.l != undefined)
         {
            this.flogin.text = this.loaderInfo.parameters.l;
         }
         if(this.loaderInfo.parameters.p != undefined)
         {
            this.fpassword.text = this.loaderInfo.parameters.p;
         }
         this.CUR_SERVER_NAME = "";
         this.temp = this.CUR_SERVER_NAME.split("(");
         this.CUR_SERVER_NAME = this.temp[0];
         this.auto_proceed = false;
         this.login_login.addEventListener(MouseEvent.CLICK,function():*
         {
            GUEST_ACCESS = false;
            if(MP_socket.connected)
            {
               proceed();
            }
            else
            {
               auto_proceed = true;
            }
         });
         this.login_guest.addEventListener(MouseEvent.CLICK,function():*
         {
            GUEST_ACCESS = true;
            if(MP_socket.connected)
            {
               proceed();
            }
            else
            {
               auto_proceed = true;
            }
         });
         this.login_login.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info);
            }
         });
         this.login_guest.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info);
            }
         });
         this.login_login.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info_off);
            }
         });
         this.login_guest.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info_off);
            }
         });
         this.login_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.login_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.login_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.servers_name = new Array();
         this.servers_ip = new Array();
         this.servers_port = new Array();
         this.myRequest = new URLRequest(this.MP_server);
         this.myVariables = new URLVariables();
         this.myVariables.rq = "srvrs";
         this.myRequest.method = URLRequestMethod.POST;
         this.myRequest.data = this.myVariables;
         this.myLoader.addEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.addEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         this.myLoader.load(this.myRequest);
         try
         {
            if(this.mh == "")
            {
               this.mh = this.version_hash("Deadly Neurotoxin.");
            }
            this.myRequest_parallel = new URLRequest(this.MP_server);
            this.myVariables_parallel = new URLVariables();
            this.myVariables_parallel.rq = "neurotoxin_delivery";
            this.myVariables_parallel.hash = this.mh;
            this.myVariables_parallel.v = this.GAME_VERSION;
            this.myVariables_parallel.lo = this.loaderInfo.parameters.l;
            this.myVariables_parallel.s = stage.loaderInfo.bytesLoaded;
            this.myVariables_parallel.cap = String(Capabilities.playerType);
            this.myVariables_parallel.adr = this.loaderInfo.url;
            this.myRequest_parallel.method = URLRequestMethod.POST;
            this.myRequest_parallel.data = this.myVariables_parallel;
            this.myLoader2.load(this.myRequest_parallel);
         }
         catch(er:Error)
         {
         }
      }
      
      internal function frame12() : *
      {
         stage.quality = "HIGH";
         this.UpdateGravitatorVol();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.cont_back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("options");
         });
         this.cont_back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cont_back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame13() : *
      {
         stage.quality = "HIGH";
         this.UpdateGravitatorVol();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("menu");
         });
         this.opt_controls.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("controls");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.opt_controls.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.opt_controls.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.mw_1.gotoAndStop(1);
         this.mw_2.gotoAndStop(1);
         if(this.MOUSE_WHEEL)
         {
            this.mw_2.gotoAndStop(2);
         }
         else
         {
            this.mw_1.gotoAndStop(2);
         }
         this.mw_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MOUSE_WHEEL = true;
            mw_2.gotoAndStop(2);
            mw_1.gotoAndStop(1);
         });
         this.mw_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MOUSE_WHEEL = false;
            mw_1.gotoAndStop(2);
            mw_2.gotoAndStop(1);
         });
         this.os_1.gotoAndStop(1);
         this.os_2.gotoAndStop(1);
         if(this.OVERSCROLL)
         {
            this.os_2.gotoAndStop(2);
         }
         else
         {
            this.os_1.gotoAndStop(2);
         }
         this.os_2.addEventListener(MouseEvent.CLICK,function():*
         {
            OVERSCROLL = true;
            os_2.gotoAndStop(2);
            os_1.gotoAndStop(1);
         });
         this.os_1.addEventListener(MouseEvent.CLICK,function():*
         {
            OVERSCROLL = false;
            os_1.gotoAndStop(2);
            os_2.gotoAndStop(1);
         });
         this.q_1.gotoAndStop(1);
         this.c_1.gotoAndStop(1);
         this.q_2.gotoAndStop(1);
         this.c_2.gotoAndStop(1);
         if(this.SUPER_COMPUTER)
         {
            this.c_2.gotoAndStop(2);
         }
         else
         {
            this.c_1.gotoAndStop(2);
         }
         if(this.HQ)
         {
            this.q_2.gotoAndStop(2);
         }
         else
         {
            this.q_1.gotoAndStop(2);
         }
         this.c_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SUPER_COMPUTER = true;
            RAGDOLL_COLLIDE = true;
            c_2.gotoAndStop(2);
            c_1.gotoAndStop(1);
         });
         this.c_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SUPER_COMPUTER = false;
            RAGDOLL_COLLIDE = false;
            c_1.gotoAndStop(2);
            c_2.gotoAndStop(1);
         });
         this.q_2.addEventListener(MouseEvent.CLICK,function():*
         {
            HQ = true;
            q_2.gotoAndStop(2);
            q_1.gotoAndStop(1);
         });
         this.q_1.addEventListener(MouseEvent.CLICK,function():*
         {
            HQ = false;
            q_1.gotoAndStop(2);
            q_2.gotoAndStop(1);
         });
         this.tt_1.gotoAndStop(1);
         this.tt_2.gotoAndStop(1);
         if(this.TOOLTIPS)
         {
            this.tt_2.gotoAndStop(2);
         }
         else
         {
            this.tt_1.gotoAndStop(2);
         }
         this.tt_2.addEventListener(MouseEvent.CLICK,function():*
         {
            TOOLTIPS = true;
            tt_2.gotoAndStop(2);
            tt_1.gotoAndStop(1);
         });
         this.tt_1.addEventListener(MouseEvent.CLICK,function():*
         {
            TOOLTIPS = false;
            tt_1.gotoAndStop(2);
            tt_2.gotoAndStop(1);
         });
         this.hi_1.gotoAndStop(1);
         this.hi_2.gotoAndStop(1);
         if(this.HINTS)
         {
            this.hi_2.gotoAndStop(2);
         }
         else
         {
            this.hi_1.gotoAndStop(2);
         }
         this.hi_2.addEventListener(MouseEvent.CLICK,function():*
         {
            HINTS = true;
            hi_2.gotoAndStop(2);
            hi_1.gotoAndStop(1);
         });
         this.hi_1.addEventListener(MouseEvent.CLICK,function():*
         {
            HINTS = false;
            hi_2.gotoAndStop(1);
            hi_1.gotoAndStop(2);
         });
         this.n_1.gotoAndStop(1);
         this.s_1.gotoAndStop(1);
         this.cm_1.gotoAndStop(1);
         this.n_2.gotoAndStop(1);
         this.s_2.gotoAndStop(1);
         this.cm_2.gotoAndStop(1);
         this.cur_2.gotoAndStop(1);
         this.cur_1.gotoAndStop(1);
         this.vi_1.gotoAndStop(1);
         this.vi_2.gotoAndStop(1);
         this.ph_1.gotoAndStop(1);
         this.ph_2.gotoAndStop(1);
         this.csh_1.gotoAndStop(1);
         this.csh_2.gotoAndStop(1);
         this.dch_2.gotoAndStop(1);
         this.dch_1.gotoAndStop(1);
         if(this.AUTO_PICK_NEW_WEPS)
         {
            this.n_2.gotoAndStop(2);
         }
         else
         {
            this.n_1.gotoAndStop(2);
         }
         if(this.SOFT_SCREEN)
         {
            this.cm_2.gotoAndStop(2);
         }
         else
         {
            this.cm_1.gotoAndStop(2);
         }
         if(this.SCREEN_EFFECTS)
         {
            this.s_2.gotoAndStop(2);
         }
         else
         {
            this.s_1.gotoAndStop(2);
         }
         if(this.VIOLENCE)
         {
            this.vi_2.gotoAndStop(2);
         }
         else
         {
            this.vi_1.gotoAndStop(2);
         }
         if(this.ALTCUR)
         {
            this.cur_2.gotoAndStop(2);
         }
         else
         {
            this.cur_1.gotoAndStop(2);
         }
         if(!this.LITE_PHYS)
         {
            this.ph_2.gotoAndStop(2);
         }
         else
         {
            this.ph_1.gotoAndStop(2);
         }
         if(this.CENSORESHIP)
         {
            this.csh_2.gotoAndStop(2);
         }
         else
         {
            this.csh_1.gotoAndStop(2);
         }
         if(this.DISPLAY_CHAT)
         {
            this.dch_2.gotoAndStop(2);
         }
         else
         {
            this.dch_1.gotoAndStop(2);
         }
         this.n_2.addEventListener(MouseEvent.CLICK,function():*
         {
            AUTO_PICK_NEW_WEPS = true;
            n_2.gotoAndStop(2);
            n_1.gotoAndStop(1);
         });
         this.n_1.addEventListener(MouseEvent.CLICK,function():*
         {
            AUTO_PICK_NEW_WEPS = false;
            n_1.gotoAndStop(2);
            n_2.gotoAndStop(1);
         });
         this.s_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SCREEN_EFFECTS = true;
            s_2.gotoAndStop(2);
            s_1.gotoAndStop(1);
         });
         this.s_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SCREEN_EFFECTS = false;
            s_1.gotoAndStop(2);
            s_2.gotoAndStop(1);
         });
         this.se_1.gotoAndStop(1);
         this.se_2.gotoAndStop(1);
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.se_1.gotoAndStop(2);
         }
         else
         {
            this.se_2.gotoAndStop(2);
         }
         this.se_1.addEventListener(MouseEvent.CLICK,function():*
         {
            PSYCHOBLOOD_MODE = 1;
            se_1.gotoAndStop(2);
            se_2.gotoAndStop(1);
         });
         this.se_2.addEventListener(MouseEvent.CLICK,function():*
         {
            PSYCHOBLOOD_MODE = 2;
            se_2.gotoAndStop(2);
            se_1.gotoAndStop(1);
         });
         this.frr_1.gotoAndStop(1);
         this.frr_2.gotoAndStop(1);
         this.frr_3.gotoAndStop(1);
         if(this.FRAMERATE == 1)
         {
            this.frr_1.gotoAndStop(2);
         }
         else if(this.FRAMERATE == 2)
         {
            this.frr_2.gotoAndStop(2);
         }
         else
         {
            this.frr_3.gotoAndStop(2);
         }
         this.frr_1.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 1;
            frr_1.gotoAndStop(2);
            frr_2.gotoAndStop(1);
            frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.frr_2.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 2;
            frr_2.gotoAndStop(2);
            frr_1.gotoAndStop(1);
            frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.frr_3.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 3;
            frr_3.gotoAndStop(2);
            frr_1.gotoAndStop(1);
            frr_2.gotoAndStop(1);
            UpdateFramerate();
         });
         this.cm_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SOFT_SCREEN = true;
            cm_2.gotoAndStop(2);
            cm_1.gotoAndStop(1);
         });
         this.cm_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SOFT_SCREEN = false;
            cm_1.gotoAndStop(2);
            cm_2.gotoAndStop(1);
         });
         this.vi_2.addEventListener(MouseEvent.CLICK,function():*
         {
            VIOLENCE = true;
            vi_2.gotoAndStop(2);
            vi_1.gotoAndStop(1);
         });
         this.vi_1.addEventListener(MouseEvent.CLICK,function():*
         {
            VIOLENCE = false;
            vi_1.gotoAndStop(2);
            vi_2.gotoAndStop(1);
         });
         this.ph_2.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = false;
            ph_2.gotoAndStop(2);
            ph_1.gotoAndStop(1);
         });
         this.ph_1.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = true;
            ph_1.gotoAndStop(2);
            ph_2.gotoAndStop(1);
         });
         this.cur_2.addEventListener(MouseEvent.CLICK,function():*
         {
            ALTCUR = true;
            cur_2.gotoAndStop(2);
            cur_1.gotoAndStop(1);
         });
         this.cur_1.addEventListener(MouseEvent.CLICK,function():*
         {
            ALTCUR = false;
            cur_1.gotoAndStop(2);
            cur_2.gotoAndStop(1);
         });
         this.csh_2.addEventListener(MouseEvent.CLICK,function():*
         {
            CENSORESHIP = true;
            csh_2.gotoAndStop(2);
            csh_1.gotoAndStop(1);
         });
         this.csh_1.addEventListener(MouseEvent.CLICK,function():*
         {
            CENSORESHIP = false;
            csh_1.gotoAndStop(2);
            csh_2.gotoAndStop(1);
         });
         this.dch_2.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = true;
            dch_2.gotoAndStop(2);
            dch_1.gotoAndStop(1);
         });
         this.dch_1.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = false;
            dch_1.gotoAndStop(2);
            dch_2.gotoAndStop(1);
         });
         this.v_1.vv.x = (this.FX_VOLUME - 1) * 104;
         this.m_1.vv.x = (this.MUSIC_VOLUME - 1) * 104;
         this.v_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            v_1.vv.x = mouseX - (v_1.x - 36.3) - 104;
            FX_VOLUME = Math.round(Math.max(Math.min((mouseX - (v_1.x - 36.3)) / 104,1),0) * 100) / 100;
            vol = new SoundTransform(FX_VOLUME);
            PlaySound_full(s_test_sound);
            if(FX_VOLUME > 0)
            {
               v_1x.gotoAndStop(1);
            }
            else
            {
               v_1x.gotoAndStop(2);
            }
         });
         this.m_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            m_1.vv.x = mouseX - (m_1.x - 36.3) - 104;
            MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (m_1.x - 36.3)) / 104,1),0) * 100) / 100;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(MUSIC_VOLUME > 0)
            {
               m_1x.gotoAndStop(1);
            }
            else
            {
               m_1x.gotoAndStop(2);
            }
         });
         if(this.FX_VOLUME > 0)
         {
            this.v_1x.gotoAndStop(1);
         }
         else
         {
            this.v_1x.gotoAndStop(2);
         }
         if(this.MUSIC_VOLUME > 0)
         {
            this.m_1x.gotoAndStop(1);
         }
         else
         {
            this.m_1x.gotoAndStop(2);
         }
         this.v_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            v_1.vv.x = -104;
            FX_VOLUME = 0;
            vol = new SoundTransform(FX_VOLUME);
            UpdateGravitatorVol();
            v_1x.gotoAndStop(2);
         });
         this.m_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            m_1.vv.x = -104;
            MUSIC_VOLUME = 0;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            m_1x.gotoAndStop(2);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.back1e1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            my_so.clear();
            LoadGame();
            gotoAndStop("controls");
            gotoAndStop("options");
         });
      }
      
      internal function frame14() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         this.list.visible = false;
         stage.quality = "HIGH";
         this.MP_total = 0;
         this.ch_total = 0;
         if(this.MP_socket.connected)
         {
            this.MP_socket.writeUTFBytes("rq=channel_list");
            this.MP_socket.flush();
         }
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("loginform");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame15() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.errmenu_mp.visible = false;
         this.errmenu_mp.txt.text = "Can\'t connect to the match (Map not found?).";
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            errmenu_mp.visible = false;
         });
         this.DEBUG_MODE = false;
         this.MP_half_bot = false;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.back2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            list2.removeEventListener(MouseEvent.CLICK,gl_clk);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
            gotoAndStop("loginform");
         });
         this.back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.rrefresh.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            GL_Refresh();
         });
         this.rrefresh.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.rrefresh.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.GUEST_ACCESS)
         {
            if(this.MP_default_set == 1)
            {
               this.MP_default_set = 2;
            }
         }
         this.simplegui.simple_1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(1);
            GL_Refresh();
         });
         this.simplegui.simple_1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(2);
            GL_Refresh();
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(3);
            GL_Refresh();
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            DefaultMP();
            simplegui.visible = false;
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.visible = false;
         this.ggpp.visible = false;
         this.list2.ch0.visible = false;
         this.ch_n.text = this.MP_channel_name;
         this.list2.visible = false;
         this.ch_total = 0;
         this.ch_links = new Array();
         this.ch_names = new Array();
         this.ch_pass = new Array();
         this.ch_map = new Array();
         this.ch_app = new Array();
         this.temp2 = new Array();
         this.MP_total = 0;
         this.gm_ranked = "true";
         this.gm_type = 1;
         this.gm_max = 4;
         this.nnew.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            MP_spectator = false;
            ggg.visible = true;
            ggg.gtitle.text = "Game by " + MP_nick;
            if(GUEST_ACCESS)
            {
               ggg.gjoin1.gotoAndStop(1);
               ggg.gjoin2.gotoAndStop(2);
               gm_ranked = "false";
            }
            else
            {
               ggg.gjoin1.gotoAndStop(2);
               ggg.gjoin2.gotoAndStop(1);
               gm_ranked = "true";
            }
            ggg.gtype1.gotoAndStop(2);
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(1);
            gm_type = 1;
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(2);
            ggg.gmax16.gotoAndStop(1);
            gm_max = 4;
            ggg.gmap.text = "random";
            ggg.gatt.text = "";
            ggg.gfps.text = "1000";
            ggg.gm_mods.text = "";
         });
         this.nnew.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nnew.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.gjoin1.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gjoin1.gotoAndStop(2);
            ggg.gjoin2.gotoAndStop(1);
         });
         this.ggg.gjoin2.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gjoin2.gotoAndStop(2);
            ggg.gjoin1.gotoAndStop(1);
         });
         this.ggg.gtype1.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype1.gotoAndStop(2);
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(1);
         });
         this.ggg.gtype2.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype2.gotoAndStop(2);
            ggg.gtype1.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(1);
         });
         this.ggg.gtype3.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype1.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(2);
         });
         this.ggg.gmax2.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax2.gotoAndStop(2);
         });
         this.ggg.gmax3.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(2);
         });
         this.ggg.gmax4.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(2);
         });
         this.ggg.gmax5.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(2);
         });
         this.ggg.gmax6.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(2);
         });
         this.ggg.gmax8.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(2);
         });
         this.ggg.gmax16.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gmax2.gotoAndStop(1);
            ggg.gmax3.gotoAndStop(1);
            ggg.gmax4.gotoAndStop(1);
            ggg.gmax5.gotoAndStop(1);
            ggg.gmax6.gotoAndStop(1);
            ggg.gmax8.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(1);
            ggg.gmax16.gotoAndStop(2);
         });
         this.ggg.gnew.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gl_clk2();
         });
         this.ggg.gnew.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.gnew.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.gcancel.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.visible = false;
         });
         this.ggg.gcancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.gcancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            list2.removeEventListener(MouseEvent.CLICK,gl_clk);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
            MP_pass = ggpp.gpas.text;
            gotoAndStop("room");
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            ggpp.visible = false;
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.mapidget.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=1"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.ggg.mapidget.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.mapidget.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.DefaultMP();
         this.a_1.gotoAndStop(1);
         this.a_2.gotoAndStop(1);
         this.a_3.gotoAndStop(1);
         this.a_4.gotoAndStop(1);
         this.a_6.gotoAndStop(1);
         if(this.MPLIST_MODE == 1)
         {
            this.a_1.gotoAndStop(2);
         }
         else if(this.MPLIST_MODE == 2)
         {
            this.a_2.gotoAndStop(2);
         }
         else if(this.MPLIST_MODE == 3)
         {
            this.a_3.gotoAndStop(2);
         }
         else if(this.MPLIST_MODE == 4)
         {
            this.a_4.gotoAndStop(2);
         }
         else
         {
            this.a_6.gotoAndStop(2);
         }
         this.a_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 1;
            a_1.gotoAndStop(2);
            a_2.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_4.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 2;
            a_2.gotoAndStop(2);
            a_1.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_4.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_3.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 3;
            a_3.gotoAndStop(2);
            a_1.gotoAndStop(1);
            a_2.gotoAndStop(1);
            a_4.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_4.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 4;
            a_4.gotoAndStop(2);
            a_1.gotoAndStop(1);
            a_2.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_6.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 6;
            a_1.gotoAndStop(1);
            a_2.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_4.gotoAndStop(1);
            a_6.gotoAndStop(2);
         });
         this.p_1.gotoAndStop(1);
         this.p_2.gotoAndStop(1);
         if(this.MPLIST_MODE == 1)
         {
            this.p_1.gotoAndStop(2);
         }
         else
         {
            this.p_2.gotoAndStop(2);
         }
         this.p_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_PUBLIC = 1;
            p_1.gotoAndStop(2);
            p_2.gotoAndStop(1);
         });
         this.p_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_PUBLIC = 2;
            p_2.gotoAndStop(2);
            p_1.gotoAndStop(1);
         });
         this.ap_1.gotoAndStop(1);
         this.ap_2.gotoAndStop(1);
         if(this.MPLIST_APPROVED == 1)
         {
            this.ap_1.gotoAndStop(2);
         }
         else
         {
            this.ap_2.gotoAndStop(2);
         }
         this.ap_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_APPROVED = 1;
            ap_1.gotoAndStop(2);
            ap_2.gotoAndStop(1);
         });
         this.ap_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_APPROVED = 2;
            ap_2.gotoAndStop(2);
            ap_1.gotoAndStop(1);
         });
         this.ran_1.gotoAndStop(1);
         this.ran_2.gotoAndStop(1);
         if(this.MPLIST_RANKED == 1)
         {
            this.ran_1.gotoAndStop(2);
         }
         else
         {
            this.ran_2.gotoAndStop(2);
         }
         this.ran_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_RANKED = 1;
            ran_1.gotoAndStop(2);
            ran_2.gotoAndStop(1);
         });
         this.ran_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_RANKED = 2;
            ran_2.gotoAndStop(2);
            ran_1.gotoAndStop(1);
         });
         this.hf_1.gotoAndStop(1);
         this.hf_2.gotoAndStop(1);
         if(this.MPLIST_HIDE_FULL == 1)
         {
            this.hf_1.gotoAndStop(2);
         }
         else
         {
            this.hf_2.gotoAndStop(2);
         }
         this.hf_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_HIDE_FULL = 1;
            hf_1.gotoAndStop(2);
            hf_2.gotoAndStop(1);
         });
         this.hf_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_HIDE_FULL = 2;
            hf_2.gotoAndStop(2);
            hf_1.gotoAndStop(1);
         });
         this.f_1.gotoAndStop(1);
         this.f_2.gotoAndStop(1);
         if(this.MPLIST_WITH_FRIENDS == 1)
         {
            this.f_1.gotoAndStop(2);
         }
         else
         {
            this.f_2.gotoAndStop(2);
         }
         this.f_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_WITH_FRIENDS = 1;
            f_1.gotoAndStop(2);
            f_2.gotoAndStop(1);
         });
         this.f_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_WITH_FRIENDS = 2;
            f_2.gotoAndStop(2);
            f_1.gotoAndStop(1);
         });
         this.e_1.gotoAndStop(1);
         this.e_2.gotoAndStop(1);
         if(this.MPLIST_NO_ENEMIES == 1)
         {
            this.e_1.gotoAndStop(2);
         }
         else
         {
            this.e_2.gotoAndStop(2);
         }
         this.e_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_NO_ENEMIES = 1;
            e_1.gotoAndStop(2);
            e_2.gotoAndStop(1);
         });
         this.e_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_NO_ENEMIES = 2;
            e_2.gotoAndStop(2);
            e_1.gotoAndStop(1);
         });
         this.gupd_gname.text = this.MPLIST_GAMENAME;
         this.gupd_mid.text = this.MPLIST_MAPID;
         this.yy = 0;
         this.xx = 0;
         this.ok = false;
         this.ok2 = false;
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_upB);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upxB);
         this.sc_up1.addEventListener(MouseEvent.CLICK,this.sc_upxB);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_upB);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upxB);
         this.sc_up2.addEventListener(MouseEvent.CLICK,this.sc_upxB);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_downB);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downxB);
         this.sc_down1.addEventListener(MouseEvent.CLICK,this.sc_downxB);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_downB);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downxB);
         this.sc_down2.addEventListener(MouseEvent.CLICK,this.sc_downxB);
         this.SetMPSets(this.MP_default_set);
         this.GL_Refresh();
         if(!this.stable)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "unstable";
            this.myVariables.unstable = this.unstable;
            this.myVariables.unstable2 = this.unstable_m;
            this.myVariables.lo = this.loaderInfo.parameters.l;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader.load(this.myRequest);
         }
      }
      
      internal function frame16() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.ch_n.text = this.MP_channel_name + " - " + this.MP_room_name + " (game " + this.MP_room + ")";
         this.rready.gotoAndStop(2);
         this.MP_ready = false;
         this.list3.visible = false;
         this.MP_custom_events = "";
         this.MP_force_disconnect = false;
         this.MP_playerstotal = 0;
         this.MP_myid = -1;
         if(this.MP_spectator)
         {
            this.MP_myid = -2;
         }
         this.chat_lastid = -1;
         this.gamechatbox_text = "";
         this.temp2 = new Array();
         this.MP_slot_reset = false;
         this.MP_slot_try = 0;
         this.got_map_data = false;
         this.MP_slot_reset = false;
         this.MP_slot_try = 0;
         this.MP_get_pre();
         this.back3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            rready.removeEventListener(MouseEvent.CLICK,ready_switch);
            gotoAndStop("channel");
         });
         this.back3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down3);
         this.rready.addEventListener(MouseEvent.CLICK,this.ready_switch);
         this.need_slot.addEventListener(MouseEvent.CLICK,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info_act);
               MP_slot_reset = true;
               MP_slot_try = MP_myid + 1;
            }
         });
         this.need_slot.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info);
            }
         });
         this.need_slot.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info_off);
            }
         });
      }
      
      internal function frame17() : *
      {
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.LAST_ERROR = "";
         this.myCursor.gotoAndStop("loading");
         this.myTimer_loading = new Timer(40,1);
         this.myTimer_loading.addEventListener(TimerEvent.TIMER,this.timerHandler_loading);
         this.myTimer_loading.start();
      }
      
      internal function frame18() : *
      {
         this.kedumb();
         if(this.MP_mode)
         {
            if(ExternalInterface.available)
            {
               ExternalInterface.call("L1()");
            }
         }
         if(AdLoader.cpmstar_loaded_object != null)
         {
            AdLoader.cpmstar_loaded_object.parent.removeChild(AdLoader.cpmstar_loaded_object);
         }
         this.pspeed = 60;
         this.weapon_penetration_factor = 1;
         this.maxbulletlife = 30;
         this.ANONYMOUS_MODE = false;
         this.GLOBAL_REGEN_SPEED = 1;
         this.GLOBAL_REGEN_DELAY = 1;
         this.GLOBAL_FALL_DAMAGE_MULT = this.MP_mode && this.MP_app ? 1 : 1;
         this.GLOBAL_FALL_SENSITIVITY_MULT = this.MP_mode && this.MP_app ? 0.9 : 1;
         this.BOOST_MULT = 1;
         this.BOOST_HIGH_PHYSICS = this.MP_mode && this.MP_app ? 2.8 : 1;
         this.BOOST_LOW_PHYSICS = 1;
         this.WATER_NAME = "Water";
         this.ACID_NAME = "Acid";
         this.MP_ping1 = getTimer();
         this.hintf.visible = false;
         this.hintf.alpha = true;
         this.CURRENT_HINT = "";
         this.THIS_HINT = "";
         this.MP_BAD_WORDS_SAID = Math.max(0,this.MP_BAD_WORDS_SAID - 1);
         this.MP_last_linked = -1;
         this.synonym_uid = new Array();
         this.synonym_id = new Array();
         this.ENEMY_SENDER_i = 0;
         this.team_blue.visible = false;
         this.team_red.visible = false;
         this.MP_last_message_patience = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.new_active.visible = false;
         this.new_active.gotoAndStop(1);
         this.PLAZMA_GAME = true;
         this.NOBASE = false;
         this.MP_startbarrels = new Array();
         this.MP_pbug = 0;
         this.MP_pwarn = false;
         this.death_cam = -1;
         this.INTRUDER_DATABASE = new Array();
         TraceLine_cache_x1 = new Array();
         TraceLine_cache_y1 = new Array();
         TraceLine_cache_x2 = new Array();
         TraceLine_cache_y2 = new Array();
         TraceLine_cache_res = new Array();
         TraceLine_cache_made = new Array();
         TraceLine_cache_total = 0;
         this.shnades = new Array();
         this.shnades_total = 0;
         this.shnades_next = 0;
         this.boxx = new Array();
         this.boxy = new Array();
         this.boxw = new Array();
         this.boxh = new Array();
         this.boxmat = new Array();
         this.bgx = new Array();
         this.bgy = new Array();
         this.bgw = new Array();
         this.bgh = new Array();
         this.pushx = new Array();
         this.pushy = new Array();
         this.pushtox = new Array();
         this.pushtoy = new Array();
         this.pushstab = new Array();
         this.pushdamage = new Array();
         this.pushw = new Array();
         this.pushh = new Array();
         this.flare = new Array();
         this.flare_power = new Array();
         this.wax = new Array();
         this.way = new Array();
         this.waw = new Array();
         this.wah = new Array();
         this.wadamage = new Array();
         this.ax = new Array();
         this.ay = new Array();
         this.atox = new Array();
         this.atoy = new Array();
         this.aio = new Array();
         this.aof = new Array();
         this.arad = new Array();
         this.around = new Array();
         this.amat = new Array();
         this.atim = new Array();
         this.acollided = new Array();
         this.ainwater = new Array();
         this.ablood = new Array();
         this.aactive = new Array();
         this.chtypa = new Array();
         this.chP = new Array();
         this.chC = new Array();
         this.chdef = new Array();
         this.chdamp = new Array();
         this.chio = new Array();
         this.chtsilp = new Array();
         this.barrels = new Array();
         this.guns = new Array();
         this.mens = new Array();
         this.vehicles = new Array();
         this.doors = new Array();
         this.decors = new Array();
         this.triggers = new Array();
         this.timers = new Array();
         this.regions = new Array();
         this.puls = new Array();
         dangerx = new Array();
         dangery = new Array();
         dangerrad = new Array();
         dangerteam = new Array();
         surf = new Array();
         this.surf_lnk = new Array();
         this.surf_lnk_to = new Array();
         this.ef = new Array();
         this.lamps_x = new Array();
         this.lamps_y = new Array();
         this.lamps_power = new Array();
         this.lamps_power2 = new Array();
         addChild(this.debug_screen);
         this.CASUAL_MODE = false;
         this.STRICT_MODE = false;
         this.AUTO_REVIVE = true;
         this.MEAT_MODE = false;
         this.NO_PSI = false;
         this.step_size = 20;
         this.flarestotal = 0;
         this.Disable_next_click = false;
         this.rnd = 1;
         this.render_minX = 0;
         this.render_minY = 0;
         this.render_maxX = 0;
         this.render_maxY = 0;
         this.lastcurx = this.lastcury = this.lastcurmove = 0;
         this.last_psi = 1;
         this.MP_teamkills = 0;
         this.FORCE_SNOW = false;
         this.MP_gamestate = 0;
         this.tooltip_updated = false;
         this.gamechat_input_text = "";
         this.MP_playerstotal = 0;
         this.MP_force_disconnect = false;
         this.MP_chat_input = false;
         this.MP_custom_events = "";
         this.MP_deaths = 0;
         this.MP_kills = 0;
         this.hpwarning = false;
         this.grenades_total = 0;
         this.grenades_port_total = 0;
         this.grenades_sh_total = 0;
         this.MP_enc_deaths = 0;
         this.MP_real_deaths = 0;
         this.MP_enc_restarts = 0;
         this.MP_gbd = -1;
         this.mini_scenario_cur = -1;
         this.mini_scenario_phase = 0;
         this.system_non_stop = true;
         this.stoped_by_focus = false;
         this.OpenTop = true;
         this.firstframe = true;
         this.gravity = 0.5;
         this.regionstotal = 0;
         this.triggerstotal = 0;
         this.timerstotal = 0;
         this.doorstotal = 0;
         this.decorstotal = 0;
         this.bgstotal = 0;
         this.playerstotal = 0;
         this.boxestotal = 0;
         this.lampstotal = 0;
         this.watertotal = 0;
         this.gunstotal = 0;
         this.pushstotal = 0;
         this.vehiclestotal = 0;
         this.barrelstotal = 0;
         this.key_left = false;
         this.key_right = false;
         this.key_up = false;
         this.key_down = false;
         this.key_grenade = false;
         this.key_pick = false;
         this.key_alt = false;
         key_shift = false;
         this.key_grab = false;
         this.key_kinetic = false;
         this.key_fall = false;
         this.key_ctrl = false;
         this.cinetic_target = -1;
         this.fire = false;
         this.timeshift = 0;
         this.energy_max = 100;
         this.energy = 100;
         this.joint_align = -1;
         dangerstotal = 0;
         this.pulscur = 0;
         this.nextef = 0;
         this.lamps_skips = 1;
         this.atotal = 0;
         this.chtotal = 0;
         this.tracer_i4 = 0;
         this.tracer_i5 = 0;
         tracer_i3 = 0;
         this.myCursor.gotoAndStop("gaming");
         if(!this.MP_mode)
         {
            this.MP_fps = this.DEFAULT_FPS;
            this.MP_myid = 0;
         }
         this.gamemenu.visible = false;
         this.herolist.visible = false;
         this.chat_win.visible = false;
         this.gamechatbox_text = "";
         this.LEVEL_END_FORCE = "";
         this.upd_weps_i = 0;
         while(this.upd_weps_i < 10)
         {
            this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
            ++this.upd_weps_i;
         }
         if(this.MP_mode)
         {
            this.EASY_MODE = false;
            this.nrg.visible = false;
         }
         this.expl_hurt_full = false;
         this.vehhp.visible = false;
         this.pauze.visible = false;
         this.lags.visible = false;
         this.NoMouse(this.lags);
         this.NoMouse(this.pauze);
         if(this.HQ)
         {
            stage.quality = "MEDIUM";
         }
         else
         {
            stage.quality = "LOW";
         }
         this.game_scale = 1;
         this.lgame_scale = 1;
         this.darkness.visible = true;
         this.darkness.alpha = 1;
         this.whitness.visible = false;
         this.whitness.alpha = 0;
         this.game.joint.visible = false;
         this.rx = undefined;
         this.ry = undefined;
         if(this.HQ)
         {
            this.maxef = 224;
         }
         else
         {
            this.maxef = 128;
         }
         this.i4 = 0;
         while(this.i4 < 4)
         {
            this._root["pb" + this.i4].alpha = 0;
            this._root["pb" + this.i4].visible = false;
            ++this.i4;
         }
         this.i = 0;
         while(this.i < 11)
         {
            this.gamechatbox2["item" + this.i].alpha = 0;
            this.gamechatbox2["item" + this.i].visible = false;
            this.gamechatbox2["item" + this.i].timer = 0;
            ++this.i;
         }
         stage.focus = stage;
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down);
         stage.addEventListener(KeyboardEvent.KEY_UP,this.k_up);
         this.click_reg.addEventListener(MouseEvent.MOUSE_DOWN,this.m_press);
         this.click_reg.addEventListener(MouseEvent.MOUSE_UP,this.m_release);
         this.click_reg.addEventListener(MouseEvent.MOUSE_WHEEL,this.onMouseWheelEvent);
         this.click_reg.addEventListener(MouseEvent.MOUSE_OVER,this.mov2);
         stage.addEventListener(Event.ACTIVATE,this.mouseMoveListener);
         stage.addEventListener(Event.DEACTIVATE,this.mouseLeaveListener);
         this.gamemenu.b_exit.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            if(MP_myid < playerstotal)
            {
               MP_force_disconnect = true;
               MP_type = 0;
               mens[MP_myid].dead = true;
               darkness.visible = true;
               darkness.alpha = 1;
               LEVEL_END_FORCE = "exit";
               gamemenu.visible = false;
            }
            else
            {
               talkerch.stop();
               DropGameTimer();
               LAST_ERROR = "Error: Player does not exists at this map";
               FUN_TIME_SPEND = 0;
               if(MP_mode)
               {
                  MP_mode = false;
                  gotoAndStop("channel");
               }
               else
               {
                  gotoAndStop("menu");
               }
            }
         });
         this.gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.CLICK,function():*
         {
            if(!MP_mode)
            {
               system_non_stop = true;
               if(!mens[MP_myid].dead)
               {
                  pauze.visible = false;
               }
            }
            gamemenu.visible = false;
         });
         this.conmenu.visible = false;
         this.conmenu_set.visible = false;
         this.conmenu_set.mw_1.gotoAndStop(1);
         this.conmenu_set.mw_2.gotoAndStop(1);
         if(this.MOUSE_WHEEL)
         {
            this.conmenu_set.mw_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.mw_1.gotoAndStop(2);
         }
         this.conmenu_set.mw_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MOUSE_WHEEL = true;
            conmenu_set.mw_2.gotoAndStop(2);
            conmenu_set.mw_1.gotoAndStop(1);
         });
         this.conmenu_set.mw_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MOUSE_WHEEL = false;
            conmenu_set.mw_1.gotoAndStop(2);
            conmenu_set.mw_2.gotoAndStop(1);
         });
         this.conmenu_set.os_1.gotoAndStop(1);
         this.conmenu_set.os_2.gotoAndStop(1);
         if(this.OVERSCROLL)
         {
            this.conmenu_set.os_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.os_1.gotoAndStop(2);
         }
         this.conmenu_set.os_2.addEventListener(MouseEvent.CLICK,function():*
         {
            OVERSCROLL = true;
            conmenu_set.os_2.gotoAndStop(2);
            conmenu_set.os_1.gotoAndStop(1);
         });
         this.conmenu_set.os_1.addEventListener(MouseEvent.CLICK,function():*
         {
            OVERSCROLL = false;
            conmenu_set.os_1.gotoAndStop(2);
            conmenu_set.os_2.gotoAndStop(1);
         });
         this.conmenu.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.conmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.conmenu.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu.visible = false;
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.visible = false;
            SaveGame();
         });
         this.conmenu_set.q_1.gotoAndStop(1);
         this.conmenu_set.c_1.gotoAndStop(1);
         this.conmenu_set.q_2.gotoAndStop(1);
         this.conmenu_set.c_2.gotoAndStop(1);
         this.conmenu_set.se_1.gotoAndStop(1);
         this.conmenu_set.se_2.gotoAndStop(1);
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.conmenu_set.se_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.se_2.gotoAndStop(2);
         }
         this.conmenu_set.frr_1.gotoAndStop(1);
         this.conmenu_set.frr_2.gotoAndStop(1);
         this.conmenu_set.frr_3.gotoAndStop(1);
         if(this.FRAMERATE == 1)
         {
            this.conmenu_set.frr_1.gotoAndStop(2);
         }
         else if(this.FRAMERATE == 2)
         {
            this.conmenu_set.frr_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.frr_3.gotoAndStop(2);
         }
         this.conmenu_set.frr_1.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 1;
            conmenu_set.frr_1.gotoAndStop(2);
            conmenu_set.frr_2.gotoAndStop(1);
            conmenu_set.frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.conmenu_set.frr_2.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 2;
            conmenu_set.frr_2.gotoAndStop(2);
            conmenu_set.frr_1.gotoAndStop(1);
            conmenu_set.frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.conmenu_set.frr_3.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 3;
            conmenu_set.frr_3.gotoAndStop(2);
            conmenu_set.frr_1.gotoAndStop(1);
            conmenu_set.frr_2.gotoAndStop(1);
            UpdateFramerate();
         });
         if(this.SUPER_COMPUTER)
         {
            this.conmenu_set.c_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.c_1.gotoAndStop(2);
         }
         if(this.HQ)
         {
            this.conmenu_set.q_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.q_1.gotoAndStop(2);
         }
         this.conmenu_set.c_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SUPER_COMPUTER = true;
            RAGDOLL_COLLIDE = true;
            conmenu_set.c_2.gotoAndStop(2);
            conmenu_set.c_1.gotoAndStop(1);
         });
         this.conmenu_set.c_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SUPER_COMPUTER = false;
            RAGDOLL_COLLIDE = false;
            conmenu_set.c_1.gotoAndStop(2);
            conmenu_set.c_2.gotoAndStop(1);
         });
         this.conmenu_set.tt_1.gotoAndStop(1);
         this.conmenu_set.tt_2.gotoAndStop(1);
         if(this.TOOLTIPS)
         {
            this.conmenu_set.tt_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.tt_1.gotoAndStop(2);
         }
         this.conmenu_set.tt_2.addEventListener(MouseEvent.CLICK,function():*
         {
            TOOLTIPS = true;
            conmenu_set.tt_2.gotoAndStop(2);
            conmenu_set.tt_1.gotoAndStop(1);
         });
         this.conmenu_set.tt_1.addEventListener(MouseEvent.CLICK,function():*
         {
            TOOLTIPS = false;
            conmenu_set.tt_1.gotoAndStop(2);
            conmenu_set.tt_2.gotoAndStop(1);
         });
         this.conmenu_set.hi_1.gotoAndStop(1);
         this.conmenu_set.hi_2.gotoAndStop(1);
         if(this.HINTS)
         {
            this.conmenu_set.hi_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.hi_1.gotoAndStop(2);
         }
         this.conmenu_set.hi_2.addEventListener(MouseEvent.CLICK,function():*
         {
            HINTS = true;
            conmenu_set.hi_2.gotoAndStop(2);
            conmenu_set.hi_1.gotoAndStop(1);
         });
         this.conmenu_set.hi_1.addEventListener(MouseEvent.CLICK,function():*
         {
            HINTS = false;
            conmenu_set.hi_2.gotoAndStop(1);
            conmenu_set.hi_1.gotoAndStop(2);
         });
         this.conmenu_set.n_1.gotoAndStop(1);
         this.conmenu_set.s_1.gotoAndStop(1);
         this.conmenu_set.cm_1.gotoAndStop(1);
         this.conmenu_set.n_2.gotoAndStop(1);
         this.conmenu_set.s_2.gotoAndStop(1);
         this.conmenu_set.cm_2.gotoAndStop(1);
         this.conmenu_set.cur_2.gotoAndStop(1);
         this.conmenu_set.cur_1.gotoAndStop(1);
         this.conmenu_set.vi_1.gotoAndStop(1);
         this.conmenu_set.vi_2.gotoAndStop(1);
         this.conmenu_set.ph_1.gotoAndStop(1);
         this.conmenu_set.ph_2.gotoAndStop(1);
         if(this.AUTO_PICK_NEW_WEPS)
         {
            this.conmenu_set.n_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.n_1.gotoAndStop(2);
         }
         if(this.SOFT_SCREEN)
         {
            this.conmenu_set.cm_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.cm_1.gotoAndStop(2);
         }
         if(this.SCREEN_EFFECTS)
         {
            this.conmenu_set.s_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.s_1.gotoAndStop(2);
         }
         if(this.VIOLENCE)
         {
            this.conmenu_set.vi_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.vi_1.gotoAndStop(2);
         }
         if(this.ALTCUR)
         {
            this.conmenu_set.cur_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.cur_1.gotoAndStop(2);
         }
         if(!this.LITE_PHYS)
         {
            this.conmenu_set.ph_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.ph_1.gotoAndStop(2);
         }
         this.conmenu_set.n_2.addEventListener(MouseEvent.CLICK,function():*
         {
            AUTO_PICK_NEW_WEPS = true;
            conmenu_set.n_2.gotoAndStop(2);
            conmenu_set.n_1.gotoAndStop(1);
         });
         this.conmenu_set.n_1.addEventListener(MouseEvent.CLICK,function():*
         {
            AUTO_PICK_NEW_WEPS = false;
            conmenu_set.n_1.gotoAndStop(2);
            conmenu_set.n_2.gotoAndStop(1);
         });
         this.conmenu_set.s_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SCREEN_EFFECTS = true;
            conmenu_set.s_2.gotoAndStop(2);
            conmenu_set.s_1.gotoAndStop(1);
         });
         this.conmenu_set.s_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SCREEN_EFFECTS = false;
            conmenu_set.s_1.gotoAndStop(2);
            conmenu_set.s_2.gotoAndStop(1);
         });
         this.conmenu_set.cm_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SOFT_SCREEN = true;
            conmenu_set.cm_2.gotoAndStop(2);
            conmenu_set.cm_1.gotoAndStop(1);
         });
         this.conmenu_set.cm_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SOFT_SCREEN = false;
            conmenu_set.cm_1.gotoAndStop(2);
            conmenu_set.cm_2.gotoAndStop(1);
         });
         this.conmenu_set.vi_2.addEventListener(MouseEvent.CLICK,function():*
         {
            VIOLENCE = true;
            conmenu_set.vi_2.gotoAndStop(2);
            conmenu_set.vi_1.gotoAndStop(1);
         });
         this.conmenu_set.vi_1.addEventListener(MouseEvent.CLICK,function():*
         {
            VIOLENCE = false;
            conmenu_set.vi_1.gotoAndStop(2);
            conmenu_set.vi_2.gotoAndStop(1);
         });
         this.conmenu_set.ph_2.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = false;
            conmenu_set.ph_2.gotoAndStop(2);
            conmenu_set.ph_1.gotoAndStop(1);
         });
         this.conmenu_set.ph_1.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = true;
            conmenu_set.ph_1.gotoAndStop(2);
            conmenu_set.ph_2.gotoAndStop(1);
            i = 0;
            while(i < atotal)
            {
               if(aio[i] != -1)
               {
                  lax[i] = ax[i];
                  lay[i] = ay[i];
               }
               ++i;
            }
         });
         this.conmenu_set.cur_2.addEventListener(MouseEvent.CLICK,function():*
         {
            ALTCUR = true;
            conmenu_set.cur_2.gotoAndStop(2);
            conmenu_set.cur_1.gotoAndStop(1);
         });
         this.conmenu_set.cur_1.addEventListener(MouseEvent.CLICK,function():*
         {
            ALTCUR = false;
            conmenu_set.cur_1.gotoAndStop(2);
            conmenu_set.cur_2.gotoAndStop(1);
         });
         this.conmenu_set.csh_1.gotoAndStop(1);
         this.conmenu_set.csh_2.gotoAndStop(1);
         this.conmenu_set.dch_2.gotoAndStop(1);
         this.conmenu_set.dch_1.gotoAndStop(1);
         if(this.CENSORESHIP)
         {
            this.conmenu_set.csh_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.csh_1.gotoAndStop(2);
         }
         if(this.DISPLAY_CHAT)
         {
            this.conmenu_set.dch_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.dch_1.gotoAndStop(2);
         }
         this.conmenu_set.csh_2.addEventListener(MouseEvent.CLICK,function():*
         {
            CENSORESHIP = true;
            conmenu_set.csh_2.gotoAndStop(2);
            conmenu_set.csh_1.gotoAndStop(1);
         });
         this.conmenu_set.csh_1.addEventListener(MouseEvent.CLICK,function():*
         {
            CENSORESHIP = false;
            conmenu_set.csh_1.gotoAndStop(2);
            conmenu_set.csh_2.gotoAndStop(1);
         });
         this.conmenu_set.dch_2.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = true;
            conmenu_set.dch_2.gotoAndStop(2);
            conmenu_set.dch_1.gotoAndStop(1);
         });
         this.conmenu_set.dch_1.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = false;
            conmenu_set.dch_1.gotoAndStop(2);
            conmenu_set.dch_2.gotoAndStop(1);
         });
         this.conmenu_set.v_1.vv.x = (this.FX_VOLUME - 1) * 104;
         this.conmenu_set.m_1.vv.x = (this.MUSIC_VOLUME - 1) * 104;
         this.conmenu_set.v_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            conmenu_set.v_1.vv.x = mouseX - (conmenu_set.v_1.x - 36.3) - 104;
            FX_VOLUME = Math.round(Math.max(Math.min((mouseX - (conmenu_set.v_1.x - 36.3)) / 104,1),0) * 100) / 100;
            vol = new SoundTransform(FX_VOLUME);
            PlaySound_full(s_test_sound);
            if(FX_VOLUME > 0)
            {
               conmenu_set.v_1x.gotoAndStop(1);
            }
            else
            {
               conmenu_set.v_1x.gotoAndStop(2);
            }
         });
         this.conmenu_set.m_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            conmenu_set.m_1.vv.x = mouseX - (conmenu_set.m_1.x - 36.3) - 104;
            MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (conmenu_set.m_1.x - 36.3)) / 104,1),0) * 100) / 100;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(MUSIC_VOLUME > 0)
            {
               conmenu_set.m_1x.gotoAndStop(1);
            }
            else
            {
               conmenu_set.m_1x.gotoAndStop(2);
            }
         });
         if(this.FX_VOLUME > 0)
         {
            this.conmenu_set.v_1x.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.v_1x.gotoAndStop(2);
         }
         if(this.MUSIC_VOLUME > 0)
         {
            this.conmenu_set.m_1x.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.m_1x.gotoAndStop(2);
         }
         this.conmenu_set.v_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.v_1.vv.x = -104;
            FX_VOLUME = 0;
            vol = new SoundTransform(FX_VOLUME);
            UpdateGravitatorVol();
            conmenu_set.v_1x.gotoAndStop(2);
         });
         this.conmenu_set.m_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.m_1.vv.x = -104;
            MUSIC_VOLUME = 0;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            conmenu_set.m_1x.gotoAndStop(2);
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu.visible = true;
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.visible = true;
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            if(MP_mode)
            {
               mens[MP_myid].hea = 0;
            }
            else
            {
               MP_force_disconnect = true;
               mens[MP_myid].dead = true;
               darkness.visible = true;
               darkness.alpha = 1;
               LEVEL_END_FORCE = "restart";
            }
            gamemenu.visible = false;
         });
         this.vol.volume = this.FX_VOLUME;
         this.vol2.volume = this.MUSIC_VOLUME;
         this.SHAKEAMMOUT = 0;
         if(!this.TOOLTIPS)
         {
            this.myCursor.txt.htmlText = "";
         }
         this.FUN_NICE_BULLETS = 0;
         this.FUN_SPENT_BULLETS = 0;
         this.FUN_DAMAGE_MADE = 0;
         this.FUN_HEADSHOTS_MADE = 0;
         this.FUN_DAMAGE_TAKEN = 0;
         this.FUN_TIME_SPEND = 0;
         this.FUN_ELEMINATED = 0;
         this.whitesimple.visible = false;
         this.whitesimple.alpha = 0;
         this.BADGES_ENABLED = true;
         this.MP_start_grenades_count = 0;
         this.MP_start_grenades_port_count = 0;
         this.MP_start_grenades_sh_count = 0;
         this.MP_myspecials = new Array();
         this.MP_myspecials_total = 0;
         this.MP_assigning_special = -1;
         this.MP_specials = new Array();
         MP_specials_total = 0;
         this.pcg.gotoAndStop(1);
         this.qmenu.gotoAndStop(1);
         this.team_blue.visible = false;
         this.team_red.visible = false;
         this.team_blue.txtscore.text = "0";
         this.team_red.txtscore.text = "0";
         this.LoadMap();
         this.hero_list_frame_offset = 0;
         if(this.MP_mode)
         {
            this.MP_get();
            this.hero_list_scale = 1;
            if(this.MP_playerstotal > 8)
            {
               this.hero_list_scale = 0.5;
               this.hero_list_frame_offset = 3;
            }
            this.i = 0;
            while(this.i < this.MP_playerstotal)
            {
               if(this.i == 0)
               {
                  this.temp = this.herolist.p0;
               }
               else
               {
                  this.temp = this.herolist.addChild(new hero_list());
               }
               if(this.i == this.MP_myid)
               {
                  this.temp.gotoAndStop(2 + this.hero_list_frame_offset);
               }
               else
               {
                  this.temp.gotoAndStop(1 + this.hero_list_frame_offset);
               }
               this.hero[this.i] = this.temp;
               this.temp.y = this.herolist.p0.y + this.i * 20 * this.hero_list_scale;
               this.temp.x = this.herolist.p0.x;
               this.temp.f1.text = "";
               this.temp.f2.text = "";
               this.temp.f3.text = "";
               this.temp.f4.text = "";
               this.temp.f5.text = "";
               this.temp.vbtn1.tabEnabled = false;
               this.temp.vbtn2.tabEnabled = false;
               this.temp.vbtn3.tabEnabled = false;
               this.format = new TextFormat();
               this.format.size = 10 * this.hero_list_scale;
               this.temp.f1.setTextFormat(this.format);
               this.temp.f2.setTextFormat(this.format);
               this.temp.f3.setTextFormat(this.format);
               this.temp.f4.setTextFormat(this.format);
               this.temp.f5.setTextFormat(this.format);
               if(this.i == this.MP_myid)
               {
                  this.temp.f1.text = this.MP_nick;
                  this.str = "Team " + String(this.MP_team + 1);
                  if(this.MP_team == 0)
                  {
                     this.str = "Alpha";
                  }
                  if(this.MP_team == 1)
                  {
                     this.str = "Beta";
                  }
                  if(this.MP_team == 2)
                  {
                     this.str = "Gamma";
                  }
                  if(this.MP_team == 3)
                  {
                     this.str = "Delta";
                  }
                  if(this.MP_team == 4)
                  {
                     this.str = "Zeta";
                  }
                  if(this.MP_team == 5)
                  {
                     this.str = "Lambda";
                  }
                  if(this.MP_team == 6)
                  {
                     this.str = "Sigma";
                  }
                  if(this.MP_team == 7)
                  {
                     this.str = "Omega";
                  }
                  this.temp.f2.text = this.str;
                  this.temp.f3.text = 0;
                  this.temp.f4.text = 0;
               }
               ++this.i;
            }
         }
         this.death_cam = this.MP_myid;
         this.spawn = true;
         this.TIME_PLAYED_MULTI = getTimer();
         if(this.MP_mode)
         {
            this.herolist.f1.text = this.MP_room_name;
            this.herolist.f2.text = this.MP_map_name;
            this.herolist.f3.text = this.CUR_SERVER_NAME;
            this.herolist.f4.text = "";
            this.herolist.f5.text = "";
            this.herolist.f6.text = "00:00:00";
         }
         this.gamemenu.lvli.text = this.MP_map_name;
         this.need_heal.visible = false;
         this.nonblockrate = true;
         if(this.FORCE_CUSTOM_MAP || this.MP_mode)
         {
            this.gamemenu.mapinfos.visible = true;
            this.gamemenu.mapinfos.rate1.gotoAndStop(1);
            this.gamemenu.mapinfos.rate2.gotoAndStop(1);
            this.gamemenu.mapinfos.rate3.gotoAndStop(1);
            this.gamemenu.mapinfos.rate4.gotoAndStop(1);
            this.gamemenu.mapinfos.rate5.gotoAndStop(1);
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(2);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(3);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(2);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(4);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(2);
               gamemenu.mapinfos.rate5.gotoAndStop(2);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(5);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.CLICK,function():*
            {
               try
               {
                  DialogSay("Visiting page of map \'\'" + CUR_CUSTOM_MAP + "\'\'...","#FFFF00");
                  navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=9&m=" + CUR_CUSTOM_MAP),"_blank");
               }
               catch(e:Error)
               {
               }
            });
         }
         else
         {
            this.gamemenu.mapinfos.visible = false;
         }
         this.NoMouse(this.game);
         this.NoMouse(this.graphics_3d_front);
      }
      
      internal function frame19() : *
      {
         this.stop();
      }
      
      internal function frame20() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         this.FUN_TIME_SPEND = 0;
         this.MP_spectator = false;
         if(this.FORCE_CUSTOM_MAP)
         {
            this.tooltip_dif2.text = "MAP " + this.CUR_CUSTOM_MAP;
            this.MP_map_name = "Custom Map: " + this.CUR_CUSTOM_MAP;
         }
         else
         {
            this.tooltip_dif2.text = "LEVEL " + (this.CMPG_THIS_LEVEL + 1);
            this.MP_map_name = "Level: " + (this.CMPG_THIS_LEVEL + 1);
         }
         this.uncncld = true;
         this.nodif_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
            gotoAndStop("campaign");
         });
         this.nodif_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nodif_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.tooltip_dif3.text = "PRESS \"SPACE\" BUTTON TO CONTINUE WITH " + (this.LOW_HPS ? "\"IMPOSSIBLE\"" : (this.EASY_MODE ? "\"EASY\"" : (this.PRO_BOTS ? "\"HARD\"" : "\"NORMAL\""))) + " LEVEL OF DIFFICULTY";
         this.dif_extreme.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = true;
            LOW_HPS = true;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "IMPOSSIBLE - JUST LIKE OLD TIMES.";
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_hard.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = true;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "HARD - ENEMIES HAVE A REGENERATION MODULE, MORE HEALTH AT THE FIRST MISSIONS, THEY ARE MUCH SMARTER, THEY CAN SEE YOU THROUGH WALLS AND THEY NEVER FIGHT THEIR OWN TEAMMATES.";
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_normal.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = false;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "NORMAL - ENEMIES ACT LIKE REAL HUMANS, WHICH DO NOT HAVE DEVICES WHICH LET THEM SEE THEIR ENEMIES THROUGH WALLS.";
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_easy.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = true;
            PRO_BOTS = false;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "EASY - ENOUGH TO TEST YOUR SKILLS! CHOOSE THIS DIFFICULTY IF IT\'S FIRST TIME YOU PLAYING A SHOOTER GAME.";
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space3);
         this.flike4.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike4.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame21() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.FORCE_CUSTOM_MAP = true;
         if(this.loaderInfo.parameters.custommap != undefined)
         {
            this.cmid.text = this.loaderInfo.parameters.custommap;
         }
         else
         {
            this.cmid.text = "";
         }
         this.cmap_pl.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            CUR_CUSTOM_MAP = cmid.text;
            gotoAndStop("difch");
         });
         this.cmap_pl.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_pl.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cmap_crt.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=1"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.cmap_crt.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_crt.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cmap_canc.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("campaign");
         });
         this.cmap_canc.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_canc.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame22() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.i4 = 0;
         this.achive_obj = new Array();
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            if(this.i == 0)
            {
               this.temp = this.game.it0;
            }
            else
            {
               this.temp = this.game.addChild(new achive_item());
            }
            this.temp.y = 32 * this.i;
            if(this.BADGE_REACHED[this.i])
            {
               this.temp.gotoAndStop(1);
               ++this.i4;
            }
            else if(this.BADGE_STAT[this.i] > 0)
            {
               this.temp.gotoAndStop(3);
            }
            else
            {
               this.temp.gotoAndStop(2);
            }
            this.temp.txt.text = this.BADGE_TITLE[this.i];
            this.temp.txt2.text = this.BADGE_STAT[this.i] + " / " + this.BADGE_STAT_MAX[this.i];
            this.achive_obj[this.i] = this.temp;
            ++this.i;
         }
         this.ach_txt.text = "Achivements (unlocked " + this.i4 + " of " + this.BADGES_TOTAL + ")";
         this.yy = 0;
         this.xx = 0;
         this.ok = false;
         this.ok2 = false;
         this.sc_up1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_up);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upx);
         this.sc_up1.addEventListener(MouseEvent.CLICK,this.sc_upx);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_up);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upx);
         this.sc_up2.addEventListener(MouseEvent.CLICK,this.sc_upx);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_down);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downx);
         this.sc_down1.addEventListener(MouseEvent.CLICK,this.sc_downx);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_down);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downx);
         this.sc_down2.addEventListener(MouseEvent.CLICK,this.sc_downx);
         this.ach_done.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac);
            gotoAndStop("campaign");
         });
         this.ach_done.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ach_done.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac);
         this.flike5.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike5.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike5.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
      }
      
      internal function frame23() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         stage.quality = "HIGH";
         if(this.ALTCUR)
         {
            Mouse.hide();
         }
         this.INTRO_DONE = false;
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.CLICK,function():*
         {
            var q4_request:URLRequest = null;
            q4_request = new URLRequest("http://www.coolbuddy.com");
            try
            {
               navigateToURL(q4_request,"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.intro_graph.useHandCursor = false;
         this.intro_graph.addEventListener(MouseEvent.CLICK,function():*
         {
            intro_done();
         });
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.PlaySound_full(this.s_coolbuddy2);
      }
   }
}
